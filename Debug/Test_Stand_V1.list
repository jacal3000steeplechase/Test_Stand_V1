
Test_Stand_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e900  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  0800eaa0  0800eaa0  0001eaa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800efe4  0800efe4  000202e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800efe4  0800efe4  0001efe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800efec  0800efec  000202e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800efec  0800efec  0001efec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eff0  0800eff0  0001eff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  20000000  0800eff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026f0  200002e4  0800f2d8  000202e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200029d4  0800f2d8  000229d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018544  00000000  00000000  00020314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ee8  00000000  00000000  00038858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d0  00000000  00000000  0003c740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001300  00000000  00000000  0003dc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b7bd  00000000  00000000  0003ef10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c6bb  00000000  00000000  0005a6cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ea19  00000000  00000000  00076d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001057a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067a4  00000000  00000000  001057f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002e4 	.word	0x200002e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ea88 	.word	0x0800ea88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002e8 	.word	0x200002e8
 80001dc:	0800ea88 	.word	0x0800ea88

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_ldivmod>:
 8000bb8:	b97b      	cbnz	r3, 8000bda <__aeabi_ldivmod+0x22>
 8000bba:	b972      	cbnz	r2, 8000bda <__aeabi_ldivmod+0x22>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bfbe      	ittt	lt
 8000bc0:	2000      	movlt	r0, #0
 8000bc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bc6:	e006      	blt.n	8000bd6 <__aeabi_ldivmod+0x1e>
 8000bc8:	bf08      	it	eq
 8000bca:	2800      	cmpeq	r0, #0
 8000bcc:	bf1c      	itt	ne
 8000bce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd6:	f000 b9bf 	b.w	8000f58 <__aeabi_idiv0>
 8000bda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be2:	2900      	cmp	r1, #0
 8000be4:	db09      	blt.n	8000bfa <__aeabi_ldivmod+0x42>
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db1a      	blt.n	8000c20 <__aeabi_ldivmod+0x68>
 8000bea:	f000 f84d 	bl	8000c88 <__udivmoddi4>
 8000bee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf6:	b004      	add	sp, #16
 8000bf8:	4770      	bx	lr
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db1b      	blt.n	8000c3c <__aeabi_ldivmod+0x84>
 8000c04:	f000 f840 	bl	8000c88 <__udivmoddi4>
 8000c08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c10:	b004      	add	sp, #16
 8000c12:	4240      	negs	r0, r0
 8000c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c18:	4252      	negs	r2, r2
 8000c1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c1e:	4770      	bx	lr
 8000c20:	4252      	negs	r2, r2
 8000c22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c26:	f000 f82f 	bl	8000c88 <__udivmoddi4>
 8000c2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c32:	b004      	add	sp, #16
 8000c34:	4240      	negs	r0, r0
 8000c36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3a:	4770      	bx	lr
 8000c3c:	4252      	negs	r2, r2
 8000c3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c42:	f000 f821 	bl	8000c88 <__udivmoddi4>
 8000c46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4e:	b004      	add	sp, #16
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2101      	movs	r1, #1
 8000f64:	4803      	ldr	r0, [pc, #12]	; (8000f74 <SELECT+0x18>)
 8000f66:	f001 fc7f 	bl	8002868 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f001 f99e 	bl	80022ac <HAL_Delay>
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40020400 	.word	0x40020400

08000f78 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2101      	movs	r1, #1
 8000f80:	4803      	ldr	r0, [pc, #12]	; (8000f90 <DESELECT+0x18>)
 8000f82:	f001 fc71 	bl	8002868 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f86:	2001      	movs	r0, #1
 8000f88:	f001 f990 	bl	80022ac <HAL_Delay>
}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40020400 	.word	0x40020400

08000f94 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f9e:	bf00      	nop
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <SPI_TxByte+0x30>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d1f8      	bne.n	8000fa0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000fae:	1df9      	adds	r1, r7, #7
 8000fb0:	2364      	movs	r3, #100	; 0x64
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <SPI_TxByte+0x30>)
 8000fb6:	f003 fd00 	bl	80049ba <HAL_SPI_Transmit>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2000035c 	.word	0x2000035c

08000fc8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000fd4:	bf00      	nop
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <SPI_TxBuffer+0x30>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f003 0302 	and.w	r3, r3, #2
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d1f8      	bne.n	8000fd6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000fe4:	887a      	ldrh	r2, [r7, #2]
 8000fe6:	2364      	movs	r3, #100	; 0x64
 8000fe8:	6879      	ldr	r1, [r7, #4]
 8000fea:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <SPI_TxBuffer+0x30>)
 8000fec:	f003 fce5 	bl	80049ba <HAL_SPI_Transmit>
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	2000035c 	.word	0x2000035c

08000ffc <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001002:	23ff      	movs	r3, #255	; 0xff
 8001004:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001006:	bf00      	nop
 8001008:	4b09      	ldr	r3, [pc, #36]	; (8001030 <SPI_RxByte+0x34>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	2b02      	cmp	r3, #2
 8001014:	d1f8      	bne.n	8001008 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001016:	1dba      	adds	r2, r7, #6
 8001018:	1df9      	adds	r1, r7, #7
 800101a:	2364      	movs	r3, #100	; 0x64
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	2301      	movs	r3, #1
 8001020:	4803      	ldr	r0, [pc, #12]	; (8001030 <SPI_RxByte+0x34>)
 8001022:	f003 fe06 	bl	8004c32 <HAL_SPI_TransmitReceive>

	return data;
 8001026:	79bb      	ldrb	r3, [r7, #6]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	2000035c 	.word	0x2000035c

08001034 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800103c:	f7ff ffde 	bl	8000ffc <SPI_RxByte>
 8001040:	4603      	mov	r3, r0
 8001042:	461a      	mov	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	701a      	strb	r2, [r3, #0]
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <SD_ReadyWait+0x30>)
 8001058:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800105c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800105e:	f7ff ffcd 	bl	8000ffc <SPI_RxByte>
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	2bff      	cmp	r3, #255	; 0xff
 800106a:	d004      	beq.n	8001076 <SD_ReadyWait+0x26>
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <SD_ReadyWait+0x30>)
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	b29b      	uxth	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1f3      	bne.n	800105e <SD_ReadyWait+0xe>

	return res;
 8001076:	79fb      	ldrb	r3, [r7, #7]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000302 	.word	0x20000302

08001084 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800108a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800108e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001090:	f7ff ff72 	bl	8000f78 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	e005      	b.n	80010a6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800109a:	20ff      	movs	r0, #255	; 0xff
 800109c:	f7ff ff7a 	bl	8000f94 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	3301      	adds	r3, #1
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	2b09      	cmp	r3, #9
 80010aa:	ddf6      	ble.n	800109a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80010ac:	f7ff ff56 	bl	8000f5c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80010b0:	2340      	movs	r3, #64	; 0x40
 80010b2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80010c4:	2395      	movs	r3, #149	; 0x95
 80010c6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80010c8:	463b      	mov	r3, r7
 80010ca:	2106      	movs	r1, #6
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff7b 	bl	8000fc8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80010d2:	e002      	b.n	80010da <SD_PowerOn+0x56>
	{
		cnt--;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80010da:	f7ff ff8f 	bl	8000ffc <SPI_RxByte>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d002      	beq.n	80010ea <SD_PowerOn+0x66>
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1f4      	bne.n	80010d4 <SD_PowerOn+0x50>
	}

	DESELECT();
 80010ea:	f7ff ff45 	bl	8000f78 <DESELECT>
	SPI_TxByte(0XFF);
 80010ee:	20ff      	movs	r0, #255	; 0xff
 80010f0:	f7ff ff50 	bl	8000f94 <SPI_TxByte>

	PowerFlag = 1;
 80010f4:	4b03      	ldr	r3, [pc, #12]	; (8001104 <SD_PowerOn+0x80>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]
}
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000305 	.word	0x20000305

08001108 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <SD_PowerOff+0x14>)
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	20000305 	.word	0x20000305

08001120 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <SD_CheckPower+0x14>)
 8001126:	781b      	ldrb	r3, [r3, #0]
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000305 	.word	0x20000305

08001138 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <SD_RxDataBlock+0x5c>)
 8001144:	22c8      	movs	r2, #200	; 0xc8
 8001146:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001148:	f7ff ff58 	bl	8000ffc <SPI_RxByte>
 800114c:	4603      	mov	r3, r0
 800114e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	2bff      	cmp	r3, #255	; 0xff
 8001154:	d104      	bne.n	8001160 <SD_RxDataBlock+0x28>
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <SD_RxDataBlock+0x5c>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	b29b      	uxth	r3, r3
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1f3      	bne.n	8001148 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	2bfe      	cmp	r3, #254	; 0xfe
 8001164:	d001      	beq.n	800116a <SD_RxDataBlock+0x32>
 8001166:	2300      	movs	r3, #0
 8001168:	e00f      	b.n	800118a <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	1c5a      	adds	r2, r3, #1
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff5f 	bl	8001034 <SPI_RxBytePtr>
	} while(len--);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	1e5a      	subs	r2, r3, #1
 800117a:	603a      	str	r2, [r7, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1f4      	bne.n	800116a <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8001180:	f7ff ff3c 	bl	8000ffc <SPI_RxByte>
	SPI_RxByte();
 8001184:	f7ff ff3a 	bl	8000ffc <SPI_RxByte>

	return TRUE;
 8001188:	2301      	movs	r3, #1
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000300 	.word	0x20000300

08001198 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80011a8:	f7ff ff52 	bl	8001050 <SD_ReadyWait>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2bff      	cmp	r3, #255	; 0xff
 80011b0:	d001      	beq.n	80011b6 <SD_TxDataBlock+0x1e>
 80011b2:	2300      	movs	r3, #0
 80011b4:	e02f      	b.n	8001216 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80011b6:	78fb      	ldrb	r3, [r7, #3]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff feeb 	bl	8000f94 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80011be:	78fb      	ldrb	r3, [r7, #3]
 80011c0:	2bfd      	cmp	r3, #253	; 0xfd
 80011c2:	d020      	beq.n	8001206 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80011c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff fefd 	bl	8000fc8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80011ce:	f7ff ff15 	bl	8000ffc <SPI_RxByte>
		SPI_RxByte();
 80011d2:	f7ff ff13 	bl	8000ffc <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80011d6:	e00b      	b.n	80011f0 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80011d8:	f7ff ff10 	bl	8000ffc <SPI_RxByte>
 80011dc:	4603      	mov	r3, r0
 80011de:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	f003 031f 	and.w	r3, r3, #31
 80011e6:	2b05      	cmp	r3, #5
 80011e8:	d006      	beq.n	80011f8 <SD_TxDataBlock+0x60>
			i++;
 80011ea:	7bbb      	ldrb	r3, [r7, #14]
 80011ec:	3301      	adds	r3, #1
 80011ee:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80011f0:	7bbb      	ldrb	r3, [r7, #14]
 80011f2:	2b40      	cmp	r3, #64	; 0x40
 80011f4:	d9f0      	bls.n	80011d8 <SD_TxDataBlock+0x40>
 80011f6:	e000      	b.n	80011fa <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80011f8:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80011fa:	bf00      	nop
 80011fc:	f7ff fefe 	bl	8000ffc <SPI_RxByte>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d0fa      	beq.n	80011fc <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	f003 031f 	and.w	r3, r3, #31
 800120c:	2b05      	cmp	r3, #5
 800120e:	d101      	bne.n	8001214 <SD_TxDataBlock+0x7c>
 8001210:	2301      	movs	r3, #1
 8001212:	e000      	b.n	8001216 <SD_TxDataBlock+0x7e>

	return FALSE;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b084      	sub	sp, #16
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	6039      	str	r1, [r7, #0]
 8001228:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800122a:	f7ff ff11 	bl	8001050 <SD_ReadyWait>
 800122e:	4603      	mov	r3, r0
 8001230:	2bff      	cmp	r3, #255	; 0xff
 8001232:	d001      	beq.n	8001238 <SD_SendCmd+0x1a>
 8001234:	23ff      	movs	r3, #255	; 0xff
 8001236:	e042      	b.n	80012be <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff feaa 	bl	8000f94 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	0e1b      	lsrs	r3, r3, #24
 8001244:	b2db      	uxtb	r3, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fea4 	bl	8000f94 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	0c1b      	lsrs	r3, r3, #16
 8001250:	b2db      	uxtb	r3, r3
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fe9e 	bl	8000f94 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	0a1b      	lsrs	r3, r3, #8
 800125c:	b2db      	uxtb	r3, r3
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fe98 	bl	8000f94 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fe93 	bl	8000f94 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	2b40      	cmp	r3, #64	; 0x40
 8001272:	d102      	bne.n	800127a <SD_SendCmd+0x5c>
 8001274:	2395      	movs	r3, #149	; 0x95
 8001276:	73fb      	strb	r3, [r7, #15]
 8001278:	e007      	b.n	800128a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2b48      	cmp	r3, #72	; 0x48
 800127e:	d102      	bne.n	8001286 <SD_SendCmd+0x68>
 8001280:	2387      	movs	r3, #135	; 0x87
 8001282:	73fb      	strb	r3, [r7, #15]
 8001284:	e001      	b.n	800128a <SD_SendCmd+0x6c>
	else crc = 1;
 8001286:	2301      	movs	r3, #1
 8001288:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fe81 	bl	8000f94 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	2b4c      	cmp	r3, #76	; 0x4c
 8001296:	d101      	bne.n	800129c <SD_SendCmd+0x7e>
 8001298:	f7ff feb0 	bl	8000ffc <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800129c:	230a      	movs	r3, #10
 800129e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80012a0:	f7ff feac 	bl	8000ffc <SPI_RxByte>
 80012a4:	4603      	mov	r3, r0
 80012a6:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80012a8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	da05      	bge.n	80012bc <SD_SendCmd+0x9e>
 80012b0:	7bbb      	ldrb	r3, [r7, #14]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	73bb      	strb	r3, [r7, #14]
 80012b6:	7bbb      	ldrb	r3, [r7, #14]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1f1      	bne.n	80012a0 <SD_SendCmd+0x82>

	return res;
 80012bc:	7b7b      	ldrb	r3, [r7, #13]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <SD_disk_initialize+0x14>
 80012d8:	2301      	movs	r3, #1
 80012da:	e0d6      	b.n	800148a <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80012dc:	4b6d      	ldr	r3, [pc, #436]	; (8001494 <SD_disk_initialize+0x1cc>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <SD_disk_initialize+0x2a>
 80012ea:	4b6a      	ldr	r3, [pc, #424]	; (8001494 <SD_disk_initialize+0x1cc>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	e0cb      	b.n	800148a <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 80012f2:	f7ff fec7 	bl	8001084 <SD_PowerOn>

	/* slave select */
	SELECT();
 80012f6:	f7ff fe31 	bl	8000f5c <SELECT>

	/* check disk type */
	type = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80012fe:	2100      	movs	r1, #0
 8001300:	2040      	movs	r0, #64	; 0x40
 8001302:	f7ff ff8c 	bl	800121e <SD_SendCmd>
 8001306:	4603      	mov	r3, r0
 8001308:	2b01      	cmp	r3, #1
 800130a:	f040 80a6 	bne.w	800145a <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800130e:	4b62      	ldr	r3, [pc, #392]	; (8001498 <SD_disk_initialize+0x1d0>)
 8001310:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001314:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001316:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800131a:	2048      	movs	r0, #72	; 0x48
 800131c:	f7ff ff7f 	bl	800121e <SD_SendCmd>
 8001320:	4603      	mov	r3, r0
 8001322:	2b01      	cmp	r3, #1
 8001324:	d158      	bne.n	80013d8 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001326:	2300      	movs	r3, #0
 8001328:	73fb      	strb	r3, [r7, #15]
 800132a:	e00c      	b.n	8001346 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800132c:	7bfc      	ldrb	r4, [r7, #15]
 800132e:	f7ff fe65 	bl	8000ffc <SPI_RxByte>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	f104 0310 	add.w	r3, r4, #16
 800133a:	443b      	add	r3, r7
 800133c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	3301      	adds	r3, #1
 8001344:	73fb      	strb	r3, [r7, #15]
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	2b03      	cmp	r3, #3
 800134a:	d9ef      	bls.n	800132c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800134c:	7abb      	ldrb	r3, [r7, #10]
 800134e:	2b01      	cmp	r3, #1
 8001350:	f040 8083 	bne.w	800145a <SD_disk_initialize+0x192>
 8001354:	7afb      	ldrb	r3, [r7, #11]
 8001356:	2baa      	cmp	r3, #170	; 0xaa
 8001358:	d17f      	bne.n	800145a <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800135a:	2100      	movs	r1, #0
 800135c:	2077      	movs	r0, #119	; 0x77
 800135e:	f7ff ff5e 	bl	800121e <SD_SendCmd>
 8001362:	4603      	mov	r3, r0
 8001364:	2b01      	cmp	r3, #1
 8001366:	d807      	bhi.n	8001378 <SD_disk_initialize+0xb0>
 8001368:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800136c:	2069      	movs	r0, #105	; 0x69
 800136e:	f7ff ff56 	bl	800121e <SD_SendCmd>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d005      	beq.n	8001384 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8001378:	4b47      	ldr	r3, [pc, #284]	; (8001498 <SD_disk_initialize+0x1d0>)
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	b29b      	uxth	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1eb      	bne.n	800135a <SD_disk_initialize+0x92>
 8001382:	e000      	b.n	8001386 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001384:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001386:	4b44      	ldr	r3, [pc, #272]	; (8001498 <SD_disk_initialize+0x1d0>)
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	b29b      	uxth	r3, r3
 800138c:	2b00      	cmp	r3, #0
 800138e:	d064      	beq.n	800145a <SD_disk_initialize+0x192>
 8001390:	2100      	movs	r1, #0
 8001392:	207a      	movs	r0, #122	; 0x7a
 8001394:	f7ff ff43 	bl	800121e <SD_SendCmd>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d15d      	bne.n	800145a <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800139e:	2300      	movs	r3, #0
 80013a0:	73fb      	strb	r3, [r7, #15]
 80013a2:	e00c      	b.n	80013be <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 80013a4:	7bfc      	ldrb	r4, [r7, #15]
 80013a6:	f7ff fe29 	bl	8000ffc <SPI_RxByte>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461a      	mov	r2, r3
 80013ae:	f104 0310 	add.w	r3, r4, #16
 80013b2:	443b      	add	r3, r7
 80013b4:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	3301      	adds	r3, #1
 80013bc:	73fb      	strb	r3, [r7, #15]
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	2b03      	cmp	r3, #3
 80013c2:	d9ef      	bls.n	80013a4 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80013c4:	7a3b      	ldrb	r3, [r7, #8]
 80013c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <SD_disk_initialize+0x10a>
 80013ce:	230c      	movs	r3, #12
 80013d0:	e000      	b.n	80013d4 <SD_disk_initialize+0x10c>
 80013d2:	2304      	movs	r3, #4
 80013d4:	73bb      	strb	r3, [r7, #14]
 80013d6:	e040      	b.n	800145a <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80013d8:	2100      	movs	r1, #0
 80013da:	2077      	movs	r0, #119	; 0x77
 80013dc:	f7ff ff1f 	bl	800121e <SD_SendCmd>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d808      	bhi.n	80013f8 <SD_disk_initialize+0x130>
 80013e6:	2100      	movs	r1, #0
 80013e8:	2069      	movs	r0, #105	; 0x69
 80013ea:	f7ff ff18 	bl	800121e <SD_SendCmd>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d801      	bhi.n	80013f8 <SD_disk_initialize+0x130>
 80013f4:	2302      	movs	r3, #2
 80013f6:	e000      	b.n	80013fa <SD_disk_initialize+0x132>
 80013f8:	2301      	movs	r3, #1
 80013fa:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80013fc:	7bbb      	ldrb	r3, [r7, #14]
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d10e      	bne.n	8001420 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001402:	2100      	movs	r1, #0
 8001404:	2077      	movs	r0, #119	; 0x77
 8001406:	f7ff ff0a 	bl	800121e <SD_SendCmd>
 800140a:	4603      	mov	r3, r0
 800140c:	2b01      	cmp	r3, #1
 800140e:	d80e      	bhi.n	800142e <SD_disk_initialize+0x166>
 8001410:	2100      	movs	r1, #0
 8001412:	2069      	movs	r0, #105	; 0x69
 8001414:	f7ff ff03 	bl	800121e <SD_SendCmd>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d107      	bne.n	800142e <SD_disk_initialize+0x166>
 800141e:	e00d      	b.n	800143c <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001420:	2100      	movs	r1, #0
 8001422:	2041      	movs	r0, #65	; 0x41
 8001424:	f7ff fefb 	bl	800121e <SD_SendCmd>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d005      	beq.n	800143a <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 800142e:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <SD_disk_initialize+0x1d0>)
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	b29b      	uxth	r3, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1e1      	bne.n	80013fc <SD_disk_initialize+0x134>
 8001438:	e000      	b.n	800143c <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800143a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800143c:	4b16      	ldr	r3, [pc, #88]	; (8001498 <SD_disk_initialize+0x1d0>)
 800143e:	881b      	ldrh	r3, [r3, #0]
 8001440:	b29b      	uxth	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d007      	beq.n	8001456 <SD_disk_initialize+0x18e>
 8001446:	f44f 7100 	mov.w	r1, #512	; 0x200
 800144a:	2050      	movs	r0, #80	; 0x50
 800144c:	f7ff fee7 	bl	800121e <SD_SendCmd>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <SD_disk_initialize+0x192>
 8001456:	2300      	movs	r3, #0
 8001458:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800145a:	4a10      	ldr	r2, [pc, #64]	; (800149c <SD_disk_initialize+0x1d4>)
 800145c:	7bbb      	ldrb	r3, [r7, #14]
 800145e:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001460:	f7ff fd8a 	bl	8000f78 <DESELECT>
	SPI_RxByte();
 8001464:	f7ff fdca 	bl	8000ffc <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001468:	7bbb      	ldrb	r3, [r7, #14]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d008      	beq.n	8001480 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <SD_disk_initialize+0x1cc>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	f023 0301 	bic.w	r3, r3, #1
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <SD_disk_initialize+0x1cc>)
 800147c:	701a      	strb	r2, [r3, #0]
 800147e:	e001      	b.n	8001484 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001480:	f7ff fe42 	bl	8001108 <SD_PowerOff>
	}

	return Stat;
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <SD_disk_initialize+0x1cc>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	b2db      	uxtb	r3, r3
}
 800148a:	4618      	mov	r0, r3
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	bd90      	pop	{r4, r7, pc}
 8001492:	bf00      	nop
 8001494:	20000000 	.word	0x20000000
 8001498:	20000300 	.word	0x20000300
 800149c:	20000304 	.word	0x20000304

080014a0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <SD_disk_status+0x14>
 80014b0:	2301      	movs	r3, #1
 80014b2:	e002      	b.n	80014ba <SD_disk_status+0x1a>
	return Stat;
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <SD_disk_status+0x28>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	b2db      	uxtb	r3, r3
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	20000000 	.word	0x20000000

080014cc <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	4603      	mov	r3, r0
 80014da:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d102      	bne.n	80014e8 <SD_disk_read+0x1c>
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <SD_disk_read+0x20>
 80014e8:	2304      	movs	r3, #4
 80014ea:	e051      	b.n	8001590 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80014ec:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <SD_disk_read+0xcc>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <SD_disk_read+0x32>
 80014fa:	2303      	movs	r3, #3
 80014fc:	e048      	b.n	8001590 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80014fe:	4b27      	ldr	r3, [pc, #156]	; (800159c <SD_disk_read+0xd0>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	2b00      	cmp	r3, #0
 8001508:	d102      	bne.n	8001510 <SD_disk_read+0x44>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	025b      	lsls	r3, r3, #9
 800150e:	607b      	str	r3, [r7, #4]

	SELECT();
 8001510:	f7ff fd24 	bl	8000f5c <SELECT>

	if (count == 1)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d111      	bne.n	800153e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	2051      	movs	r0, #81	; 0x51
 800151e:	f7ff fe7e 	bl	800121e <SD_SendCmd>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d129      	bne.n	800157c <SD_disk_read+0xb0>
 8001528:	f44f 7100 	mov.w	r1, #512	; 0x200
 800152c:	68b8      	ldr	r0, [r7, #8]
 800152e:	f7ff fe03 	bl	8001138 <SD_RxDataBlock>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d021      	beq.n	800157c <SD_disk_read+0xb0>
 8001538:	2300      	movs	r3, #0
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	e01e      	b.n	800157c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	2052      	movs	r0, #82	; 0x52
 8001542:	f7ff fe6c 	bl	800121e <SD_SendCmd>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d117      	bne.n	800157c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800154c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001550:	68b8      	ldr	r0, [r7, #8]
 8001552:	f7ff fdf1 	bl	8001138 <SD_RxDataBlock>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00a      	beq.n	8001572 <SD_disk_read+0xa6>
				buff += 512;
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001562:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	3b01      	subs	r3, #1
 8001568:	603b      	str	r3, [r7, #0]
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1ed      	bne.n	800154c <SD_disk_read+0x80>
 8001570:	e000      	b.n	8001574 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001572:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001574:	2100      	movs	r1, #0
 8001576:	204c      	movs	r0, #76	; 0x4c
 8001578:	f7ff fe51 	bl	800121e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800157c:	f7ff fcfc 	bl	8000f78 <DESELECT>
	SPI_RxByte();
 8001580:	f7ff fd3c 	bl	8000ffc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	bf14      	ite	ne
 800158a:	2301      	movne	r3, #1
 800158c:	2300      	moveq	r3, #0
 800158e:	b2db      	uxtb	r3, r3
}
 8001590:	4618      	mov	r0, r3
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000000 	.word	0x20000000
 800159c:	20000304 	.word	0x20000304

080015a0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	4603      	mov	r3, r0
 80015ae:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d102      	bne.n	80015bc <SD_disk_write+0x1c>
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <SD_disk_write+0x20>
 80015bc:	2304      	movs	r3, #4
 80015be:	e06b      	b.n	8001698 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80015c0:	4b37      	ldr	r3, [pc, #220]	; (80016a0 <SD_disk_write+0x100>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <SD_disk_write+0x32>
 80015ce:	2303      	movs	r3, #3
 80015d0:	e062      	b.n	8001698 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80015d2:	4b33      	ldr	r3, [pc, #204]	; (80016a0 <SD_disk_write+0x100>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <SD_disk_write+0x44>
 80015e0:	2302      	movs	r3, #2
 80015e2:	e059      	b.n	8001698 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80015e4:	4b2f      	ldr	r3, [pc, #188]	; (80016a4 <SD_disk_write+0x104>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d102      	bne.n	80015f6 <SD_disk_write+0x56>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	025b      	lsls	r3, r3, #9
 80015f4:	607b      	str	r3, [r7, #4]

	SELECT();
 80015f6:	f7ff fcb1 	bl	8000f5c <SELECT>

	if (count == 1)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d110      	bne.n	8001622 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	2058      	movs	r0, #88	; 0x58
 8001604:	f7ff fe0b 	bl	800121e <SD_SendCmd>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d13a      	bne.n	8001684 <SD_disk_write+0xe4>
 800160e:	21fe      	movs	r1, #254	; 0xfe
 8001610:	68b8      	ldr	r0, [r7, #8]
 8001612:	f7ff fdc1 	bl	8001198 <SD_TxDataBlock>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d033      	beq.n	8001684 <SD_disk_write+0xe4>
			count = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	e030      	b.n	8001684 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001622:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <SD_disk_write+0x104>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d007      	beq.n	800163e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800162e:	2100      	movs	r1, #0
 8001630:	2077      	movs	r0, #119	; 0x77
 8001632:	f7ff fdf4 	bl	800121e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001636:	6839      	ldr	r1, [r7, #0]
 8001638:	2057      	movs	r0, #87	; 0x57
 800163a:	f7ff fdf0 	bl	800121e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	2059      	movs	r0, #89	; 0x59
 8001642:	f7ff fdec 	bl	800121e <SD_SendCmd>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d11b      	bne.n	8001684 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800164c:	21fc      	movs	r1, #252	; 0xfc
 800164e:	68b8      	ldr	r0, [r7, #8]
 8001650:	f7ff fda2 	bl	8001198 <SD_TxDataBlock>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00a      	beq.n	8001670 <SD_disk_write+0xd0>
				buff += 512;
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001660:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	3b01      	subs	r3, #1
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1ee      	bne.n	800164c <SD_disk_write+0xac>
 800166e:	e000      	b.n	8001672 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001670:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001672:	21fd      	movs	r1, #253	; 0xfd
 8001674:	2000      	movs	r0, #0
 8001676:	f7ff fd8f 	bl	8001198 <SD_TxDataBlock>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d101      	bne.n	8001684 <SD_disk_write+0xe4>
			{
				count = 1;
 8001680:	2301      	movs	r3, #1
 8001682:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001684:	f7ff fc78 	bl	8000f78 <DESELECT>
	SPI_RxByte();
 8001688:	f7ff fcb8 	bl	8000ffc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	bf14      	ite	ne
 8001692:	2301      	movne	r3, #1
 8001694:	2300      	moveq	r3, #0
 8001696:	b2db      	uxtb	r3, r3
}
 8001698:	4618      	mov	r0, r3
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000000 	.word	0x20000000
 80016a4:	20000304 	.word	0x20000304

080016a8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80016a8:	b590      	push	{r4, r7, lr}
 80016aa:	b08b      	sub	sp, #44	; 0x2c
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	603a      	str	r2, [r7, #0]
 80016b2:	71fb      	strb	r3, [r7, #7]
 80016b4:	460b      	mov	r3, r1
 80016b6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <SD_disk_ioctl+0x1e>
 80016c2:	2304      	movs	r3, #4
 80016c4:	e115      	b.n	80018f2 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80016cc:	79bb      	ldrb	r3, [r7, #6]
 80016ce:	2b05      	cmp	r3, #5
 80016d0:	d124      	bne.n	800171c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d012      	beq.n	8001700 <SD_disk_ioctl+0x58>
 80016da:	2b02      	cmp	r3, #2
 80016dc:	dc1a      	bgt.n	8001714 <SD_disk_ioctl+0x6c>
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d002      	beq.n	80016e8 <SD_disk_ioctl+0x40>
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d006      	beq.n	80016f4 <SD_disk_ioctl+0x4c>
 80016e6:	e015      	b.n	8001714 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80016e8:	f7ff fd0e 	bl	8001108 <SD_PowerOff>
			res = RES_OK;
 80016ec:	2300      	movs	r3, #0
 80016ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016f2:	e0fc      	b.n	80018ee <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80016f4:	f7ff fcc6 	bl	8001084 <SD_PowerOn>
			res = RES_OK;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016fe:	e0f6      	b.n	80018ee <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001700:	6a3b      	ldr	r3, [r7, #32]
 8001702:	1c5c      	adds	r4, r3, #1
 8001704:	f7ff fd0c 	bl	8001120 <SD_CheckPower>
 8001708:	4603      	mov	r3, r0
 800170a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 800170c:	2300      	movs	r3, #0
 800170e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001712:	e0ec      	b.n	80018ee <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001714:	2304      	movs	r3, #4
 8001716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800171a:	e0e8      	b.n	80018ee <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800171c:	4b77      	ldr	r3, [pc, #476]	; (80018fc <SD_disk_ioctl+0x254>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <SD_disk_ioctl+0x86>
 800172a:	2303      	movs	r3, #3
 800172c:	e0e1      	b.n	80018f2 <SD_disk_ioctl+0x24a>

		SELECT();
 800172e:	f7ff fc15 	bl	8000f5c <SELECT>

		switch (ctrl)
 8001732:	79bb      	ldrb	r3, [r7, #6]
 8001734:	2b0d      	cmp	r3, #13
 8001736:	f200 80cb 	bhi.w	80018d0 <SD_disk_ioctl+0x228>
 800173a:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <SD_disk_ioctl+0x98>)
 800173c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001740:	0800183b 	.word	0x0800183b
 8001744:	08001779 	.word	0x08001779
 8001748:	0800182b 	.word	0x0800182b
 800174c:	080018d1 	.word	0x080018d1
 8001750:	080018d1 	.word	0x080018d1
 8001754:	080018d1 	.word	0x080018d1
 8001758:	080018d1 	.word	0x080018d1
 800175c:	080018d1 	.word	0x080018d1
 8001760:	080018d1 	.word	0x080018d1
 8001764:	080018d1 	.word	0x080018d1
 8001768:	080018d1 	.word	0x080018d1
 800176c:	0800184d 	.word	0x0800184d
 8001770:	08001871 	.word	0x08001871
 8001774:	08001895 	.word	0x08001895
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001778:	2100      	movs	r1, #0
 800177a:	2049      	movs	r0, #73	; 0x49
 800177c:	f7ff fd4f 	bl	800121e <SD_SendCmd>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	f040 80a8 	bne.w	80018d8 <SD_disk_ioctl+0x230>
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	2110      	movs	r1, #16
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fcd2 	bl	8001138 <SD_RxDataBlock>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 809e 	beq.w	80018d8 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 800179c:	7b3b      	ldrb	r3, [r7, #12]
 800179e:	099b      	lsrs	r3, r3, #6
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d10e      	bne.n	80017c4 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80017a6:	7d7b      	ldrb	r3, [r7, #21]
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	7d3b      	ldrb	r3, [r7, #20]
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	021b      	lsls	r3, r3, #8
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	4413      	add	r3, r2
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	3301      	adds	r3, #1
 80017b8:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80017ba:	8bfb      	ldrh	r3, [r7, #30]
 80017bc:	029a      	lsls	r2, r3, #10
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	e02e      	b.n	8001822 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80017c4:	7c7b      	ldrb	r3, [r7, #17]
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	7dbb      	ldrb	r3, [r7, #22]
 80017ce:	09db      	lsrs	r3, r3, #7
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	4413      	add	r3, r2
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	7d7b      	ldrb	r3, [r7, #21]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	f003 0306 	and.w	r3, r3, #6
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	4413      	add	r3, r2
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	3302      	adds	r3, #2
 80017e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80017ec:	7d3b      	ldrb	r3, [r7, #20]
 80017ee:	099b      	lsrs	r3, r3, #6
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	7cfb      	ldrb	r3, [r7, #19]
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	4413      	add	r3, r2
 80017fe:	b29a      	uxth	r2, r3
 8001800:	7cbb      	ldrb	r3, [r7, #18]
 8001802:	029b      	lsls	r3, r3, #10
 8001804:	b29b      	uxth	r3, r3
 8001806:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800180a:	b29b      	uxth	r3, r3
 800180c:	4413      	add	r3, r2
 800180e:	b29b      	uxth	r3, r3
 8001810:	3301      	adds	r3, #1
 8001812:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001814:	8bfa      	ldrh	r2, [r7, #30]
 8001816:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800181a:	3b09      	subs	r3, #9
 800181c:	409a      	lsls	r2, r3
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001822:	2300      	movs	r3, #0
 8001824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001828:	e056      	b.n	80018d8 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001830:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001832:	2300      	movs	r3, #0
 8001834:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001838:	e055      	b.n	80018e6 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800183a:	f7ff fc09 	bl	8001050 <SD_ReadyWait>
 800183e:	4603      	mov	r3, r0
 8001840:	2bff      	cmp	r3, #255	; 0xff
 8001842:	d14b      	bne.n	80018dc <SD_disk_ioctl+0x234>
 8001844:	2300      	movs	r3, #0
 8001846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800184a:	e047      	b.n	80018dc <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800184c:	2100      	movs	r1, #0
 800184e:	2049      	movs	r0, #73	; 0x49
 8001850:	f7ff fce5 	bl	800121e <SD_SendCmd>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d142      	bne.n	80018e0 <SD_disk_ioctl+0x238>
 800185a:	2110      	movs	r1, #16
 800185c:	6a38      	ldr	r0, [r7, #32]
 800185e:	f7ff fc6b 	bl	8001138 <SD_RxDataBlock>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d03b      	beq.n	80018e0 <SD_disk_ioctl+0x238>
 8001868:	2300      	movs	r3, #0
 800186a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800186e:	e037      	b.n	80018e0 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001870:	2100      	movs	r1, #0
 8001872:	204a      	movs	r0, #74	; 0x4a
 8001874:	f7ff fcd3 	bl	800121e <SD_SendCmd>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d132      	bne.n	80018e4 <SD_disk_ioctl+0x23c>
 800187e:	2110      	movs	r1, #16
 8001880:	6a38      	ldr	r0, [r7, #32]
 8001882:	f7ff fc59 	bl	8001138 <SD_RxDataBlock>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d02b      	beq.n	80018e4 <SD_disk_ioctl+0x23c>
 800188c:	2300      	movs	r3, #0
 800188e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001892:	e027      	b.n	80018e4 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001894:	2100      	movs	r1, #0
 8001896:	207a      	movs	r0, #122	; 0x7a
 8001898:	f7ff fcc1 	bl	800121e <SD_SendCmd>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d116      	bne.n	80018d0 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80018a2:	2300      	movs	r3, #0
 80018a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80018a8:	e00b      	b.n	80018c2 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80018aa:	6a3c      	ldr	r4, [r7, #32]
 80018ac:	1c63      	adds	r3, r4, #1
 80018ae:	623b      	str	r3, [r7, #32]
 80018b0:	f7ff fba4 	bl	8000ffc <SPI_RxByte>
 80018b4:	4603      	mov	r3, r0
 80018b6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80018b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018bc:	3301      	adds	r3, #1
 80018be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80018c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	d9ef      	bls.n	80018aa <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80018d0:	2304      	movs	r3, #4
 80018d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80018d6:	e006      	b.n	80018e6 <SD_disk_ioctl+0x23e>
			break;
 80018d8:	bf00      	nop
 80018da:	e004      	b.n	80018e6 <SD_disk_ioctl+0x23e>
			break;
 80018dc:	bf00      	nop
 80018de:	e002      	b.n	80018e6 <SD_disk_ioctl+0x23e>
			break;
 80018e0:	bf00      	nop
 80018e2:	e000      	b.n	80018e6 <SD_disk_ioctl+0x23e>
			break;
 80018e4:	bf00      	nop
		}

		DESELECT();
 80018e6:	f7ff fb47 	bl	8000f78 <DESELECT>
		SPI_RxByte();
 80018ea:	f7ff fb87 	bl	8000ffc <SPI_RxByte>
	}

	return res;
 80018ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	372c      	adds	r7, #44	; 0x2c
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd90      	pop	{r4, r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000000 	.word	0x20000000

08001900 <clear_buffer>:
	while (*buf++ != '\0') i++;
	return i;
}

void clear_buffer (void)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 8001906:	2300      	movs	r3, #0
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	e007      	b.n	800191c <clear_buffer+0x1c>
 800190c:	4a08      	ldr	r2, [pc, #32]	; (8001930 <clear_buffer+0x30>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4413      	add	r3, r2
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3301      	adds	r3, #1
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b7f      	cmp	r3, #127	; 0x7f
 8001920:	ddf4      	ble.n	800190c <clear_buffer+0xc>
}
 8001922:	bf00      	nop
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	20000cf4 	.word	0x20000cf4

08001934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001934:	b5b0      	push	{r4, r5, r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800193a:	f000 fc45 	bl	80021c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800193e:	f000 f8e9 	bl	8001b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001942:	f000 f9b3 	bl	8001cac <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001946:	f009 fc7b 	bl	800b240 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 800194a:	f000 f94b 	bl	8001be4 <MX_I2C1_Init>
  MX_SPI1_Init();
 800194e:	f000 f977 	bl	8001c40 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001952:	f005 f829 	bl	80069a8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay (500);
 8001956:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800195a:	f000 fca7 	bl	80022ac <HAL_Delay>

  fresult = f_mount(&fs, "/", 1);
 800195e:	2201      	movs	r2, #1
 8001960:	4957      	ldr	r1, [pc, #348]	; (8001ac0 <main+0x18c>)
 8001962:	4858      	ldr	r0, [pc, #352]	; (8001ac4 <main+0x190>)
 8001964:	f008 ff54 	bl	800a810 <f_mount>
 8001968:	4603      	mov	r3, r0
 800196a:	461a      	mov	r2, r3
 800196c:	4b56      	ldr	r3, [pc, #344]	; (8001ac8 <main+0x194>)
 800196e:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK) {
 8001970:	4b55      	ldr	r3, [pc, #340]	; (8001ac8 <main+0x194>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d000      	beq.n	800197a <main+0x46>
	  while(1);
 8001978:	e7fe      	b.n	8001978 <main+0x44>
//  	clear_buffer();

  	/************* The following operation is using PUTS and GETS *********************/

  	/* Open file to write/ create a file if it doesn't exist */
      fresult = f_open(&fil, "FILE003.TXT", FA_OPEN_EXISTING | FA_CREATE_ALWAYS | FA_WRITE |FA_READ);
 800197a:	220b      	movs	r2, #11
 800197c:	4953      	ldr	r1, [pc, #332]	; (8001acc <main+0x198>)
 800197e:	4854      	ldr	r0, [pc, #336]	; (8001ad0 <main+0x19c>)
 8001980:	f008 ff8c 	bl	800a89c <f_open>
 8001984:	4603      	mov	r3, r0
 8001986:	461a      	mov	r2, r3
 8001988:	4b4f      	ldr	r3, [pc, #316]	; (8001ac8 <main+0x194>)
 800198a:	701a      	strb	r2, [r3, #0]
      clear_buffer();
 800198c:	f7ff ffb8 	bl	8001900 <clear_buffer>

  	/* Writing text */
      fresult = f_puts("This data is from the FILE1.txt.", &fil);
 8001990:	494f      	ldr	r1, [pc, #316]	; (8001ad0 <main+0x19c>)
 8001992:	4850      	ldr	r0, [pc, #320]	; (8001ad4 <main+0x1a0>)
 8001994:	f009 fbd4 	bl	800b140 <f_puts>
 8001998:	4603      	mov	r3, r0
 800199a:	b2da      	uxtb	r2, r3
 800199c:	4b4a      	ldr	r3, [pc, #296]	; (8001ac8 <main+0x194>)
 800199e:	701a      	strb	r2, [r3, #0]

  	/* Close file */
  	fresult = f_close(&fil);
 80019a0:	484b      	ldr	r0, [pc, #300]	; (8001ad0 <main+0x19c>)
 80019a2:	f009 fb2c 	bl	800affe <f_close>
 80019a6:	4603      	mov	r3, r0
 80019a8:	461a      	mov	r2, r3
 80019aa:	4b47      	ldr	r3, [pc, #284]	; (8001ac8 <main+0x194>)
 80019ac:	701a      	strb	r2, [r3, #0]

  	if (fresult != FR_OK){
 80019ae:	4b46      	ldr	r3, [pc, #280]	; (8001ac8 <main+0x194>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d000      	beq.n	80019b8 <main+0x84>
      while(1);
 80019b6:	e7fe      	b.n	80019b6 <main+0x82>
  	else {
  		/*All OK*/
  	}

  /* Sets pins for the Load Cell */
  hx711_init(&loadcell, GPIOB, GPIO_PIN_0, GPIOB, GPIO_PIN_1);
 80019b8:	2302      	movs	r3, #2
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	4b46      	ldr	r3, [pc, #280]	; (8001ad8 <main+0x1a4>)
 80019be:	2201      	movs	r2, #1
 80019c0:	4945      	ldr	r1, [pc, #276]	; (8001ad8 <main+0x1a4>)
 80019c2:	4846      	ldr	r0, [pc, #280]	; (8001adc <main+0x1a8>)
 80019c4:	f005 f87f 	bl	8006ac6 <hx711_init>

/* Load cell without load resulted to 8326279 for calibration */
 value1 = hx711_value_ave(&loadcell, 10);
 80019c8:	210a      	movs	r1, #10
 80019ca:	4844      	ldr	r0, [pc, #272]	; (8001adc <main+0x1a8>)
 80019cc:	f005 f941 	bl	8006c52 <hx711_value_ave>
 80019d0:	4603      	mov	r3, r0
 80019d2:	4a43      	ldr	r2, [pc, #268]	; (8001ae0 <main+0x1ac>)
 80019d4:	6013      	str	r3, [r2, #0]
 
 /* Load cell with 10kg resulted to 8291415 for calibration */
 value2 = hx711_value_ave(&loadcell, 10);	
 80019d6:	210a      	movs	r1, #10
 80019d8:	4840      	ldr	r0, [pc, #256]	; (8001adc <main+0x1a8>)
 80019da:	f005 f93a 	bl	8006c52 <hx711_value_ave>
 80019de:	4603      	mov	r3, r0
 80019e0:	4a40      	ldr	r2, [pc, #256]	; (8001ae4 <main+0x1b0>)
 80019e2:	6013      	str	r3, [r2, #0]

 /* Calibration with 10kg on the load cell */
 hx711_calibration(&loadcell, value1, value2, 10.0);  
 80019e4:	4b3e      	ldr	r3, [pc, #248]	; (8001ae0 <main+0x1ac>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a3e      	ldr	r2, [pc, #248]	; (8001ae4 <main+0x1b0>)
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80019f0:	4619      	mov	r1, r3
 80019f2:	483a      	ldr	r0, [pc, #232]	; (8001adc <main+0x1a8>)
 80019f4:	f005 f9b2 	bl	8006d5c <hx711_calibration>

  hx711_tare(&loadcell, 10);
 80019f8:	210a      	movs	r1, #10
 80019fa:	4838      	ldr	r0, [pc, #224]	; (8001adc <main+0x1a8>)
 80019fc:	f005 f96c 	bl	8006cd8 <hx711_tare>
 hx711_coef_set(&loadcell, -63.5724983);	//This is for the perejil Test Stand 400kg
 8001a00:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8001ae8 <main+0x1b4>
 8001a04:	4835      	ldr	r0, [pc, #212]	; (8001adc <main+0x1a8>)
 8001a06:	f005 f9ed 	bl	8006de4 <hx711_coef_set>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    		  tickstart = HAL_GetTick();    //Not used 
 8001a0a:	f000 fc43 	bl	8002294 <HAL_GetTick>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	4a36      	ldr	r2, [pc, #216]	; (8001aec <main+0x1b8>)
 8001a12:	6013      	str	r3, [r2, #0]

      /*Read weight from sensor*/
		  weight[0] = hx711_weight(&loadcell, 1);
 8001a14:	2101      	movs	r1, #1
 8001a16:	4831      	ldr	r0, [pc, #196]	; (8001adc <main+0x1a8>)
 8001a18:	f005 f9c3 	bl	8006da2 <hx711_weight>
 8001a1c:	eef0 7a40 	vmov.f32	s15, s0
 8001a20:	4b33      	ldr	r3, [pc, #204]	; (8001af0 <main+0x1bc>)
 8001a22:	edc3 7a00 	vstr	s15, [r3]
		  //Fix data for the 800kg test stand
      /* TODO:  See why we get NEGATIVE VALUES! */
		  if (weight[0]<-10000.0){
 8001a26:	4b32      	ldr	r3, [pc, #200]	; (8001af0 <main+0x1bc>)
 8001a28:	edd3 7a00 	vldr	s15, [r3]
 8001a2c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001af4 <main+0x1c0>
 8001a30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a38:	d509      	bpl.n	8001a4e <main+0x11a>
			  weight[0] = weight[0] + 13140.0;	//This is for the perejil Test Stand 800kg
 8001a3a:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <main+0x1bc>)
 8001a3c:	edd3 7a00 	vldr	s15, [r3]
 8001a40:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001af8 <main+0x1c4>
 8001a44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a48:	4b29      	ldr	r3, [pc, #164]	; (8001af0 <main+0x1bc>)
 8001a4a:	edc3 7a00 	vstr	s15, [r3]
		  }

      /* Get the actual time */
		  tickend = HAL_GetTick();
 8001a4e:	f000 fc21 	bl	8002294 <HAL_GetTick>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4a29      	ldr	r2, [pc, #164]	; (8001afc <main+0x1c8>)
 8001a56:	6013      	str	r3, [r2, #0]

      /* Print the actual weight along the time */
		  size = sprintf((char *)buffer,"/*%0.2f,%0.4f*/ \n\r", (float)tickend/1000.0,  weight[0]/100.0); //This is for the perejil test stand 400kg
 8001a58:	4b28      	ldr	r3, [pc, #160]	; (8001afc <main+0x1c8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	ee07 3a90 	vmov	s15, r3
 8001a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a64:	ee17 0a90 	vmov	r0, s15
 8001a68:	f7fe fd76 	bl	8000558 <__aeabi_f2d>
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <main+0x1cc>)
 8001a72:	f7fe fef3 	bl	800085c <__aeabi_ddiv>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4614      	mov	r4, r2
 8001a7c:	461d      	mov	r5, r3
 8001a7e:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <main+0x1bc>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fd68 	bl	8000558 <__aeabi_f2d>
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	4b1d      	ldr	r3, [pc, #116]	; (8001b04 <main+0x1d0>)
 8001a8e:	f7fe fee5 	bl	800085c <__aeabi_ddiv>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	e9cd 2300 	strd	r2, r3, [sp]
 8001a9a:	4622      	mov	r2, r4
 8001a9c:	462b      	mov	r3, r5
 8001a9e:	491a      	ldr	r1, [pc, #104]	; (8001b08 <main+0x1d4>)
 8001aa0:	481a      	ldr	r0, [pc, #104]	; (8001b0c <main+0x1d8>)
 8001aa2:	f00a fd79 	bl	800c598 <siprintf>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <main+0x1dc>)
 8001aac:	701a      	strb	r2, [r3, #0]

		  CDC_Transmit_FS(buffer,size);
 8001aae:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <main+0x1dc>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4815      	ldr	r0, [pc, #84]	; (8001b0c <main+0x1d8>)
 8001ab8:	f009 fc80 	bl	800b3bc <CDC_Transmit_FS>
    		  tickstart = HAL_GetTick();    //Not used 
 8001abc:	e7a5      	b.n	8001a0a <main+0xd6>
 8001abe:	bf00      	nop
 8001ac0:	0800eaa0 	.word	0x0800eaa0
 8001ac4:	20000890 	.word	0x20000890
 8001ac8:	20000cf0 	.word	0x20000cf0
 8001acc:	0800eaa4 	.word	0x0800eaa4
 8001ad0:	20000ac0 	.word	0x20000ac0
 8001ad4:	0800eab0 	.word	0x0800eab0
 8001ad8:	40020400 	.word	0x40020400
 8001adc:	200003b8 	.word	0x200003b8
 8001ae0:	20000880 	.word	0x20000880
 8001ae4:	20000884 	.word	0x20000884
 8001ae8:	c27e4a3d 	.word	0xc27e4a3d
 8001aec:	20000888 	.word	0x20000888
 8001af0:	200003d0 	.word	0x200003d0
 8001af4:	c61c4000 	.word	0xc61c4000
 8001af8:	464d5000 	.word	0x464d5000
 8001afc:	2000088c 	.word	0x2000088c
 8001b00:	408f4000 	.word	0x408f4000
 8001b04:	40590000 	.word	0x40590000
 8001b08:	0800ead4 	.word	0x0800ead4
 8001b0c:	20000cf4 	.word	0x20000cf4
 8001b10:	200003b4 	.word	0x200003b4

08001b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b094      	sub	sp, #80	; 0x50
 8001b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b1a:	f107 0320 	add.w	r3, r7, #32
 8001b1e:	2230      	movs	r2, #48	; 0x30
 8001b20:	2100      	movs	r1, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f00a f8c6 	bl	800bcb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b28:	f107 030c 	add.w	r3, r7, #12
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	4b27      	ldr	r3, [pc, #156]	; (8001bdc <SystemClock_Config+0xc8>)
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	4a26      	ldr	r2, [pc, #152]	; (8001bdc <SystemClock_Config+0xc8>)
 8001b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b46:	6413      	str	r3, [r2, #64]	; 0x40
 8001b48:	4b24      	ldr	r3, [pc, #144]	; (8001bdc <SystemClock_Config+0xc8>)
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b54:	2300      	movs	r3, #0
 8001b56:	607b      	str	r3, [r7, #4]
 8001b58:	4b21      	ldr	r3, [pc, #132]	; (8001be0 <SystemClock_Config+0xcc>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a20      	ldr	r2, [pc, #128]	; (8001be0 <SystemClock_Config+0xcc>)
 8001b5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	4b1e      	ldr	r3, [pc, #120]	; (8001be0 <SystemClock_Config+0xcc>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b70:	2301      	movs	r3, #1
 8001b72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001b84:	230f      	movs	r3, #15
 8001b86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001b88:	2390      	movs	r3, #144	; 0x90
 8001b8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001b8c:	2306      	movs	r3, #6
 8001b8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001b90:	2305      	movs	r3, #5
 8001b92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b94:	f107 0320 	add.w	r3, r7, #32
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f002 fa41 	bl	8004020 <HAL_RCC_OscConfig>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ba4:	f000 f902 	bl	8001dac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ba8:	230f      	movs	r3, #15
 8001baa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bac:	2302      	movs	r3, #2
 8001bae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001bbe:	f107 030c 	add.w	r3, r7, #12
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f002 fca3 	bl	8004510 <HAL_RCC_ClockConfig>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001bd0:	f000 f8ec 	bl	8001dac <Error_Handler>
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	3750      	adds	r7, #80	; 0x50
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40007000 	.word	0x40007000

08001be4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <MX_I2C1_Init+0x50>)
 8001bea:	4a13      	ldr	r2, [pc, #76]	; (8001c38 <MX_I2C1_Init+0x54>)
 8001bec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001bee:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <MX_I2C1_Init+0x50>)
 8001bf0:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <MX_I2C1_Init+0x58>)
 8001bf2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <MX_I2C1_Init+0x50>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <MX_I2C1_Init+0x50>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <MX_I2C1_Init+0x50>)
 8001c02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c08:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <MX_I2C1_Init+0x50>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <MX_I2C1_Init+0x50>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c14:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <MX_I2C1_Init+0x50>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <MX_I2C1_Init+0x50>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c20:	4804      	ldr	r0, [pc, #16]	; (8001c34 <MX_I2C1_Init+0x50>)
 8001c22:	f000 fe3b 	bl	800289c <HAL_I2C_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c2c:	f000 f8be 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c30:	bf00      	nop
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000308 	.word	0x20000308
 8001c38:	40005400 	.word	0x40005400
 8001c3c:	000186a0 	.word	0x000186a0

08001c40 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c44:	4b17      	ldr	r3, [pc, #92]	; (8001ca4 <MX_SPI1_Init+0x64>)
 8001c46:	4a18      	ldr	r2, [pc, #96]	; (8001ca8 <MX_SPI1_Init+0x68>)
 8001c48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c4a:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <MX_SPI1_Init+0x64>)
 8001c4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c52:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <MX_SPI1_Init+0x64>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c58:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <MX_SPI1_Init+0x64>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c5e:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <MX_SPI1_Init+0x64>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c64:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <MX_SPI1_Init+0x64>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <MX_SPI1_Init+0x64>)
 8001c6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c70:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c72:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <MX_SPI1_Init+0x64>)
 8001c74:	2218      	movs	r2, #24
 8001c76:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c78:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <MX_SPI1_Init+0x64>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c7e:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <MX_SPI1_Init+0x64>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c84:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <MX_SPI1_Init+0x64>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c8a:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <MX_SPI1_Init+0x64>)
 8001c8c:	220a      	movs	r2, #10
 8001c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c90:	4804      	ldr	r0, [pc, #16]	; (8001ca4 <MX_SPI1_Init+0x64>)
 8001c92:	f002 fe09 	bl	80048a8 <HAL_SPI_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c9c:	f000 f886 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	2000035c 	.word	0x2000035c
 8001ca8:	40013000 	.word	0x40013000

08001cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	; 0x28
 8001cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb2:	f107 0314 	add.w	r3, r7, #20
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	60da      	str	r2, [r3, #12]
 8001cc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	4b36      	ldr	r3, [pc, #216]	; (8001da0 <MX_GPIO_Init+0xf4>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4a35      	ldr	r2, [pc, #212]	; (8001da0 <MX_GPIO_Init+0xf4>)
 8001ccc:	f043 0304 	orr.w	r3, r3, #4
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4b33      	ldr	r3, [pc, #204]	; (8001da0 <MX_GPIO_Init+0xf4>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	4b2f      	ldr	r3, [pc, #188]	; (8001da0 <MX_GPIO_Init+0xf4>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a2e      	ldr	r2, [pc, #184]	; (8001da0 <MX_GPIO_Init+0xf4>)
 8001ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b2c      	ldr	r3, [pc, #176]	; (8001da0 <MX_GPIO_Init+0xf4>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	4b28      	ldr	r3, [pc, #160]	; (8001da0 <MX_GPIO_Init+0xf4>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a27      	ldr	r2, [pc, #156]	; (8001da0 <MX_GPIO_Init+0xf4>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b25      	ldr	r3, [pc, #148]	; (8001da0 <MX_GPIO_Init+0xf4>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	607b      	str	r3, [r7, #4]
 8001d1a:	4b21      	ldr	r3, [pc, #132]	; (8001da0 <MX_GPIO_Init+0xf4>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	4a20      	ldr	r2, [pc, #128]	; (8001da0 <MX_GPIO_Init+0xf4>)
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	6313      	str	r3, [r2, #48]	; 0x30
 8001d26:	4b1e      	ldr	r3, [pc, #120]	; (8001da0 <MX_GPIO_Init+0xf4>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|SD_CS_Pin, GPIO_PIN_RESET);
 8001d32:	2200      	movs	r2, #0
 8001d34:	2112      	movs	r1, #18
 8001d36:	481b      	ldr	r0, [pc, #108]	; (8001da4 <MX_GPIO_Init+0xf8>)
 8001d38:	f000 fd96 	bl	8002868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2101      	movs	r1, #1
 8001d40:	4819      	ldr	r0, [pc, #100]	; (8001da8 <MX_GPIO_Init+0xfc>)
 8001d42:	f000 fd91 	bl	8002868 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 SD_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|SD_CS_Pin;
 8001d46:	2312      	movs	r3, #18
 8001d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d52:	2300      	movs	r3, #0
 8001d54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4811      	ldr	r0, [pc, #68]	; (8001da4 <MX_GPIO_Init+0xf8>)
 8001d5e:	f000 fbe7 	bl	8002530 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d62:	2301      	movs	r3, #1
 8001d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d66:	2301      	movs	r3, #1
 8001d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d72:	f107 0314 	add.w	r3, r7, #20
 8001d76:	4619      	mov	r1, r3
 8001d78:	480b      	ldr	r0, [pc, #44]	; (8001da8 <MX_GPIO_Init+0xfc>)
 8001d7a:	f000 fbd9 	bl	8002530 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4805      	ldr	r0, [pc, #20]	; (8001da8 <MX_GPIO_Init+0xfc>)
 8001d92:	f000 fbcd 	bl	8002530 <HAL_GPIO_Init>

}
 8001d96:	bf00      	nop
 8001d98:	3728      	adds	r7, #40	; 0x28
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40020000 	.word	0x40020000
 8001da8:	40020400 	.word	0x40020400

08001dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001db0:	b672      	cpsid	i
}
 8001db2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001db4:	e7fe      	b.n	8001db4 <Error_Handler+0x8>
	...

08001db8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	607b      	str	r3, [r7, #4]
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <HAL_MspInit+0x4c>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	4a0f      	ldr	r2, [pc, #60]	; (8001e04 <HAL_MspInit+0x4c>)
 8001dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dce:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <HAL_MspInit+0x4c>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd6:	607b      	str	r3, [r7, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	603b      	str	r3, [r7, #0]
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <HAL_MspInit+0x4c>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	4a08      	ldr	r2, [pc, #32]	; (8001e04 <HAL_MspInit+0x4c>)
 8001de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_MspInit+0x4c>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df2:	603b      	str	r3, [r7, #0]
 8001df4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40023800 	.word	0x40023800

08001e08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08a      	sub	sp, #40	; 0x28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a19      	ldr	r2, [pc, #100]	; (8001e8c <HAL_I2C_MspInit+0x84>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d12b      	bne.n	8001e82 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <HAL_I2C_MspInit+0x88>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a17      	ldr	r2, [pc, #92]	; (8001e90 <HAL_I2C_MspInit+0x88>)
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <HAL_I2C_MspInit+0x88>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e46:	23c0      	movs	r3, #192	; 0xc0
 8001e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e4a:	2312      	movs	r3, #18
 8001e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e52:	2303      	movs	r3, #3
 8001e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e56:	2304      	movs	r3, #4
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5a:	f107 0314 	add.w	r3, r7, #20
 8001e5e:	4619      	mov	r1, r3
 8001e60:	480c      	ldr	r0, [pc, #48]	; (8001e94 <HAL_I2C_MspInit+0x8c>)
 8001e62:	f000 fb65 	bl	8002530 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_I2C_MspInit+0x88>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	4a08      	ldr	r2, [pc, #32]	; (8001e90 <HAL_I2C_MspInit+0x88>)
 8001e70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e74:	6413      	str	r3, [r2, #64]	; 0x40
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_I2C_MspInit+0x88>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e82:	bf00      	nop
 8001e84:	3728      	adds	r7, #40	; 0x28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40005400 	.word	0x40005400
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40020400 	.word	0x40020400

08001e98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	; 0x28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a19      	ldr	r2, [pc, #100]	; (8001f1c <HAL_SPI_MspInit+0x84>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d12b      	bne.n	8001f12 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <HAL_SPI_MspInit+0x88>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec2:	4a17      	ldr	r2, [pc, #92]	; (8001f20 <HAL_SPI_MspInit+0x88>)
 8001ec4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eca:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <HAL_SPI_MspInit+0x88>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <HAL_SPI_MspInit+0x88>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a10      	ldr	r2, [pc, #64]	; (8001f20 <HAL_SPI_MspInit+0x88>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	; (8001f20 <HAL_SPI_MspInit+0x88>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ef2:	23e0      	movs	r3, #224	; 0xe0
 8001ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efe:	2303      	movs	r3, #3
 8001f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f02:	2305      	movs	r3, #5
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f06:	f107 0314 	add.w	r3, r7, #20
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4805      	ldr	r0, [pc, #20]	; (8001f24 <HAL_SPI_MspInit+0x8c>)
 8001f0e:	f000 fb0f 	bl	8002530 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f12:	bf00      	nop
 8001f14:	3728      	adds	r7, #40	; 0x28
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40013000 	.word	0x40013000
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40020000 	.word	0x40020000

08001f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f2c:	e7fe      	b.n	8001f2c <NMI_Handler+0x4>

08001f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f32:	e7fe      	b.n	8001f32 <HardFault_Handler+0x4>

08001f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f38:	e7fe      	b.n	8001f38 <MemManage_Handler+0x4>

08001f3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f3e:	e7fe      	b.n	8001f3e <BusFault_Handler+0x4>

08001f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f44:	e7fe      	b.n	8001f44 <UsageFault_Handler+0x4>

08001f46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001f74:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <SysTick_Handler+0x38>)
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <SysTick_Handler+0x18>
		Timer1--;
 8001f7c:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <SysTick_Handler+0x38>)
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <SysTick_Handler+0x38>)
 8001f86:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 8001f88:	4b08      	ldr	r3, [pc, #32]	; (8001fac <SysTick_Handler+0x3c>)
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d005      	beq.n	8001f9c <SysTick_Handler+0x2c>
		Timer2--;
 8001f90:	4b06      	ldr	r3, [pc, #24]	; (8001fac <SysTick_Handler+0x3c>)
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	4b04      	ldr	r3, [pc, #16]	; (8001fac <SysTick_Handler+0x3c>)
 8001f9a:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f9c:	f000 f966 	bl	800226c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001fa0:	f000 fab9 	bl	8002516 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20000300 	.word	0x20000300
 8001fac:	20000302 	.word	0x20000302

08001fb0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001fb4:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <OTG_FS_IRQHandler+0x10>)
 8001fb6:	f000 ff05 	bl	8002dc4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20002298 	.word	0x20002298

08001fc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
	return 1;
 8001fc8:	2301      	movs	r3, #1
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <_kill>:

int _kill(int pid, int sig)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001fde:	f009 fe3f 	bl	800bc60 <__errno>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2216      	movs	r2, #22
 8001fe6:	601a      	str	r2, [r3, #0]
	return -1;
 8001fe8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <_exit>:

void _exit (int status)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff ffe7 	bl	8001fd4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002006:	e7fe      	b.n	8002006 <_exit+0x12>

08002008 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	e00a      	b.n	8002030 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800201a:	f3af 8000 	nop.w
 800201e:	4601      	mov	r1, r0
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	1c5a      	adds	r2, r3, #1
 8002024:	60ba      	str	r2, [r7, #8]
 8002026:	b2ca      	uxtb	r2, r1
 8002028:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	3301      	adds	r3, #1
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	429a      	cmp	r2, r3
 8002036:	dbf0      	blt.n	800201a <_read+0x12>
	}

return len;
 8002038:	687b      	ldr	r3, [r7, #4]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b086      	sub	sp, #24
 8002046:	af00      	add	r7, sp, #0
 8002048:	60f8      	str	r0, [r7, #12]
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	e009      	b.n	8002068 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	1c5a      	adds	r2, r3, #1
 8002058:	60ba      	str	r2, [r7, #8]
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	3301      	adds	r3, #1
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	429a      	cmp	r2, r3
 800206e:	dbf1      	blt.n	8002054 <_write+0x12>
	}
	return len;
 8002070:	687b      	ldr	r3, [r7, #4]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <_close>:

int _close(int file)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
	return -1;
 8002082:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020a2:	605a      	str	r2, [r3, #4]
	return 0;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <_isatty>:

int _isatty(int file)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
	return 1;
 80020ba:	2301      	movs	r3, #1
}
 80020bc:	4618      	mov	r0, r3
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
	return 0;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020ec:	4a14      	ldr	r2, [pc, #80]	; (8002140 <_sbrk+0x5c>)
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <_sbrk+0x60>)
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020f8:	4b13      	ldr	r3, [pc, #76]	; (8002148 <_sbrk+0x64>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d102      	bne.n	8002106 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <_sbrk+0x64>)
 8002102:	4a12      	ldr	r2, [pc, #72]	; (800214c <_sbrk+0x68>)
 8002104:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002106:	4b10      	ldr	r3, [pc, #64]	; (8002148 <_sbrk+0x64>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4413      	add	r3, r2
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	429a      	cmp	r2, r3
 8002112:	d207      	bcs.n	8002124 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002114:	f009 fda4 	bl	800bc60 <__errno>
 8002118:	4603      	mov	r3, r0
 800211a:	220c      	movs	r2, #12
 800211c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800211e:	f04f 33ff 	mov.w	r3, #4294967295
 8002122:	e009      	b.n	8002138 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <_sbrk+0x64>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800212a:	4b07      	ldr	r3, [pc, #28]	; (8002148 <_sbrk+0x64>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	4a05      	ldr	r2, [pc, #20]	; (8002148 <_sbrk+0x64>)
 8002134:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002136:	68fb      	ldr	r3, [r7, #12]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20020000 	.word	0x20020000
 8002144:	00000400 	.word	0x00000400
 8002148:	20000d74 	.word	0x20000d74
 800214c:	200029d8 	.word	0x200029d8

08002150 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <SystemInit+0x20>)
 8002156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215a:	4a05      	ldr	r2, [pc, #20]	; (8002170 <SystemInit+0x20>)
 800215c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002160:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002174:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002178:	480d      	ldr	r0, [pc, #52]	; (80021b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800217a:	490e      	ldr	r1, [pc, #56]	; (80021b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800217c:	4a0e      	ldr	r2, [pc, #56]	; (80021b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800217e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002180:	e002      	b.n	8002188 <LoopCopyDataInit>

08002182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002186:	3304      	adds	r3, #4

08002188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800218a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800218c:	d3f9      	bcc.n	8002182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800218e:	4a0b      	ldr	r2, [pc, #44]	; (80021bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002190:	4c0b      	ldr	r4, [pc, #44]	; (80021c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002194:	e001      	b.n	800219a <LoopFillZerobss>

08002196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002198:	3204      	adds	r2, #4

0800219a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800219a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800219c:	d3fb      	bcc.n	8002196 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800219e:	f7ff ffd7 	bl	8002150 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021a2:	f009 fd63 	bl	800bc6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021a6:	f7ff fbc5 	bl	8001934 <main>
  bx  lr    
 80021aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80021ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b4:	200002e4 	.word	0x200002e4
  ldr r2, =_sidata
 80021b8:	0800eff4 	.word	0x0800eff4
  ldr r2, =_sbss
 80021bc:	200002e4 	.word	0x200002e4
  ldr r4, =_ebss
 80021c0:	200029d4 	.word	0x200029d4

080021c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021c4:	e7fe      	b.n	80021c4 <ADC_IRQHandler>
	...

080021c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021cc:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <HAL_Init+0x40>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a0d      	ldr	r2, [pc, #52]	; (8002208 <HAL_Init+0x40>)
 80021d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021d8:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <HAL_Init+0x40>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <HAL_Init+0x40>)
 80021de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021e4:	4b08      	ldr	r3, [pc, #32]	; (8002208 <HAL_Init+0x40>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a07      	ldr	r2, [pc, #28]	; (8002208 <HAL_Init+0x40>)
 80021ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f0:	2003      	movs	r0, #3
 80021f2:	f000 f94f 	bl	8002494 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021f6:	200f      	movs	r0, #15
 80021f8:	f000 f808 	bl	800220c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021fc:	f7ff fddc 	bl	8001db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40023c00 	.word	0x40023c00

0800220c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002214:	4b12      	ldr	r3, [pc, #72]	; (8002260 <HAL_InitTick+0x54>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_InitTick+0x58>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	4619      	mov	r1, r3
 800221e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002222:	fbb3 f3f1 	udiv	r3, r3, r1
 8002226:	fbb2 f3f3 	udiv	r3, r2, r3
 800222a:	4618      	mov	r0, r3
 800222c:	f000 f967 	bl	80024fe <HAL_SYSTICK_Config>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e00e      	b.n	8002258 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b0f      	cmp	r3, #15
 800223e:	d80a      	bhi.n	8002256 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002240:	2200      	movs	r2, #0
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	f04f 30ff 	mov.w	r0, #4294967295
 8002248:	f000 f92f 	bl	80024aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800224c:	4a06      	ldr	r2, [pc, #24]	; (8002268 <HAL_InitTick+0x5c>)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	e000      	b.n	8002258 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
}
 8002258:	4618      	mov	r0, r3
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20000004 	.word	0x20000004
 8002264:	2000000c 	.word	0x2000000c
 8002268:	20000008 	.word	0x20000008

0800226c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_IncTick+0x20>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	461a      	mov	r2, r3
 8002276:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_IncTick+0x24>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4413      	add	r3, r2
 800227c:	4a04      	ldr	r2, [pc, #16]	; (8002290 <HAL_IncTick+0x24>)
 800227e:	6013      	str	r3, [r2, #0]
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	2000000c 	.word	0x2000000c
 8002290:	20000d78 	.word	0x20000d78

08002294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return uwTick;
 8002298:	4b03      	ldr	r3, [pc, #12]	; (80022a8 <HAL_GetTick+0x14>)
 800229a:	681b      	ldr	r3, [r3, #0]
}
 800229c:	4618      	mov	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	20000d78 	.word	0x20000d78

080022ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022b4:	f7ff ffee 	bl	8002294 <HAL_GetTick>
 80022b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c4:	d005      	beq.n	80022d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022c6:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <HAL_Delay+0x44>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4413      	add	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022d2:	bf00      	nop
 80022d4:	f7ff ffde 	bl	8002294 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d8f7      	bhi.n	80022d4 <HAL_Delay+0x28>
  {
  }
}
 80022e4:	bf00      	nop
 80022e6:	bf00      	nop
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	2000000c 	.word	0x2000000c

080022f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002304:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <__NVIC_SetPriorityGrouping+0x44>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002310:	4013      	ands	r3, r2
 8002312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800231c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002326:	4a04      	ldr	r2, [pc, #16]	; (8002338 <__NVIC_SetPriorityGrouping+0x44>)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	60d3      	str	r3, [r2, #12]
}
 800232c:	bf00      	nop
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002340:	4b04      	ldr	r3, [pc, #16]	; (8002354 <__NVIC_GetPriorityGrouping+0x18>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	0a1b      	lsrs	r3, r3, #8
 8002346:	f003 0307 	and.w	r3, r3, #7
}
 800234a:	4618      	mov	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	2b00      	cmp	r3, #0
 8002368:	db0b      	blt.n	8002382 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	f003 021f 	and.w	r2, r3, #31
 8002370:	4907      	ldr	r1, [pc, #28]	; (8002390 <__NVIC_EnableIRQ+0x38>)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	2001      	movs	r0, #1
 800237a:	fa00 f202 	lsl.w	r2, r0, r2
 800237e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	e000e100 	.word	0xe000e100

08002394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	6039      	str	r1, [r7, #0]
 800239e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	db0a      	blt.n	80023be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	490c      	ldr	r1, [pc, #48]	; (80023e0 <__NVIC_SetPriority+0x4c>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	0112      	lsls	r2, r2, #4
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	440b      	add	r3, r1
 80023b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023bc:	e00a      	b.n	80023d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4908      	ldr	r1, [pc, #32]	; (80023e4 <__NVIC_SetPriority+0x50>)
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	3b04      	subs	r3, #4
 80023cc:	0112      	lsls	r2, r2, #4
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	440b      	add	r3, r1
 80023d2:	761a      	strb	r2, [r3, #24]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000e100 	.word	0xe000e100
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	; 0x24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f1c3 0307 	rsb	r3, r3, #7
 8002402:	2b04      	cmp	r3, #4
 8002404:	bf28      	it	cs
 8002406:	2304      	movcs	r3, #4
 8002408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3304      	adds	r3, #4
 800240e:	2b06      	cmp	r3, #6
 8002410:	d902      	bls.n	8002418 <NVIC_EncodePriority+0x30>
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3b03      	subs	r3, #3
 8002416:	e000      	b.n	800241a <NVIC_EncodePriority+0x32>
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	f04f 32ff 	mov.w	r2, #4294967295
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43da      	mvns	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	401a      	ands	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002430:	f04f 31ff 	mov.w	r1, #4294967295
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	fa01 f303 	lsl.w	r3, r1, r3
 800243a:	43d9      	mvns	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	4313      	orrs	r3, r2
         );
}
 8002442:	4618      	mov	r0, r3
 8002444:	3724      	adds	r7, #36	; 0x24
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3b01      	subs	r3, #1
 800245c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002460:	d301      	bcc.n	8002466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002462:	2301      	movs	r3, #1
 8002464:	e00f      	b.n	8002486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002466:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <SysTick_Config+0x40>)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3b01      	subs	r3, #1
 800246c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800246e:	210f      	movs	r1, #15
 8002470:	f04f 30ff 	mov.w	r0, #4294967295
 8002474:	f7ff ff8e 	bl	8002394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <SysTick_Config+0x40>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800247e:	4b04      	ldr	r3, [pc, #16]	; (8002490 <SysTick_Config+0x40>)
 8002480:	2207      	movs	r2, #7
 8002482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	e000e010 	.word	0xe000e010

08002494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff ff29 	bl	80022f4 <__NVIC_SetPriorityGrouping>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b086      	sub	sp, #24
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	4603      	mov	r3, r0
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
 80024b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024bc:	f7ff ff3e 	bl	800233c <__NVIC_GetPriorityGrouping>
 80024c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	68b9      	ldr	r1, [r7, #8]
 80024c6:	6978      	ldr	r0, [r7, #20]
 80024c8:	f7ff ff8e 	bl	80023e8 <NVIC_EncodePriority>
 80024cc:	4602      	mov	r2, r0
 80024ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d2:	4611      	mov	r1, r2
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff5d 	bl	8002394 <__NVIC_SetPriority>
}
 80024da:	bf00      	nop
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff31 	bl	8002358 <__NVIC_EnableIRQ>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff ffa2 	bl	8002450 <SysTick_Config>
 800250c:	4603      	mov	r3, r0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800251a:	f000 f802 	bl	8002522 <HAL_SYSTICK_Callback>
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002522:	b480      	push	{r7}
 8002524:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002526:	bf00      	nop
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002530:	b480      	push	{r7}
 8002532:	b089      	sub	sp, #36	; 0x24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800253e:	2300      	movs	r3, #0
 8002540:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002542:	2300      	movs	r3, #0
 8002544:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
 800254a:	e159      	b.n	8002800 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800254c:	2201      	movs	r2, #1
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	4013      	ands	r3, r2
 800255e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	429a      	cmp	r2, r3
 8002566:	f040 8148 	bne.w	80027fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	2b01      	cmp	r3, #1
 8002574:	d005      	beq.n	8002582 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800257e:	2b02      	cmp	r3, #2
 8002580:	d130      	bne.n	80025e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	2203      	movs	r2, #3
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43db      	mvns	r3, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4013      	ands	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025b8:	2201      	movs	r2, #1
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	091b      	lsrs	r3, r3, #4
 80025ce:	f003 0201 	and.w	r2, r3, #1
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4313      	orrs	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d017      	beq.n	8002620 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	2203      	movs	r2, #3
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 0303 	and.w	r3, r3, #3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d123      	bne.n	8002674 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	08da      	lsrs	r2, r3, #3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3208      	adds	r2, #8
 8002634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002638:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	220f      	movs	r2, #15
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4013      	ands	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	691a      	ldr	r2, [r3, #16]
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	08da      	lsrs	r2, r3, #3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	3208      	adds	r2, #8
 800266e:	69b9      	ldr	r1, [r7, #24]
 8002670:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	2203      	movs	r2, #3
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f003 0203 	and.w	r2, r3, #3
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 80a2 	beq.w	80027fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	4b57      	ldr	r3, [pc, #348]	; (8002818 <HAL_GPIO_Init+0x2e8>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	4a56      	ldr	r2, [pc, #344]	; (8002818 <HAL_GPIO_Init+0x2e8>)
 80026c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026c4:	6453      	str	r3, [r2, #68]	; 0x44
 80026c6:	4b54      	ldr	r3, [pc, #336]	; (8002818 <HAL_GPIO_Init+0x2e8>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026d2:	4a52      	ldr	r2, [pc, #328]	; (800281c <HAL_GPIO_Init+0x2ec>)
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	089b      	lsrs	r3, r3, #2
 80026d8:	3302      	adds	r3, #2
 80026da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	220f      	movs	r2, #15
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4013      	ands	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a49      	ldr	r2, [pc, #292]	; (8002820 <HAL_GPIO_Init+0x2f0>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d019      	beq.n	8002732 <HAL_GPIO_Init+0x202>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a48      	ldr	r2, [pc, #288]	; (8002824 <HAL_GPIO_Init+0x2f4>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d013      	beq.n	800272e <HAL_GPIO_Init+0x1fe>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a47      	ldr	r2, [pc, #284]	; (8002828 <HAL_GPIO_Init+0x2f8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d00d      	beq.n	800272a <HAL_GPIO_Init+0x1fa>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a46      	ldr	r2, [pc, #280]	; (800282c <HAL_GPIO_Init+0x2fc>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d007      	beq.n	8002726 <HAL_GPIO_Init+0x1f6>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a45      	ldr	r2, [pc, #276]	; (8002830 <HAL_GPIO_Init+0x300>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d101      	bne.n	8002722 <HAL_GPIO_Init+0x1f2>
 800271e:	2304      	movs	r3, #4
 8002720:	e008      	b.n	8002734 <HAL_GPIO_Init+0x204>
 8002722:	2307      	movs	r3, #7
 8002724:	e006      	b.n	8002734 <HAL_GPIO_Init+0x204>
 8002726:	2303      	movs	r3, #3
 8002728:	e004      	b.n	8002734 <HAL_GPIO_Init+0x204>
 800272a:	2302      	movs	r3, #2
 800272c:	e002      	b.n	8002734 <HAL_GPIO_Init+0x204>
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <HAL_GPIO_Init+0x204>
 8002732:	2300      	movs	r3, #0
 8002734:	69fa      	ldr	r2, [r7, #28]
 8002736:	f002 0203 	and.w	r2, r2, #3
 800273a:	0092      	lsls	r2, r2, #2
 800273c:	4093      	lsls	r3, r2
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002744:	4935      	ldr	r1, [pc, #212]	; (800281c <HAL_GPIO_Init+0x2ec>)
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	089b      	lsrs	r3, r3, #2
 800274a:	3302      	adds	r3, #2
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002752:	4b38      	ldr	r3, [pc, #224]	; (8002834 <HAL_GPIO_Init+0x304>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002776:	4a2f      	ldr	r2, [pc, #188]	; (8002834 <HAL_GPIO_Init+0x304>)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800277c:	4b2d      	ldr	r3, [pc, #180]	; (8002834 <HAL_GPIO_Init+0x304>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027a0:	4a24      	ldr	r2, [pc, #144]	; (8002834 <HAL_GPIO_Init+0x304>)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027a6:	4b23      	ldr	r3, [pc, #140]	; (8002834 <HAL_GPIO_Init+0x304>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4013      	ands	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ca:	4a1a      	ldr	r2, [pc, #104]	; (8002834 <HAL_GPIO_Init+0x304>)
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027d0:	4b18      	ldr	r3, [pc, #96]	; (8002834 <HAL_GPIO_Init+0x304>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027f4:	4a0f      	ldr	r2, [pc, #60]	; (8002834 <HAL_GPIO_Init+0x304>)
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	3301      	adds	r3, #1
 80027fe:	61fb      	str	r3, [r7, #28]
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	2b0f      	cmp	r3, #15
 8002804:	f67f aea2 	bls.w	800254c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002808:	bf00      	nop
 800280a:	bf00      	nop
 800280c:	3724      	adds	r7, #36	; 0x24
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40023800 	.word	0x40023800
 800281c:	40013800 	.word	0x40013800
 8002820:	40020000 	.word	0x40020000
 8002824:	40020400 	.word	0x40020400
 8002828:	40020800 	.word	0x40020800
 800282c:	40020c00 	.word	0x40020c00
 8002830:	40021000 	.word	0x40021000
 8002834:	40013c00 	.word	0x40013c00

08002838 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	887b      	ldrh	r3, [r7, #2]
 800284a:	4013      	ands	r3, r2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002850:	2301      	movs	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
 8002854:	e001      	b.n	800285a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002856:	2300      	movs	r3, #0
 8002858:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800285a:	7bfb      	ldrb	r3, [r7, #15]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	807b      	strh	r3, [r7, #2]
 8002874:	4613      	mov	r3, r2
 8002876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002878:	787b      	ldrb	r3, [r7, #1]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800287e:	887a      	ldrh	r2, [r7, #2]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002884:	e003      	b.n	800288e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002886:	887b      	ldrh	r3, [r7, #2]
 8002888:	041a      	lsls	r2, r3, #16
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	619a      	str	r2, [r3, #24]
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e12b      	b.n	8002b06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d106      	bne.n	80028c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7ff faa0 	bl	8001e08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2224      	movs	r2, #36	; 0x24
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0201 	bic.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002900:	f001 ffbe 	bl	8004880 <HAL_RCC_GetPCLK1Freq>
 8002904:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	4a81      	ldr	r2, [pc, #516]	; (8002b10 <HAL_I2C_Init+0x274>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d807      	bhi.n	8002920 <HAL_I2C_Init+0x84>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4a80      	ldr	r2, [pc, #512]	; (8002b14 <HAL_I2C_Init+0x278>)
 8002914:	4293      	cmp	r3, r2
 8002916:	bf94      	ite	ls
 8002918:	2301      	movls	r3, #1
 800291a:	2300      	movhi	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	e006      	b.n	800292e <HAL_I2C_Init+0x92>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4a7d      	ldr	r2, [pc, #500]	; (8002b18 <HAL_I2C_Init+0x27c>)
 8002924:	4293      	cmp	r3, r2
 8002926:	bf94      	ite	ls
 8002928:	2301      	movls	r3, #1
 800292a:	2300      	movhi	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e0e7      	b.n	8002b06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	4a78      	ldr	r2, [pc, #480]	; (8002b1c <HAL_I2C_Init+0x280>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	0c9b      	lsrs	r3, r3, #18
 8002940:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	430a      	orrs	r2, r1
 8002954:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	4a6a      	ldr	r2, [pc, #424]	; (8002b10 <HAL_I2C_Init+0x274>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d802      	bhi.n	8002970 <HAL_I2C_Init+0xd4>
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	3301      	adds	r3, #1
 800296e:	e009      	b.n	8002984 <HAL_I2C_Init+0xe8>
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002976:	fb02 f303 	mul.w	r3, r2, r3
 800297a:	4a69      	ldr	r2, [pc, #420]	; (8002b20 <HAL_I2C_Init+0x284>)
 800297c:	fba2 2303 	umull	r2, r3, r2, r3
 8002980:	099b      	lsrs	r3, r3, #6
 8002982:	3301      	adds	r3, #1
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6812      	ldr	r2, [r2, #0]
 8002988:	430b      	orrs	r3, r1
 800298a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002996:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	495c      	ldr	r1, [pc, #368]	; (8002b10 <HAL_I2C_Init+0x274>)
 80029a0:	428b      	cmp	r3, r1
 80029a2:	d819      	bhi.n	80029d8 <HAL_I2C_Init+0x13c>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	1e59      	subs	r1, r3, #1
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80029b2:	1c59      	adds	r1, r3, #1
 80029b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029b8:	400b      	ands	r3, r1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00a      	beq.n	80029d4 <HAL_I2C_Init+0x138>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1e59      	subs	r1, r3, #1
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80029cc:	3301      	adds	r3, #1
 80029ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d2:	e051      	b.n	8002a78 <HAL_I2C_Init+0x1dc>
 80029d4:	2304      	movs	r3, #4
 80029d6:	e04f      	b.n	8002a78 <HAL_I2C_Init+0x1dc>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d111      	bne.n	8002a04 <HAL_I2C_Init+0x168>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	1e58      	subs	r0, r3, #1
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6859      	ldr	r1, [r3, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	440b      	add	r3, r1
 80029ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80029f2:	3301      	adds	r3, #1
 80029f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	bf0c      	ite	eq
 80029fc:	2301      	moveq	r3, #1
 80029fe:	2300      	movne	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	e012      	b.n	8002a2a <HAL_I2C_Init+0x18e>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	1e58      	subs	r0, r3, #1
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6859      	ldr	r1, [r3, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	0099      	lsls	r1, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	bf0c      	ite	eq
 8002a24:	2301      	moveq	r3, #1
 8002a26:	2300      	movne	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_I2C_Init+0x196>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e022      	b.n	8002a78 <HAL_I2C_Init+0x1dc>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10e      	bne.n	8002a58 <HAL_I2C_Init+0x1bc>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1e58      	subs	r0, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6859      	ldr	r1, [r3, #4]
 8002a42:	460b      	mov	r3, r1
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	440b      	add	r3, r1
 8002a48:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a56:	e00f      	b.n	8002a78 <HAL_I2C_Init+0x1dc>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	1e58      	subs	r0, r3, #1
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6859      	ldr	r1, [r3, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	0099      	lsls	r1, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a6e:	3301      	adds	r3, #1
 8002a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	6809      	ldr	r1, [r1, #0]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69da      	ldr	r2, [r3, #28]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002aa6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6911      	ldr	r1, [r2, #16]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	68d2      	ldr	r2, [r2, #12]
 8002ab2:	4311      	orrs	r1, r2
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6812      	ldr	r2, [r2, #0]
 8002ab8:	430b      	orrs	r3, r1
 8002aba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695a      	ldr	r2, [r3, #20]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0201 	orr.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2220      	movs	r2, #32
 8002af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	000186a0 	.word	0x000186a0
 8002b14:	001e847f 	.word	0x001e847f
 8002b18:	003d08ff 	.word	0x003d08ff
 8002b1c:	431bde83 	.word	0x431bde83
 8002b20:	10624dd3 	.word	0x10624dd3

08002b24 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b26:	b08f      	sub	sp, #60	; 0x3c
 8002b28:	af0a      	add	r7, sp, #40	; 0x28
 8002b2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e10f      	b.n	8002d56 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d106      	bne.n	8002b56 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f008 fd7b 	bl	800b64c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2203      	movs	r2, #3
 8002b5a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d102      	bne.n	8002b70 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f002 fbde 	bl	8005336 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	603b      	str	r3, [r7, #0]
 8002b80:	687e      	ldr	r6, [r7, #4]
 8002b82:	466d      	mov	r5, sp
 8002b84:	f106 0410 	add.w	r4, r6, #16
 8002b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b94:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b98:	1d33      	adds	r3, r6, #4
 8002b9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b9c:	6838      	ldr	r0, [r7, #0]
 8002b9e:	f002 fab5 	bl	800510c <USB_CoreInit>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2202      	movs	r2, #2
 8002bac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0d0      	b.n	8002d56 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2100      	movs	r1, #0
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f002 fbcc 	bl	8005358 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	73fb      	strb	r3, [r7, #15]
 8002bc4:	e04a      	b.n	8002c5c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bc6:	7bfa      	ldrb	r2, [r7, #15]
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	333d      	adds	r3, #61	; 0x3d
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bda:	7bfa      	ldrb	r2, [r7, #15]
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4413      	add	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	333c      	adds	r3, #60	; 0x3c
 8002bea:	7bfa      	ldrb	r2, [r7, #15]
 8002bec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bee:	7bfa      	ldrb	r2, [r7, #15]
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	b298      	uxth	r0, r3
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	3344      	adds	r3, #68	; 0x44
 8002c02:	4602      	mov	r2, r0
 8002c04:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c06:	7bfa      	ldrb	r2, [r7, #15]
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4413      	add	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	3340      	adds	r3, #64	; 0x40
 8002c16:	2200      	movs	r2, #0
 8002c18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c1a:	7bfa      	ldrb	r2, [r7, #15]
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	4413      	add	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	3348      	adds	r3, #72	; 0x48
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c2e:	7bfa      	ldrb	r2, [r7, #15]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	334c      	adds	r3, #76	; 0x4c
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c42:	7bfa      	ldrb	r2, [r7, #15]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	3354      	adds	r3, #84	; 0x54
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
 8002c5c:	7bfa      	ldrb	r2, [r7, #15]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d3af      	bcc.n	8002bc6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c66:	2300      	movs	r3, #0
 8002c68:	73fb      	strb	r3, [r7, #15]
 8002c6a:	e044      	b.n	8002cf6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c6c:	7bfa      	ldrb	r2, [r7, #15]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002c7e:	2200      	movs	r2, #0
 8002c80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002c94:	7bfa      	ldrb	r2, [r7, #15]
 8002c96:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c98:	7bfa      	ldrb	r2, [r7, #15]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002caa:	2200      	movs	r2, #0
 8002cac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cae:	7bfa      	ldrb	r2, [r7, #15]
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cc4:	7bfa      	ldrb	r2, [r7, #15]
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4413      	add	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cda:	7bfa      	ldrb	r2, [r7, #15]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	73fb      	strb	r3, [r7, #15]
 8002cf6:	7bfa      	ldrb	r2, [r7, #15]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d3b5      	bcc.n	8002c6c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	603b      	str	r3, [r7, #0]
 8002d06:	687e      	ldr	r6, [r7, #4]
 8002d08:	466d      	mov	r5, sp
 8002d0a:	f106 0410 	add.w	r4, r6, #16
 8002d0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d1e:	1d33      	adds	r3, r6, #4
 8002d20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d22:	6838      	ldr	r0, [r7, #0]
 8002d24:	f002 fb64 	bl	80053f0 <USB_DevInit>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d005      	beq.n	8002d3a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2202      	movs	r2, #2
 8002d32:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e00d      	b.n	8002d56 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f003 fcb3 	bl	80066ba <USB_DevDisconnect>

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d5e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b084      	sub	sp, #16
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d101      	bne.n	8002d7a <HAL_PCD_Start+0x1c>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e020      	b.n	8002dbc <HAL_PCD_Start+0x5e>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d109      	bne.n	8002d9e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d005      	beq.n	8002d9e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f002 fab6 	bl	8005314 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f003 fc63 	bl	8006678 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002dc4:	b590      	push	{r4, r7, lr}
 8002dc6:	b08d      	sub	sp, #52	; 0x34
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f003 fd21 	bl	8006822 <USB_GetMode>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f040 848a 	bne.w	80036fc <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f003 fc85 	bl	80066fc <USB_ReadInterrupts>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 8480 	beq.w	80036fa <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	0a1b      	lsrs	r3, r3, #8
 8002e04:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f003 fc72 	bl	80066fc <USB_ReadInterrupts>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d107      	bne.n	8002e32 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695a      	ldr	r2, [r3, #20]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f002 0202 	and.w	r2, r2, #2
 8002e30:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f003 fc60 	bl	80066fc <USB_ReadInterrupts>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	f003 0310 	and.w	r3, r3, #16
 8002e42:	2b10      	cmp	r3, #16
 8002e44:	d161      	bne.n	8002f0a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	699a      	ldr	r2, [r3, #24]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0210 	bic.w	r2, r2, #16
 8002e54:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	f003 020f 	and.w	r2, r3, #15
 8002e62:	4613      	mov	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	4413      	add	r3, r2
 8002e72:	3304      	adds	r3, #4
 8002e74:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	0c5b      	lsrs	r3, r3, #17
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d124      	bne.n	8002ecc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d035      	beq.n	8002efa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	6a38      	ldr	r0, [r7, #32]
 8002ea2:	f003 fa97 	bl	80063d4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	691a      	ldr	r2, [r3, #16]
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	091b      	lsrs	r3, r3, #4
 8002eae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002eb2:	441a      	add	r2, r3
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	6a1a      	ldr	r2, [r3, #32]
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	091b      	lsrs	r3, r3, #4
 8002ec0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ec4:	441a      	add	r2, r3
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	621a      	str	r2, [r3, #32]
 8002eca:	e016      	b.n	8002efa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	0c5b      	lsrs	r3, r3, #17
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	2b06      	cmp	r3, #6
 8002ed6:	d110      	bne.n	8002efa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ede:	2208      	movs	r2, #8
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	6a38      	ldr	r0, [r7, #32]
 8002ee4:	f003 fa76 	bl	80063d4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	6a1a      	ldr	r2, [r3, #32]
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	091b      	lsrs	r3, r3, #4
 8002ef0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ef4:	441a      	add	r2, r3
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699a      	ldr	r2, [r3, #24]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f042 0210 	orr.w	r2, r2, #16
 8002f08:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f003 fbf4 	bl	80066fc <USB_ReadInterrupts>
 8002f14:	4603      	mov	r3, r0
 8002f16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f1a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f1e:	f040 80a7 	bne.w	8003070 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f003 fbf9 	bl	8006722 <USB_ReadDevAllOutEpInterrupt>
 8002f30:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002f32:	e099      	b.n	8003068 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 808e 	beq.w	800305c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	4611      	mov	r1, r2
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f003 fc1d 	bl	800678a <USB_ReadDevOutEPInterrupt>
 8002f50:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00c      	beq.n	8002f76 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	015a      	lsls	r2, r3, #5
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	4413      	add	r3, r2
 8002f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f68:	461a      	mov	r2, r3
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 fec3 	bl	8003cfc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00c      	beq.n	8002f9a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	015a      	lsls	r2, r3, #5
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	4413      	add	r3, r2
 8002f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	2308      	movs	r3, #8
 8002f90:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 ff99 	bl	8003ecc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	f003 0310 	and.w	r3, r3, #16
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	015a      	lsls	r2, r3, #5
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	2310      	movs	r3, #16
 8002fb4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d030      	beq.n	8003022 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc8:	2b80      	cmp	r3, #128	; 0x80
 8002fca:	d109      	bne.n	8002fe0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	69fa      	ldr	r2, [r7, #28]
 8002fd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fde:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	78db      	ldrb	r3, [r3, #3]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d108      	bne.n	8003010 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2200      	movs	r2, #0
 8003002:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	b2db      	uxtb	r3, r3
 8003008:	4619      	mov	r1, r3
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f008 fc1a 	bl	800b844 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	015a      	lsls	r2, r3, #5
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	4413      	add	r3, r2
 8003018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800301c:	461a      	mov	r2, r3
 800301e:	2302      	movs	r3, #2
 8003020:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	f003 0320 	and.w	r3, r3, #32
 8003028:	2b00      	cmp	r3, #0
 800302a:	d008      	beq.n	800303e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	015a      	lsls	r2, r3, #5
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	4413      	add	r3, r2
 8003034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003038:	461a      	mov	r2, r3
 800303a:	2320      	movs	r3, #32
 800303c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d009      	beq.n	800305c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	015a      	lsls	r2, r3, #5
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	4413      	add	r3, r2
 8003050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003054:	461a      	mov	r2, r3
 8003056:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800305a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	3301      	adds	r3, #1
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003064:	085b      	lsrs	r3, r3, #1
 8003066:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306a:	2b00      	cmp	r3, #0
 800306c:	f47f af62 	bne.w	8002f34 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f003 fb41 	bl	80066fc <USB_ReadInterrupts>
 800307a:	4603      	mov	r3, r0
 800307c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003080:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003084:	f040 80db 	bne.w	800323e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f003 fb62 	bl	8006756 <USB_ReadDevAllInEpInterrupt>
 8003092:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003098:	e0cd      	b.n	8003236 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800309a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 80c2 	beq.w	800322a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	4611      	mov	r1, r2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f003 fb88 	bl	80067c6 <USB_ReadDevInEPInterrupt>
 80030b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d057      	beq.n	8003172 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	f003 030f 	and.w	r3, r3, #15
 80030c8:	2201      	movs	r2, #1
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	43db      	mvns	r3, r3
 80030dc:	69f9      	ldr	r1, [r7, #28]
 80030de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030e2:	4013      	ands	r3, r2
 80030e4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030f2:	461a      	mov	r2, r3
 80030f4:	2301      	movs	r3, #1
 80030f6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d132      	bne.n	8003166 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003104:	4613      	mov	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	334c      	adds	r3, #76	; 0x4c
 8003110:	6819      	ldr	r1, [r3, #0]
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003116:	4613      	mov	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4413      	add	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4403      	add	r3, r0
 8003120:	3348      	adds	r3, #72	; 0x48
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4419      	add	r1, r3
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312a:	4613      	mov	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	4413      	add	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4403      	add	r3, r0
 8003134:	334c      	adds	r3, #76	; 0x4c
 8003136:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313a:	2b00      	cmp	r3, #0
 800313c:	d113      	bne.n	8003166 <HAL_PCD_IRQHandler+0x3a2>
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003142:	4613      	mov	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4413      	add	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	440b      	add	r3, r1
 800314c:	3354      	adds	r3, #84	; 0x54
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d108      	bne.n	8003166 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6818      	ldr	r0, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800315e:	461a      	mov	r2, r3
 8003160:	2101      	movs	r1, #1
 8003162:	f003 fb8f 	bl	8006884 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	b2db      	uxtb	r3, r3
 800316a:	4619      	mov	r1, r3
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f008 faee 	bl	800b74e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f003 0308 	and.w	r3, r3, #8
 8003178:	2b00      	cmp	r3, #0
 800317a:	d008      	beq.n	800318e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	4413      	add	r3, r2
 8003184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003188:	461a      	mov	r2, r3
 800318a:	2308      	movs	r3, #8
 800318c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	f003 0310 	and.w	r3, r3, #16
 8003194:	2b00      	cmp	r3, #0
 8003196:	d008      	beq.n	80031aa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031a4:	461a      	mov	r2, r3
 80031a6:	2310      	movs	r3, #16
 80031a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d008      	beq.n	80031c6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	015a      	lsls	r2, r3, #5
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	4413      	add	r3, r2
 80031bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031c0:	461a      	mov	r2, r3
 80031c2:	2340      	movs	r3, #64	; 0x40
 80031c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d023      	beq.n	8003218 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80031d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031d2:	6a38      	ldr	r0, [r7, #32]
 80031d4:	f002 fa70 	bl	80056b8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80031d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031da:	4613      	mov	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	4413      	add	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	3338      	adds	r3, #56	; 0x38
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	4413      	add	r3, r2
 80031e8:	3304      	adds	r3, #4
 80031ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	78db      	ldrb	r3, [r3, #3]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d108      	bne.n	8003206 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	2200      	movs	r2, #0
 80031f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	4619      	mov	r1, r3
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f008 fb31 	bl	800b868 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	4413      	add	r3, r2
 800320e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003212:	461a      	mov	r2, r3
 8003214:	2302      	movs	r3, #2
 8003216:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003222:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 fcdb 	bl	8003be0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	3301      	adds	r3, #1
 800322e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003232:	085b      	lsrs	r3, r3, #1
 8003234:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003238:	2b00      	cmp	r3, #0
 800323a:	f47f af2e 	bne.w	800309a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f003 fa5a 	bl	80066fc <USB_ReadInterrupts>
 8003248:	4603      	mov	r3, r0
 800324a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800324e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003252:	d122      	bne.n	800329a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	69fa      	ldr	r2, [r7, #28]
 800325e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003262:	f023 0301 	bic.w	r3, r3, #1
 8003266:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800326e:	2b01      	cmp	r3, #1
 8003270:	d108      	bne.n	8003284 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800327a:	2100      	movs	r1, #0
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 fec3 	bl	8004008 <HAL_PCDEx_LPM_Callback>
 8003282:	e002      	b.n	800328a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f008 facf 	bl	800b828 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695a      	ldr	r2, [r3, #20]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003298:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f003 fa2c 	bl	80066fc <USB_ReadInterrupts>
 80032a4:	4603      	mov	r3, r0
 80032a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ae:	d112      	bne.n	80032d6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d102      	bne.n	80032c6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f008 fa8b 	bl	800b7dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695a      	ldr	r2, [r3, #20]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80032d4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f003 fa0e 	bl	80066fc <USB_ReadInterrupts>
 80032e0:	4603      	mov	r3, r0
 80032e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ea:	f040 80b7 	bne.w	800345c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	69fa      	ldr	r2, [r7, #28]
 80032f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032fc:	f023 0301 	bic.w	r3, r3, #1
 8003300:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2110      	movs	r1, #16
 8003308:	4618      	mov	r0, r3
 800330a:	f002 f9d5 	bl	80056b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800330e:	2300      	movs	r3, #0
 8003310:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003312:	e046      	b.n	80033a2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003316:	015a      	lsls	r2, r3, #5
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	4413      	add	r3, r2
 800331c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003320:	461a      	mov	r2, r3
 8003322:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003326:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	4413      	add	r3, r2
 8003330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003338:	0151      	lsls	r1, r2, #5
 800333a:	69fa      	ldr	r2, [r7, #28]
 800333c:	440a      	add	r2, r1
 800333e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003342:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003346:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334a:	015a      	lsls	r2, r3, #5
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	4413      	add	r3, r2
 8003350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003354:	461a      	mov	r2, r3
 8003356:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800335a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800335c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	4413      	add	r3, r2
 8003364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800336c:	0151      	lsls	r1, r2, #5
 800336e:	69fa      	ldr	r2, [r7, #28]
 8003370:	440a      	add	r2, r1
 8003372:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003376:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800337a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800337c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	4413      	add	r3, r2
 8003384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800338c:	0151      	lsls	r1, r2, #5
 800338e:	69fa      	ldr	r2, [r7, #28]
 8003390:	440a      	add	r2, r1
 8003392:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003396:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800339a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800339c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339e:	3301      	adds	r3, #1
 80033a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d3b3      	bcc.n	8003314 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	69fa      	ldr	r2, [r7, #28]
 80033b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033ba:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80033be:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d016      	beq.n	80033f6 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033d2:	69fa      	ldr	r2, [r7, #28]
 80033d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033d8:	f043 030b 	orr.w	r3, r3, #11
 80033dc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e8:	69fa      	ldr	r2, [r7, #28]
 80033ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033ee:	f043 030b 	orr.w	r3, r3, #11
 80033f2:	6453      	str	r3, [r2, #68]	; 0x44
 80033f4:	e015      	b.n	8003422 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	69fa      	ldr	r2, [r7, #28]
 8003400:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003404:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003408:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800340c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	69fa      	ldr	r2, [r7, #28]
 8003418:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800341c:	f043 030b 	orr.w	r3, r3, #11
 8003420:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69fa      	ldr	r2, [r7, #28]
 800342c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003430:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003434:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6818      	ldr	r0, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003446:	461a      	mov	r2, r3
 8003448:	f003 fa1c 	bl	8006884 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	695a      	ldr	r2, [r3, #20]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800345a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f003 f94b 	bl	80066fc <USB_ReadInterrupts>
 8003466:	4603      	mov	r3, r0
 8003468:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800346c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003470:	d124      	bne.n	80034bc <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f003 f9e1 	bl	800683e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f002 f996 	bl	80057b2 <USB_GetDevSpeed>
 8003486:	4603      	mov	r3, r0
 8003488:	461a      	mov	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681c      	ldr	r4, [r3, #0]
 8003492:	f001 f9e9 	bl	8004868 <HAL_RCC_GetHCLKFreq>
 8003496:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800349c:	b2db      	uxtb	r3, r3
 800349e:	461a      	mov	r2, r3
 80034a0:	4620      	mov	r0, r4
 80034a2:	f001 fe95 	bl	80051d0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f008 f979 	bl	800b79e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695a      	ldr	r2, [r3, #20]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80034ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f003 f91b 	bl	80066fc <USB_ReadInterrupts>
 80034c6:	4603      	mov	r3, r0
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d10a      	bne.n	80034e6 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f008 f956 	bl	800b782 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695a      	ldr	r2, [r3, #20]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f002 0208 	and.w	r2, r2, #8
 80034e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f003 f906 	bl	80066fc <USB_ReadInterrupts>
 80034f0:	4603      	mov	r3, r0
 80034f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f6:	2b80      	cmp	r3, #128	; 0x80
 80034f8:	d122      	bne.n	8003540 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003506:	2301      	movs	r3, #1
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
 800350a:	e014      	b.n	8003536 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003510:	4613      	mov	r3, r2
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	4413      	add	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d105      	bne.n	8003530 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	b2db      	uxtb	r3, r3
 8003528:	4619      	mov	r1, r3
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fb27 	bl	8003b7e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	3301      	adds	r3, #1
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800353c:	429a      	cmp	r2, r3
 800353e:	d3e5      	bcc.n	800350c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f003 f8d9 	bl	80066fc <USB_ReadInterrupts>
 800354a:	4603      	mov	r3, r0
 800354c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003550:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003554:	d13b      	bne.n	80035ce <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003556:	2301      	movs	r3, #1
 8003558:	627b      	str	r3, [r7, #36]	; 0x24
 800355a:	e02b      	b.n	80035b4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	015a      	lsls	r2, r3, #5
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	4413      	add	r3, r2
 8003564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003570:	4613      	mov	r3, r2
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	3340      	adds	r3, #64	; 0x40
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d115      	bne.n	80035ae <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003582:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003584:	2b00      	cmp	r3, #0
 8003586:	da12      	bge.n	80035ae <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800358c:	4613      	mov	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	4413      	add	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	333f      	adds	r3, #63	; 0x3f
 8003598:	2201      	movs	r2, #1
 800359a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	4619      	mov	r1, r3
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 fae8 	bl	8003b7e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	3301      	adds	r3, #1
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d3ce      	bcc.n	800355c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695a      	ldr	r2, [r3, #20]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80035cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f003 f892 	bl	80066fc <USB_ReadInterrupts>
 80035d8:	4603      	mov	r3, r0
 80035da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035e2:	d155      	bne.n	8003690 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035e4:	2301      	movs	r3, #1
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24
 80035e8:	e045      	b.n	8003676 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035fe:	4613      	mov	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	4413      	add	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d12e      	bne.n	8003670 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003612:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003614:	2b00      	cmp	r3, #0
 8003616:	da2b      	bge.n	8003670 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003624:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003628:	429a      	cmp	r2, r3
 800362a:	d121      	bne.n	8003670 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003630:	4613      	mov	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800363e:	2201      	movs	r2, #1
 8003640:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10a      	bne.n	8003670 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	69fa      	ldr	r2, [r7, #28]
 8003664:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003668:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800366c:	6053      	str	r3, [r2, #4]
            break;
 800366e:	e007      	b.n	8003680 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	3301      	adds	r3, #1
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800367c:	429a      	cmp	r2, r3
 800367e:	d3b4      	bcc.n	80035ea <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695a      	ldr	r2, [r3, #20]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800368e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4618      	mov	r0, r3
 8003696:	f003 f831 	bl	80066fc <USB_ReadInterrupts>
 800369a:	4603      	mov	r3, r0
 800369c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80036a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a4:	d10a      	bne.n	80036bc <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f008 f8f0 	bl	800b88c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	695a      	ldr	r2, [r3, #20]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80036ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f003 f81b 	bl	80066fc <USB_ReadInterrupts>
 80036c6:	4603      	mov	r3, r0
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d115      	bne.n	80036fc <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	f003 0304 	and.w	r3, r3, #4
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d002      	beq.n	80036e8 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f008 f8e0 	bl	800b8a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6859      	ldr	r1, [r3, #4]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	605a      	str	r2, [r3, #4]
 80036f8:	e000      	b.n	80036fc <HAL_PCD_IRQHandler+0x938>
      return;
 80036fa:	bf00      	nop
    }
  }
}
 80036fc:	3734      	adds	r7, #52	; 0x34
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd90      	pop	{r4, r7, pc}

08003702 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b082      	sub	sp, #8
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	460b      	mov	r3, r1
 800370c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_PCD_SetAddress+0x1a>
 8003718:	2302      	movs	r3, #2
 800371a:	e013      	b.n	8003744 <HAL_PCD_SetAddress+0x42>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	78fa      	ldrb	r2, [r7, #3]
 8003728:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	78fa      	ldrb	r2, [r7, #3]
 8003732:	4611      	mov	r1, r2
 8003734:	4618      	mov	r0, r3
 8003736:	f002 ff79 	bl	800662c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	4608      	mov	r0, r1
 8003756:	4611      	mov	r1, r2
 8003758:	461a      	mov	r2, r3
 800375a:	4603      	mov	r3, r0
 800375c:	70fb      	strb	r3, [r7, #3]
 800375e:	460b      	mov	r3, r1
 8003760:	803b      	strh	r3, [r7, #0]
 8003762:	4613      	mov	r3, r2
 8003764:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800376a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800376e:	2b00      	cmp	r3, #0
 8003770:	da0f      	bge.n	8003792 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003772:	78fb      	ldrb	r3, [r7, #3]
 8003774:	f003 020f 	and.w	r2, r3, #15
 8003778:	4613      	mov	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	4413      	add	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	3338      	adds	r3, #56	; 0x38
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	4413      	add	r3, r2
 8003786:	3304      	adds	r3, #4
 8003788:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2201      	movs	r2, #1
 800378e:	705a      	strb	r2, [r3, #1]
 8003790:	e00f      	b.n	80037b2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003792:	78fb      	ldrb	r3, [r7, #3]
 8003794:	f003 020f 	and.w	r2, r3, #15
 8003798:	4613      	mov	r3, r2
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	4413      	add	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	4413      	add	r3, r2
 80037a8:	3304      	adds	r3, #4
 80037aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80037b2:	78fb      	ldrb	r3, [r7, #3]
 80037b4:	f003 030f 	and.w	r3, r3, #15
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80037be:	883a      	ldrh	r2, [r7, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	78ba      	ldrb	r2, [r7, #2]
 80037c8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	785b      	ldrb	r3, [r3, #1]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d004      	beq.n	80037dc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80037dc:	78bb      	ldrb	r3, [r7, #2]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d102      	bne.n	80037e8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d101      	bne.n	80037f6 <HAL_PCD_EP_Open+0xaa>
 80037f2:	2302      	movs	r3, #2
 80037f4:	e00e      	b.n	8003814 <HAL_PCD_EP_Open+0xc8>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68f9      	ldr	r1, [r7, #12]
 8003804:	4618      	mov	r0, r3
 8003806:	f001 fff9 	bl	80057fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003812:	7afb      	ldrb	r3, [r7, #11]
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003828:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800382c:	2b00      	cmp	r3, #0
 800382e:	da0f      	bge.n	8003850 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003830:	78fb      	ldrb	r3, [r7, #3]
 8003832:	f003 020f 	and.w	r2, r3, #15
 8003836:	4613      	mov	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	4413      	add	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	3338      	adds	r3, #56	; 0x38
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	4413      	add	r3, r2
 8003844:	3304      	adds	r3, #4
 8003846:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2201      	movs	r2, #1
 800384c:	705a      	strb	r2, [r3, #1]
 800384e:	e00f      	b.n	8003870 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003850:	78fb      	ldrb	r3, [r7, #3]
 8003852:	f003 020f 	and.w	r2, r3, #15
 8003856:	4613      	mov	r3, r2
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	4413      	add	r3, r2
 8003866:	3304      	adds	r3, #4
 8003868:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	b2da      	uxtb	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_PCD_EP_Close+0x6e>
 8003886:	2302      	movs	r3, #2
 8003888:	e00e      	b.n	80038a8 <HAL_PCD_EP_Close+0x8c>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68f9      	ldr	r1, [r7, #12]
 8003898:	4618      	mov	r0, r3
 800389a:	f002 f837 	bl	800590c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	607a      	str	r2, [r7, #4]
 80038ba:	603b      	str	r3, [r7, #0]
 80038bc:	460b      	mov	r3, r1
 80038be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038c0:	7afb      	ldrb	r3, [r7, #11]
 80038c2:	f003 020f 	and.w	r2, r3, #15
 80038c6:	4613      	mov	r3, r2
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	4413      	add	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4413      	add	r3, r2
 80038d6:	3304      	adds	r3, #4
 80038d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2200      	movs	r2, #0
 80038ea:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	2200      	movs	r2, #0
 80038f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038f2:	7afb      	ldrb	r3, [r7, #11]
 80038f4:	f003 030f 	and.w	r3, r3, #15
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d102      	bne.n	800390c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800390c:	7afb      	ldrb	r3, [r7, #11]
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	2b00      	cmp	r3, #0
 8003914:	d109      	bne.n	800392a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6818      	ldr	r0, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	b2db      	uxtb	r3, r3
 8003920:	461a      	mov	r2, r3
 8003922:	6979      	ldr	r1, [r7, #20]
 8003924:	f002 fb16 	bl	8005f54 <USB_EP0StartXfer>
 8003928:	e008      	b.n	800393c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6818      	ldr	r0, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	b2db      	uxtb	r3, r3
 8003934:	461a      	mov	r2, r3
 8003936:	6979      	ldr	r1, [r7, #20]
 8003938:	f002 f8c4 	bl	8005ac4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3718      	adds	r7, #24
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
 800394e:	460b      	mov	r3, r1
 8003950:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003952:	78fb      	ldrb	r3, [r7, #3]
 8003954:	f003 020f 	and.w	r2, r3, #15
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003968:	681b      	ldr	r3, [r3, #0]
}
 800396a:	4618      	mov	r0, r3
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b086      	sub	sp, #24
 800397a:	af00      	add	r7, sp, #0
 800397c:	60f8      	str	r0, [r7, #12]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	603b      	str	r3, [r7, #0]
 8003982:	460b      	mov	r3, r1
 8003984:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003986:	7afb      	ldrb	r3, [r7, #11]
 8003988:	f003 020f 	and.w	r2, r3, #15
 800398c:	4613      	mov	r3, r2
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	4413      	add	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	3338      	adds	r3, #56	; 0x38
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	4413      	add	r3, r2
 800399a:	3304      	adds	r3, #4
 800399c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2200      	movs	r2, #0
 80039ae:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2201      	movs	r2, #1
 80039b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039b6:	7afb      	ldrb	r3, [r7, #11]
 80039b8:	f003 030f 	and.w	r3, r3, #15
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d102      	bne.n	80039d0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039d0:	7afb      	ldrb	r3, [r7, #11]
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d109      	bne.n	80039ee <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6818      	ldr	r0, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	461a      	mov	r2, r3
 80039e6:	6979      	ldr	r1, [r7, #20]
 80039e8:	f002 fab4 	bl	8005f54 <USB_EP0StartXfer>
 80039ec:	e008      	b.n	8003a00 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6818      	ldr	r0, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	461a      	mov	r2, r3
 80039fa:	6979      	ldr	r1, [r7, #20]
 80039fc:	f002 f862 	bl	8005ac4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b084      	sub	sp, #16
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
 8003a12:	460b      	mov	r3, r1
 8003a14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a16:	78fb      	ldrb	r3, [r7, #3]
 8003a18:	f003 020f 	and.w	r2, r3, #15
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d901      	bls.n	8003a28 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e050      	b.n	8003aca <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	da0f      	bge.n	8003a50 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a30:	78fb      	ldrb	r3, [r7, #3]
 8003a32:	f003 020f 	and.w	r2, r3, #15
 8003a36:	4613      	mov	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	3338      	adds	r3, #56	; 0x38
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	4413      	add	r3, r2
 8003a44:	3304      	adds	r3, #4
 8003a46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	705a      	strb	r2, [r3, #1]
 8003a4e:	e00d      	b.n	8003a6c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a50:	78fa      	ldrb	r2, [r7, #3]
 8003a52:	4613      	mov	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	4413      	add	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	4413      	add	r3, r2
 8003a62:	3304      	adds	r3, #4
 8003a64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a72:	78fb      	ldrb	r3, [r7, #3]
 8003a74:	f003 030f 	and.w	r3, r3, #15
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d101      	bne.n	8003a8c <HAL_PCD_EP_SetStall+0x82>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e01e      	b.n	8003aca <HAL_PCD_EP_SetStall+0xc0>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68f9      	ldr	r1, [r7, #12]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f002 fcf2 	bl	8006484 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003aa0:	78fb      	ldrb	r3, [r7, #3]
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10a      	bne.n	8003ac0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	b2d9      	uxtb	r1, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003aba:	461a      	mov	r2, r3
 8003abc:	f002 fee2 	bl	8006884 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b084      	sub	sp, #16
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
 8003ada:	460b      	mov	r3, r1
 8003adc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ade:	78fb      	ldrb	r3, [r7, #3]
 8003ae0:	f003 020f 	and.w	r2, r3, #15
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d901      	bls.n	8003af0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e042      	b.n	8003b76 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003af0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	da0f      	bge.n	8003b18 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003af8:	78fb      	ldrb	r3, [r7, #3]
 8003afa:	f003 020f 	and.w	r2, r3, #15
 8003afe:	4613      	mov	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	3338      	adds	r3, #56	; 0x38
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2201      	movs	r2, #1
 8003b14:	705a      	strb	r2, [r3, #1]
 8003b16:	e00f      	b.n	8003b38 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b18:	78fb      	ldrb	r3, [r7, #3]
 8003b1a:	f003 020f 	and.w	r2, r3, #15
 8003b1e:	4613      	mov	r3, r2
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	4413      	add	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	3304      	adds	r3, #4
 8003b30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b3e:	78fb      	ldrb	r3, [r7, #3]
 8003b40:	f003 030f 	and.w	r3, r3, #15
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_PCD_EP_ClrStall+0x86>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e00e      	b.n	8003b76 <HAL_PCD_EP_ClrStall+0xa4>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68f9      	ldr	r1, [r7, #12]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f002 fcfa 	bl	8006560 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b084      	sub	sp, #16
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
 8003b86:	460b      	mov	r3, r1
 8003b88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003b8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	da0c      	bge.n	8003bac <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b92:	78fb      	ldrb	r3, [r7, #3]
 8003b94:	f003 020f 	and.w	r2, r3, #15
 8003b98:	4613      	mov	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	3338      	adds	r3, #56	; 0x38
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	e00c      	b.n	8003bc6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bac:	78fb      	ldrb	r3, [r7, #3]
 8003bae:	f003 020f 	and.w	r2, r3, #15
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68f9      	ldr	r1, [r7, #12]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f002 fb19 	bl	8006204 <USB_EPStopXfer>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003bd6:	7afb      	ldrb	r3, [r7, #11]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08a      	sub	sp, #40	; 0x28
 8003be4:	af02      	add	r7, sp, #8
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	3338      	adds	r3, #56	; 0x38
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	4413      	add	r3, r2
 8003c04:	3304      	adds	r3, #4
 8003c06:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a1a      	ldr	r2, [r3, #32]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d901      	bls.n	8003c18 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e06c      	b.n	8003cf2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	699a      	ldr	r2, [r3, #24]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	69fa      	ldr	r2, [r7, #28]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d902      	bls.n	8003c34 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	3303      	adds	r3, #3
 8003c38:	089b      	lsrs	r3, r3, #2
 8003c3a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c3c:	e02b      	b.n	8003c96 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	699a      	ldr	r2, [r3, #24]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	69fa      	ldr	r2, [r7, #28]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d902      	bls.n	8003c5a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	3303      	adds	r3, #3
 8003c5e:	089b      	lsrs	r3, r3, #2
 8003c60:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6919      	ldr	r1, [r3, #16]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	4603      	mov	r3, r0
 8003c78:	6978      	ldr	r0, [r7, #20]
 8003c7a:	f002 fb6d 	bl	8006358 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	691a      	ldr	r2, [r3, #16]
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	441a      	add	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6a1a      	ldr	r2, [r3, #32]
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	441a      	add	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	015a      	lsls	r2, r3, #5
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d809      	bhi.n	8003cc0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a1a      	ldr	r2, [r3, #32]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d203      	bcs.n	8003cc0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1be      	bne.n	8003c3e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	699a      	ldr	r2, [r3, #24]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d811      	bhi.n	8003cf0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	f003 030f 	and.w	r3, r3, #15
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	6939      	ldr	r1, [r7, #16]
 8003ce8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cec:	4013      	ands	r3, r2
 8003cee:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3720      	adds	r7, #32
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
	...

08003cfc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b088      	sub	sp, #32
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	333c      	adds	r3, #60	; 0x3c
 8003d14:	3304      	adds	r3, #4
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	015a      	lsls	r2, r3, #5
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	4413      	add	r3, r2
 8003d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d17b      	bne.n	8003e2a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f003 0308 	and.w	r3, r3, #8
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d015      	beq.n	8003d68 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	4a61      	ldr	r2, [pc, #388]	; (8003ec4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	f240 80b9 	bls.w	8003eb8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80b3 	beq.w	8003eb8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	015a      	lsls	r2, r3, #5
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5e:	461a      	mov	r2, r3
 8003d60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d64:	6093      	str	r3, [r2, #8]
 8003d66:	e0a7      	b.n	8003eb8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f003 0320 	and.w	r3, r3, #32
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d009      	beq.n	8003d86 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7e:	461a      	mov	r2, r3
 8003d80:	2320      	movs	r3, #32
 8003d82:	6093      	str	r3, [r2, #8]
 8003d84:	e098      	b.n	8003eb8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f040 8093 	bne.w	8003eb8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	4a4b      	ldr	r2, [pc, #300]	; (8003ec4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d90f      	bls.n	8003dba <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00a      	beq.n	8003dba <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db0:	461a      	mov	r2, r3
 8003db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003db6:	6093      	str	r3, [r2, #8]
 8003db8:	e07e      	b.n	8003eb8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	4413      	add	r3, r2
 8003dcc:	3304      	adds	r3, #4
 8003dce:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	0159      	lsls	r1, r3, #5
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	440b      	add	r3, r1
 8003ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003de6:	1ad2      	subs	r2, r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d114      	bne.n	8003e1c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d109      	bne.n	8003e0e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6818      	ldr	r0, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e04:	461a      	mov	r2, r3
 8003e06:	2101      	movs	r1, #1
 8003e08:	f002 fd3c 	bl	8006884 <USB_EP0_OutStart>
 8003e0c:	e006      	b.n	8003e1c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	691a      	ldr	r2, [r3, #16]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	441a      	add	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	4619      	mov	r1, r3
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f007 fc78 	bl	800b718 <HAL_PCD_DataOutStageCallback>
 8003e28:	e046      	b.n	8003eb8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	4a26      	ldr	r2, [pc, #152]	; (8003ec8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d124      	bne.n	8003e7c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e48:	461a      	mov	r2, r3
 8003e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e4e:	6093      	str	r3, [r2, #8]
 8003e50:	e032      	b.n	8003eb8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	f003 0320 	and.w	r3, r3, #32
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d008      	beq.n	8003e6e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	015a      	lsls	r2, r3, #5
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	4413      	add	r3, r2
 8003e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e68:	461a      	mov	r2, r3
 8003e6a:	2320      	movs	r3, #32
 8003e6c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	4619      	mov	r1, r3
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f007 fc4f 	bl	800b718 <HAL_PCD_DataOutStageCallback>
 8003e7a:	e01d      	b.n	8003eb8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d114      	bne.n	8003eac <PCD_EP_OutXfrComplete_int+0x1b0>
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	4613      	mov	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	4413      	add	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d108      	bne.n	8003eac <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6818      	ldr	r0, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	f002 fcec 	bl	8006884 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f007 fc30 	bl	800b718 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3720      	adds	r7, #32
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	4f54300a 	.word	0x4f54300a
 8003ec8:	4f54310a 	.word	0x4f54310a

08003ecc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	333c      	adds	r3, #60	; 0x3c
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	015a      	lsls	r2, r3, #5
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4a15      	ldr	r2, [pc, #84]	; (8003f54 <PCD_EP_OutSetupPacket_int+0x88>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d90e      	bls.n	8003f20 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d009      	beq.n	8003f20 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f18:	461a      	mov	r2, r3
 8003f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f1e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f007 fbe7 	bl	800b6f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4a0a      	ldr	r2, [pc, #40]	; (8003f54 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d90c      	bls.n	8003f48 <PCD_EP_OutSetupPacket_int+0x7c>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d108      	bne.n	8003f48 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f40:	461a      	mov	r2, r3
 8003f42:	2101      	movs	r1, #1
 8003f44:	f002 fc9e 	bl	8006884 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	4f54300a 	.word	0x4f54300a

08003f58 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	460b      	mov	r3, r1
 8003f62:	70fb      	strb	r3, [r7, #3]
 8003f64:	4613      	mov	r3, r2
 8003f66:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f70:	78fb      	ldrb	r3, [r7, #3]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d107      	bne.n	8003f86 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f76:	883b      	ldrh	r3, [r7, #0]
 8003f78:	0419      	lsls	r1, r3, #16
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	629a      	str	r2, [r3, #40]	; 0x28
 8003f84:	e028      	b.n	8003fd8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8c:	0c1b      	lsrs	r3, r3, #16
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	4413      	add	r3, r2
 8003f92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f94:	2300      	movs	r3, #0
 8003f96:	73fb      	strb	r3, [r7, #15]
 8003f98:	e00d      	b.n	8003fb6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	7bfb      	ldrb	r3, [r7, #15]
 8003fa0:	3340      	adds	r3, #64	; 0x40
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	0c1b      	lsrs	r3, r3, #16
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	4413      	add	r3, r2
 8003fae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	73fb      	strb	r3, [r7, #15]
 8003fb6:	7bfa      	ldrb	r2, [r7, #15]
 8003fb8:	78fb      	ldrb	r3, [r7, #3]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d3ec      	bcc.n	8003f9a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003fc0:	883b      	ldrh	r3, [r7, #0]
 8003fc2:	0418      	lsls	r0, r3, #16
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6819      	ldr	r1, [r3, #0]
 8003fc8:	78fb      	ldrb	r3, [r7, #3]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	4302      	orrs	r2, r0
 8003fd0:	3340      	adds	r3, #64	; 0x40
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3714      	adds	r7, #20
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
 8003fee:	460b      	mov	r3, r1
 8003ff0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	887a      	ldrh	r2, [r7, #2]
 8003ff8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	460b      	mov	r3, r1
 8004012:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e267      	b.n	8004502 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d075      	beq.n	800412a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800403e:	4b88      	ldr	r3, [pc, #544]	; (8004260 <HAL_RCC_OscConfig+0x240>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 030c 	and.w	r3, r3, #12
 8004046:	2b04      	cmp	r3, #4
 8004048:	d00c      	beq.n	8004064 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800404a:	4b85      	ldr	r3, [pc, #532]	; (8004260 <HAL_RCC_OscConfig+0x240>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004052:	2b08      	cmp	r3, #8
 8004054:	d112      	bne.n	800407c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004056:	4b82      	ldr	r3, [pc, #520]	; (8004260 <HAL_RCC_OscConfig+0x240>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800405e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004062:	d10b      	bne.n	800407c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004064:	4b7e      	ldr	r3, [pc, #504]	; (8004260 <HAL_RCC_OscConfig+0x240>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d05b      	beq.n	8004128 <HAL_RCC_OscConfig+0x108>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d157      	bne.n	8004128 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e242      	b.n	8004502 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004084:	d106      	bne.n	8004094 <HAL_RCC_OscConfig+0x74>
 8004086:	4b76      	ldr	r3, [pc, #472]	; (8004260 <HAL_RCC_OscConfig+0x240>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a75      	ldr	r2, [pc, #468]	; (8004260 <HAL_RCC_OscConfig+0x240>)
 800408c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	e01d      	b.n	80040d0 <HAL_RCC_OscConfig+0xb0>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800409c:	d10c      	bne.n	80040b8 <HAL_RCC_OscConfig+0x98>
 800409e:	4b70      	ldr	r3, [pc, #448]	; (8004260 <HAL_RCC_OscConfig+0x240>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a6f      	ldr	r2, [pc, #444]	; (8004260 <HAL_RCC_OscConfig+0x240>)
 80040a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	4b6d      	ldr	r3, [pc, #436]	; (8004260 <HAL_RCC_OscConfig+0x240>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a6c      	ldr	r2, [pc, #432]	; (8004260 <HAL_RCC_OscConfig+0x240>)
 80040b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	e00b      	b.n	80040d0 <HAL_RCC_OscConfig+0xb0>
 80040b8:	4b69      	ldr	r3, [pc, #420]	; (8004260 <HAL_RCC_OscConfig+0x240>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a68      	ldr	r2, [pc, #416]	; (8004260 <HAL_RCC_OscConfig+0x240>)
 80040be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c2:	6013      	str	r3, [r2, #0]
 80040c4:	4b66      	ldr	r3, [pc, #408]	; (8004260 <HAL_RCC_OscConfig+0x240>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a65      	ldr	r2, [pc, #404]	; (8004260 <HAL_RCC_OscConfig+0x240>)
 80040ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d013      	beq.n	8004100 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d8:	f7fe f8dc 	bl	8002294 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040e0:	f7fe f8d8 	bl	8002294 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b64      	cmp	r3, #100	; 0x64
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e207      	b.n	8004502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040f2:	4b5b      	ldr	r3, [pc, #364]	; (8004260 <HAL_RCC_OscConfig+0x240>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0f0      	beq.n	80040e0 <HAL_RCC_OscConfig+0xc0>
 80040fe:	e014      	b.n	800412a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004100:	f7fe f8c8 	bl	8002294 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004108:	f7fe f8c4 	bl	8002294 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b64      	cmp	r3, #100	; 0x64
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e1f3      	b.n	8004502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800411a:	4b51      	ldr	r3, [pc, #324]	; (8004260 <HAL_RCC_OscConfig+0x240>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f0      	bne.n	8004108 <HAL_RCC_OscConfig+0xe8>
 8004126:	e000      	b.n	800412a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d063      	beq.n	80041fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004136:	4b4a      	ldr	r3, [pc, #296]	; (8004260 <HAL_RCC_OscConfig+0x240>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 030c 	and.w	r3, r3, #12
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00b      	beq.n	800415a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004142:	4b47      	ldr	r3, [pc, #284]	; (8004260 <HAL_RCC_OscConfig+0x240>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800414a:	2b08      	cmp	r3, #8
 800414c:	d11c      	bne.n	8004188 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800414e:	4b44      	ldr	r3, [pc, #272]	; (8004260 <HAL_RCC_OscConfig+0x240>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d116      	bne.n	8004188 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800415a:	4b41      	ldr	r3, [pc, #260]	; (8004260 <HAL_RCC_OscConfig+0x240>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d005      	beq.n	8004172 <HAL_RCC_OscConfig+0x152>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d001      	beq.n	8004172 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e1c7      	b.n	8004502 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004172:	4b3b      	ldr	r3, [pc, #236]	; (8004260 <HAL_RCC_OscConfig+0x240>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	4937      	ldr	r1, [pc, #220]	; (8004260 <HAL_RCC_OscConfig+0x240>)
 8004182:	4313      	orrs	r3, r2
 8004184:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004186:	e03a      	b.n	80041fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d020      	beq.n	80041d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004190:	4b34      	ldr	r3, [pc, #208]	; (8004264 <HAL_RCC_OscConfig+0x244>)
 8004192:	2201      	movs	r2, #1
 8004194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004196:	f7fe f87d 	bl	8002294 <HAL_GetTick>
 800419a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800419c:	e008      	b.n	80041b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800419e:	f7fe f879 	bl	8002294 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d901      	bls.n	80041b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e1a8      	b.n	8004502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b0:	4b2b      	ldr	r3, [pc, #172]	; (8004260 <HAL_RCC_OscConfig+0x240>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d0f0      	beq.n	800419e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041bc:	4b28      	ldr	r3, [pc, #160]	; (8004260 <HAL_RCC_OscConfig+0x240>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	4925      	ldr	r1, [pc, #148]	; (8004260 <HAL_RCC_OscConfig+0x240>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	600b      	str	r3, [r1, #0]
 80041d0:	e015      	b.n	80041fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041d2:	4b24      	ldr	r3, [pc, #144]	; (8004264 <HAL_RCC_OscConfig+0x244>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d8:	f7fe f85c 	bl	8002294 <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041e0:	f7fe f858 	bl	8002294 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e187      	b.n	8004502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041f2:	4b1b      	ldr	r3, [pc, #108]	; (8004260 <HAL_RCC_OscConfig+0x240>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1f0      	bne.n	80041e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0308 	and.w	r3, r3, #8
 8004206:	2b00      	cmp	r3, #0
 8004208:	d036      	beq.n	8004278 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d016      	beq.n	8004240 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004212:	4b15      	ldr	r3, [pc, #84]	; (8004268 <HAL_RCC_OscConfig+0x248>)
 8004214:	2201      	movs	r2, #1
 8004216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004218:	f7fe f83c 	bl	8002294 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004220:	f7fe f838 	bl	8002294 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e167      	b.n	8004502 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004232:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <HAL_RCC_OscConfig+0x240>)
 8004234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0f0      	beq.n	8004220 <HAL_RCC_OscConfig+0x200>
 800423e:	e01b      	b.n	8004278 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004240:	4b09      	ldr	r3, [pc, #36]	; (8004268 <HAL_RCC_OscConfig+0x248>)
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004246:	f7fe f825 	bl	8002294 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800424c:	e00e      	b.n	800426c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800424e:	f7fe f821 	bl	8002294 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d907      	bls.n	800426c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e150      	b.n	8004502 <HAL_RCC_OscConfig+0x4e2>
 8004260:	40023800 	.word	0x40023800
 8004264:	42470000 	.word	0x42470000
 8004268:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800426c:	4b88      	ldr	r3, [pc, #544]	; (8004490 <HAL_RCC_OscConfig+0x470>)
 800426e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1ea      	bne.n	800424e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 8097 	beq.w	80043b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004286:	2300      	movs	r3, #0
 8004288:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800428a:	4b81      	ldr	r3, [pc, #516]	; (8004490 <HAL_RCC_OscConfig+0x470>)
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10f      	bne.n	80042b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004296:	2300      	movs	r3, #0
 8004298:	60bb      	str	r3, [r7, #8]
 800429a:	4b7d      	ldr	r3, [pc, #500]	; (8004490 <HAL_RCC_OscConfig+0x470>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	4a7c      	ldr	r2, [pc, #496]	; (8004490 <HAL_RCC_OscConfig+0x470>)
 80042a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a4:	6413      	str	r3, [r2, #64]	; 0x40
 80042a6:	4b7a      	ldr	r3, [pc, #488]	; (8004490 <HAL_RCC_OscConfig+0x470>)
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ae:	60bb      	str	r3, [r7, #8]
 80042b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042b2:	2301      	movs	r3, #1
 80042b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b6:	4b77      	ldr	r3, [pc, #476]	; (8004494 <HAL_RCC_OscConfig+0x474>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d118      	bne.n	80042f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042c2:	4b74      	ldr	r3, [pc, #464]	; (8004494 <HAL_RCC_OscConfig+0x474>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a73      	ldr	r2, [pc, #460]	; (8004494 <HAL_RCC_OscConfig+0x474>)
 80042c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ce:	f7fd ffe1 	bl	8002294 <HAL_GetTick>
 80042d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d4:	e008      	b.n	80042e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042d6:	f7fd ffdd 	bl	8002294 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e10c      	b.n	8004502 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e8:	4b6a      	ldr	r3, [pc, #424]	; (8004494 <HAL_RCC_OscConfig+0x474>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0f0      	beq.n	80042d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d106      	bne.n	800430a <HAL_RCC_OscConfig+0x2ea>
 80042fc:	4b64      	ldr	r3, [pc, #400]	; (8004490 <HAL_RCC_OscConfig+0x470>)
 80042fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004300:	4a63      	ldr	r2, [pc, #396]	; (8004490 <HAL_RCC_OscConfig+0x470>)
 8004302:	f043 0301 	orr.w	r3, r3, #1
 8004306:	6713      	str	r3, [r2, #112]	; 0x70
 8004308:	e01c      	b.n	8004344 <HAL_RCC_OscConfig+0x324>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	2b05      	cmp	r3, #5
 8004310:	d10c      	bne.n	800432c <HAL_RCC_OscConfig+0x30c>
 8004312:	4b5f      	ldr	r3, [pc, #380]	; (8004490 <HAL_RCC_OscConfig+0x470>)
 8004314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004316:	4a5e      	ldr	r2, [pc, #376]	; (8004490 <HAL_RCC_OscConfig+0x470>)
 8004318:	f043 0304 	orr.w	r3, r3, #4
 800431c:	6713      	str	r3, [r2, #112]	; 0x70
 800431e:	4b5c      	ldr	r3, [pc, #368]	; (8004490 <HAL_RCC_OscConfig+0x470>)
 8004320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004322:	4a5b      	ldr	r2, [pc, #364]	; (8004490 <HAL_RCC_OscConfig+0x470>)
 8004324:	f043 0301 	orr.w	r3, r3, #1
 8004328:	6713      	str	r3, [r2, #112]	; 0x70
 800432a:	e00b      	b.n	8004344 <HAL_RCC_OscConfig+0x324>
 800432c:	4b58      	ldr	r3, [pc, #352]	; (8004490 <HAL_RCC_OscConfig+0x470>)
 800432e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004330:	4a57      	ldr	r2, [pc, #348]	; (8004490 <HAL_RCC_OscConfig+0x470>)
 8004332:	f023 0301 	bic.w	r3, r3, #1
 8004336:	6713      	str	r3, [r2, #112]	; 0x70
 8004338:	4b55      	ldr	r3, [pc, #340]	; (8004490 <HAL_RCC_OscConfig+0x470>)
 800433a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433c:	4a54      	ldr	r2, [pc, #336]	; (8004490 <HAL_RCC_OscConfig+0x470>)
 800433e:	f023 0304 	bic.w	r3, r3, #4
 8004342:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d015      	beq.n	8004378 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800434c:	f7fd ffa2 	bl	8002294 <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004352:	e00a      	b.n	800436a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004354:	f7fd ff9e 	bl	8002294 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004362:	4293      	cmp	r3, r2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e0cb      	b.n	8004502 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800436a:	4b49      	ldr	r3, [pc, #292]	; (8004490 <HAL_RCC_OscConfig+0x470>)
 800436c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0ee      	beq.n	8004354 <HAL_RCC_OscConfig+0x334>
 8004376:	e014      	b.n	80043a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004378:	f7fd ff8c 	bl	8002294 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800437e:	e00a      	b.n	8004396 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004380:	f7fd ff88 	bl	8002294 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	f241 3288 	movw	r2, #5000	; 0x1388
 800438e:	4293      	cmp	r3, r2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e0b5      	b.n	8004502 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004396:	4b3e      	ldr	r3, [pc, #248]	; (8004490 <HAL_RCC_OscConfig+0x470>)
 8004398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1ee      	bne.n	8004380 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043a2:	7dfb      	ldrb	r3, [r7, #23]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d105      	bne.n	80043b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a8:	4b39      	ldr	r3, [pc, #228]	; (8004490 <HAL_RCC_OscConfig+0x470>)
 80043aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ac:	4a38      	ldr	r2, [pc, #224]	; (8004490 <HAL_RCC_OscConfig+0x470>)
 80043ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 80a1 	beq.w	8004500 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043be:	4b34      	ldr	r3, [pc, #208]	; (8004490 <HAL_RCC_OscConfig+0x470>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 030c 	and.w	r3, r3, #12
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	d05c      	beq.n	8004484 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d141      	bne.n	8004456 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d2:	4b31      	ldr	r3, [pc, #196]	; (8004498 <HAL_RCC_OscConfig+0x478>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d8:	f7fd ff5c 	bl	8002294 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043e0:	f7fd ff58 	bl	8002294 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e087      	b.n	8004502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f2:	4b27      	ldr	r3, [pc, #156]	; (8004490 <HAL_RCC_OscConfig+0x470>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1f0      	bne.n	80043e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	69da      	ldr	r2, [r3, #28]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	431a      	orrs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	019b      	lsls	r3, r3, #6
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004414:	085b      	lsrs	r3, r3, #1
 8004416:	3b01      	subs	r3, #1
 8004418:	041b      	lsls	r3, r3, #16
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004420:	061b      	lsls	r3, r3, #24
 8004422:	491b      	ldr	r1, [pc, #108]	; (8004490 <HAL_RCC_OscConfig+0x470>)
 8004424:	4313      	orrs	r3, r2
 8004426:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004428:	4b1b      	ldr	r3, [pc, #108]	; (8004498 <HAL_RCC_OscConfig+0x478>)
 800442a:	2201      	movs	r2, #1
 800442c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442e:	f7fd ff31 	bl	8002294 <HAL_GetTick>
 8004432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004434:	e008      	b.n	8004448 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004436:	f7fd ff2d 	bl	8002294 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e05c      	b.n	8004502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004448:	4b11      	ldr	r3, [pc, #68]	; (8004490 <HAL_RCC_OscConfig+0x470>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0f0      	beq.n	8004436 <HAL_RCC_OscConfig+0x416>
 8004454:	e054      	b.n	8004500 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004456:	4b10      	ldr	r3, [pc, #64]	; (8004498 <HAL_RCC_OscConfig+0x478>)
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445c:	f7fd ff1a 	bl	8002294 <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004464:	f7fd ff16 	bl	8002294 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e045      	b.n	8004502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004476:	4b06      	ldr	r3, [pc, #24]	; (8004490 <HAL_RCC_OscConfig+0x470>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1f0      	bne.n	8004464 <HAL_RCC_OscConfig+0x444>
 8004482:	e03d      	b.n	8004500 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d107      	bne.n	800449c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e038      	b.n	8004502 <HAL_RCC_OscConfig+0x4e2>
 8004490:	40023800 	.word	0x40023800
 8004494:	40007000 	.word	0x40007000
 8004498:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800449c:	4b1b      	ldr	r3, [pc, #108]	; (800450c <HAL_RCC_OscConfig+0x4ec>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d028      	beq.n	80044fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d121      	bne.n	80044fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d11a      	bne.n	80044fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044cc:	4013      	ands	r3, r2
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d111      	bne.n	80044fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e2:	085b      	lsrs	r3, r3, #1
 80044e4:	3b01      	subs	r3, #1
 80044e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d107      	bne.n	80044fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d001      	beq.n	8004500 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e000      	b.n	8004502 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3718      	adds	r7, #24
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	40023800 	.word	0x40023800

08004510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e0cc      	b.n	80046be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004524:	4b68      	ldr	r3, [pc, #416]	; (80046c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	429a      	cmp	r2, r3
 8004530:	d90c      	bls.n	800454c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004532:	4b65      	ldr	r3, [pc, #404]	; (80046c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	b2d2      	uxtb	r2, r2
 8004538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800453a:	4b63      	ldr	r3, [pc, #396]	; (80046c8 <HAL_RCC_ClockConfig+0x1b8>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0307 	and.w	r3, r3, #7
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	429a      	cmp	r2, r3
 8004546:	d001      	beq.n	800454c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e0b8      	b.n	80046be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d020      	beq.n	800459a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	d005      	beq.n	8004570 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004564:	4b59      	ldr	r3, [pc, #356]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	4a58      	ldr	r2, [pc, #352]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 800456a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800456e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0308 	and.w	r3, r3, #8
 8004578:	2b00      	cmp	r3, #0
 800457a:	d005      	beq.n	8004588 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800457c:	4b53      	ldr	r3, [pc, #332]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	4a52      	ldr	r2, [pc, #328]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 8004582:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004586:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004588:	4b50      	ldr	r3, [pc, #320]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	494d      	ldr	r1, [pc, #308]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	4313      	orrs	r3, r2
 8004598:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d044      	beq.n	8004630 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d107      	bne.n	80045be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ae:	4b47      	ldr	r3, [pc, #284]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d119      	bne.n	80045ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e07f      	b.n	80046be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d003      	beq.n	80045ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ca:	2b03      	cmp	r3, #3
 80045cc:	d107      	bne.n	80045de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ce:	4b3f      	ldr	r3, [pc, #252]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d109      	bne.n	80045ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e06f      	b.n	80046be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045de:	4b3b      	ldr	r3, [pc, #236]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e067      	b.n	80046be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ee:	4b37      	ldr	r3, [pc, #220]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f023 0203 	bic.w	r2, r3, #3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	4934      	ldr	r1, [pc, #208]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004600:	f7fd fe48 	bl	8002294 <HAL_GetTick>
 8004604:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004606:	e00a      	b.n	800461e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004608:	f7fd fe44 	bl	8002294 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	f241 3288 	movw	r2, #5000	; 0x1388
 8004616:	4293      	cmp	r3, r2
 8004618:	d901      	bls.n	800461e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e04f      	b.n	80046be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800461e:	4b2b      	ldr	r3, [pc, #172]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f003 020c 	and.w	r2, r3, #12
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	429a      	cmp	r2, r3
 800462e:	d1eb      	bne.n	8004608 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004630:	4b25      	ldr	r3, [pc, #148]	; (80046c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	429a      	cmp	r2, r3
 800463c:	d20c      	bcs.n	8004658 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800463e:	4b22      	ldr	r3, [pc, #136]	; (80046c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	b2d2      	uxtb	r2, r2
 8004644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004646:	4b20      	ldr	r3, [pc, #128]	; (80046c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0307 	and.w	r3, r3, #7
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	429a      	cmp	r2, r3
 8004652:	d001      	beq.n	8004658 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e032      	b.n	80046be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b00      	cmp	r3, #0
 8004662:	d008      	beq.n	8004676 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004664:	4b19      	ldr	r3, [pc, #100]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	4916      	ldr	r1, [pc, #88]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 8004672:	4313      	orrs	r3, r2
 8004674:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d009      	beq.n	8004696 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004682:	4b12      	ldr	r3, [pc, #72]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	490e      	ldr	r1, [pc, #56]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 8004692:	4313      	orrs	r3, r2
 8004694:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004696:	f000 f821 	bl	80046dc <HAL_RCC_GetSysClockFreq>
 800469a:	4602      	mov	r2, r0
 800469c:	4b0b      	ldr	r3, [pc, #44]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	091b      	lsrs	r3, r3, #4
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	490a      	ldr	r1, [pc, #40]	; (80046d0 <HAL_RCC_ClockConfig+0x1c0>)
 80046a8:	5ccb      	ldrb	r3, [r1, r3]
 80046aa:	fa22 f303 	lsr.w	r3, r2, r3
 80046ae:	4a09      	ldr	r2, [pc, #36]	; (80046d4 <HAL_RCC_ClockConfig+0x1c4>)
 80046b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046b2:	4b09      	ldr	r3, [pc, #36]	; (80046d8 <HAL_RCC_ClockConfig+0x1c8>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fd fda8 	bl	800220c <HAL_InitTick>

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	40023c00 	.word	0x40023c00
 80046cc:	40023800 	.word	0x40023800
 80046d0:	0800eb74 	.word	0x0800eb74
 80046d4:	20000004 	.word	0x20000004
 80046d8:	20000008 	.word	0x20000008

080046dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046e0:	b090      	sub	sp, #64	; 0x40
 80046e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	637b      	str	r3, [r7, #52]	; 0x34
 80046e8:	2300      	movs	r3, #0
 80046ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046ec:	2300      	movs	r3, #0
 80046ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046f4:	4b59      	ldr	r3, [pc, #356]	; (800485c <HAL_RCC_GetSysClockFreq+0x180>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f003 030c 	and.w	r3, r3, #12
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d00d      	beq.n	800471c <HAL_RCC_GetSysClockFreq+0x40>
 8004700:	2b08      	cmp	r3, #8
 8004702:	f200 80a1 	bhi.w	8004848 <HAL_RCC_GetSysClockFreq+0x16c>
 8004706:	2b00      	cmp	r3, #0
 8004708:	d002      	beq.n	8004710 <HAL_RCC_GetSysClockFreq+0x34>
 800470a:	2b04      	cmp	r3, #4
 800470c:	d003      	beq.n	8004716 <HAL_RCC_GetSysClockFreq+0x3a>
 800470e:	e09b      	b.n	8004848 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004710:	4b53      	ldr	r3, [pc, #332]	; (8004860 <HAL_RCC_GetSysClockFreq+0x184>)
 8004712:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004714:	e09b      	b.n	800484e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004716:	4b53      	ldr	r3, [pc, #332]	; (8004864 <HAL_RCC_GetSysClockFreq+0x188>)
 8004718:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800471a:	e098      	b.n	800484e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800471c:	4b4f      	ldr	r3, [pc, #316]	; (800485c <HAL_RCC_GetSysClockFreq+0x180>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004724:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004726:	4b4d      	ldr	r3, [pc, #308]	; (800485c <HAL_RCC_GetSysClockFreq+0x180>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d028      	beq.n	8004784 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004732:	4b4a      	ldr	r3, [pc, #296]	; (800485c <HAL_RCC_GetSysClockFreq+0x180>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	099b      	lsrs	r3, r3, #6
 8004738:	2200      	movs	r2, #0
 800473a:	623b      	str	r3, [r7, #32]
 800473c:	627a      	str	r2, [r7, #36]	; 0x24
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004744:	2100      	movs	r1, #0
 8004746:	4b47      	ldr	r3, [pc, #284]	; (8004864 <HAL_RCC_GetSysClockFreq+0x188>)
 8004748:	fb03 f201 	mul.w	r2, r3, r1
 800474c:	2300      	movs	r3, #0
 800474e:	fb00 f303 	mul.w	r3, r0, r3
 8004752:	4413      	add	r3, r2
 8004754:	4a43      	ldr	r2, [pc, #268]	; (8004864 <HAL_RCC_GetSysClockFreq+0x188>)
 8004756:	fba0 1202 	umull	r1, r2, r0, r2
 800475a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800475c:	460a      	mov	r2, r1
 800475e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004762:	4413      	add	r3, r2
 8004764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004768:	2200      	movs	r2, #0
 800476a:	61bb      	str	r3, [r7, #24]
 800476c:	61fa      	str	r2, [r7, #28]
 800476e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004772:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004776:	f7fc fa6f 	bl	8000c58 <__aeabi_uldivmod>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	4613      	mov	r3, r2
 8004780:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004782:	e053      	b.n	800482c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004784:	4b35      	ldr	r3, [pc, #212]	; (800485c <HAL_RCC_GetSysClockFreq+0x180>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	099b      	lsrs	r3, r3, #6
 800478a:	2200      	movs	r2, #0
 800478c:	613b      	str	r3, [r7, #16]
 800478e:	617a      	str	r2, [r7, #20]
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004796:	f04f 0b00 	mov.w	fp, #0
 800479a:	4652      	mov	r2, sl
 800479c:	465b      	mov	r3, fp
 800479e:	f04f 0000 	mov.w	r0, #0
 80047a2:	f04f 0100 	mov.w	r1, #0
 80047a6:	0159      	lsls	r1, r3, #5
 80047a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047ac:	0150      	lsls	r0, r2, #5
 80047ae:	4602      	mov	r2, r0
 80047b0:	460b      	mov	r3, r1
 80047b2:	ebb2 080a 	subs.w	r8, r2, sl
 80047b6:	eb63 090b 	sbc.w	r9, r3, fp
 80047ba:	f04f 0200 	mov.w	r2, #0
 80047be:	f04f 0300 	mov.w	r3, #0
 80047c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80047c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80047ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80047ce:	ebb2 0408 	subs.w	r4, r2, r8
 80047d2:	eb63 0509 	sbc.w	r5, r3, r9
 80047d6:	f04f 0200 	mov.w	r2, #0
 80047da:	f04f 0300 	mov.w	r3, #0
 80047de:	00eb      	lsls	r3, r5, #3
 80047e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047e4:	00e2      	lsls	r2, r4, #3
 80047e6:	4614      	mov	r4, r2
 80047e8:	461d      	mov	r5, r3
 80047ea:	eb14 030a 	adds.w	r3, r4, sl
 80047ee:	603b      	str	r3, [r7, #0]
 80047f0:	eb45 030b 	adc.w	r3, r5, fp
 80047f4:	607b      	str	r3, [r7, #4]
 80047f6:	f04f 0200 	mov.w	r2, #0
 80047fa:	f04f 0300 	mov.w	r3, #0
 80047fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004802:	4629      	mov	r1, r5
 8004804:	028b      	lsls	r3, r1, #10
 8004806:	4621      	mov	r1, r4
 8004808:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800480c:	4621      	mov	r1, r4
 800480e:	028a      	lsls	r2, r1, #10
 8004810:	4610      	mov	r0, r2
 8004812:	4619      	mov	r1, r3
 8004814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004816:	2200      	movs	r2, #0
 8004818:	60bb      	str	r3, [r7, #8]
 800481a:	60fa      	str	r2, [r7, #12]
 800481c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004820:	f7fc fa1a 	bl	8000c58 <__aeabi_uldivmod>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	4613      	mov	r3, r2
 800482a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800482c:	4b0b      	ldr	r3, [pc, #44]	; (800485c <HAL_RCC_GetSysClockFreq+0x180>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	0c1b      	lsrs	r3, r3, #16
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	3301      	adds	r3, #1
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800483c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	fbb2 f3f3 	udiv	r3, r2, r3
 8004844:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004846:	e002      	b.n	800484e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004848:	4b05      	ldr	r3, [pc, #20]	; (8004860 <HAL_RCC_GetSysClockFreq+0x184>)
 800484a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800484c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800484e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004850:	4618      	mov	r0, r3
 8004852:	3740      	adds	r7, #64	; 0x40
 8004854:	46bd      	mov	sp, r7
 8004856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800485a:	bf00      	nop
 800485c:	40023800 	.word	0x40023800
 8004860:	00f42400 	.word	0x00f42400
 8004864:	017d7840 	.word	0x017d7840

08004868 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800486c:	4b03      	ldr	r3, [pc, #12]	; (800487c <HAL_RCC_GetHCLKFreq+0x14>)
 800486e:	681b      	ldr	r3, [r3, #0]
}
 8004870:	4618      	mov	r0, r3
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	20000004 	.word	0x20000004

08004880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004884:	f7ff fff0 	bl	8004868 <HAL_RCC_GetHCLKFreq>
 8004888:	4602      	mov	r2, r0
 800488a:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	0a9b      	lsrs	r3, r3, #10
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	4903      	ldr	r1, [pc, #12]	; (80048a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004896:	5ccb      	ldrb	r3, [r1, r3]
 8004898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800489c:	4618      	mov	r0, r3
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40023800 	.word	0x40023800
 80048a4:	0800eb84 	.word	0x0800eb84

080048a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e07b      	b.n	80049b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d108      	bne.n	80048d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048ca:	d009      	beq.n	80048e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	61da      	str	r2, [r3, #28]
 80048d2:	e005      	b.n	80048e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d106      	bne.n	8004900 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7fd facc 	bl	8001e98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004916:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004928:	431a      	orrs	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	431a      	orrs	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	431a      	orrs	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004950:	431a      	orrs	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004964:	ea42 0103 	orr.w	r1, r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	430a      	orrs	r2, r1
 8004976:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	0c1b      	lsrs	r3, r3, #16
 800497e:	f003 0104 	and.w	r1, r3, #4
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	f003 0210 	and.w	r2, r3, #16
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	69da      	ldr	r2, [r3, #28]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b088      	sub	sp, #32
 80049be:	af00      	add	r7, sp, #0
 80049c0:	60f8      	str	r0, [r7, #12]
 80049c2:	60b9      	str	r1, [r7, #8]
 80049c4:	603b      	str	r3, [r7, #0]
 80049c6:	4613      	mov	r3, r2
 80049c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049ca:	2300      	movs	r3, #0
 80049cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_SPI_Transmit+0x22>
 80049d8:	2302      	movs	r3, #2
 80049da:	e126      	b.n	8004c2a <HAL_SPI_Transmit+0x270>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049e4:	f7fd fc56 	bl	8002294 <HAL_GetTick>
 80049e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80049ea:	88fb      	ldrh	r3, [r7, #6]
 80049ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d002      	beq.n	8004a00 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80049fa:	2302      	movs	r3, #2
 80049fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049fe:	e10b      	b.n	8004c18 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d002      	beq.n	8004a0c <HAL_SPI_Transmit+0x52>
 8004a06:	88fb      	ldrh	r3, [r7, #6]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d102      	bne.n	8004a12 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a10:	e102      	b.n	8004c18 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2203      	movs	r2, #3
 8004a16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	88fa      	ldrh	r2, [r7, #6]
 8004a2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	88fa      	ldrh	r2, [r7, #6]
 8004a30:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a58:	d10f      	bne.n	8004a7a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a84:	2b40      	cmp	r3, #64	; 0x40
 8004a86:	d007      	beq.n	8004a98 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aa0:	d14b      	bne.n	8004b3a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d002      	beq.n	8004ab0 <HAL_SPI_Transmit+0xf6>
 8004aaa:	8afb      	ldrh	r3, [r7, #22]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d13e      	bne.n	8004b2e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab4:	881a      	ldrh	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac0:	1c9a      	adds	r2, r3, #2
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	3b01      	subs	r3, #1
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ad4:	e02b      	b.n	8004b2e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d112      	bne.n	8004b0a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae8:	881a      	ldrh	r2, [r3, #0]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af4:	1c9a      	adds	r2, r3, #2
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	3b01      	subs	r3, #1
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b08:	e011      	b.n	8004b2e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b0a:	f7fd fbc3 	bl	8002294 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d803      	bhi.n	8004b22 <HAL_SPI_Transmit+0x168>
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b20:	d102      	bne.n	8004b28 <HAL_SPI_Transmit+0x16e>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d102      	bne.n	8004b2e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b2c:	e074      	b.n	8004c18 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1ce      	bne.n	8004ad6 <HAL_SPI_Transmit+0x11c>
 8004b38:	e04c      	b.n	8004bd4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <HAL_SPI_Transmit+0x18e>
 8004b42:	8afb      	ldrh	r3, [r7, #22]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d140      	bne.n	8004bca <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	330c      	adds	r3, #12
 8004b52:	7812      	ldrb	r2, [r2, #0]
 8004b54:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	3b01      	subs	r3, #1
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b6e:	e02c      	b.n	8004bca <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d113      	bne.n	8004ba6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	330c      	adds	r3, #12
 8004b88:	7812      	ldrb	r2, [r2, #0]
 8004b8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	1c5a      	adds	r2, r3, #1
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ba4:	e011      	b.n	8004bca <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ba6:	f7fd fb75 	bl	8002294 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d803      	bhi.n	8004bbe <HAL_SPI_Transmit+0x204>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbc:	d102      	bne.n	8004bc4 <HAL_SPI_Transmit+0x20a>
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d102      	bne.n	8004bca <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bc8:	e026      	b.n	8004c18 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1cd      	bne.n	8004b70 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	6839      	ldr	r1, [r7, #0]
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 fa55 	bl	8005088 <SPI_EndRxTxTransaction>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d002      	beq.n	8004bea <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2220      	movs	r2, #32
 8004be8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10a      	bne.n	8004c08 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	613b      	str	r3, [r7, #16]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	613b      	str	r3, [r7, #16]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	613b      	str	r3, [r7, #16]
 8004c06:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	77fb      	strb	r3, [r7, #31]
 8004c14:	e000      	b.n	8004c18 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004c16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c28:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3720      	adds	r7, #32
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b08c      	sub	sp, #48	; 0x30
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	60f8      	str	r0, [r7, #12]
 8004c3a:	60b9      	str	r1, [r7, #8]
 8004c3c:	607a      	str	r2, [r7, #4]
 8004c3e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c40:	2301      	movs	r3, #1
 8004c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c44:	2300      	movs	r3, #0
 8004c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d101      	bne.n	8004c58 <HAL_SPI_TransmitReceive+0x26>
 8004c54:	2302      	movs	r3, #2
 8004c56:	e18a      	b.n	8004f6e <HAL_SPI_TransmitReceive+0x33c>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c60:	f7fd fb18 	bl	8002294 <HAL_GetTick>
 8004c64:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c76:	887b      	ldrh	r3, [r7, #2]
 8004c78:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d00f      	beq.n	8004ca2 <HAL_SPI_TransmitReceive+0x70>
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c88:	d107      	bne.n	8004c9a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d103      	bne.n	8004c9a <HAL_SPI_TransmitReceive+0x68>
 8004c92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	d003      	beq.n	8004ca2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ca0:	e15b      	b.n	8004f5a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d005      	beq.n	8004cb4 <HAL_SPI_TransmitReceive+0x82>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <HAL_SPI_TransmitReceive+0x82>
 8004cae:	887b      	ldrh	r3, [r7, #2]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d103      	bne.n	8004cbc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004cba:	e14e      	b.n	8004f5a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d003      	beq.n	8004cd0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2205      	movs	r2, #5
 8004ccc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	887a      	ldrh	r2, [r7, #2]
 8004ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	887a      	ldrh	r2, [r7, #2]
 8004ce6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	887a      	ldrh	r2, [r7, #2]
 8004cf2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	887a      	ldrh	r2, [r7, #2]
 8004cf8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d10:	2b40      	cmp	r3, #64	; 0x40
 8004d12:	d007      	beq.n	8004d24 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d2c:	d178      	bne.n	8004e20 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d002      	beq.n	8004d3c <HAL_SPI_TransmitReceive+0x10a>
 8004d36:	8b7b      	ldrh	r3, [r7, #26]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d166      	bne.n	8004e0a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d40:	881a      	ldrh	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4c:	1c9a      	adds	r2, r3, #2
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d60:	e053      	b.n	8004e0a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d11b      	bne.n	8004da8 <HAL_SPI_TransmitReceive+0x176>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d016      	beq.n	8004da8 <HAL_SPI_TransmitReceive+0x176>
 8004d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d113      	bne.n	8004da8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d84:	881a      	ldrh	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d90:	1c9a      	adds	r2, r3, #2
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d119      	bne.n	8004dea <HAL_SPI_TransmitReceive+0x1b8>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d014      	beq.n	8004dea <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dca:	b292      	uxth	r2, r2
 8004dcc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd2:	1c9a      	adds	r2, r3, #2
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	3b01      	subs	r3, #1
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004de6:	2301      	movs	r3, #1
 8004de8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004dea:	f7fd fa53 	bl	8002294 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d807      	bhi.n	8004e0a <HAL_SPI_TransmitReceive+0x1d8>
 8004dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e00:	d003      	beq.n	8004e0a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e08:	e0a7      	b.n	8004f5a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1a6      	bne.n	8004d62 <HAL_SPI_TransmitReceive+0x130>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1a1      	bne.n	8004d62 <HAL_SPI_TransmitReceive+0x130>
 8004e1e:	e07c      	b.n	8004f1a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <HAL_SPI_TransmitReceive+0x1fc>
 8004e28:	8b7b      	ldrh	r3, [r7, #26]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d16b      	bne.n	8004f06 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	330c      	adds	r3, #12
 8004e38:	7812      	ldrb	r2, [r2, #0]
 8004e3a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e40:	1c5a      	adds	r2, r3, #1
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e54:	e057      	b.n	8004f06 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d11c      	bne.n	8004e9e <HAL_SPI_TransmitReceive+0x26c>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d017      	beq.n	8004e9e <HAL_SPI_TransmitReceive+0x26c>
 8004e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d114      	bne.n	8004e9e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	330c      	adds	r3, #12
 8004e7e:	7812      	ldrb	r2, [r2, #0]
 8004e80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d119      	bne.n	8004ee0 <HAL_SPI_TransmitReceive+0x2ae>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d014      	beq.n	8004ee0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec0:	b2d2      	uxtb	r2, r2
 8004ec2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec8:	1c5a      	adds	r2, r3, #1
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004edc:	2301      	movs	r3, #1
 8004ede:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ee0:	f7fd f9d8 	bl	8002294 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d803      	bhi.n	8004ef8 <HAL_SPI_TransmitReceive+0x2c6>
 8004ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef6:	d102      	bne.n	8004efe <HAL_SPI_TransmitReceive+0x2cc>
 8004ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d103      	bne.n	8004f06 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f04:	e029      	b.n	8004f5a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1a2      	bne.n	8004e56 <HAL_SPI_TransmitReceive+0x224>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d19d      	bne.n	8004e56 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 f8b2 	bl	8005088 <SPI_EndRxTxTransaction>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d006      	beq.n	8004f38 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2220      	movs	r2, #32
 8004f34:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f36:	e010      	b.n	8004f5a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10b      	bne.n	8004f58 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f40:	2300      	movs	r3, #0
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	e000      	b.n	8004f5a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004f58:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3730      	adds	r7, #48	; 0x30
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
	...

08004f78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	603b      	str	r3, [r7, #0]
 8004f84:	4613      	mov	r3, r2
 8004f86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f88:	f7fd f984 	bl	8002294 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f90:	1a9b      	subs	r3, r3, r2
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	4413      	add	r3, r2
 8004f96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f98:	f7fd f97c 	bl	8002294 <HAL_GetTick>
 8004f9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f9e:	4b39      	ldr	r3, [pc, #228]	; (8005084 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	015b      	lsls	r3, r3, #5
 8004fa4:	0d1b      	lsrs	r3, r3, #20
 8004fa6:	69fa      	ldr	r2, [r7, #28]
 8004fa8:	fb02 f303 	mul.w	r3, r2, r3
 8004fac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fae:	e054      	b.n	800505a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb6:	d050      	beq.n	800505a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fb8:	f7fd f96c 	bl	8002294 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	69fa      	ldr	r2, [r7, #28]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d902      	bls.n	8004fce <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d13d      	bne.n	800504a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fdc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fe6:	d111      	bne.n	800500c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ff0:	d004      	beq.n	8004ffc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ffa:	d107      	bne.n	800500c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800500a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005010:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005014:	d10f      	bne.n	8005036 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005034:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e017      	b.n	800507a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	3b01      	subs	r3, #1
 8005058:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	4013      	ands	r3, r2
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	429a      	cmp	r2, r3
 8005068:	bf0c      	ite	eq
 800506a:	2301      	moveq	r3, #1
 800506c:	2300      	movne	r3, #0
 800506e:	b2db      	uxtb	r3, r3
 8005070:	461a      	mov	r2, r3
 8005072:	79fb      	ldrb	r3, [r7, #7]
 8005074:	429a      	cmp	r2, r3
 8005076:	d19b      	bne.n	8004fb0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3720      	adds	r7, #32
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	20000004 	.word	0x20000004

08005088 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b088      	sub	sp, #32
 800508c:	af02      	add	r7, sp, #8
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005094:	4b1b      	ldr	r3, [pc, #108]	; (8005104 <SPI_EndRxTxTransaction+0x7c>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a1b      	ldr	r2, [pc, #108]	; (8005108 <SPI_EndRxTxTransaction+0x80>)
 800509a:	fba2 2303 	umull	r2, r3, r2, r3
 800509e:	0d5b      	lsrs	r3, r3, #21
 80050a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050a4:	fb02 f303 	mul.w	r3, r2, r3
 80050a8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050b2:	d112      	bne.n	80050da <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	2200      	movs	r2, #0
 80050bc:	2180      	movs	r1, #128	; 0x80
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f7ff ff5a 	bl	8004f78 <SPI_WaitFlagStateUntilTimeout>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d016      	beq.n	80050f8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ce:	f043 0220 	orr.w	r2, r3, #32
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e00f      	b.n	80050fa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00a      	beq.n	80050f6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	3b01      	subs	r3, #1
 80050e4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f0:	2b80      	cmp	r3, #128	; 0x80
 80050f2:	d0f2      	beq.n	80050da <SPI_EndRxTxTransaction+0x52>
 80050f4:	e000      	b.n	80050f8 <SPI_EndRxTxTransaction+0x70>
        break;
 80050f6:	bf00      	nop
  }

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3718      	adds	r7, #24
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	20000004 	.word	0x20000004
 8005108:	165e9f81 	.word	0x165e9f81

0800510c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800510c:	b084      	sub	sp, #16
 800510e:	b580      	push	{r7, lr}
 8005110:	b084      	sub	sp, #16
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	f107 001c 	add.w	r0, r7, #28
 800511a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005120:	2b01      	cmp	r3, #1
 8005122:	d122      	bne.n	800516a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005128:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800514c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800514e:	2b01      	cmp	r3, #1
 8005150:	d105      	bne.n	800515e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f001 fbee 	bl	8006940 <USB_CoreReset>
 8005164:	4603      	mov	r3, r0
 8005166:	73fb      	strb	r3, [r7, #15]
 8005168:	e01a      	b.n	80051a0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f001 fbe2 	bl	8006940 <USB_CoreReset>
 800517c:	4603      	mov	r3, r0
 800517e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005182:	2b00      	cmp	r3, #0
 8005184:	d106      	bne.n	8005194 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	639a      	str	r2, [r3, #56]	; 0x38
 8005192:	e005      	b.n	80051a0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005198:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80051a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d10b      	bne.n	80051be <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f043 0206 	orr.w	r2, r3, #6
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f043 0220 	orr.w	r2, r3, #32
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80051be:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051ca:	b004      	add	sp, #16
 80051cc:	4770      	bx	lr
	...

080051d0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	4613      	mov	r3, r2
 80051dc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80051de:	79fb      	ldrb	r3, [r7, #7]
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d165      	bne.n	80052b0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	4a41      	ldr	r2, [pc, #260]	; (80052ec <USB_SetTurnaroundTime+0x11c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d906      	bls.n	80051fa <USB_SetTurnaroundTime+0x2a>
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4a40      	ldr	r2, [pc, #256]	; (80052f0 <USB_SetTurnaroundTime+0x120>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d202      	bcs.n	80051fa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80051f4:	230f      	movs	r3, #15
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	e062      	b.n	80052c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	4a3c      	ldr	r2, [pc, #240]	; (80052f0 <USB_SetTurnaroundTime+0x120>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d306      	bcc.n	8005210 <USB_SetTurnaroundTime+0x40>
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	4a3b      	ldr	r2, [pc, #236]	; (80052f4 <USB_SetTurnaroundTime+0x124>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d202      	bcs.n	8005210 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800520a:	230e      	movs	r3, #14
 800520c:	617b      	str	r3, [r7, #20]
 800520e:	e057      	b.n	80052c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	4a38      	ldr	r2, [pc, #224]	; (80052f4 <USB_SetTurnaroundTime+0x124>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d306      	bcc.n	8005226 <USB_SetTurnaroundTime+0x56>
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4a37      	ldr	r2, [pc, #220]	; (80052f8 <USB_SetTurnaroundTime+0x128>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d202      	bcs.n	8005226 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005220:	230d      	movs	r3, #13
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	e04c      	b.n	80052c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	4a33      	ldr	r2, [pc, #204]	; (80052f8 <USB_SetTurnaroundTime+0x128>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d306      	bcc.n	800523c <USB_SetTurnaroundTime+0x6c>
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	4a32      	ldr	r2, [pc, #200]	; (80052fc <USB_SetTurnaroundTime+0x12c>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d802      	bhi.n	800523c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005236:	230c      	movs	r3, #12
 8005238:	617b      	str	r3, [r7, #20]
 800523a:	e041      	b.n	80052c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	4a2f      	ldr	r2, [pc, #188]	; (80052fc <USB_SetTurnaroundTime+0x12c>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d906      	bls.n	8005252 <USB_SetTurnaroundTime+0x82>
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4a2e      	ldr	r2, [pc, #184]	; (8005300 <USB_SetTurnaroundTime+0x130>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d802      	bhi.n	8005252 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800524c:	230b      	movs	r3, #11
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	e036      	b.n	80052c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	4a2a      	ldr	r2, [pc, #168]	; (8005300 <USB_SetTurnaroundTime+0x130>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d906      	bls.n	8005268 <USB_SetTurnaroundTime+0x98>
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	4a29      	ldr	r2, [pc, #164]	; (8005304 <USB_SetTurnaroundTime+0x134>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d802      	bhi.n	8005268 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005262:	230a      	movs	r3, #10
 8005264:	617b      	str	r3, [r7, #20]
 8005266:	e02b      	b.n	80052c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	4a26      	ldr	r2, [pc, #152]	; (8005304 <USB_SetTurnaroundTime+0x134>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d906      	bls.n	800527e <USB_SetTurnaroundTime+0xae>
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	4a25      	ldr	r2, [pc, #148]	; (8005308 <USB_SetTurnaroundTime+0x138>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d202      	bcs.n	800527e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005278:	2309      	movs	r3, #9
 800527a:	617b      	str	r3, [r7, #20]
 800527c:	e020      	b.n	80052c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	4a21      	ldr	r2, [pc, #132]	; (8005308 <USB_SetTurnaroundTime+0x138>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d306      	bcc.n	8005294 <USB_SetTurnaroundTime+0xc4>
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	4a20      	ldr	r2, [pc, #128]	; (800530c <USB_SetTurnaroundTime+0x13c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d802      	bhi.n	8005294 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800528e:	2308      	movs	r3, #8
 8005290:	617b      	str	r3, [r7, #20]
 8005292:	e015      	b.n	80052c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	4a1d      	ldr	r2, [pc, #116]	; (800530c <USB_SetTurnaroundTime+0x13c>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d906      	bls.n	80052aa <USB_SetTurnaroundTime+0xda>
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	4a1c      	ldr	r2, [pc, #112]	; (8005310 <USB_SetTurnaroundTime+0x140>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d202      	bcs.n	80052aa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80052a4:	2307      	movs	r3, #7
 80052a6:	617b      	str	r3, [r7, #20]
 80052a8:	e00a      	b.n	80052c0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80052aa:	2306      	movs	r3, #6
 80052ac:	617b      	str	r3, [r7, #20]
 80052ae:	e007      	b.n	80052c0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80052b0:	79fb      	ldrb	r3, [r7, #7]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d102      	bne.n	80052bc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80052b6:	2309      	movs	r3, #9
 80052b8:	617b      	str	r3, [r7, #20]
 80052ba:	e001      	b.n	80052c0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80052bc:	2309      	movs	r3, #9
 80052be:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	68da      	ldr	r2, [r3, #12]
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	029b      	lsls	r3, r3, #10
 80052d4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80052d8:	431a      	orrs	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	371c      	adds	r7, #28
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	00d8acbf 	.word	0x00d8acbf
 80052f0:	00e4e1c0 	.word	0x00e4e1c0
 80052f4:	00f42400 	.word	0x00f42400
 80052f8:	01067380 	.word	0x01067380
 80052fc:	011a499f 	.word	0x011a499f
 8005300:	01312cff 	.word	0x01312cff
 8005304:	014ca43f 	.word	0x014ca43f
 8005308:	016e3600 	.word	0x016e3600
 800530c:	01a6ab1f 	.word	0x01a6ab1f
 8005310:	01e84800 	.word	0x01e84800

08005314 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f043 0201 	orr.w	r2, r3, #1
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005336:	b480      	push	{r7}
 8005338:	b083      	sub	sp, #12
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f023 0201 	bic.w	r2, r3, #1
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	460b      	mov	r3, r1
 8005362:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005364:	2300      	movs	r3, #0
 8005366:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005374:	78fb      	ldrb	r3, [r7, #3]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d115      	bne.n	80053a6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005386:	2001      	movs	r0, #1
 8005388:	f7fc ff90 	bl	80022ac <HAL_Delay>
      ms++;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	3301      	adds	r3, #1
 8005390:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f001 fa45 	bl	8006822 <USB_GetMode>
 8005398:	4603      	mov	r3, r0
 800539a:	2b01      	cmp	r3, #1
 800539c:	d01e      	beq.n	80053dc <USB_SetCurrentMode+0x84>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2b31      	cmp	r3, #49	; 0x31
 80053a2:	d9f0      	bls.n	8005386 <USB_SetCurrentMode+0x2e>
 80053a4:	e01a      	b.n	80053dc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80053a6:	78fb      	ldrb	r3, [r7, #3]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d115      	bne.n	80053d8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053b8:	2001      	movs	r0, #1
 80053ba:	f7fc ff77 	bl	80022ac <HAL_Delay>
      ms++;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	3301      	adds	r3, #1
 80053c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f001 fa2c 	bl	8006822 <USB_GetMode>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d005      	beq.n	80053dc <USB_SetCurrentMode+0x84>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2b31      	cmp	r3, #49	; 0x31
 80053d4:	d9f0      	bls.n	80053b8 <USB_SetCurrentMode+0x60>
 80053d6:	e001      	b.n	80053dc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e005      	b.n	80053e8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2b32      	cmp	r3, #50	; 0x32
 80053e0:	d101      	bne.n	80053e6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e000      	b.n	80053e8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053f0:	b084      	sub	sp, #16
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b086      	sub	sp, #24
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
 80053fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80053fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005402:	2300      	movs	r3, #0
 8005404:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800540a:	2300      	movs	r3, #0
 800540c:	613b      	str	r3, [r7, #16]
 800540e:	e009      	b.n	8005424 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	3340      	adds	r3, #64	; 0x40
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	2200      	movs	r2, #0
 800541c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	3301      	adds	r3, #1
 8005422:	613b      	str	r3, [r7, #16]
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	2b0e      	cmp	r3, #14
 8005428:	d9f2      	bls.n	8005410 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800542a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800542c:	2b00      	cmp	r3, #0
 800542e:	d11c      	bne.n	800546a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800543e:	f043 0302 	orr.w	r3, r3, #2
 8005442:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005448:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005454:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005460:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	639a      	str	r2, [r3, #56]	; 0x38
 8005468:	e00b      	b.n	8005482 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005488:	461a      	mov	r2, r3
 800548a:	2300      	movs	r3, #0
 800548c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005494:	4619      	mov	r1, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549c:	461a      	mov	r2, r3
 800549e:	680b      	ldr	r3, [r1, #0]
 80054a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d10c      	bne.n	80054c2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80054a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d104      	bne.n	80054b8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80054ae:	2100      	movs	r1, #0
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f965 	bl	8005780 <USB_SetDevSpeed>
 80054b6:	e008      	b.n	80054ca <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80054b8:	2101      	movs	r1, #1
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f960 	bl	8005780 <USB_SetDevSpeed>
 80054c0:	e003      	b.n	80054ca <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80054c2:	2103      	movs	r1, #3
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f95b 	bl	8005780 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80054ca:	2110      	movs	r1, #16
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 f8f3 	bl	80056b8 <USB_FlushTxFifo>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d001      	beq.n	80054dc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 f91f 	bl	8005720 <USB_FlushRxFifo>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f2:	461a      	mov	r2, r3
 80054f4:	2300      	movs	r3, #0
 80054f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054fe:	461a      	mov	r2, r3
 8005500:	2300      	movs	r3, #0
 8005502:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800550a:	461a      	mov	r2, r3
 800550c:	2300      	movs	r3, #0
 800550e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005510:	2300      	movs	r3, #0
 8005512:	613b      	str	r3, [r7, #16]
 8005514:	e043      	b.n	800559e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	015a      	lsls	r2, r3, #5
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	4413      	add	r3, r2
 800551e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005528:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800552c:	d118      	bne.n	8005560 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10a      	bne.n	800554a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005540:	461a      	mov	r2, r3
 8005542:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005546:	6013      	str	r3, [r2, #0]
 8005548:	e013      	b.n	8005572 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4413      	add	r3, r2
 8005552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005556:	461a      	mov	r2, r3
 8005558:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800555c:	6013      	str	r3, [r2, #0]
 800555e:	e008      	b.n	8005572 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4413      	add	r3, r2
 8005568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556c:	461a      	mov	r2, r3
 800556e:	2300      	movs	r3, #0
 8005570:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557e:	461a      	mov	r2, r3
 8005580:	2300      	movs	r3, #0
 8005582:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005590:	461a      	mov	r2, r3
 8005592:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005596:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	3301      	adds	r3, #1
 800559c:	613b      	str	r3, [r7, #16]
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d3b7      	bcc.n	8005516 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055a6:	2300      	movs	r3, #0
 80055a8:	613b      	str	r3, [r7, #16]
 80055aa:	e043      	b.n	8005634 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055c2:	d118      	bne.n	80055f6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10a      	bne.n	80055e0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d6:	461a      	mov	r2, r3
 80055d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055dc:	6013      	str	r3, [r2, #0]
 80055de:	e013      	b.n	8005608 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ec:	461a      	mov	r2, r3
 80055ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055f2:	6013      	str	r3, [r2, #0]
 80055f4:	e008      	b.n	8005608 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005602:	461a      	mov	r2, r3
 8005604:	2300      	movs	r3, #0
 8005606:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005614:	461a      	mov	r2, r3
 8005616:	2300      	movs	r3, #0
 8005618:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	015a      	lsls	r2, r3, #5
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	4413      	add	r3, r2
 8005622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005626:	461a      	mov	r2, r3
 8005628:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800562c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	3301      	adds	r3, #1
 8005632:	613b      	str	r3, [r7, #16]
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	429a      	cmp	r2, r3
 800563a:	d3b7      	bcc.n	80055ac <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800564a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800564e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800565c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800565e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005660:	2b00      	cmp	r3, #0
 8005662:	d105      	bne.n	8005670 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	f043 0210 	orr.w	r2, r3, #16
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	699a      	ldr	r2, [r3, #24]
 8005674:	4b0f      	ldr	r3, [pc, #60]	; (80056b4 <USB_DevInit+0x2c4>)
 8005676:	4313      	orrs	r3, r2
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800567c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800567e:	2b00      	cmp	r3, #0
 8005680:	d005      	beq.n	800568e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	f043 0208 	orr.w	r2, r3, #8
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800568e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005690:	2b01      	cmp	r3, #1
 8005692:	d107      	bne.n	80056a4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800569c:	f043 0304 	orr.w	r3, r3, #4
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80056a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056b0:	b004      	add	sp, #16
 80056b2:	4770      	bx	lr
 80056b4:	803c3800 	.word	0x803c3800

080056b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056c2:	2300      	movs	r3, #0
 80056c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	3301      	adds	r3, #1
 80056ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	4a13      	ldr	r2, [pc, #76]	; (800571c <USB_FlushTxFifo+0x64>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d901      	bls.n	80056d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e01b      	b.n	8005710 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	daf2      	bge.n	80056c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	019b      	lsls	r3, r3, #6
 80056e8:	f043 0220 	orr.w	r2, r3, #32
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	3301      	adds	r3, #1
 80056f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	4a08      	ldr	r2, [pc, #32]	; (800571c <USB_FlushTxFifo+0x64>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d901      	bls.n	8005702 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e006      	b.n	8005710 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	f003 0320 	and.w	r3, r3, #32
 800570a:	2b20      	cmp	r3, #32
 800570c:	d0f0      	beq.n	80056f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3714      	adds	r7, #20
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	00030d40 	.word	0x00030d40

08005720 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005728:	2300      	movs	r3, #0
 800572a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	3301      	adds	r3, #1
 8005730:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	4a11      	ldr	r2, [pc, #68]	; (800577c <USB_FlushRxFifo+0x5c>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d901      	bls.n	800573e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e018      	b.n	8005770 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	2b00      	cmp	r3, #0
 8005744:	daf2      	bge.n	800572c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005746:	2300      	movs	r3, #0
 8005748:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2210      	movs	r2, #16
 800574e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	3301      	adds	r3, #1
 8005754:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	4a08      	ldr	r2, [pc, #32]	; (800577c <USB_FlushRxFifo+0x5c>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d901      	bls.n	8005762 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e006      	b.n	8005770 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f003 0310 	and.w	r3, r3, #16
 800576a:	2b10      	cmp	r3, #16
 800576c:	d0f0      	beq.n	8005750 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3714      	adds	r7, #20
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	00030d40 	.word	0x00030d40

08005780 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	460b      	mov	r3, r1
 800578a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	78fb      	ldrb	r3, [r7, #3]
 800579a:	68f9      	ldr	r1, [r7, #12]
 800579c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057a0:	4313      	orrs	r3, r2
 80057a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b087      	sub	sp, #28
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f003 0306 	and.w	r3, r3, #6
 80057ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d102      	bne.n	80057d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80057d2:	2300      	movs	r3, #0
 80057d4:	75fb      	strb	r3, [r7, #23]
 80057d6:	e00a      	b.n	80057ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d002      	beq.n	80057e4 <USB_GetDevSpeed+0x32>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2b06      	cmp	r3, #6
 80057e2:	d102      	bne.n	80057ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80057e4:	2302      	movs	r3, #2
 80057e6:	75fb      	strb	r3, [r7, #23]
 80057e8:	e001      	b.n	80057ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80057ea:	230f      	movs	r3, #15
 80057ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80057ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	371c      	adds	r7, #28
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	785b      	ldrb	r3, [r3, #1]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d13a      	bne.n	800588e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800581e:	69da      	ldr	r2, [r3, #28]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	f003 030f 	and.w	r3, r3, #15
 8005828:	2101      	movs	r1, #1
 800582a:	fa01 f303 	lsl.w	r3, r1, r3
 800582e:	b29b      	uxth	r3, r3
 8005830:	68f9      	ldr	r1, [r7, #12]
 8005832:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005836:	4313      	orrs	r3, r2
 8005838:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d155      	bne.n	80058fc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	791b      	ldrb	r3, [r3, #4]
 800586a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800586c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	059b      	lsls	r3, r3, #22
 8005872:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005874:	4313      	orrs	r3, r2
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	0151      	lsls	r1, r2, #5
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	440a      	add	r2, r1
 800587e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800588a:	6013      	str	r3, [r2, #0]
 800588c:	e036      	b.n	80058fc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005894:	69da      	ldr	r2, [r3, #28]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	2101      	movs	r1, #1
 80058a0:	fa01 f303 	lsl.w	r3, r1, r3
 80058a4:	041b      	lsls	r3, r3, #16
 80058a6:	68f9      	ldr	r1, [r7, #12]
 80058a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058ac:	4313      	orrs	r3, r2
 80058ae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d11a      	bne.n	80058fc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	015a      	lsls	r2, r3, #5
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	791b      	ldrb	r3, [r3, #4]
 80058e0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80058e2:	430b      	orrs	r3, r1
 80058e4:	4313      	orrs	r3, r2
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	0151      	lsls	r1, r2, #5
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	440a      	add	r2, r1
 80058ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058fa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
	...

0800590c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	785b      	ldrb	r3, [r3, #1]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d161      	bne.n	80059ec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800593a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800593e:	d11f      	bne.n	8005980 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4413      	add	r3, r2
 8005948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	0151      	lsls	r1, r2, #5
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	440a      	add	r2, r1
 8005956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800595a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800595e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	0151      	lsls	r1, r2, #5
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	440a      	add	r2, r1
 8005976:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800597a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800597e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005986:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	f003 030f 	and.w	r3, r3, #15
 8005990:	2101      	movs	r1, #1
 8005992:	fa01 f303 	lsl.w	r3, r1, r3
 8005996:	b29b      	uxth	r3, r3
 8005998:	43db      	mvns	r3, r3
 800599a:	68f9      	ldr	r1, [r7, #12]
 800599c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059a0:	4013      	ands	r3, r2
 80059a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059aa:	69da      	ldr	r2, [r3, #28]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	f003 030f 	and.w	r3, r3, #15
 80059b4:	2101      	movs	r1, #1
 80059b6:	fa01 f303 	lsl.w	r3, r1, r3
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	43db      	mvns	r3, r3
 80059be:	68f9      	ldr	r1, [r7, #12]
 80059c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059c4:	4013      	ands	r3, r2
 80059c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	0159      	lsls	r1, r3, #5
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	440b      	add	r3, r1
 80059de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e2:	4619      	mov	r1, r3
 80059e4:	4b35      	ldr	r3, [pc, #212]	; (8005abc <USB_DeactivateEndpoint+0x1b0>)
 80059e6:	4013      	ands	r3, r2
 80059e8:	600b      	str	r3, [r1, #0]
 80059ea:	e060      	b.n	8005aae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a02:	d11f      	bne.n	8005a44 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	015a      	lsls	r2, r3, #5
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	0151      	lsls	r1, r2, #5
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	440a      	add	r2, r1
 8005a1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a22:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	0151      	lsls	r1, r2, #5
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	440a      	add	r2, r1
 8005a3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	f003 030f 	and.w	r3, r3, #15
 8005a54:	2101      	movs	r1, #1
 8005a56:	fa01 f303 	lsl.w	r3, r1, r3
 8005a5a:	041b      	lsls	r3, r3, #16
 8005a5c:	43db      	mvns	r3, r3
 8005a5e:	68f9      	ldr	r1, [r7, #12]
 8005a60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a64:	4013      	ands	r3, r2
 8005a66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6e:	69da      	ldr	r2, [r3, #28]
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	f003 030f 	and.w	r3, r3, #15
 8005a78:	2101      	movs	r1, #1
 8005a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a7e:	041b      	lsls	r3, r3, #16
 8005a80:	43db      	mvns	r3, r3
 8005a82:	68f9      	ldr	r1, [r7, #12]
 8005a84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a88:	4013      	ands	r3, r2
 8005a8a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	0159      	lsls	r1, r3, #5
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	440b      	add	r3, r1
 8005aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <USB_DeactivateEndpoint+0x1b4>)
 8005aaa:	4013      	ands	r3, r2
 8005aac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	ec337800 	.word	0xec337800
 8005ac0:	eff37800 	.word	0xeff37800

08005ac4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b08a      	sub	sp, #40	; 0x28
 8005ac8:	af02      	add	r7, sp, #8
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	785b      	ldrb	r3, [r3, #1]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	f040 815c 	bne.w	8005d9e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d132      	bne.n	8005b54 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	0151      	lsls	r1, r2, #5
 8005b00:	69fa      	ldr	r2, [r7, #28]
 8005b02:	440a      	add	r2, r1
 8005b04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	0151      	lsls	r1, r2, #5
 8005b24:	69fa      	ldr	r2, [r7, #28]
 8005b26:	440a      	add	r2, r1
 8005b28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	0151      	lsls	r1, r2, #5
 8005b44:	69fa      	ldr	r2, [r7, #28]
 8005b46:	440a      	add	r2, r1
 8005b48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b4c:	0cdb      	lsrs	r3, r3, #19
 8005b4e:	04db      	lsls	r3, r3, #19
 8005b50:	6113      	str	r3, [r2, #16]
 8005b52:	e074      	b.n	8005c3e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	0151      	lsls	r1, r2, #5
 8005b66:	69fa      	ldr	r2, [r7, #28]
 8005b68:	440a      	add	r2, r1
 8005b6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b6e:	0cdb      	lsrs	r3, r3, #19
 8005b70:	04db      	lsls	r3, r3, #19
 8005b72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	0151      	lsls	r1, r2, #5
 8005b86:	69fa      	ldr	r2, [r7, #28]
 8005b88:	440a      	add	r2, r1
 8005b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	6999      	ldr	r1, [r3, #24]
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	440b      	add	r3, r1
 8005bb0:	1e59      	subs	r1, r3, #1
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bba:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005bbc:	4b9d      	ldr	r3, [pc, #628]	; (8005e34 <USB_EPStartXfer+0x370>)
 8005bbe:	400b      	ands	r3, r1
 8005bc0:	69b9      	ldr	r1, [r7, #24]
 8005bc2:	0148      	lsls	r0, r1, #5
 8005bc4:	69f9      	ldr	r1, [r7, #28]
 8005bc6:	4401      	add	r1, r0
 8005bc8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bdc:	691a      	ldr	r2, [r3, #16]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005be6:	69b9      	ldr	r1, [r7, #24]
 8005be8:	0148      	lsls	r0, r1, #5
 8005bea:	69f9      	ldr	r1, [r7, #28]
 8005bec:	4401      	add	r1, r0
 8005bee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	791b      	ldrb	r3, [r3, #4]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d11f      	bne.n	8005c3e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	69ba      	ldr	r2, [r7, #24]
 8005c0e:	0151      	lsls	r1, r2, #5
 8005c10:	69fa      	ldr	r2, [r7, #28]
 8005c12:	440a      	add	r2, r1
 8005c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c18:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005c1c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	015a      	lsls	r2, r3, #5
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	4413      	add	r3, r2
 8005c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	0151      	lsls	r1, r2, #5
 8005c30:	69fa      	ldr	r2, [r7, #28]
 8005c32:	440a      	add	r2, r1
 8005c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c3c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005c3e:	79fb      	ldrb	r3, [r7, #7]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d14b      	bne.n	8005cdc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d009      	beq.n	8005c60 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c58:	461a      	mov	r2, r3
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	791b      	ldrb	r3, [r3, #4]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d128      	bne.n	8005cba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d110      	bne.n	8005c9a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	0151      	lsls	r1, r2, #5
 8005c8a:	69fa      	ldr	r2, [r7, #28]
 8005c8c:	440a      	add	r2, r1
 8005c8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c96:	6013      	str	r3, [r2, #0]
 8005c98:	e00f      	b.n	8005cba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	0151      	lsls	r1, r2, #5
 8005cac:	69fa      	ldr	r2, [r7, #28]
 8005cae:	440a      	add	r2, r1
 8005cb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cb8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	0151      	lsls	r1, r2, #5
 8005ccc:	69fa      	ldr	r2, [r7, #28]
 8005cce:	440a      	add	r2, r1
 8005cd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cd8:	6013      	str	r3, [r2, #0]
 8005cda:	e133      	b.n	8005f44 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69ba      	ldr	r2, [r7, #24]
 8005cec:	0151      	lsls	r1, r2, #5
 8005cee:	69fa      	ldr	r2, [r7, #28]
 8005cf0:	440a      	add	r2, r1
 8005cf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cfa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	791b      	ldrb	r3, [r3, #4]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d015      	beq.n	8005d30 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 811b 	beq.w	8005f44 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	f003 030f 	and.w	r3, r3, #15
 8005d1e:	2101      	movs	r1, #1
 8005d20:	fa01 f303 	lsl.w	r3, r1, r3
 8005d24:	69f9      	ldr	r1, [r7, #28]
 8005d26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	634b      	str	r3, [r1, #52]	; 0x34
 8005d2e:	e109      	b.n	8005f44 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d110      	bne.n	8005d62 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	0151      	lsls	r1, r2, #5
 8005d52:	69fa      	ldr	r2, [r7, #28]
 8005d54:	440a      	add	r2, r1
 8005d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d5e:	6013      	str	r3, [r2, #0]
 8005d60:	e00f      	b.n	8005d82 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	0151      	lsls	r1, r2, #5
 8005d74:	69fa      	ldr	r2, [r7, #28]
 8005d76:	440a      	add	r2, r1
 8005d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d80:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	6919      	ldr	r1, [r3, #16]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	781a      	ldrb	r2, [r3, #0]
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	b298      	uxth	r0, r3
 8005d90:	79fb      	ldrb	r3, [r7, #7]
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	4603      	mov	r3, r0
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 fade 	bl	8006358 <USB_WritePacket>
 8005d9c:	e0d2      	b.n	8005f44 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	0151      	lsls	r1, r2, #5
 8005db0:	69fa      	ldr	r2, [r7, #28]
 8005db2:	440a      	add	r2, r1
 8005db4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005db8:	0cdb      	lsrs	r3, r3, #19
 8005dba:	04db      	lsls	r3, r3, #19
 8005dbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	0151      	lsls	r1, r2, #5
 8005dd0:	69fa      	ldr	r2, [r7, #28]
 8005dd2:	440a      	add	r2, r1
 8005dd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ddc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005de0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d126      	bne.n	8005e38 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df6:	691a      	ldr	r2, [r3, #16]
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e00:	69b9      	ldr	r1, [r7, #24]
 8005e02:	0148      	lsls	r0, r1, #5
 8005e04:	69f9      	ldr	r1, [r7, #28]
 8005e06:	4401      	add	r1, r0
 8005e08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	0151      	lsls	r1, r2, #5
 8005e22:	69fa      	ldr	r2, [r7, #28]
 8005e24:	440a      	add	r2, r1
 8005e26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e2e:	6113      	str	r3, [r2, #16]
 8005e30:	e03a      	b.n	8005ea8 <USB_EPStartXfer+0x3e4>
 8005e32:	bf00      	nop
 8005e34:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	699a      	ldr	r2, [r3, #24]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	4413      	add	r3, r2
 8005e42:	1e5a      	subs	r2, r3, #1
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	8afa      	ldrh	r2, [r7, #22]
 8005e54:	fb03 f202 	mul.w	r2, r3, r2
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e68:	691a      	ldr	r2, [r3, #16]
 8005e6a:	8afb      	ldrh	r3, [r7, #22]
 8005e6c:	04d9      	lsls	r1, r3, #19
 8005e6e:	4b38      	ldr	r3, [pc, #224]	; (8005f50 <USB_EPStartXfer+0x48c>)
 8005e70:	400b      	ands	r3, r1
 8005e72:	69b9      	ldr	r1, [r7, #24]
 8005e74:	0148      	lsls	r0, r1, #5
 8005e76:	69f9      	ldr	r1, [r7, #28]
 8005e78:	4401      	add	r1, r0
 8005e7a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8e:	691a      	ldr	r2, [r3, #16]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	69db      	ldr	r3, [r3, #28]
 8005e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e98:	69b9      	ldr	r1, [r7, #24]
 8005e9a:	0148      	lsls	r0, r1, #5
 8005e9c:	69f9      	ldr	r1, [r7, #28]
 8005e9e:	4401      	add	r1, r0
 8005ea0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ea8:	79fb      	ldrb	r3, [r7, #7]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d10d      	bne.n	8005eca <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d009      	beq.n	8005eca <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	6919      	ldr	r1, [r3, #16]
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	015a      	lsls	r2, r3, #5
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec6:	460a      	mov	r2, r1
 8005ec8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	791b      	ldrb	r3, [r3, #4]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d128      	bne.n	8005f24 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d110      	bne.n	8005f04 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	015a      	lsls	r2, r3, #5
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	0151      	lsls	r1, r2, #5
 8005ef4:	69fa      	ldr	r2, [r7, #28]
 8005ef6:	440a      	add	r2, r1
 8005ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005efc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f00:	6013      	str	r3, [r2, #0]
 8005f02:	e00f      	b.n	8005f24 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	0151      	lsls	r1, r2, #5
 8005f16:	69fa      	ldr	r2, [r7, #28]
 8005f18:	440a      	add	r2, r1
 8005f1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f22:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	0151      	lsls	r1, r2, #5
 8005f36:	69fa      	ldr	r2, [r7, #28]
 8005f38:	440a      	add	r2, r1
 8005f3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3720      	adds	r7, #32
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	1ff80000 	.word	0x1ff80000

08005f54 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	785b      	ldrb	r3, [r3, #1]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	f040 80ce 	bne.w	8006112 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d132      	bne.n	8005fe4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	0151      	lsls	r1, r2, #5
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	440a      	add	r2, r1
 8005f94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fa0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	0151      	lsls	r1, r2, #5
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	440a      	add	r2, r1
 8005fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	0151      	lsls	r1, r2, #5
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	440a      	add	r2, r1
 8005fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fdc:	0cdb      	lsrs	r3, r3, #19
 8005fde:	04db      	lsls	r3, r3, #19
 8005fe0:	6113      	str	r3, [r2, #16]
 8005fe2:	e04e      	b.n	8006082 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	0151      	lsls	r1, r2, #5
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	440a      	add	r2, r1
 8005ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ffe:	0cdb      	lsrs	r3, r3, #19
 8006000:	04db      	lsls	r3, r3, #19
 8006002:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	0151      	lsls	r1, r2, #5
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	440a      	add	r2, r1
 800601a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800601e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006022:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006026:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	699a      	ldr	r2, [r3, #24]
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	429a      	cmp	r2, r3
 8006032:	d903      	bls.n	800603c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	68da      	ldr	r2, [r3, #12]
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	4413      	add	r3, r2
 8006044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	0151      	lsls	r1, r2, #5
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	440a      	add	r2, r1
 8006052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006056:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800605a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	015a      	lsls	r2, r3, #5
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	4413      	add	r3, r2
 8006064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006068:	691a      	ldr	r2, [r3, #16]
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006072:	6939      	ldr	r1, [r7, #16]
 8006074:	0148      	lsls	r0, r1, #5
 8006076:	6979      	ldr	r1, [r7, #20]
 8006078:	4401      	add	r1, r0
 800607a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800607e:	4313      	orrs	r3, r2
 8006080:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006082:	79fb      	ldrb	r3, [r7, #7]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d11e      	bne.n	80060c6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d009      	beq.n	80060a4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	4413      	add	r3, r2
 8006098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800609c:	461a      	mov	r2, r3
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	0151      	lsls	r1, r2, #5
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	440a      	add	r2, r1
 80060ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060c2:	6013      	str	r3, [r2, #0]
 80060c4:	e097      	b.n	80061f6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	0151      	lsls	r1, r2, #5
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	440a      	add	r2, r1
 80060dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060e4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 8083 	beq.w	80061f6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	f003 030f 	and.w	r3, r3, #15
 8006100:	2101      	movs	r1, #1
 8006102:	fa01 f303 	lsl.w	r3, r1, r3
 8006106:	6979      	ldr	r1, [r7, #20]
 8006108:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800610c:	4313      	orrs	r3, r2
 800610e:	634b      	str	r3, [r1, #52]	; 0x34
 8006110:	e071      	b.n	80061f6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	4413      	add	r3, r2
 800611a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	0151      	lsls	r1, r2, #5
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	440a      	add	r2, r1
 8006128:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800612c:	0cdb      	lsrs	r3, r3, #19
 800612e:	04db      	lsls	r3, r3, #19
 8006130:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	4413      	add	r3, r2
 800613a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	0151      	lsls	r1, r2, #5
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	440a      	add	r2, r1
 8006148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800614c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006150:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006154:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d003      	beq.n	8006166 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	68da      	ldr	r2, [r3, #12]
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	68da      	ldr	r2, [r3, #12]
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	4413      	add	r3, r2
 8006176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	0151      	lsls	r1, r2, #5
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	440a      	add	r2, r1
 8006184:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006188:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800618c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	4413      	add	r3, r2
 8006196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619a:	691a      	ldr	r2, [r3, #16]
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	69db      	ldr	r3, [r3, #28]
 80061a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061a4:	6939      	ldr	r1, [r7, #16]
 80061a6:	0148      	lsls	r0, r1, #5
 80061a8:	6979      	ldr	r1, [r7, #20]
 80061aa:	4401      	add	r1, r0
 80061ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80061b0:	4313      	orrs	r3, r2
 80061b2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80061b4:	79fb      	ldrb	r3, [r7, #7]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d10d      	bne.n	80061d6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d009      	beq.n	80061d6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	6919      	ldr	r1, [r3, #16]
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	015a      	lsls	r2, r3, #5
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	4413      	add	r3, r2
 80061ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d2:	460a      	mov	r2, r1
 80061d4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	0151      	lsls	r1, r2, #5
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	440a      	add	r2, r1
 80061ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	371c      	adds	r7, #28
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006204:	b480      	push	{r7}
 8006206:	b087      	sub	sp, #28
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800620e:	2300      	movs	r3, #0
 8006210:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	785b      	ldrb	r3, [r3, #1]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d14a      	bne.n	80062b8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	4413      	add	r3, r2
 800622c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006236:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800623a:	f040 8086 	bne.w	800634a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	4413      	add	r3, r2
 8006248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	7812      	ldrb	r2, [r2, #0]
 8006252:	0151      	lsls	r1, r2, #5
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	440a      	add	r2, r1
 8006258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800625c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006260:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	4413      	add	r3, r2
 800626c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	683a      	ldr	r2, [r7, #0]
 8006274:	7812      	ldrb	r2, [r2, #0]
 8006276:	0151      	lsls	r1, r2, #5
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	440a      	add	r2, r1
 800627c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006280:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006284:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	3301      	adds	r3, #1
 800628a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006292:	4293      	cmp	r3, r2
 8006294:	d902      	bls.n	800629c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	75fb      	strb	r3, [r7, #23]
          break;
 800629a:	e056      	b.n	800634a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062b4:	d0e7      	beq.n	8006286 <USB_EPStopXfer+0x82>
 80062b6:	e048      	b.n	800634a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062d0:	d13b      	bne.n	800634a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	7812      	ldrb	r2, [r2, #0]
 80062e6:	0151      	lsls	r1, r2, #5
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	440a      	add	r2, r1
 80062ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062f4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	015a      	lsls	r2, r3, #5
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	4413      	add	r3, r2
 8006300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	7812      	ldrb	r2, [r2, #0]
 800630a:	0151      	lsls	r1, r2, #5
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	440a      	add	r2, r1
 8006310:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006314:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006318:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	3301      	adds	r3, #1
 800631e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f242 7210 	movw	r2, #10000	; 0x2710
 8006326:	4293      	cmp	r3, r2
 8006328:	d902      	bls.n	8006330 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	75fb      	strb	r3, [r7, #23]
          break;
 800632e:	e00c      	b.n	800634a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	4413      	add	r3, r2
 800633a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006344:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006348:	d0e7      	beq.n	800631a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800634a:	7dfb      	ldrb	r3, [r7, #23]
}
 800634c:	4618      	mov	r0, r3
 800634e:	371c      	adds	r7, #28
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006358:	b480      	push	{r7}
 800635a:	b089      	sub	sp, #36	; 0x24
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	4611      	mov	r1, r2
 8006364:	461a      	mov	r2, r3
 8006366:	460b      	mov	r3, r1
 8006368:	71fb      	strb	r3, [r7, #7]
 800636a:	4613      	mov	r3, r2
 800636c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006376:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800637a:	2b00      	cmp	r3, #0
 800637c:	d123      	bne.n	80063c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800637e:	88bb      	ldrh	r3, [r7, #4]
 8006380:	3303      	adds	r3, #3
 8006382:	089b      	lsrs	r3, r3, #2
 8006384:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006386:	2300      	movs	r3, #0
 8006388:	61bb      	str	r3, [r7, #24]
 800638a:	e018      	b.n	80063be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800638c:	79fb      	ldrb	r3, [r7, #7]
 800638e:	031a      	lsls	r2, r3, #12
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	4413      	add	r3, r2
 8006394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006398:	461a      	mov	r2, r3
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	6013      	str	r3, [r2, #0]
      pSrc++;
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	3301      	adds	r3, #1
 80063a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	3301      	adds	r3, #1
 80063aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	3301      	adds	r3, #1
 80063b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	3301      	adds	r3, #1
 80063b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	3301      	adds	r3, #1
 80063bc:	61bb      	str	r3, [r7, #24]
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d3e2      	bcc.n	800638c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3724      	adds	r7, #36	; 0x24
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b08b      	sub	sp, #44	; 0x2c
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	4613      	mov	r3, r2
 80063e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80063ea:	88fb      	ldrh	r3, [r7, #6]
 80063ec:	089b      	lsrs	r3, r3, #2
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80063f2:	88fb      	ldrh	r3, [r7, #6]
 80063f4:	f003 0303 	and.w	r3, r3, #3
 80063f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80063fa:	2300      	movs	r3, #0
 80063fc:	623b      	str	r3, [r7, #32]
 80063fe:	e014      	b.n	800642a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	601a      	str	r2, [r3, #0]
    pDest++;
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	3301      	adds	r3, #1
 8006410:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006414:	3301      	adds	r3, #1
 8006416:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	3301      	adds	r3, #1
 800641c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	3301      	adds	r3, #1
 8006422:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	3301      	adds	r3, #1
 8006428:	623b      	str	r3, [r7, #32]
 800642a:	6a3a      	ldr	r2, [r7, #32]
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	429a      	cmp	r2, r3
 8006430:	d3e6      	bcc.n	8006400 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006432:	8bfb      	ldrh	r3, [r7, #30]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d01e      	beq.n	8006476 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006438:	2300      	movs	r3, #0
 800643a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006442:	461a      	mov	r2, r3
 8006444:	f107 0310 	add.w	r3, r7, #16
 8006448:	6812      	ldr	r2, [r2, #0]
 800644a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	b2db      	uxtb	r3, r3
 8006452:	00db      	lsls	r3, r3, #3
 8006454:	fa22 f303 	lsr.w	r3, r2, r3
 8006458:	b2da      	uxtb	r2, r3
 800645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645c:	701a      	strb	r2, [r3, #0]
      i++;
 800645e:	6a3b      	ldr	r3, [r7, #32]
 8006460:	3301      	adds	r3, #1
 8006462:	623b      	str	r3, [r7, #32]
      pDest++;
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	3301      	adds	r3, #1
 8006468:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800646a:	8bfb      	ldrh	r3, [r7, #30]
 800646c:	3b01      	subs	r3, #1
 800646e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006470:	8bfb      	ldrh	r3, [r7, #30]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1ea      	bne.n	800644c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006478:	4618      	mov	r0, r3
 800647a:	372c      	adds	r7, #44	; 0x2c
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	785b      	ldrb	r3, [r3, #1]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d12c      	bne.n	80064fa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	db12      	blt.n	80064d8 <USB_EPSetStall+0x54>
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00f      	beq.n	80064d8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	015a      	lsls	r2, r3, #5
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4413      	add	r3, r2
 80064c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	0151      	lsls	r1, r2, #5
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	440a      	add	r2, r1
 80064ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064d6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	0151      	lsls	r1, r2, #5
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	440a      	add	r2, r1
 80064ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80064f6:	6013      	str	r3, [r2, #0]
 80064f8:	e02b      	b.n	8006552 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	015a      	lsls	r2, r3, #5
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4413      	add	r3, r2
 8006502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	db12      	blt.n	8006532 <USB_EPSetStall+0xae>
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00f      	beq.n	8006532 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	4413      	add	r3, r2
 800651a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	0151      	lsls	r1, r2, #5
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	440a      	add	r2, r1
 8006528:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800652c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006530:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	015a      	lsls	r2, r3, #5
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4413      	add	r3, r2
 800653a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	0151      	lsls	r1, r2, #5
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	440a      	add	r2, r1
 8006548:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800654c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006550:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3714      	adds	r7, #20
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	785b      	ldrb	r3, [r3, #1]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d128      	bne.n	80065ce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4413      	add	r3, r2
 8006584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	0151      	lsls	r1, r2, #5
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	440a      	add	r2, r1
 8006592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006596:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800659a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	791b      	ldrb	r3, [r3, #4]
 80065a0:	2b03      	cmp	r3, #3
 80065a2:	d003      	beq.n	80065ac <USB_EPClearStall+0x4c>
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	791b      	ldrb	r3, [r3, #4]
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d138      	bne.n	800661e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	0151      	lsls	r1, r2, #5
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	440a      	add	r2, r1
 80065c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065ca:	6013      	str	r3, [r2, #0]
 80065cc:	e027      	b.n	800661e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	0151      	lsls	r1, r2, #5
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	440a      	add	r2, r1
 80065e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	791b      	ldrb	r3, [r3, #4]
 80065f2:	2b03      	cmp	r3, #3
 80065f4:	d003      	beq.n	80065fe <USB_EPClearStall+0x9e>
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	791b      	ldrb	r3, [r3, #4]
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d10f      	bne.n	800661e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	015a      	lsls	r2, r3, #5
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	4413      	add	r3, r2
 8006606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	0151      	lsls	r1, r2, #5
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	440a      	add	r2, r1
 8006614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800661c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3714      	adds	r7, #20
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	460b      	mov	r3, r1
 8006636:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800664a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800664e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	78fb      	ldrb	r3, [r7, #3]
 800665a:	011b      	lsls	r3, r3, #4
 800665c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006660:	68f9      	ldr	r1, [r7, #12]
 8006662:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006666:	4313      	orrs	r3, r2
 8006668:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006692:	f023 0303 	bic.w	r3, r3, #3
 8006696:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066a6:	f023 0302 	bic.w	r3, r3, #2
 80066aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b085      	sub	sp, #20
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80066d4:	f023 0303 	bic.w	r3, r3, #3
 80066d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066e8:	f043 0302 	orr.w	r3, r3, #2
 80066ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	4013      	ands	r3, r2
 8006712:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006714:	68fb      	ldr	r3, [r7, #12]
}
 8006716:	4618      	mov	r0, r3
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006722:	b480      	push	{r7}
 8006724:	b085      	sub	sp, #20
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	4013      	ands	r3, r2
 8006744:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	0c1b      	lsrs	r3, r3, #16
}
 800674a:	4618      	mov	r0, r3
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006756:	b480      	push	{r7}
 8006758:	b085      	sub	sp, #20
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	4013      	ands	r3, r2
 8006778:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	b29b      	uxth	r3, r3
}
 800677e:	4618      	mov	r0, r3
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800678a:	b480      	push	{r7}
 800678c:	b085      	sub	sp, #20
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
 8006792:	460b      	mov	r3, r1
 8006794:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800679a:	78fb      	ldrb	r3, [r7, #3]
 800679c:	015a      	lsls	r2, r3, #5
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	4013      	ands	r3, r2
 80067b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80067b8:	68bb      	ldr	r3, [r7, #8]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b087      	sub	sp, #28
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
 80067ce:	460b      	mov	r3, r1
 80067d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067e8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80067ea:	78fb      	ldrb	r3, [r7, #3]
 80067ec:	f003 030f 	and.w	r3, r3, #15
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	fa22 f303 	lsr.w	r3, r2, r3
 80067f6:	01db      	lsls	r3, r3, #7
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006800:	78fb      	ldrb	r3, [r7, #3]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	4413      	add	r3, r2
 8006808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	4013      	ands	r3, r2
 8006812:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006814:	68bb      	ldr	r3, [r7, #8]
}
 8006816:	4618      	mov	r0, r3
 8006818:	371c      	adds	r7, #28
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006822:	b480      	push	{r7}
 8006824:	b083      	sub	sp, #12
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	f003 0301 	and.w	r3, r3, #1
}
 8006832:	4618      	mov	r0, r3
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800683e:	b480      	push	{r7}
 8006840:	b085      	sub	sp, #20
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006858:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800685c:	f023 0307 	bic.w	r3, r3, #7
 8006860:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006874:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006884:	b480      	push	{r7}
 8006886:	b087      	sub	sp, #28
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	460b      	mov	r3, r1
 800688e:	607a      	str	r2, [r7, #4]
 8006890:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	333c      	adds	r3, #60	; 0x3c
 800689a:	3304      	adds	r3, #4
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	4a26      	ldr	r2, [pc, #152]	; (800693c <USB_EP0_OutStart+0xb8>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d90a      	bls.n	80068be <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068b8:	d101      	bne.n	80068be <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	e037      	b.n	800692e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c4:	461a      	mov	r2, r3
 80068c6:	2300      	movs	r3, #0
 80068c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068ec:	f043 0318 	orr.w	r3, r3, #24
 80068f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006900:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006904:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006906:	7afb      	ldrb	r3, [r7, #11]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d10f      	bne.n	800692c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006912:	461a      	mov	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006926:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800692a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	371c      	adds	r7, #28
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	4f54300a 	.word	0x4f54300a

08006940 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006948:	2300      	movs	r3, #0
 800694a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	3301      	adds	r3, #1
 8006950:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	4a13      	ldr	r2, [pc, #76]	; (80069a4 <USB_CoreReset+0x64>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d901      	bls.n	800695e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e01b      	b.n	8006996 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	2b00      	cmp	r3, #0
 8006964:	daf2      	bge.n	800694c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006966:	2300      	movs	r3, #0
 8006968:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	f043 0201 	orr.w	r2, r3, #1
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	3301      	adds	r3, #1
 800697a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4a09      	ldr	r2, [pc, #36]	; (80069a4 <USB_CoreReset+0x64>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d901      	bls.n	8006988 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e006      	b.n	8006996 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	f003 0301 	and.w	r3, r3, #1
 8006990:	2b01      	cmp	r3, #1
 8006992:	d0f0      	beq.n	8006976 <USB_CoreReset+0x36>

  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3714      	adds	r7, #20
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	00030d40 	.word	0x00030d40

080069a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80069ac:	4904      	ldr	r1, [pc, #16]	; (80069c0 <MX_FATFS_Init+0x18>)
 80069ae:	4805      	ldr	r0, [pc, #20]	; (80069c4 <MX_FATFS_Init+0x1c>)
 80069b0:	f004 fc36 	bl	800b220 <FATFS_LinkDriver>
 80069b4:	4603      	mov	r3, r0
 80069b6:	461a      	mov	r2, r3
 80069b8:	4b03      	ldr	r3, [pc, #12]	; (80069c8 <MX_FATFS_Init+0x20>)
 80069ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80069bc:	bf00      	nop
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	20000d80 	.word	0x20000d80
 80069c4:	20000010 	.word	0x20000010
 80069c8:	20000d7c 	.word	0x20000d7c

080069cc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80069cc:	b480      	push	{r7}
 80069ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80069d0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	4603      	mov	r3, r0
 80069e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 80069e6:	79fb      	ldrb	r3, [r7, #7]
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7fa fc6d 	bl	80012c8 <SD_disk_initialize>
 80069ee:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3708      	adds	r7, #8
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	4603      	mov	r3, r0
 8006a00:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8006a02:	79fb      	ldrb	r3, [r7, #7]
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7fa fd4b 	bl	80014a0 <SD_disk_status>
 8006a0a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60b9      	str	r1, [r7, #8]
 8006a1c:	607a      	str	r2, [r7, #4]
 8006a1e:	603b      	str	r3, [r7, #0]
 8006a20:	4603      	mov	r3, r0
 8006a22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8006a24:	7bf8      	ldrb	r0, [r7, #15]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	68b9      	ldr	r1, [r7, #8]
 8006a2c:	f7fa fd4e 	bl	80014cc <SD_disk_read>
 8006a30:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b084      	sub	sp, #16
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
 8006a44:	603b      	str	r3, [r7, #0]
 8006a46:	4603      	mov	r3, r0
 8006a48:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8006a4a:	7bf8      	ldrb	r0, [r7, #15]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	68b9      	ldr	r1, [r7, #8]
 8006a52:	f7fa fda5 	bl	80015a0 <SD_disk_write>
 8006a56:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	4603      	mov	r3, r0
 8006a68:	603a      	str	r2, [r7, #0]
 8006a6a:	71fb      	strb	r3, [r7, #7]
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8006a70:	79b9      	ldrb	r1, [r7, #6]
 8006a72:	79fb      	ldrb	r3, [r7, #7]
 8006a74:	683a      	ldr	r2, [r7, #0]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7fa fe16 	bl	80016a8 <SD_disk_ioctl>
 8006a7c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3708      	adds	r7, #8
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <hx711_lock>:
    __NOP(); __NOP(); __NOP(); __NOP();
  }
}
//#############################################################################################
void hx711_lock(hx711_t *hx711)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b082      	sub	sp, #8
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  while (hx711->lock)
 8006a8e:	e002      	b.n	8006a96 <hx711_lock+0x10>
    hx711_delay(1);
 8006a90:	2001      	movs	r0, #1
 8006a92:	f7fb fc0b 	bl	80022ac <HAL_Delay>
  while (hx711->lock)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	7d1b      	ldrb	r3, [r3, #20]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1f8      	bne.n	8006a90 <hx711_lock+0xa>
  hx711->lock = 1;      
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	751a      	strb	r2, [r3, #20]
}
 8006aa4:	bf00      	nop
 8006aa6:	3708      	adds	r7, #8
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <hx711_unlock>:
//#############################################################################################
void hx711_unlock(hx711_t *hx711)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  hx711->lock = 0;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	751a      	strb	r2, [r3, #20]
}
 8006aba:	bf00      	nop
 8006abc:	370c      	adds	r7, #12
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <hx711_init>:
//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b08a      	sub	sp, #40	; 0x28
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	60f8      	str	r0, [r7, #12]
 8006ace:	60b9      	str	r1, [r7, #8]
 8006ad0:	603b      	str	r3, [r7, #0]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	80fb      	strh	r3, [r7, #6]
  hx711_lock(hx711);
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f7ff ffd5 	bl	8006a86 <hx711_lock>
  hx711->clk_gpio = clk_gpio;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	88fa      	ldrh	r2, [r7, #6]
 8006ae6:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	683a      	ldr	r2, [r7, #0]
 8006aec:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8006af2:	815a      	strh	r2, [r3, #10]
  
  GPIO_InitTypeDef  gpio = {0};
 8006af4:	f107 0314 	add.w	r3, r7, #20
 8006af8:	2200      	movs	r2, #0
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	605a      	str	r2, [r3, #4]
 8006afe:	609a      	str	r2, [r3, #8]
 8006b00:	60da      	str	r2, [r3, #12]
 8006b02:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8006b04:	2301      	movs	r3, #1
 8006b06:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_NOPULL;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	623b      	str	r3, [r7, #32]
  gpio.Pin = clk_pin;
 8006b10:	88fb      	ldrh	r3, [r7, #6]
 8006b12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(clk_gpio, &gpio);
 8006b14:	f107 0314 	add.w	r3, r7, #20
 8006b18:	4619      	mov	r1, r3
 8006b1a:	68b8      	ldr	r0, [r7, #8]
 8006b1c:	f7fb fd08 	bl	8002530 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8006b20:	2300      	movs	r3, #0
 8006b22:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_PULLUP;
 8006b24:	2301      	movs	r3, #1
 8006b26:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8006b28:	2302      	movs	r3, #2
 8006b2a:	623b      	str	r3, [r7, #32]
  gpio.Pin = dat_pin;
 8006b2c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006b2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8006b30:	f107 0314 	add.w	r3, r7, #20
 8006b34:	4619      	mov	r1, r3
 8006b36:	6838      	ldr	r0, [r7, #0]
 8006b38:	f7fb fcfa 	bl	8002530 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6818      	ldr	r0, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	891b      	ldrh	r3, [r3, #8]
 8006b44:	2201      	movs	r2, #1
 8006b46:	4619      	mov	r1, r3
 8006b48:	f7fb fe8e 	bl	8002868 <HAL_GPIO_WritePin>
  hx711_delay(10);
 8006b4c:	200a      	movs	r0, #10
 8006b4e:	f7fb fbad 	bl	80022ac <HAL_Delay>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6818      	ldr	r0, [r3, #0]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	891b      	ldrh	r3, [r3, #8]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	f7fb fe83 	bl	8002868 <HAL_GPIO_WritePin>
  hx711_delay(10);  
 8006b62:	200a      	movs	r0, #10
 8006b64:	f7fb fba2 	bl	80022ac <HAL_Delay>
  hx711_value(hx711);
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f000 f80a 	bl	8006b82 <hx711_value>
  hx711_value(hx711);
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f000 f807 	bl	8006b82 <hx711_value>
  hx711_unlock(hx711); 
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f7ff ff99 	bl	8006aac <hx711_unlock>
}
 8006b7a:	bf00      	nop
 8006b7c:	3728      	adds	r7, #40	; 0x28
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <hx711_value>:
//#############################################################################################
int32_t hx711_value(hx711_t *hx711)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b086      	sub	sp, #24
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  uint32_t data = 0;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 8006b8e:	f7fb fb81 	bl	8002294 <HAL_GetTick>
 8006b92:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8006b94:	e00b      	b.n	8006bae <hx711_value+0x2c>
  {
    hx711_delay(1);
 8006b96:	2001      	movs	r0, #1
 8006b98:	f7fb fb88 	bl	80022ac <HAL_Delay>
    if(HAL_GetTick() - startTime > 150)
 8006b9c:	f7fb fb7a 	bl	8002294 <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	2b96      	cmp	r3, #150	; 0x96
 8006ba8:	d901      	bls.n	8006bae <hx711_value+0x2c>
      return 0;
 8006baa:	2300      	movs	r3, #0
 8006bac:	e04d      	b.n	8006c4a <hx711_value+0xc8>
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685a      	ldr	r2, [r3, #4]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	895b      	ldrh	r3, [r3, #10]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	4610      	mov	r0, r2
 8006bba:	f7fb fe3d 	bl	8002838 <HAL_GPIO_ReadPin>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d0e8      	beq.n	8006b96 <hx711_value+0x14>
  }
  for(int8_t i=0; i<24 ; i++)
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	74fb      	strb	r3, [r7, #19]
 8006bc8:	e026      	b.n	8006c18 <hx711_value+0x96>
  {
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6818      	ldr	r0, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	891b      	ldrh	r3, [r3, #8]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	f7fb fe47 	bl	8002868 <HAL_GPIO_WritePin>
    //hx711_delay_us();
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6818      	ldr	r0, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	891b      	ldrh	r3, [r3, #8]
 8006be2:	2200      	movs	r2, #0
 8006be4:	4619      	mov	r1, r3
 8006be6:	f7fb fe3f 	bl	8002868 <HAL_GPIO_WritePin>
    //hx711_delay_us();
    data = data << 1;    
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	005b      	lsls	r3, r3, #1
 8006bee:	617b      	str	r3, [r7, #20]
    if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	895b      	ldrh	r3, [r3, #10]
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	4610      	mov	r0, r2
 8006bfc:	f7fb fe1c 	bl	8002838 <HAL_GPIO_ReadPin>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d102      	bne.n	8006c0c <hx711_value+0x8a>
      data ++;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i<24 ; i++)
 8006c0c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	3301      	adds	r3, #1
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	74fb      	strb	r3, [r7, #19]
 8006c18:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006c1c:	2b17      	cmp	r3, #23
 8006c1e:	ddd4      	ble.n	8006bca <hx711_value+0x48>
  }
  data = data ^ 0x800000; 
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8006c26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6818      	ldr	r0, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	891b      	ldrh	r3, [r3, #8]
 8006c30:	2201      	movs	r2, #1
 8006c32:	4619      	mov	r1, r3
 8006c34:	f7fb fe18 	bl	8002868 <HAL_GPIO_WritePin>
  //hx711_delay_us();
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6818      	ldr	r0, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	891b      	ldrh	r3, [r3, #8]
 8006c40:	2200      	movs	r2, #0
 8006c42:	4619      	mov	r1, r3
 8006c44:	f7fb fe10 	bl	8002868 <HAL_GPIO_WritePin>
  //hx711_delay_us();
  return data;    
 8006c48:	697b      	ldr	r3, [r7, #20]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3718      	adds	r7, #24
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <hx711_value_ave>:
//#############################################################################################
int32_t hx711_value_ave(hx711_t *hx711, uint16_t sample)
{
 8006c52:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c56:	b086      	sub	sp, #24
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f7ff ff10 	bl	8006a86 <hx711_lock>
  int64_t  ave = 0;
 8006c66:	f04f 0200 	mov.w	r2, #0
 8006c6a:	f04f 0300 	mov.w	r3, #0
 8006c6e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for(uint16_t i=0 ; i<sample ; i++)
 8006c72:	2300      	movs	r3, #0
 8006c74:	81fb      	strh	r3, [r7, #14]
 8006c76:	e014      	b.n	8006ca2 <hx711_value_ave+0x50>
  {
    ave += hx711_value(hx711);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f7ff ff82 	bl	8006b82 <hx711_value>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	17da      	asrs	r2, r3, #31
 8006c82:	461c      	mov	r4, r3
 8006c84:	4615      	mov	r5, r2
 8006c86:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006c8a:	eb12 0804 	adds.w	r8, r2, r4
 8006c8e:	eb43 0905 	adc.w	r9, r3, r5
 8006c92:	e9c7 8904 	strd	r8, r9, [r7, #16]
    hx711_delay(5);
 8006c96:	2005      	movs	r0, #5
 8006c98:	f7fb fb08 	bl	80022ac <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 8006c9c:	89fb      	ldrh	r3, [r7, #14]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	81fb      	strh	r3, [r7, #14]
 8006ca2:	89fa      	ldrh	r2, [r7, #14]
 8006ca4:	887b      	ldrh	r3, [r7, #2]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d3e6      	bcc.n	8006c78 <hx711_value_ave+0x26>
  }
  int32_t answer = (int32_t)(ave / sample);
 8006caa:	887b      	ldrh	r3, [r7, #2]
 8006cac:	2200      	movs	r2, #0
 8006cae:	469a      	mov	sl, r3
 8006cb0:	4693      	mov	fp, r2
 8006cb2:	4652      	mov	r2, sl
 8006cb4:	465b      	mov	r3, fp
 8006cb6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006cba:	f7f9 ff7d 	bl	8000bb8 <__aeabi_ldivmod>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	60bb      	str	r3, [r7, #8]
  hx711_unlock(hx711);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f7ff fef0 	bl	8006aac <hx711_unlock>
  return answer;
 8006ccc:	68bb      	ldr	r3, [r7, #8]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3718      	adds	r7, #24
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006cd8 <hx711_tare>:
//#############################################################################################
void hx711_tare(hx711_t *hx711, uint16_t sample)
{
 8006cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cdc:	b086      	sub	sp, #24
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f7ff fecd 	bl	8006a86 <hx711_lock>
  int64_t  ave = 0;
 8006cec:	f04f 0200 	mov.w	r2, #0
 8006cf0:	f04f 0300 	mov.w	r3, #0
 8006cf4:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for(uint16_t i=0 ; i<sample ; i++)
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	81fb      	strh	r3, [r7, #14]
 8006cfc:	e014      	b.n	8006d28 <hx711_tare+0x50>
  {
    ave += hx711_value(hx711);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7ff ff3f 	bl	8006b82 <hx711_value>
 8006d04:	4603      	mov	r3, r0
 8006d06:	17da      	asrs	r2, r3, #31
 8006d08:	461c      	mov	r4, r3
 8006d0a:	4615      	mov	r5, r2
 8006d0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006d10:	eb12 0804 	adds.w	r8, r2, r4
 8006d14:	eb43 0905 	adc.w	r9, r3, r5
 8006d18:	e9c7 8904 	strd	r8, r9, [r7, #16]
    hx711_delay(5);
 8006d1c:	2005      	movs	r0, #5
 8006d1e:	f7fb fac5 	bl	80022ac <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 8006d22:	89fb      	ldrh	r3, [r7, #14]
 8006d24:	3301      	adds	r3, #1
 8006d26:	81fb      	strh	r3, [r7, #14]
 8006d28:	89fa      	ldrh	r2, [r7, #14]
 8006d2a:	887b      	ldrh	r3, [r7, #2]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d3e6      	bcc.n	8006cfe <hx711_tare+0x26>
  }
  hx711->offset = (int32_t)(ave / sample);
 8006d30:	887b      	ldrh	r3, [r7, #2]
 8006d32:	2200      	movs	r2, #0
 8006d34:	469a      	mov	sl, r3
 8006d36:	4693      	mov	fp, r2
 8006d38:	4652      	mov	r2, sl
 8006d3a:	465b      	mov	r3, fp
 8006d3c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006d40:	f7f9 ff3a 	bl	8000bb8 <__aeabi_ldivmod>
 8006d44:	4602      	mov	r2, r0
 8006d46:	460b      	mov	r3, r1
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	60da      	str	r2, [r3, #12]
  hx711_unlock(hx711);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f7ff fead 	bl	8006aac <hx711_unlock>
}
 8006d52:	bf00      	nop
 8006d54:	3718      	adds	r7, #24
 8006d56:	46bd      	mov	sp, r7
 8006d58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006d5c <hx711_calibration>:
//#############################################################################################
void hx711_calibration(hx711_t *hx711, int32_t noload_raw, int32_t load_raw, float scale)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
 8006d68:	ed87 0a00 	vstr	s0, [r7]
  hx711_lock(hx711);
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f7ff fe8a 	bl	8006a86 <hx711_lock>
  hx711->offset = noload_raw;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	60da      	str	r2, [r3, #12]
  hx711->coef = (load_raw - noload_raw) / scale;  
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	ee07 3a90 	vmov	s15, r3
 8006d82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006d86:	ed97 7a00 	vldr	s14, [r7]
 8006d8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	edc3 7a04 	vstr	s15, [r3, #16]
  hx711_unlock(hx711);
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f7ff fe89 	bl	8006aac <hx711_unlock>
}
 8006d9a:	bf00      	nop
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <hx711_weight>:
//#############################################################################################
float hx711_weight(hx711_t *hx711, uint16_t sample)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b084      	sub	sp, #16
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	460b      	mov	r3, r1
 8006dac:	807b      	strh	r3, [r7, #2]
    ave += hx711_value(hx711);
    hx711_delay(5);
  }
  int32_t data = (int32_t)(ave / sample);
  */
  int32_t data = hx711_value(hx711);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f7ff fee7 	bl	8006b82 <hx711_value>
 8006db4:	60f8      	str	r0, [r7, #12]
  float answer =  (data - hx711->offset) / hx711->coef;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	ee07 3a90 	vmov	s15, r3
 8006dc2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	ed93 7a04 	vldr	s14, [r3, #16]
 8006dcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dd0:	edc7 7a02 	vstr	s15, [r7, #8]
  //hx711_unlock(hx711);
  return answer;
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	ee07 3a90 	vmov	s15, r3
}
 8006dda:	eeb0 0a67 	vmov.f32	s0, s15
 8006dde:	3710      	adds	r7, #16
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <hx711_coef_set>:
//#############################################################################################
void hx711_coef_set(hx711_t *hx711, float coef)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	ed87 0a00 	vstr	s0, [r7]
  hx711->coef = coef;  
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	611a      	str	r2, [r3, #16]
}
 8006df6:	bf00      	nop
 8006df8:	370c      	adds	r7, #12
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
	...

08006e04 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006e10:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006e14:	f004 fee0 	bl	800bbd8 <USBD_static_malloc>
 8006e18:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d109      	bne.n	8006e34 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	32b0      	adds	r2, #176	; 0xb0
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006e30:	2302      	movs	r3, #2
 8006e32:	e0d4      	b.n	8006fde <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006e34:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006e38:	2100      	movs	r1, #0
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f004 ff3a 	bl	800bcb4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	32b0      	adds	r2, #176	; 0xb0
 8006e4a:	68f9      	ldr	r1, [r7, #12]
 8006e4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	32b0      	adds	r2, #176	; 0xb0
 8006e5a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	7c1b      	ldrb	r3, [r3, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d138      	bne.n	8006ede <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006e6c:	4b5e      	ldr	r3, [pc, #376]	; (8006fe8 <USBD_CDC_Init+0x1e4>)
 8006e6e:	7819      	ldrb	r1, [r3, #0]
 8006e70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e74:	2202      	movs	r2, #2
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f004 fd8b 	bl	800b992 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006e7c:	4b5a      	ldr	r3, [pc, #360]	; (8006fe8 <USBD_CDC_Init+0x1e4>)
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	f003 020f 	and.w	r2, r3, #15
 8006e84:	6879      	ldr	r1, [r7, #4]
 8006e86:	4613      	mov	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	4413      	add	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	440b      	add	r3, r1
 8006e90:	3324      	adds	r3, #36	; 0x24
 8006e92:	2201      	movs	r2, #1
 8006e94:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006e96:	4b55      	ldr	r3, [pc, #340]	; (8006fec <USBD_CDC_Init+0x1e8>)
 8006e98:	7819      	ldrb	r1, [r3, #0]
 8006e9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f004 fd76 	bl	800b992 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006ea6:	4b51      	ldr	r3, [pc, #324]	; (8006fec <USBD_CDC_Init+0x1e8>)
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	f003 020f 	and.w	r2, r3, #15
 8006eae:	6879      	ldr	r1, [r7, #4]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4413      	add	r3, r2
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	440b      	add	r3, r1
 8006eba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006ec2:	4b4b      	ldr	r3, [pc, #300]	; (8006ff0 <USBD_CDC_Init+0x1ec>)
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	f003 020f 	and.w	r2, r3, #15
 8006eca:	6879      	ldr	r1, [r7, #4]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4413      	add	r3, r2
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	440b      	add	r3, r1
 8006ed6:	3326      	adds	r3, #38	; 0x26
 8006ed8:	2210      	movs	r2, #16
 8006eda:	801a      	strh	r2, [r3, #0]
 8006edc:	e035      	b.n	8006f4a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006ede:	4b42      	ldr	r3, [pc, #264]	; (8006fe8 <USBD_CDC_Init+0x1e4>)
 8006ee0:	7819      	ldrb	r1, [r3, #0]
 8006ee2:	2340      	movs	r3, #64	; 0x40
 8006ee4:	2202      	movs	r2, #2
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f004 fd53 	bl	800b992 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006eec:	4b3e      	ldr	r3, [pc, #248]	; (8006fe8 <USBD_CDC_Init+0x1e4>)
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	f003 020f 	and.w	r2, r3, #15
 8006ef4:	6879      	ldr	r1, [r7, #4]
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	440b      	add	r3, r1
 8006f00:	3324      	adds	r3, #36	; 0x24
 8006f02:	2201      	movs	r2, #1
 8006f04:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006f06:	4b39      	ldr	r3, [pc, #228]	; (8006fec <USBD_CDC_Init+0x1e8>)
 8006f08:	7819      	ldrb	r1, [r3, #0]
 8006f0a:	2340      	movs	r3, #64	; 0x40
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f004 fd3f 	bl	800b992 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006f14:	4b35      	ldr	r3, [pc, #212]	; (8006fec <USBD_CDC_Init+0x1e8>)
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	f003 020f 	and.w	r2, r3, #15
 8006f1c:	6879      	ldr	r1, [r7, #4]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	4413      	add	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	440b      	add	r3, r1
 8006f28:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006f30:	4b2f      	ldr	r3, [pc, #188]	; (8006ff0 <USBD_CDC_Init+0x1ec>)
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	f003 020f 	and.w	r2, r3, #15
 8006f38:	6879      	ldr	r1, [r7, #4]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4413      	add	r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	440b      	add	r3, r1
 8006f44:	3326      	adds	r3, #38	; 0x26
 8006f46:	2210      	movs	r2, #16
 8006f48:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006f4a:	4b29      	ldr	r3, [pc, #164]	; (8006ff0 <USBD_CDC_Init+0x1ec>)
 8006f4c:	7819      	ldrb	r1, [r3, #0]
 8006f4e:	2308      	movs	r3, #8
 8006f50:	2203      	movs	r2, #3
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f004 fd1d 	bl	800b992 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006f58:	4b25      	ldr	r3, [pc, #148]	; (8006ff0 <USBD_CDC_Init+0x1ec>)
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	f003 020f 	and.w	r2, r3, #15
 8006f60:	6879      	ldr	r1, [r7, #4]
 8006f62:	4613      	mov	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	4413      	add	r3, r2
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	440b      	add	r3, r1
 8006f6c:	3324      	adds	r3, #36	; 0x24
 8006f6e:	2201      	movs	r2, #1
 8006f70:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	33b0      	adds	r3, #176	; 0xb0
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4413      	add	r3, r2
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d101      	bne.n	8006fac <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006fa8:	2302      	movs	r3, #2
 8006faa:	e018      	b.n	8006fde <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	7c1b      	ldrb	r3, [r3, #16]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10a      	bne.n	8006fca <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006fb4:	4b0d      	ldr	r3, [pc, #52]	; (8006fec <USBD_CDC_Init+0x1e8>)
 8006fb6:	7819      	ldrb	r1, [r3, #0]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f004 fdd4 	bl	800bb70 <USBD_LL_PrepareReceive>
 8006fc8:	e008      	b.n	8006fdc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006fca:	4b08      	ldr	r3, [pc, #32]	; (8006fec <USBD_CDC_Init+0x1e8>)
 8006fcc:	7819      	ldrb	r1, [r3, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fd4:	2340      	movs	r3, #64	; 0x40
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f004 fdca 	bl	800bb70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	200000ab 	.word	0x200000ab
 8006fec:	200000ac 	.word	0x200000ac
 8006ff0:	200000ad 	.word	0x200000ad

08006ff4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007000:	4b3a      	ldr	r3, [pc, #232]	; (80070ec <USBD_CDC_DeInit+0xf8>)
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	4619      	mov	r1, r3
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f004 fce9 	bl	800b9de <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800700c:	4b37      	ldr	r3, [pc, #220]	; (80070ec <USBD_CDC_DeInit+0xf8>)
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	f003 020f 	and.w	r2, r3, #15
 8007014:	6879      	ldr	r1, [r7, #4]
 8007016:	4613      	mov	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4413      	add	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	440b      	add	r3, r1
 8007020:	3324      	adds	r3, #36	; 0x24
 8007022:	2200      	movs	r2, #0
 8007024:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007026:	4b32      	ldr	r3, [pc, #200]	; (80070f0 <USBD_CDC_DeInit+0xfc>)
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	4619      	mov	r1, r3
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f004 fcd6 	bl	800b9de <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007032:	4b2f      	ldr	r3, [pc, #188]	; (80070f0 <USBD_CDC_DeInit+0xfc>)
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	f003 020f 	and.w	r2, r3, #15
 800703a:	6879      	ldr	r1, [r7, #4]
 800703c:	4613      	mov	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	440b      	add	r3, r1
 8007046:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800704a:	2200      	movs	r2, #0
 800704c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800704e:	4b29      	ldr	r3, [pc, #164]	; (80070f4 <USBD_CDC_DeInit+0x100>)
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	4619      	mov	r1, r3
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f004 fcc2 	bl	800b9de <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800705a:	4b26      	ldr	r3, [pc, #152]	; (80070f4 <USBD_CDC_DeInit+0x100>)
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	f003 020f 	and.w	r2, r3, #15
 8007062:	6879      	ldr	r1, [r7, #4]
 8007064:	4613      	mov	r3, r2
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4413      	add	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	440b      	add	r3, r1
 800706e:	3324      	adds	r3, #36	; 0x24
 8007070:	2200      	movs	r2, #0
 8007072:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007074:	4b1f      	ldr	r3, [pc, #124]	; (80070f4 <USBD_CDC_DeInit+0x100>)
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	f003 020f 	and.w	r2, r3, #15
 800707c:	6879      	ldr	r1, [r7, #4]
 800707e:	4613      	mov	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	440b      	add	r3, r1
 8007088:	3326      	adds	r3, #38	; 0x26
 800708a:	2200      	movs	r2, #0
 800708c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	32b0      	adds	r2, #176	; 0xb0
 8007098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d01f      	beq.n	80070e0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	33b0      	adds	r3, #176	; 0xb0
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	4413      	add	r3, r2
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	32b0      	adds	r2, #176	; 0xb0
 80070be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070c2:	4618      	mov	r0, r3
 80070c4:	f004 fd96 	bl	800bbf4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	32b0      	adds	r2, #176	; 0xb0
 80070d2:	2100      	movs	r1, #0
 80070d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	200000ab 	.word	0x200000ab
 80070f0:	200000ac 	.word	0x200000ac
 80070f4:	200000ad 	.word	0x200000ad

080070f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	32b0      	adds	r2, #176	; 0xb0
 800710c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007110:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007112:	2300      	movs	r3, #0
 8007114:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007116:	2300      	movs	r3, #0
 8007118:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800711a:	2300      	movs	r3, #0
 800711c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d101      	bne.n	8007128 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007124:	2303      	movs	r3, #3
 8007126:	e0bf      	b.n	80072a8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007130:	2b00      	cmp	r3, #0
 8007132:	d050      	beq.n	80071d6 <USBD_CDC_Setup+0xde>
 8007134:	2b20      	cmp	r3, #32
 8007136:	f040 80af 	bne.w	8007298 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	88db      	ldrh	r3, [r3, #6]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d03a      	beq.n	80071b8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	b25b      	sxtb	r3, r3
 8007148:	2b00      	cmp	r3, #0
 800714a:	da1b      	bge.n	8007184 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	33b0      	adds	r3, #176	; 0xb0
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4413      	add	r3, r2
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	683a      	ldr	r2, [r7, #0]
 8007160:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007162:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007164:	683a      	ldr	r2, [r7, #0]
 8007166:	88d2      	ldrh	r2, [r2, #6]
 8007168:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	88db      	ldrh	r3, [r3, #6]
 800716e:	2b07      	cmp	r3, #7
 8007170:	bf28      	it	cs
 8007172:	2307      	movcs	r3, #7
 8007174:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	89fa      	ldrh	r2, [r7, #14]
 800717a:	4619      	mov	r1, r3
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f001 fd89 	bl	8008c94 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007182:	e090      	b.n	80072a6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	785a      	ldrb	r2, [r3, #1]
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	88db      	ldrh	r3, [r3, #6]
 8007192:	2b3f      	cmp	r3, #63	; 0x3f
 8007194:	d803      	bhi.n	800719e <USBD_CDC_Setup+0xa6>
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	88db      	ldrh	r3, [r3, #6]
 800719a:	b2da      	uxtb	r2, r3
 800719c:	e000      	b.n	80071a0 <USBD_CDC_Setup+0xa8>
 800719e:	2240      	movs	r2, #64	; 0x40
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80071a6:	6939      	ldr	r1, [r7, #16]
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80071ae:	461a      	mov	r2, r3
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f001 fd9b 	bl	8008cec <USBD_CtlPrepareRx>
      break;
 80071b6:	e076      	b.n	80072a6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	33b0      	adds	r3, #176	; 0xb0
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	4413      	add	r3, r2
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	683a      	ldr	r2, [r7, #0]
 80071cc:	7850      	ldrb	r0, [r2, #1]
 80071ce:	2200      	movs	r2, #0
 80071d0:	6839      	ldr	r1, [r7, #0]
 80071d2:	4798      	blx	r3
      break;
 80071d4:	e067      	b.n	80072a6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	785b      	ldrb	r3, [r3, #1]
 80071da:	2b0b      	cmp	r3, #11
 80071dc:	d851      	bhi.n	8007282 <USBD_CDC_Setup+0x18a>
 80071de:	a201      	add	r2, pc, #4	; (adr r2, 80071e4 <USBD_CDC_Setup+0xec>)
 80071e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e4:	08007215 	.word	0x08007215
 80071e8:	08007291 	.word	0x08007291
 80071ec:	08007283 	.word	0x08007283
 80071f0:	08007283 	.word	0x08007283
 80071f4:	08007283 	.word	0x08007283
 80071f8:	08007283 	.word	0x08007283
 80071fc:	08007283 	.word	0x08007283
 8007200:	08007283 	.word	0x08007283
 8007204:	08007283 	.word	0x08007283
 8007208:	08007283 	.word	0x08007283
 800720c:	0800723f 	.word	0x0800723f
 8007210:	08007269 	.word	0x08007269
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b03      	cmp	r3, #3
 800721e:	d107      	bne.n	8007230 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007220:	f107 030a 	add.w	r3, r7, #10
 8007224:	2202      	movs	r2, #2
 8007226:	4619      	mov	r1, r3
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f001 fd33 	bl	8008c94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800722e:	e032      	b.n	8007296 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007230:	6839      	ldr	r1, [r7, #0]
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f001 fcbd 	bl	8008bb2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007238:	2303      	movs	r3, #3
 800723a:	75fb      	strb	r3, [r7, #23]
          break;
 800723c:	e02b      	b.n	8007296 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007244:	b2db      	uxtb	r3, r3
 8007246:	2b03      	cmp	r3, #3
 8007248:	d107      	bne.n	800725a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800724a:	f107 030d 	add.w	r3, r7, #13
 800724e:	2201      	movs	r2, #1
 8007250:	4619      	mov	r1, r3
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f001 fd1e 	bl	8008c94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007258:	e01d      	b.n	8007296 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f001 fca8 	bl	8008bb2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007262:	2303      	movs	r3, #3
 8007264:	75fb      	strb	r3, [r7, #23]
          break;
 8007266:	e016      	b.n	8007296 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800726e:	b2db      	uxtb	r3, r3
 8007270:	2b03      	cmp	r3, #3
 8007272:	d00f      	beq.n	8007294 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007274:	6839      	ldr	r1, [r7, #0]
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f001 fc9b 	bl	8008bb2 <USBD_CtlError>
            ret = USBD_FAIL;
 800727c:	2303      	movs	r3, #3
 800727e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007280:	e008      	b.n	8007294 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f001 fc94 	bl	8008bb2 <USBD_CtlError>
          ret = USBD_FAIL;
 800728a:	2303      	movs	r3, #3
 800728c:	75fb      	strb	r3, [r7, #23]
          break;
 800728e:	e002      	b.n	8007296 <USBD_CDC_Setup+0x19e>
          break;
 8007290:	bf00      	nop
 8007292:	e008      	b.n	80072a6 <USBD_CDC_Setup+0x1ae>
          break;
 8007294:	bf00      	nop
      }
      break;
 8007296:	e006      	b.n	80072a6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007298:	6839      	ldr	r1, [r7, #0]
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f001 fc89 	bl	8008bb2 <USBD_CtlError>
      ret = USBD_FAIL;
 80072a0:	2303      	movs	r3, #3
 80072a2:	75fb      	strb	r3, [r7, #23]
      break;
 80072a4:	bf00      	nop
  }

  return (uint8_t)ret;
 80072a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3718      	adds	r7, #24
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	460b      	mov	r3, r1
 80072ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80072c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	32b0      	adds	r2, #176	; 0xb0
 80072ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d101      	bne.n	80072da <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e065      	b.n	80073a6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	32b0      	adds	r2, #176	; 0xb0
 80072e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80072ea:	78fb      	ldrb	r3, [r7, #3]
 80072ec:	f003 020f 	and.w	r2, r3, #15
 80072f0:	6879      	ldr	r1, [r7, #4]
 80072f2:	4613      	mov	r3, r2
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	4413      	add	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	440b      	add	r3, r1
 80072fc:	3318      	adds	r3, #24
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d02f      	beq.n	8007364 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007304:	78fb      	ldrb	r3, [r7, #3]
 8007306:	f003 020f 	and.w	r2, r3, #15
 800730a:	6879      	ldr	r1, [r7, #4]
 800730c:	4613      	mov	r3, r2
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	4413      	add	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	440b      	add	r3, r1
 8007316:	3318      	adds	r3, #24
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	78fb      	ldrb	r3, [r7, #3]
 800731c:	f003 010f 	and.w	r1, r3, #15
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	460b      	mov	r3, r1
 8007324:	00db      	lsls	r3, r3, #3
 8007326:	440b      	add	r3, r1
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4403      	add	r3, r0
 800732c:	3348      	adds	r3, #72	; 0x48
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	fbb2 f1f3 	udiv	r1, r2, r3
 8007334:	fb01 f303 	mul.w	r3, r1, r3
 8007338:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800733a:	2b00      	cmp	r3, #0
 800733c:	d112      	bne.n	8007364 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800733e:	78fb      	ldrb	r3, [r7, #3]
 8007340:	f003 020f 	and.w	r2, r3, #15
 8007344:	6879      	ldr	r1, [r7, #4]
 8007346:	4613      	mov	r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4413      	add	r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	440b      	add	r3, r1
 8007350:	3318      	adds	r3, #24
 8007352:	2200      	movs	r2, #0
 8007354:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007356:	78f9      	ldrb	r1, [r7, #3]
 8007358:	2300      	movs	r3, #0
 800735a:	2200      	movs	r2, #0
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f004 fbe6 	bl	800bb2e <USBD_LL_Transmit>
 8007362:	e01f      	b.n	80073a4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	2200      	movs	r2, #0
 8007368:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	33b0      	adds	r3, #176	; 0xb0
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4413      	add	r3, r2
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d010      	beq.n	80073a4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	33b0      	adds	r3, #176	; 0xb0
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4413      	add	r3, r2
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80073a0:	78fa      	ldrb	r2, [r7, #3]
 80073a2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b084      	sub	sp, #16
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
 80073b6:	460b      	mov	r3, r1
 80073b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	32b0      	adds	r2, #176	; 0xb0
 80073c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	32b0      	adds	r2, #176	; 0xb0
 80073d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d101      	bne.n	80073e0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80073dc:	2303      	movs	r3, #3
 80073de:	e01a      	b.n	8007416 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80073e0:	78fb      	ldrb	r3, [r7, #3]
 80073e2:	4619      	mov	r1, r3
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f004 fbe4 	bl	800bbb2 <USBD_LL_GetRxDataSize>
 80073ea:	4602      	mov	r2, r0
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	33b0      	adds	r3, #176	; 0xb0
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	4413      	add	r3, r2
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007410:	4611      	mov	r1, r2
 8007412:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b084      	sub	sp, #16
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	32b0      	adds	r2, #176	; 0xb0
 8007430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007434:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d101      	bne.n	8007440 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800743c:	2303      	movs	r3, #3
 800743e:	e025      	b.n	800748c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	33b0      	adds	r3, #176	; 0xb0
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4413      	add	r3, r2
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d01a      	beq.n	800748a <USBD_CDC_EP0_RxReady+0x6c>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800745a:	2bff      	cmp	r3, #255	; 0xff
 800745c:	d015      	beq.n	800748a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	33b0      	adds	r3, #176	; 0xb0
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	4413      	add	r3, r2
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007476:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800747e:	b292      	uxth	r2, r2
 8007480:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	22ff      	movs	r2, #255	; 0xff
 8007486:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b086      	sub	sp, #24
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800749c:	2182      	movs	r1, #130	; 0x82
 800749e:	4818      	ldr	r0, [pc, #96]	; (8007500 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80074a0:	f000 fd4f 	bl	8007f42 <USBD_GetEpDesc>
 80074a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80074a6:	2101      	movs	r1, #1
 80074a8:	4815      	ldr	r0, [pc, #84]	; (8007500 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80074aa:	f000 fd4a 	bl	8007f42 <USBD_GetEpDesc>
 80074ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80074b0:	2181      	movs	r1, #129	; 0x81
 80074b2:	4813      	ldr	r0, [pc, #76]	; (8007500 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80074b4:	f000 fd45 	bl	8007f42 <USBD_GetEpDesc>
 80074b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d002      	beq.n	80074c6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	2210      	movs	r2, #16
 80074c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d006      	beq.n	80074da <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074d4:	711a      	strb	r2, [r3, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d006      	beq.n	80074ee <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074e8:	711a      	strb	r2, [r3, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2243      	movs	r2, #67	; 0x43
 80074f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80074f4:	4b02      	ldr	r3, [pc, #8]	; (8007500 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3718      	adds	r7, #24
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	20000068 	.word	0x20000068

08007504 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800750c:	2182      	movs	r1, #130	; 0x82
 800750e:	4818      	ldr	r0, [pc, #96]	; (8007570 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007510:	f000 fd17 	bl	8007f42 <USBD_GetEpDesc>
 8007514:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007516:	2101      	movs	r1, #1
 8007518:	4815      	ldr	r0, [pc, #84]	; (8007570 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800751a:	f000 fd12 	bl	8007f42 <USBD_GetEpDesc>
 800751e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007520:	2181      	movs	r1, #129	; 0x81
 8007522:	4813      	ldr	r0, [pc, #76]	; (8007570 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007524:	f000 fd0d 	bl	8007f42 <USBD_GetEpDesc>
 8007528:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	2210      	movs	r2, #16
 8007534:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d006      	beq.n	800754a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	2200      	movs	r2, #0
 8007540:	711a      	strb	r2, [r3, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f042 0202 	orr.w	r2, r2, #2
 8007548:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d006      	beq.n	800755e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	711a      	strb	r2, [r3, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	f042 0202 	orr.w	r2, r2, #2
 800755c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2243      	movs	r2, #67	; 0x43
 8007562:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007564:	4b02      	ldr	r3, [pc, #8]	; (8007570 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007566:	4618      	mov	r0, r3
 8007568:	3718      	adds	r7, #24
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	20000068 	.word	0x20000068

08007574 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b086      	sub	sp, #24
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800757c:	2182      	movs	r1, #130	; 0x82
 800757e:	4818      	ldr	r0, [pc, #96]	; (80075e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007580:	f000 fcdf 	bl	8007f42 <USBD_GetEpDesc>
 8007584:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007586:	2101      	movs	r1, #1
 8007588:	4815      	ldr	r0, [pc, #84]	; (80075e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800758a:	f000 fcda 	bl	8007f42 <USBD_GetEpDesc>
 800758e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007590:	2181      	movs	r1, #129	; 0x81
 8007592:	4813      	ldr	r0, [pc, #76]	; (80075e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007594:	f000 fcd5 	bl	8007f42 <USBD_GetEpDesc>
 8007598:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d002      	beq.n	80075a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	2210      	movs	r2, #16
 80075a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d006      	beq.n	80075ba <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075b4:	711a      	strb	r2, [r3, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d006      	beq.n	80075ce <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075c8:	711a      	strb	r2, [r3, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2243      	movs	r2, #67	; 0x43
 80075d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80075d4:	4b02      	ldr	r3, [pc, #8]	; (80075e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3718      	adds	r7, #24
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	20000068 	.word	0x20000068

080075e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	220a      	movs	r2, #10
 80075f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80075f2:	4b03      	ldr	r3, [pc, #12]	; (8007600 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr
 8007600:	20000024 	.word	0x20000024

08007604 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d101      	bne.n	8007618 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007614:	2303      	movs	r3, #3
 8007616:	e009      	b.n	800762c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	33b0      	adds	r3, #176	; 0xb0
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	4413      	add	r3, r2
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007638:	b480      	push	{r7}
 800763a:	b087      	sub	sp, #28
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	32b0      	adds	r2, #176	; 0xb0
 800764e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007652:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d101      	bne.n	800765e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800765a:	2303      	movs	r3, #3
 800765c:	e008      	b.n	8007670 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	371c      	adds	r7, #28
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	32b0      	adds	r2, #176	; 0xb0
 8007690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007694:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d101      	bne.n	80076a0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800769c:	2303      	movs	r3, #3
 800769e:	e004      	b.n	80076aa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3714      	adds	r7, #20
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
	...

080076b8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	32b0      	adds	r2, #176	; 0xb0
 80076ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ce:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80076d0:	2301      	movs	r3, #1
 80076d2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	32b0      	adds	r2, #176	; 0xb0
 80076de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d101      	bne.n	80076ea <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e025      	b.n	8007736 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d11f      	bne.n	8007734 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80076fc:	4b10      	ldr	r3, [pc, #64]	; (8007740 <USBD_CDC_TransmitPacket+0x88>)
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	f003 020f 	and.w	r2, r3, #15
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	4613      	mov	r3, r2
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	4413      	add	r3, r2
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	4403      	add	r3, r0
 8007716:	3318      	adds	r3, #24
 8007718:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800771a:	4b09      	ldr	r3, [pc, #36]	; (8007740 <USBD_CDC_TransmitPacket+0x88>)
 800771c:	7819      	ldrb	r1, [r3, #0]
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f004 f9ff 	bl	800bb2e <USBD_LL_Transmit>

    ret = USBD_OK;
 8007730:	2300      	movs	r3, #0
 8007732:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007734:	7bfb      	ldrb	r3, [r7, #15]
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	200000ab 	.word	0x200000ab

08007744 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	32b0      	adds	r2, #176	; 0xb0
 8007756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800775a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	32b0      	adds	r2, #176	; 0xb0
 8007766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d101      	bne.n	8007772 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800776e:	2303      	movs	r3, #3
 8007770:	e018      	b.n	80077a4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	7c1b      	ldrb	r3, [r3, #16]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d10a      	bne.n	8007790 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800777a:	4b0c      	ldr	r3, [pc, #48]	; (80077ac <USBD_CDC_ReceivePacket+0x68>)
 800777c:	7819      	ldrb	r1, [r3, #0]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007784:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f004 f9f1 	bl	800bb70 <USBD_LL_PrepareReceive>
 800778e:	e008      	b.n	80077a2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007790:	4b06      	ldr	r3, [pc, #24]	; (80077ac <USBD_CDC_ReceivePacket+0x68>)
 8007792:	7819      	ldrb	r1, [r3, #0]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800779a:	2340      	movs	r3, #64	; 0x40
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f004 f9e7 	bl	800bb70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	200000ac 	.word	0x200000ac

080077b0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	4613      	mov	r3, r2
 80077bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d101      	bne.n	80077c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e01f      	b.n	8007808 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d003      	beq.n	80077ee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	79fa      	ldrb	r2, [r7, #7]
 80077fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f004 f861 	bl	800b8c4 <USBD_LL_Init>
 8007802:	4603      	mov	r3, r0
 8007804:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007806:	7dfb      	ldrb	r3, [r7, #23]
}
 8007808:	4618      	mov	r0, r3
 800780a:	3718      	adds	r7, #24
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800781a:	2300      	movs	r3, #0
 800781c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d101      	bne.n	8007828 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007824:	2303      	movs	r3, #3
 8007826:	e025      	b.n	8007874 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	683a      	ldr	r2, [r7, #0]
 800782c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	32ae      	adds	r2, #174	; 0xae
 800783a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800783e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00f      	beq.n	8007864 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	32ae      	adds	r2, #174	; 0xae
 800784e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007854:	f107 020e 	add.w	r2, r7, #14
 8007858:	4610      	mov	r0, r2
 800785a:	4798      	blx	r3
 800785c:	4602      	mov	r2, r0
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800786a:	1c5a      	adds	r2, r3, #1
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3710      	adds	r7, #16
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f004 f869 	bl	800b95c <USBD_LL_Start>
 800788a:	4603      	mov	r3, r0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800789c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800789e:	4618      	mov	r0, r3
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b084      	sub	sp, #16
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	460b      	mov	r3, r1
 80078b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80078b6:	2300      	movs	r3, #0
 80078b8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d009      	beq.n	80078d8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	78fa      	ldrb	r2, [r7, #3]
 80078ce:	4611      	mov	r1, r2
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	4798      	blx	r3
 80078d4:	4603      	mov	r3, r0
 80078d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b084      	sub	sp, #16
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
 80078ea:	460b      	mov	r3, r1
 80078ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ee:	2300      	movs	r3, #0
 80078f0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	78fa      	ldrb	r2, [r7, #3]
 80078fc:	4611      	mov	r1, r2
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	4798      	blx	r3
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d001      	beq.n	800790c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007908:	2303      	movs	r3, #3
 800790a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800790c:	7bfb      	ldrb	r3, [r7, #15]
}
 800790e:	4618      	mov	r0, r3
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b084      	sub	sp, #16
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	4618      	mov	r0, r3
 800792a:	f001 f908 	bl	8008b3e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800793c:	461a      	mov	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800794a:	f003 031f 	and.w	r3, r3, #31
 800794e:	2b02      	cmp	r3, #2
 8007950:	d01a      	beq.n	8007988 <USBD_LL_SetupStage+0x72>
 8007952:	2b02      	cmp	r3, #2
 8007954:	d822      	bhi.n	800799c <USBD_LL_SetupStage+0x86>
 8007956:	2b00      	cmp	r3, #0
 8007958:	d002      	beq.n	8007960 <USBD_LL_SetupStage+0x4a>
 800795a:	2b01      	cmp	r3, #1
 800795c:	d00a      	beq.n	8007974 <USBD_LL_SetupStage+0x5e>
 800795e:	e01d      	b.n	800799c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007966:	4619      	mov	r1, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 fb5f 	bl	800802c <USBD_StdDevReq>
 800796e:	4603      	mov	r3, r0
 8007970:	73fb      	strb	r3, [r7, #15]
      break;
 8007972:	e020      	b.n	80079b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800797a:	4619      	mov	r1, r3
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fbc7 	bl	8008110 <USBD_StdItfReq>
 8007982:	4603      	mov	r3, r0
 8007984:	73fb      	strb	r3, [r7, #15]
      break;
 8007986:	e016      	b.n	80079b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800798e:	4619      	mov	r1, r3
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fc29 	bl	80081e8 <USBD_StdEPReq>
 8007996:	4603      	mov	r3, r0
 8007998:	73fb      	strb	r3, [r7, #15]
      break;
 800799a:	e00c      	b.n	80079b6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80079a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	4619      	mov	r1, r3
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f004 f836 	bl	800ba1c <USBD_LL_StallEP>
 80079b0:	4603      	mov	r3, r0
 80079b2:	73fb      	strb	r3, [r7, #15]
      break;
 80079b4:	bf00      	nop
  }

  return ret;
 80079b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	460b      	mov	r3, r1
 80079ca:	607a      	str	r2, [r7, #4]
 80079cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80079ce:	2300      	movs	r3, #0
 80079d0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80079d2:	7afb      	ldrb	r3, [r7, #11]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d16e      	bne.n	8007ab6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80079de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079e6:	2b03      	cmp	r3, #3
 80079e8:	f040 8098 	bne.w	8007b1c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	689a      	ldr	r2, [r3, #8]
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d913      	bls.n	8007a20 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	689a      	ldr	r2, [r3, #8]
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	1ad2      	subs	r2, r2, r3
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	68da      	ldr	r2, [r3, #12]
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	bf28      	it	cs
 8007a12:	4613      	movcs	r3, r2
 8007a14:	461a      	mov	r2, r3
 8007a16:	6879      	ldr	r1, [r7, #4]
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f001 f984 	bl	8008d26 <USBD_CtlContinueRx>
 8007a1e:	e07d      	b.n	8007b1c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a26:	f003 031f 	and.w	r3, r3, #31
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d014      	beq.n	8007a58 <USBD_LL_DataOutStage+0x98>
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d81d      	bhi.n	8007a6e <USBD_LL_DataOutStage+0xae>
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d002      	beq.n	8007a3c <USBD_LL_DataOutStage+0x7c>
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d003      	beq.n	8007a42 <USBD_LL_DataOutStage+0x82>
 8007a3a:	e018      	b.n	8007a6e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	75bb      	strb	r3, [r7, #22]
            break;
 8007a40:	e018      	b.n	8007a74 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f000 fa5e 	bl	8007f0e <USBD_CoreFindIF>
 8007a52:	4603      	mov	r3, r0
 8007a54:	75bb      	strb	r3, [r7, #22]
            break;
 8007a56:	e00d      	b.n	8007a74 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	4619      	mov	r1, r3
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f000 fa60 	bl	8007f28 <USBD_CoreFindEP>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	75bb      	strb	r3, [r7, #22]
            break;
 8007a6c:	e002      	b.n	8007a74 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	75bb      	strb	r3, [r7, #22]
            break;
 8007a72:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007a74:	7dbb      	ldrb	r3, [r7, #22]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d119      	bne.n	8007aae <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d113      	bne.n	8007aae <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007a86:	7dba      	ldrb	r2, [r7, #22]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	32ae      	adds	r2, #174	; 0xae
 8007a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00b      	beq.n	8007aae <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007a96:	7dba      	ldrb	r2, [r7, #22]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007a9e:	7dba      	ldrb	r2, [r7, #22]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	32ae      	adds	r2, #174	; 0xae
 8007aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f001 f94a 	bl	8008d48 <USBD_CtlSendStatus>
 8007ab4:	e032      	b.n	8007b1c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007ab6:	7afb      	ldrb	r3, [r7, #11]
 8007ab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	4619      	mov	r1, r3
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f000 fa31 	bl	8007f28 <USBD_CoreFindEP>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007aca:	7dbb      	ldrb	r3, [r7, #22]
 8007acc:	2bff      	cmp	r3, #255	; 0xff
 8007ace:	d025      	beq.n	8007b1c <USBD_LL_DataOutStage+0x15c>
 8007ad0:	7dbb      	ldrb	r3, [r7, #22]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d122      	bne.n	8007b1c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	2b03      	cmp	r3, #3
 8007ae0:	d117      	bne.n	8007b12 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007ae2:	7dba      	ldrb	r2, [r7, #22]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	32ae      	adds	r2, #174	; 0xae
 8007ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00f      	beq.n	8007b12 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007af2:	7dba      	ldrb	r2, [r7, #22]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007afa:	7dba      	ldrb	r2, [r7, #22]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	32ae      	adds	r2, #174	; 0xae
 8007b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b04:	699b      	ldr	r3, [r3, #24]
 8007b06:	7afa      	ldrb	r2, [r7, #11]
 8007b08:	4611      	mov	r1, r2
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	4798      	blx	r3
 8007b0e:	4603      	mov	r3, r0
 8007b10:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007b12:	7dfb      	ldrb	r3, [r7, #23]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d001      	beq.n	8007b1c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007b18:	7dfb      	ldrb	r3, [r7, #23]
 8007b1a:	e000      	b.n	8007b1e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3718      	adds	r7, #24
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b086      	sub	sp, #24
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	60f8      	str	r0, [r7, #12]
 8007b2e:	460b      	mov	r3, r1
 8007b30:	607a      	str	r2, [r7, #4]
 8007b32:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007b34:	7afb      	ldrb	r3, [r7, #11]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d16f      	bne.n	8007c1a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	3314      	adds	r3, #20
 8007b3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	d15a      	bne.n	8007c00 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	689a      	ldr	r2, [r3, #8]
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d914      	bls.n	8007b80 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	689a      	ldr	r2, [r3, #8]
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	1ad2      	subs	r2, r2, r3
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	461a      	mov	r2, r3
 8007b6a:	6879      	ldr	r1, [r7, #4]
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f001 f8ac 	bl	8008cca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b72:	2300      	movs	r3, #0
 8007b74:	2200      	movs	r2, #0
 8007b76:	2100      	movs	r1, #0
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f003 fff9 	bl	800bb70 <USBD_LL_PrepareReceive>
 8007b7e:	e03f      	b.n	8007c00 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	68da      	ldr	r2, [r3, #12]
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d11c      	bne.n	8007bc6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	685a      	ldr	r2, [r3, #4]
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d316      	bcc.n	8007bc6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	685a      	ldr	r2, [r3, #4]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d20f      	bcs.n	8007bc6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	2100      	movs	r1, #0
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f001 f88d 	bl	8008cca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bb8:	2300      	movs	r3, #0
 8007bba:	2200      	movs	r2, #0
 8007bbc:	2100      	movs	r1, #0
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f003 ffd6 	bl	800bb70 <USBD_LL_PrepareReceive>
 8007bc4:	e01c      	b.n	8007c00 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d10f      	bne.n	8007bf2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d009      	beq.n	8007bf2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bf2:	2180      	movs	r1, #128	; 0x80
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f003 ff11 	bl	800ba1c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f001 f8b7 	bl	8008d6e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d03a      	beq.n	8007c80 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f7ff fe42 	bl	8007894 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007c18:	e032      	b.n	8007c80 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007c1a:	7afb      	ldrb	r3, [r7, #11]
 8007c1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	4619      	mov	r1, r3
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f000 f97f 	bl	8007f28 <USBD_CoreFindEP>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c2e:	7dfb      	ldrb	r3, [r7, #23]
 8007c30:	2bff      	cmp	r3, #255	; 0xff
 8007c32:	d025      	beq.n	8007c80 <USBD_LL_DataInStage+0x15a>
 8007c34:	7dfb      	ldrb	r3, [r7, #23]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d122      	bne.n	8007c80 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	2b03      	cmp	r3, #3
 8007c44:	d11c      	bne.n	8007c80 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007c46:	7dfa      	ldrb	r2, [r7, #23]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	32ae      	adds	r2, #174	; 0xae
 8007c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c50:	695b      	ldr	r3, [r3, #20]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d014      	beq.n	8007c80 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007c56:	7dfa      	ldrb	r2, [r7, #23]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007c5e:	7dfa      	ldrb	r2, [r7, #23]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	32ae      	adds	r2, #174	; 0xae
 8007c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	7afa      	ldrb	r2, [r7, #11]
 8007c6c:	4611      	mov	r1, r2
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	4798      	blx	r3
 8007c72:	4603      	mov	r3, r0
 8007c74:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007c76:	7dbb      	ldrb	r3, [r7, #22]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d001      	beq.n	8007c80 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007c7c:	7dbb      	ldrb	r3, [r7, #22]
 8007c7e:	e000      	b.n	8007c82 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3718      	adds	r7, #24
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b084      	sub	sp, #16
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d014      	beq.n	8007cf0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d00e      	beq.n	8007cf0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	6852      	ldr	r2, [r2, #4]
 8007cde:	b2d2      	uxtb	r2, r2
 8007ce0:	4611      	mov	r1, r2
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	4798      	blx	r3
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d001      	beq.n	8007cf0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007cec:	2303      	movs	r3, #3
 8007cee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cf0:	2340      	movs	r3, #64	; 0x40
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f003 fe4b 	bl	800b992 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2240      	movs	r2, #64	; 0x40
 8007d08:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d0c:	2340      	movs	r3, #64	; 0x40
 8007d0e:	2200      	movs	r2, #0
 8007d10:	2180      	movs	r1, #128	; 0x80
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f003 fe3d 	bl	800b992 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2240      	movs	r2, #64	; 0x40
 8007d22:	621a      	str	r2, [r3, #32]

  return ret;
 8007d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b083      	sub	sp, #12
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
 8007d36:	460b      	mov	r3, r1
 8007d38:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	78fa      	ldrb	r2, [r7, #3]
 8007d3e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	370c      	adds	r7, #12
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b083      	sub	sp, #12
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d5c:	b2da      	uxtb	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2204      	movs	r2, #4
 8007d68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	370c      	adds	r7, #12
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr

08007d7a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b083      	sub	sp, #12
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	2b04      	cmp	r3, #4
 8007d8c:	d106      	bne.n	8007d9c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b082      	sub	sp, #8
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	2b03      	cmp	r3, #3
 8007dbc:	d110      	bne.n	8007de0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00b      	beq.n	8007de0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dce:	69db      	ldr	r3, [r3, #28]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d005      	beq.n	8007de0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dda:	69db      	ldr	r3, [r3, #28]
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b082      	sub	sp, #8
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
 8007df2:	460b      	mov	r3, r1
 8007df4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	32ae      	adds	r2, #174	; 0xae
 8007e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d101      	bne.n	8007e0c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e01c      	b.n	8007e46 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	2b03      	cmp	r3, #3
 8007e16:	d115      	bne.n	8007e44 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	32ae      	adds	r2, #174	; 0xae
 8007e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e26:	6a1b      	ldr	r3, [r3, #32]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00b      	beq.n	8007e44 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	32ae      	adds	r2, #174	; 0xae
 8007e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e3a:	6a1b      	ldr	r3, [r3, #32]
 8007e3c:	78fa      	ldrb	r2, [r7, #3]
 8007e3e:	4611      	mov	r1, r2
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b082      	sub	sp, #8
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
 8007e56:	460b      	mov	r3, r1
 8007e58:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	32ae      	adds	r2, #174	; 0xae
 8007e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d101      	bne.n	8007e70 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e01c      	b.n	8007eaa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	2b03      	cmp	r3, #3
 8007e7a:	d115      	bne.n	8007ea8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	32ae      	adds	r2, #174	; 0xae
 8007e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d00b      	beq.n	8007ea8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	32ae      	adds	r2, #174	; 0xae
 8007e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea0:	78fa      	ldrb	r2, [r7, #3]
 8007ea2:	4611      	mov	r1, r2
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3708      	adds	r7, #8
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b083      	sub	sp, #12
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00e      	beq.n	8007f04 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	6852      	ldr	r2, [r2, #4]
 8007ef2:	b2d2      	uxtb	r2, r2
 8007ef4:	4611      	mov	r1, r2
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	4798      	blx	r3
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d001      	beq.n	8007f04 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007f00:	2303      	movs	r3, #3
 8007f02:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3710      	adds	r7, #16
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007f0e:	b480      	push	{r7}
 8007f10:	b083      	sub	sp, #12
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
 8007f16:	460b      	mov	r3, r1
 8007f18:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007f1a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	460b      	mov	r3, r1
 8007f32:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007f34:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	370c      	adds	r7, #12
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b086      	sub	sp, #24
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007f56:	2300      	movs	r3, #0
 8007f58:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	885b      	ldrh	r3, [r3, #2]
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d920      	bls.n	8007fac <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007f72:	e013      	b.n	8007f9c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007f74:	f107 030a 	add.w	r3, r7, #10
 8007f78:	4619      	mov	r1, r3
 8007f7a:	6978      	ldr	r0, [r7, #20]
 8007f7c:	f000 f81b 	bl	8007fb6 <USBD_GetNextDesc>
 8007f80:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	785b      	ldrb	r3, [r3, #1]
 8007f86:	2b05      	cmp	r3, #5
 8007f88:	d108      	bne.n	8007f9c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	789b      	ldrb	r3, [r3, #2]
 8007f92:	78fa      	ldrb	r2, [r7, #3]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d008      	beq.n	8007faa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	885b      	ldrh	r3, [r3, #2]
 8007fa0:	b29a      	uxth	r2, r3
 8007fa2:	897b      	ldrh	r3, [r7, #10]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d8e5      	bhi.n	8007f74 <USBD_GetEpDesc+0x32>
 8007fa8:	e000      	b.n	8007fac <USBD_GetEpDesc+0x6a>
          break;
 8007faa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007fac:	693b      	ldr	r3, [r7, #16]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3718      	adds	r7, #24
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b085      	sub	sp, #20
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
 8007fbe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	881a      	ldrh	r2, [r3, #0]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	4413      	add	r3, r2
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4413      	add	r3, r2
 8007fe0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3714      	adds	r7, #20
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b087      	sub	sp, #28
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	3301      	adds	r3, #1
 8008006:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800800e:	8a3b      	ldrh	r3, [r7, #16]
 8008010:	021b      	lsls	r3, r3, #8
 8008012:	b21a      	sxth	r2, r3
 8008014:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008018:	4313      	orrs	r3, r2
 800801a:	b21b      	sxth	r3, r3
 800801c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800801e:	89fb      	ldrh	r3, [r7, #14]
}
 8008020:	4618      	mov	r0, r3
 8008022:	371c      	adds	r7, #28
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008036:	2300      	movs	r3, #0
 8008038:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008042:	2b40      	cmp	r3, #64	; 0x40
 8008044:	d005      	beq.n	8008052 <USBD_StdDevReq+0x26>
 8008046:	2b40      	cmp	r3, #64	; 0x40
 8008048:	d857      	bhi.n	80080fa <USBD_StdDevReq+0xce>
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00f      	beq.n	800806e <USBD_StdDevReq+0x42>
 800804e:	2b20      	cmp	r3, #32
 8008050:	d153      	bne.n	80080fa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	32ae      	adds	r2, #174	; 0xae
 800805c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	6839      	ldr	r1, [r7, #0]
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	4798      	blx	r3
 8008068:	4603      	mov	r3, r0
 800806a:	73fb      	strb	r3, [r7, #15]
      break;
 800806c:	e04a      	b.n	8008104 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	785b      	ldrb	r3, [r3, #1]
 8008072:	2b09      	cmp	r3, #9
 8008074:	d83b      	bhi.n	80080ee <USBD_StdDevReq+0xc2>
 8008076:	a201      	add	r2, pc, #4	; (adr r2, 800807c <USBD_StdDevReq+0x50>)
 8008078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800807c:	080080d1 	.word	0x080080d1
 8008080:	080080e5 	.word	0x080080e5
 8008084:	080080ef 	.word	0x080080ef
 8008088:	080080db 	.word	0x080080db
 800808c:	080080ef 	.word	0x080080ef
 8008090:	080080af 	.word	0x080080af
 8008094:	080080a5 	.word	0x080080a5
 8008098:	080080ef 	.word	0x080080ef
 800809c:	080080c7 	.word	0x080080c7
 80080a0:	080080b9 	.word	0x080080b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80080a4:	6839      	ldr	r1, [r7, #0]
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 fa3c 	bl	8008524 <USBD_GetDescriptor>
          break;
 80080ac:	e024      	b.n	80080f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80080ae:	6839      	ldr	r1, [r7, #0]
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 fba1 	bl	80087f8 <USBD_SetAddress>
          break;
 80080b6:	e01f      	b.n	80080f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80080b8:	6839      	ldr	r1, [r7, #0]
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 fbe0 	bl	8008880 <USBD_SetConfig>
 80080c0:	4603      	mov	r3, r0
 80080c2:	73fb      	strb	r3, [r7, #15]
          break;
 80080c4:	e018      	b.n	80080f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80080c6:	6839      	ldr	r1, [r7, #0]
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 fc83 	bl	80089d4 <USBD_GetConfig>
          break;
 80080ce:	e013      	b.n	80080f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80080d0:	6839      	ldr	r1, [r7, #0]
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 fcb4 	bl	8008a40 <USBD_GetStatus>
          break;
 80080d8:	e00e      	b.n	80080f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80080da:	6839      	ldr	r1, [r7, #0]
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 fce3 	bl	8008aa8 <USBD_SetFeature>
          break;
 80080e2:	e009      	b.n	80080f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80080e4:	6839      	ldr	r1, [r7, #0]
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fd07 	bl	8008afa <USBD_ClrFeature>
          break;
 80080ec:	e004      	b.n	80080f8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80080ee:	6839      	ldr	r1, [r7, #0]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fd5e 	bl	8008bb2 <USBD_CtlError>
          break;
 80080f6:	bf00      	nop
      }
      break;
 80080f8:	e004      	b.n	8008104 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80080fa:	6839      	ldr	r1, [r7, #0]
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 fd58 	bl	8008bb2 <USBD_CtlError>
      break;
 8008102:	bf00      	nop
  }

  return ret;
 8008104:	7bfb      	ldrb	r3, [r7, #15]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop

08008110 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800811a:	2300      	movs	r3, #0
 800811c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008126:	2b40      	cmp	r3, #64	; 0x40
 8008128:	d005      	beq.n	8008136 <USBD_StdItfReq+0x26>
 800812a:	2b40      	cmp	r3, #64	; 0x40
 800812c:	d852      	bhi.n	80081d4 <USBD_StdItfReq+0xc4>
 800812e:	2b00      	cmp	r3, #0
 8008130:	d001      	beq.n	8008136 <USBD_StdItfReq+0x26>
 8008132:	2b20      	cmp	r3, #32
 8008134:	d14e      	bne.n	80081d4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800813c:	b2db      	uxtb	r3, r3
 800813e:	3b01      	subs	r3, #1
 8008140:	2b02      	cmp	r3, #2
 8008142:	d840      	bhi.n	80081c6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	889b      	ldrh	r3, [r3, #4]
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b01      	cmp	r3, #1
 800814c:	d836      	bhi.n	80081bc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	889b      	ldrh	r3, [r3, #4]
 8008152:	b2db      	uxtb	r3, r3
 8008154:	4619      	mov	r1, r3
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f7ff fed9 	bl	8007f0e <USBD_CoreFindIF>
 800815c:	4603      	mov	r3, r0
 800815e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008160:	7bbb      	ldrb	r3, [r7, #14]
 8008162:	2bff      	cmp	r3, #255	; 0xff
 8008164:	d01d      	beq.n	80081a2 <USBD_StdItfReq+0x92>
 8008166:	7bbb      	ldrb	r3, [r7, #14]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d11a      	bne.n	80081a2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800816c:	7bba      	ldrb	r2, [r7, #14]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	32ae      	adds	r2, #174	; 0xae
 8008172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00f      	beq.n	800819c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800817c:	7bba      	ldrb	r2, [r7, #14]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008184:	7bba      	ldrb	r2, [r7, #14]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	32ae      	adds	r2, #174	; 0xae
 800818a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	6839      	ldr	r1, [r7, #0]
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	4798      	blx	r3
 8008196:	4603      	mov	r3, r0
 8008198:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800819a:	e004      	b.n	80081a6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800819c:	2303      	movs	r3, #3
 800819e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80081a0:	e001      	b.n	80081a6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80081a2:	2303      	movs	r3, #3
 80081a4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	88db      	ldrh	r3, [r3, #6]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d110      	bne.n	80081d0 <USBD_StdItfReq+0xc0>
 80081ae:	7bfb      	ldrb	r3, [r7, #15]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d10d      	bne.n	80081d0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 fdc7 	bl	8008d48 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80081ba:	e009      	b.n	80081d0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80081bc:	6839      	ldr	r1, [r7, #0]
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 fcf7 	bl	8008bb2 <USBD_CtlError>
          break;
 80081c4:	e004      	b.n	80081d0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80081c6:	6839      	ldr	r1, [r7, #0]
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 fcf2 	bl	8008bb2 <USBD_CtlError>
          break;
 80081ce:	e000      	b.n	80081d2 <USBD_StdItfReq+0xc2>
          break;
 80081d0:	bf00      	nop
      }
      break;
 80081d2:	e004      	b.n	80081de <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fceb 	bl	8008bb2 <USBD_CtlError>
      break;
 80081dc:	bf00      	nop
  }

  return ret;
 80081de:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80081f2:	2300      	movs	r3, #0
 80081f4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	889b      	ldrh	r3, [r3, #4]
 80081fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008204:	2b40      	cmp	r3, #64	; 0x40
 8008206:	d007      	beq.n	8008218 <USBD_StdEPReq+0x30>
 8008208:	2b40      	cmp	r3, #64	; 0x40
 800820a:	f200 817f 	bhi.w	800850c <USBD_StdEPReq+0x324>
 800820e:	2b00      	cmp	r3, #0
 8008210:	d02a      	beq.n	8008268 <USBD_StdEPReq+0x80>
 8008212:	2b20      	cmp	r3, #32
 8008214:	f040 817a 	bne.w	800850c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008218:	7bbb      	ldrb	r3, [r7, #14]
 800821a:	4619      	mov	r1, r3
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f7ff fe83 	bl	8007f28 <USBD_CoreFindEP>
 8008222:	4603      	mov	r3, r0
 8008224:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008226:	7b7b      	ldrb	r3, [r7, #13]
 8008228:	2bff      	cmp	r3, #255	; 0xff
 800822a:	f000 8174 	beq.w	8008516 <USBD_StdEPReq+0x32e>
 800822e:	7b7b      	ldrb	r3, [r7, #13]
 8008230:	2b00      	cmp	r3, #0
 8008232:	f040 8170 	bne.w	8008516 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008236:	7b7a      	ldrb	r2, [r7, #13]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800823e:	7b7a      	ldrb	r2, [r7, #13]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	32ae      	adds	r2, #174	; 0xae
 8008244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	2b00      	cmp	r3, #0
 800824c:	f000 8163 	beq.w	8008516 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008250:	7b7a      	ldrb	r2, [r7, #13]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	32ae      	adds	r2, #174	; 0xae
 8008256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	6839      	ldr	r1, [r7, #0]
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	4798      	blx	r3
 8008262:	4603      	mov	r3, r0
 8008264:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008266:	e156      	b.n	8008516 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	785b      	ldrb	r3, [r3, #1]
 800826c:	2b03      	cmp	r3, #3
 800826e:	d008      	beq.n	8008282 <USBD_StdEPReq+0x9a>
 8008270:	2b03      	cmp	r3, #3
 8008272:	f300 8145 	bgt.w	8008500 <USBD_StdEPReq+0x318>
 8008276:	2b00      	cmp	r3, #0
 8008278:	f000 809b 	beq.w	80083b2 <USBD_StdEPReq+0x1ca>
 800827c:	2b01      	cmp	r3, #1
 800827e:	d03c      	beq.n	80082fa <USBD_StdEPReq+0x112>
 8008280:	e13e      	b.n	8008500 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008288:	b2db      	uxtb	r3, r3
 800828a:	2b02      	cmp	r3, #2
 800828c:	d002      	beq.n	8008294 <USBD_StdEPReq+0xac>
 800828e:	2b03      	cmp	r3, #3
 8008290:	d016      	beq.n	80082c0 <USBD_StdEPReq+0xd8>
 8008292:	e02c      	b.n	80082ee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008294:	7bbb      	ldrb	r3, [r7, #14]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00d      	beq.n	80082b6 <USBD_StdEPReq+0xce>
 800829a:	7bbb      	ldrb	r3, [r7, #14]
 800829c:	2b80      	cmp	r3, #128	; 0x80
 800829e:	d00a      	beq.n	80082b6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80082a0:	7bbb      	ldrb	r3, [r7, #14]
 80082a2:	4619      	mov	r1, r3
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f003 fbb9 	bl	800ba1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082aa:	2180      	movs	r1, #128	; 0x80
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f003 fbb5 	bl	800ba1c <USBD_LL_StallEP>
 80082b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082b4:	e020      	b.n	80082f8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fc7a 	bl	8008bb2 <USBD_CtlError>
              break;
 80082be:	e01b      	b.n	80082f8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	885b      	ldrh	r3, [r3, #2]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10e      	bne.n	80082e6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80082c8:	7bbb      	ldrb	r3, [r7, #14]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00b      	beq.n	80082e6 <USBD_StdEPReq+0xfe>
 80082ce:	7bbb      	ldrb	r3, [r7, #14]
 80082d0:	2b80      	cmp	r3, #128	; 0x80
 80082d2:	d008      	beq.n	80082e6 <USBD_StdEPReq+0xfe>
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	88db      	ldrh	r3, [r3, #6]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d104      	bne.n	80082e6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80082dc:	7bbb      	ldrb	r3, [r7, #14]
 80082de:	4619      	mov	r1, r3
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f003 fb9b 	bl	800ba1c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fd2e 	bl	8008d48 <USBD_CtlSendStatus>

              break;
 80082ec:	e004      	b.n	80082f8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 fc5e 	bl	8008bb2 <USBD_CtlError>
              break;
 80082f6:	bf00      	nop
          }
          break;
 80082f8:	e107      	b.n	800850a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008300:	b2db      	uxtb	r3, r3
 8008302:	2b02      	cmp	r3, #2
 8008304:	d002      	beq.n	800830c <USBD_StdEPReq+0x124>
 8008306:	2b03      	cmp	r3, #3
 8008308:	d016      	beq.n	8008338 <USBD_StdEPReq+0x150>
 800830a:	e04b      	b.n	80083a4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800830c:	7bbb      	ldrb	r3, [r7, #14]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00d      	beq.n	800832e <USBD_StdEPReq+0x146>
 8008312:	7bbb      	ldrb	r3, [r7, #14]
 8008314:	2b80      	cmp	r3, #128	; 0x80
 8008316:	d00a      	beq.n	800832e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008318:	7bbb      	ldrb	r3, [r7, #14]
 800831a:	4619      	mov	r1, r3
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f003 fb7d 	bl	800ba1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008322:	2180      	movs	r1, #128	; 0x80
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f003 fb79 	bl	800ba1c <USBD_LL_StallEP>
 800832a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800832c:	e040      	b.n	80083b0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800832e:	6839      	ldr	r1, [r7, #0]
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 fc3e 	bl	8008bb2 <USBD_CtlError>
              break;
 8008336:	e03b      	b.n	80083b0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	885b      	ldrh	r3, [r3, #2]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d136      	bne.n	80083ae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008340:	7bbb      	ldrb	r3, [r7, #14]
 8008342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008346:	2b00      	cmp	r3, #0
 8008348:	d004      	beq.n	8008354 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800834a:	7bbb      	ldrb	r3, [r7, #14]
 800834c:	4619      	mov	r1, r3
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f003 fb83 	bl	800ba5a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 fcf7 	bl	8008d48 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800835a:	7bbb      	ldrb	r3, [r7, #14]
 800835c:	4619      	mov	r1, r3
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f7ff fde2 	bl	8007f28 <USBD_CoreFindEP>
 8008364:	4603      	mov	r3, r0
 8008366:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008368:	7b7b      	ldrb	r3, [r7, #13]
 800836a:	2bff      	cmp	r3, #255	; 0xff
 800836c:	d01f      	beq.n	80083ae <USBD_StdEPReq+0x1c6>
 800836e:	7b7b      	ldrb	r3, [r7, #13]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d11c      	bne.n	80083ae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008374:	7b7a      	ldrb	r2, [r7, #13]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800837c:	7b7a      	ldrb	r2, [r7, #13]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	32ae      	adds	r2, #174	; 0xae
 8008382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d010      	beq.n	80083ae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800838c:	7b7a      	ldrb	r2, [r7, #13]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	32ae      	adds	r2, #174	; 0xae
 8008392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	6839      	ldr	r1, [r7, #0]
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	4798      	blx	r3
 800839e:	4603      	mov	r3, r0
 80083a0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80083a2:	e004      	b.n	80083ae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80083a4:	6839      	ldr	r1, [r7, #0]
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 fc03 	bl	8008bb2 <USBD_CtlError>
              break;
 80083ac:	e000      	b.n	80083b0 <USBD_StdEPReq+0x1c8>
              break;
 80083ae:	bf00      	nop
          }
          break;
 80083b0:	e0ab      	b.n	800850a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	d002      	beq.n	80083c4 <USBD_StdEPReq+0x1dc>
 80083be:	2b03      	cmp	r3, #3
 80083c0:	d032      	beq.n	8008428 <USBD_StdEPReq+0x240>
 80083c2:	e097      	b.n	80084f4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083c4:	7bbb      	ldrb	r3, [r7, #14]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d007      	beq.n	80083da <USBD_StdEPReq+0x1f2>
 80083ca:	7bbb      	ldrb	r3, [r7, #14]
 80083cc:	2b80      	cmp	r3, #128	; 0x80
 80083ce:	d004      	beq.n	80083da <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80083d0:	6839      	ldr	r1, [r7, #0]
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fbed 	bl	8008bb2 <USBD_CtlError>
                break;
 80083d8:	e091      	b.n	80084fe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	da0b      	bge.n	80083fa <USBD_StdEPReq+0x212>
 80083e2:	7bbb      	ldrb	r3, [r7, #14]
 80083e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083e8:	4613      	mov	r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	4413      	add	r3, r2
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	3310      	adds	r3, #16
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	4413      	add	r3, r2
 80083f6:	3304      	adds	r3, #4
 80083f8:	e00b      	b.n	8008412 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083fa:	7bbb      	ldrb	r3, [r7, #14]
 80083fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008400:	4613      	mov	r3, r2
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	4413      	add	r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	4413      	add	r3, r2
 8008410:	3304      	adds	r3, #4
 8008412:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	2200      	movs	r2, #0
 8008418:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	2202      	movs	r2, #2
 800841e:	4619      	mov	r1, r3
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 fc37 	bl	8008c94 <USBD_CtlSendData>
              break;
 8008426:	e06a      	b.n	80084fe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008428:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800842c:	2b00      	cmp	r3, #0
 800842e:	da11      	bge.n	8008454 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008430:	7bbb      	ldrb	r3, [r7, #14]
 8008432:	f003 020f 	and.w	r2, r3, #15
 8008436:	6879      	ldr	r1, [r7, #4]
 8008438:	4613      	mov	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4413      	add	r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	440b      	add	r3, r1
 8008442:	3324      	adds	r3, #36	; 0x24
 8008444:	881b      	ldrh	r3, [r3, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d117      	bne.n	800847a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800844a:	6839      	ldr	r1, [r7, #0]
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fbb0 	bl	8008bb2 <USBD_CtlError>
                  break;
 8008452:	e054      	b.n	80084fe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008454:	7bbb      	ldrb	r3, [r7, #14]
 8008456:	f003 020f 	and.w	r2, r3, #15
 800845a:	6879      	ldr	r1, [r7, #4]
 800845c:	4613      	mov	r3, r2
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	4413      	add	r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	440b      	add	r3, r1
 8008466:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800846a:	881b      	ldrh	r3, [r3, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d104      	bne.n	800847a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008470:	6839      	ldr	r1, [r7, #0]
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 fb9d 	bl	8008bb2 <USBD_CtlError>
                  break;
 8008478:	e041      	b.n	80084fe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800847a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800847e:	2b00      	cmp	r3, #0
 8008480:	da0b      	bge.n	800849a <USBD_StdEPReq+0x2b2>
 8008482:	7bbb      	ldrb	r3, [r7, #14]
 8008484:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008488:	4613      	mov	r3, r2
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	4413      	add	r3, r2
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	3310      	adds	r3, #16
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	4413      	add	r3, r2
 8008496:	3304      	adds	r3, #4
 8008498:	e00b      	b.n	80084b2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800849a:	7bbb      	ldrb	r3, [r7, #14]
 800849c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084a0:	4613      	mov	r3, r2
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	4413      	add	r3, r2
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	4413      	add	r3, r2
 80084b0:	3304      	adds	r3, #4
 80084b2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80084b4:	7bbb      	ldrb	r3, [r7, #14]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d002      	beq.n	80084c0 <USBD_StdEPReq+0x2d8>
 80084ba:	7bbb      	ldrb	r3, [r7, #14]
 80084bc:	2b80      	cmp	r3, #128	; 0x80
 80084be:	d103      	bne.n	80084c8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	2200      	movs	r2, #0
 80084c4:	601a      	str	r2, [r3, #0]
 80084c6:	e00e      	b.n	80084e6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80084c8:	7bbb      	ldrb	r3, [r7, #14]
 80084ca:	4619      	mov	r1, r3
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f003 fae3 	bl	800ba98 <USBD_LL_IsStallEP>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d003      	beq.n	80084e0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	2201      	movs	r2, #1
 80084dc:	601a      	str	r2, [r3, #0]
 80084de:	e002      	b.n	80084e6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	2200      	movs	r2, #0
 80084e4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	2202      	movs	r2, #2
 80084ea:	4619      	mov	r1, r3
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 fbd1 	bl	8008c94 <USBD_CtlSendData>
              break;
 80084f2:	e004      	b.n	80084fe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80084f4:	6839      	ldr	r1, [r7, #0]
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fb5b 	bl	8008bb2 <USBD_CtlError>
              break;
 80084fc:	bf00      	nop
          }
          break;
 80084fe:	e004      	b.n	800850a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008500:	6839      	ldr	r1, [r7, #0]
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 fb55 	bl	8008bb2 <USBD_CtlError>
          break;
 8008508:	bf00      	nop
      }
      break;
 800850a:	e005      	b.n	8008518 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800850c:	6839      	ldr	r1, [r7, #0]
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 fb4f 	bl	8008bb2 <USBD_CtlError>
      break;
 8008514:	e000      	b.n	8008518 <USBD_StdEPReq+0x330>
      break;
 8008516:	bf00      	nop
  }

  return ret;
 8008518:	7bfb      	ldrb	r3, [r7, #15]
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
	...

08008524 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800852e:	2300      	movs	r3, #0
 8008530:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008532:	2300      	movs	r3, #0
 8008534:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008536:	2300      	movs	r3, #0
 8008538:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	885b      	ldrh	r3, [r3, #2]
 800853e:	0a1b      	lsrs	r3, r3, #8
 8008540:	b29b      	uxth	r3, r3
 8008542:	3b01      	subs	r3, #1
 8008544:	2b06      	cmp	r3, #6
 8008546:	f200 8128 	bhi.w	800879a <USBD_GetDescriptor+0x276>
 800854a:	a201      	add	r2, pc, #4	; (adr r2, 8008550 <USBD_GetDescriptor+0x2c>)
 800854c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008550:	0800856d 	.word	0x0800856d
 8008554:	08008585 	.word	0x08008585
 8008558:	080085c5 	.word	0x080085c5
 800855c:	0800879b 	.word	0x0800879b
 8008560:	0800879b 	.word	0x0800879b
 8008564:	0800873b 	.word	0x0800873b
 8008568:	08008767 	.word	0x08008767
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	7c12      	ldrb	r2, [r2, #16]
 8008578:	f107 0108 	add.w	r1, r7, #8
 800857c:	4610      	mov	r0, r2
 800857e:	4798      	blx	r3
 8008580:	60f8      	str	r0, [r7, #12]
      break;
 8008582:	e112      	b.n	80087aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	7c1b      	ldrb	r3, [r3, #16]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d10d      	bne.n	80085a8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008594:	f107 0208 	add.w	r2, r7, #8
 8008598:	4610      	mov	r0, r2
 800859a:	4798      	blx	r3
 800859c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	3301      	adds	r3, #1
 80085a2:	2202      	movs	r2, #2
 80085a4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80085a6:	e100      	b.n	80087aa <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b0:	f107 0208 	add.w	r2, r7, #8
 80085b4:	4610      	mov	r0, r2
 80085b6:	4798      	blx	r3
 80085b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	3301      	adds	r3, #1
 80085be:	2202      	movs	r2, #2
 80085c0:	701a      	strb	r2, [r3, #0]
      break;
 80085c2:	e0f2      	b.n	80087aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	885b      	ldrh	r3, [r3, #2]
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	2b05      	cmp	r3, #5
 80085cc:	f200 80ac 	bhi.w	8008728 <USBD_GetDescriptor+0x204>
 80085d0:	a201      	add	r2, pc, #4	; (adr r2, 80085d8 <USBD_GetDescriptor+0xb4>)
 80085d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d6:	bf00      	nop
 80085d8:	080085f1 	.word	0x080085f1
 80085dc:	08008625 	.word	0x08008625
 80085e0:	08008659 	.word	0x08008659
 80085e4:	0800868d 	.word	0x0800868d
 80085e8:	080086c1 	.word	0x080086c1
 80085ec:	080086f5 	.word	0x080086f5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00b      	beq.n	8008614 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	7c12      	ldrb	r2, [r2, #16]
 8008608:	f107 0108 	add.w	r1, r7, #8
 800860c:	4610      	mov	r0, r2
 800860e:	4798      	blx	r3
 8008610:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008612:	e091      	b.n	8008738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008614:	6839      	ldr	r1, [r7, #0]
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 facb 	bl	8008bb2 <USBD_CtlError>
            err++;
 800861c:	7afb      	ldrb	r3, [r7, #11]
 800861e:	3301      	adds	r3, #1
 8008620:	72fb      	strb	r3, [r7, #11]
          break;
 8008622:	e089      	b.n	8008738 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00b      	beq.n	8008648 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	7c12      	ldrb	r2, [r2, #16]
 800863c:	f107 0108 	add.w	r1, r7, #8
 8008640:	4610      	mov	r0, r2
 8008642:	4798      	blx	r3
 8008644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008646:	e077      	b.n	8008738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008648:	6839      	ldr	r1, [r7, #0]
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 fab1 	bl	8008bb2 <USBD_CtlError>
            err++;
 8008650:	7afb      	ldrb	r3, [r7, #11]
 8008652:	3301      	adds	r3, #1
 8008654:	72fb      	strb	r3, [r7, #11]
          break;
 8008656:	e06f      	b.n	8008738 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00b      	beq.n	800867c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	7c12      	ldrb	r2, [r2, #16]
 8008670:	f107 0108 	add.w	r1, r7, #8
 8008674:	4610      	mov	r0, r2
 8008676:	4798      	blx	r3
 8008678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800867a:	e05d      	b.n	8008738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fa97 	bl	8008bb2 <USBD_CtlError>
            err++;
 8008684:	7afb      	ldrb	r3, [r7, #11]
 8008686:	3301      	adds	r3, #1
 8008688:	72fb      	strb	r3, [r7, #11]
          break;
 800868a:	e055      	b.n	8008738 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00b      	beq.n	80086b0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800869e:	691b      	ldr	r3, [r3, #16]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	7c12      	ldrb	r2, [r2, #16]
 80086a4:	f107 0108 	add.w	r1, r7, #8
 80086a8:	4610      	mov	r0, r2
 80086aa:	4798      	blx	r3
 80086ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086ae:	e043      	b.n	8008738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086b0:	6839      	ldr	r1, [r7, #0]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fa7d 	bl	8008bb2 <USBD_CtlError>
            err++;
 80086b8:	7afb      	ldrb	r3, [r7, #11]
 80086ba:	3301      	adds	r3, #1
 80086bc:	72fb      	strb	r3, [r7, #11]
          break;
 80086be:	e03b      	b.n	8008738 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086c6:	695b      	ldr	r3, [r3, #20]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00b      	beq.n	80086e4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086d2:	695b      	ldr	r3, [r3, #20]
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	7c12      	ldrb	r2, [r2, #16]
 80086d8:	f107 0108 	add.w	r1, r7, #8
 80086dc:	4610      	mov	r0, r2
 80086de:	4798      	blx	r3
 80086e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086e2:	e029      	b.n	8008738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086e4:	6839      	ldr	r1, [r7, #0]
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fa63 	bl	8008bb2 <USBD_CtlError>
            err++;
 80086ec:	7afb      	ldrb	r3, [r7, #11]
 80086ee:	3301      	adds	r3, #1
 80086f0:	72fb      	strb	r3, [r7, #11]
          break;
 80086f2:	e021      	b.n	8008738 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086fa:	699b      	ldr	r3, [r3, #24]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00b      	beq.n	8008718 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008706:	699b      	ldr	r3, [r3, #24]
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	7c12      	ldrb	r2, [r2, #16]
 800870c:	f107 0108 	add.w	r1, r7, #8
 8008710:	4610      	mov	r0, r2
 8008712:	4798      	blx	r3
 8008714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008716:	e00f      	b.n	8008738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008718:	6839      	ldr	r1, [r7, #0]
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 fa49 	bl	8008bb2 <USBD_CtlError>
            err++;
 8008720:	7afb      	ldrb	r3, [r7, #11]
 8008722:	3301      	adds	r3, #1
 8008724:	72fb      	strb	r3, [r7, #11]
          break;
 8008726:	e007      	b.n	8008738 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008728:	6839      	ldr	r1, [r7, #0]
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fa41 	bl	8008bb2 <USBD_CtlError>
          err++;
 8008730:	7afb      	ldrb	r3, [r7, #11]
 8008732:	3301      	adds	r3, #1
 8008734:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008736:	bf00      	nop
      }
      break;
 8008738:	e037      	b.n	80087aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	7c1b      	ldrb	r3, [r3, #16]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d109      	bne.n	8008756 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800874a:	f107 0208 	add.w	r2, r7, #8
 800874e:	4610      	mov	r0, r2
 8008750:	4798      	blx	r3
 8008752:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008754:	e029      	b.n	80087aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008756:	6839      	ldr	r1, [r7, #0]
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 fa2a 	bl	8008bb2 <USBD_CtlError>
        err++;
 800875e:	7afb      	ldrb	r3, [r7, #11]
 8008760:	3301      	adds	r3, #1
 8008762:	72fb      	strb	r3, [r7, #11]
      break;
 8008764:	e021      	b.n	80087aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	7c1b      	ldrb	r3, [r3, #16]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d10d      	bne.n	800878a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008776:	f107 0208 	add.w	r2, r7, #8
 800877a:	4610      	mov	r0, r2
 800877c:	4798      	blx	r3
 800877e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	3301      	adds	r3, #1
 8008784:	2207      	movs	r2, #7
 8008786:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008788:	e00f      	b.n	80087aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800878a:	6839      	ldr	r1, [r7, #0]
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fa10 	bl	8008bb2 <USBD_CtlError>
        err++;
 8008792:	7afb      	ldrb	r3, [r7, #11]
 8008794:	3301      	adds	r3, #1
 8008796:	72fb      	strb	r3, [r7, #11]
      break;
 8008798:	e007      	b.n	80087aa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 fa08 	bl	8008bb2 <USBD_CtlError>
      err++;
 80087a2:	7afb      	ldrb	r3, [r7, #11]
 80087a4:	3301      	adds	r3, #1
 80087a6:	72fb      	strb	r3, [r7, #11]
      break;
 80087a8:	bf00      	nop
  }

  if (err != 0U)
 80087aa:	7afb      	ldrb	r3, [r7, #11]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d11e      	bne.n	80087ee <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	88db      	ldrh	r3, [r3, #6]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d016      	beq.n	80087e6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80087b8:	893b      	ldrh	r3, [r7, #8]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00e      	beq.n	80087dc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	88da      	ldrh	r2, [r3, #6]
 80087c2:	893b      	ldrh	r3, [r7, #8]
 80087c4:	4293      	cmp	r3, r2
 80087c6:	bf28      	it	cs
 80087c8:	4613      	movcs	r3, r2
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80087ce:	893b      	ldrh	r3, [r7, #8]
 80087d0:	461a      	mov	r2, r3
 80087d2:	68f9      	ldr	r1, [r7, #12]
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fa5d 	bl	8008c94 <USBD_CtlSendData>
 80087da:	e009      	b.n	80087f0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80087dc:	6839      	ldr	r1, [r7, #0]
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f9e7 	bl	8008bb2 <USBD_CtlError>
 80087e4:	e004      	b.n	80087f0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 faae 	bl	8008d48 <USBD_CtlSendStatus>
 80087ec:	e000      	b.n	80087f0 <USBD_GetDescriptor+0x2cc>
    return;
 80087ee:	bf00      	nop
  }
}
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop

080087f8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	889b      	ldrh	r3, [r3, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d131      	bne.n	800886e <USBD_SetAddress+0x76>
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	88db      	ldrh	r3, [r3, #6]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d12d      	bne.n	800886e <USBD_SetAddress+0x76>
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	885b      	ldrh	r3, [r3, #2]
 8008816:	2b7f      	cmp	r3, #127	; 0x7f
 8008818:	d829      	bhi.n	800886e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	885b      	ldrh	r3, [r3, #2]
 800881e:	b2db      	uxtb	r3, r3
 8008820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008824:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800882c:	b2db      	uxtb	r3, r3
 800882e:	2b03      	cmp	r3, #3
 8008830:	d104      	bne.n	800883c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008832:	6839      	ldr	r1, [r7, #0]
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 f9bc 	bl	8008bb2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800883a:	e01d      	b.n	8008878 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	7bfa      	ldrb	r2, [r7, #15]
 8008840:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008844:	7bfb      	ldrb	r3, [r7, #15]
 8008846:	4619      	mov	r1, r3
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f003 f951 	bl	800baf0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 fa7a 	bl	8008d48 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008854:	7bfb      	ldrb	r3, [r7, #15]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d004      	beq.n	8008864 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2202      	movs	r2, #2
 800885e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008862:	e009      	b.n	8008878 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800886c:	e004      	b.n	8008878 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800886e:	6839      	ldr	r1, [r7, #0]
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f99e 	bl	8008bb2 <USBD_CtlError>
  }
}
 8008876:	bf00      	nop
 8008878:	bf00      	nop
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800888a:	2300      	movs	r3, #0
 800888c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	885b      	ldrh	r3, [r3, #2]
 8008892:	b2da      	uxtb	r2, r3
 8008894:	4b4e      	ldr	r3, [pc, #312]	; (80089d0 <USBD_SetConfig+0x150>)
 8008896:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008898:	4b4d      	ldr	r3, [pc, #308]	; (80089d0 <USBD_SetConfig+0x150>)
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	2b01      	cmp	r3, #1
 800889e:	d905      	bls.n	80088ac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80088a0:	6839      	ldr	r1, [r7, #0]
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 f985 	bl	8008bb2 <USBD_CtlError>
    return USBD_FAIL;
 80088a8:	2303      	movs	r3, #3
 80088aa:	e08c      	b.n	80089c6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	d002      	beq.n	80088be <USBD_SetConfig+0x3e>
 80088b8:	2b03      	cmp	r3, #3
 80088ba:	d029      	beq.n	8008910 <USBD_SetConfig+0x90>
 80088bc:	e075      	b.n	80089aa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80088be:	4b44      	ldr	r3, [pc, #272]	; (80089d0 <USBD_SetConfig+0x150>)
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d020      	beq.n	8008908 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80088c6:	4b42      	ldr	r3, [pc, #264]	; (80089d0 <USBD_SetConfig+0x150>)
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	461a      	mov	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80088d0:	4b3f      	ldr	r3, [pc, #252]	; (80089d0 <USBD_SetConfig+0x150>)
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	4619      	mov	r1, r3
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7fe ffe7 	bl	80078aa <USBD_SetClassConfig>
 80088dc:	4603      	mov	r3, r0
 80088de:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80088e0:	7bfb      	ldrb	r3, [r7, #15]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d008      	beq.n	80088f8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80088e6:	6839      	ldr	r1, [r7, #0]
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 f962 	bl	8008bb2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2202      	movs	r2, #2
 80088f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80088f6:	e065      	b.n	80089c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 fa25 	bl	8008d48 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2203      	movs	r2, #3
 8008902:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008906:	e05d      	b.n	80089c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 fa1d 	bl	8008d48 <USBD_CtlSendStatus>
      break;
 800890e:	e059      	b.n	80089c4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008910:	4b2f      	ldr	r3, [pc, #188]	; (80089d0 <USBD_SetConfig+0x150>)
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d112      	bne.n	800893e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2202      	movs	r2, #2
 800891c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008920:	4b2b      	ldr	r3, [pc, #172]	; (80089d0 <USBD_SetConfig+0x150>)
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	461a      	mov	r2, r3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800892a:	4b29      	ldr	r3, [pc, #164]	; (80089d0 <USBD_SetConfig+0x150>)
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	4619      	mov	r1, r3
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f7fe ffd6 	bl	80078e2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 fa06 	bl	8008d48 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800893c:	e042      	b.n	80089c4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800893e:	4b24      	ldr	r3, [pc, #144]	; (80089d0 <USBD_SetConfig+0x150>)
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	461a      	mov	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	429a      	cmp	r2, r3
 800894a:	d02a      	beq.n	80089a2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	b2db      	uxtb	r3, r3
 8008952:	4619      	mov	r1, r3
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f7fe ffc4 	bl	80078e2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800895a:	4b1d      	ldr	r3, [pc, #116]	; (80089d0 <USBD_SetConfig+0x150>)
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	461a      	mov	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008964:	4b1a      	ldr	r3, [pc, #104]	; (80089d0 <USBD_SetConfig+0x150>)
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	4619      	mov	r1, r3
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f7fe ff9d 	bl	80078aa <USBD_SetClassConfig>
 8008970:	4603      	mov	r3, r0
 8008972:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008974:	7bfb      	ldrb	r3, [r7, #15]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00f      	beq.n	800899a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800897a:	6839      	ldr	r1, [r7, #0]
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 f918 	bl	8008bb2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	b2db      	uxtb	r3, r3
 8008988:	4619      	mov	r1, r3
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f7fe ffa9 	bl	80078e2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2202      	movs	r2, #2
 8008994:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008998:	e014      	b.n	80089c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f9d4 	bl	8008d48 <USBD_CtlSendStatus>
      break;
 80089a0:	e010      	b.n	80089c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 f9d0 	bl	8008d48 <USBD_CtlSendStatus>
      break;
 80089a8:	e00c      	b.n	80089c4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80089aa:	6839      	ldr	r1, [r7, #0]
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 f900 	bl	8008bb2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80089b2:	4b07      	ldr	r3, [pc, #28]	; (80089d0 <USBD_SetConfig+0x150>)
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	4619      	mov	r1, r3
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f7fe ff92 	bl	80078e2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80089be:	2303      	movs	r3, #3
 80089c0:	73fb      	strb	r3, [r7, #15]
      break;
 80089c2:	bf00      	nop
  }

  return ret;
 80089c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	20000d84 	.word	0x20000d84

080089d4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	88db      	ldrh	r3, [r3, #6]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d004      	beq.n	80089f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80089e6:	6839      	ldr	r1, [r7, #0]
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 f8e2 	bl	8008bb2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80089ee:	e023      	b.n	8008a38 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	dc02      	bgt.n	8008a02 <USBD_GetConfig+0x2e>
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	dc03      	bgt.n	8008a08 <USBD_GetConfig+0x34>
 8008a00:	e015      	b.n	8008a2e <USBD_GetConfig+0x5a>
 8008a02:	2b03      	cmp	r3, #3
 8008a04:	d00b      	beq.n	8008a1e <USBD_GetConfig+0x4a>
 8008a06:	e012      	b.n	8008a2e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	3308      	adds	r3, #8
 8008a12:	2201      	movs	r2, #1
 8008a14:	4619      	mov	r1, r3
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f93c 	bl	8008c94 <USBD_CtlSendData>
        break;
 8008a1c:	e00c      	b.n	8008a38 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	3304      	adds	r3, #4
 8008a22:	2201      	movs	r2, #1
 8008a24:	4619      	mov	r1, r3
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 f934 	bl	8008c94 <USBD_CtlSendData>
        break;
 8008a2c:	e004      	b.n	8008a38 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008a2e:	6839      	ldr	r1, [r7, #0]
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 f8be 	bl	8008bb2 <USBD_CtlError>
        break;
 8008a36:	bf00      	nop
}
 8008a38:	bf00      	nop
 8008a3a:	3708      	adds	r7, #8
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	3b01      	subs	r3, #1
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d81e      	bhi.n	8008a96 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	88db      	ldrh	r3, [r3, #6]
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d004      	beq.n	8008a6a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008a60:	6839      	ldr	r1, [r7, #0]
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 f8a5 	bl	8008bb2 <USBD_CtlError>
        break;
 8008a68:	e01a      	b.n	8008aa0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d005      	beq.n	8008a86 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	f043 0202 	orr.w	r2, r3, #2
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	330c      	adds	r3, #12
 8008a8a:	2202      	movs	r2, #2
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 f900 	bl	8008c94 <USBD_CtlSendData>
      break;
 8008a94:	e004      	b.n	8008aa0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008a96:	6839      	ldr	r1, [r7, #0]
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 f88a 	bl	8008bb2 <USBD_CtlError>
      break;
 8008a9e:	bf00      	nop
  }
}
 8008aa0:	bf00      	nop
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	885b      	ldrh	r3, [r3, #2]
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d107      	bne.n	8008aca <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2201      	movs	r2, #1
 8008abe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f940 	bl	8008d48 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008ac8:	e013      	b.n	8008af2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	885b      	ldrh	r3, [r3, #2]
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	d10b      	bne.n	8008aea <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	889b      	ldrh	r3, [r3, #4]
 8008ad6:	0a1b      	lsrs	r3, r3, #8
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	b2da      	uxtb	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 f930 	bl	8008d48 <USBD_CtlSendStatus>
}
 8008ae8:	e003      	b.n	8008af2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 f860 	bl	8008bb2 <USBD_CtlError>
}
 8008af2:	bf00      	nop
 8008af4:	3708      	adds	r7, #8
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b082      	sub	sp, #8
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d80b      	bhi.n	8008b2a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	885b      	ldrh	r3, [r3, #2]
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d10c      	bne.n	8008b34 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f910 	bl	8008d48 <USBD_CtlSendStatus>
      }
      break;
 8008b28:	e004      	b.n	8008b34 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008b2a:	6839      	ldr	r1, [r7, #0]
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 f840 	bl	8008bb2 <USBD_CtlError>
      break;
 8008b32:	e000      	b.n	8008b36 <USBD_ClrFeature+0x3c>
      break;
 8008b34:	bf00      	nop
  }
}
 8008b36:	bf00      	nop
 8008b38:	3708      	adds	r7, #8
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b084      	sub	sp, #16
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
 8008b46:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	781a      	ldrb	r2, [r3, #0]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	3301      	adds	r3, #1
 8008b58:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	781a      	ldrb	r2, [r3, #0]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	3301      	adds	r3, #1
 8008b66:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f7ff fa41 	bl	8007ff0 <SWAPBYTE>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	461a      	mov	r2, r3
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f7ff fa34 	bl	8007ff0 <SWAPBYTE>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	3301      	adds	r3, #1
 8008b94:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f7ff fa27 	bl	8007ff0 <SWAPBYTE>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	80da      	strh	r2, [r3, #6]
}
 8008baa:	bf00      	nop
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b082      	sub	sp, #8
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
 8008bba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008bbc:	2180      	movs	r1, #128	; 0x80
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f002 ff2c 	bl	800ba1c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f002 ff28 	bl	800ba1c <USBD_LL_StallEP>
}
 8008bcc:	bf00      	nop
 8008bce:	3708      	adds	r7, #8
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b086      	sub	sp, #24
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008be0:	2300      	movs	r3, #0
 8008be2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d036      	beq.n	8008c58 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008bee:	6938      	ldr	r0, [r7, #16]
 8008bf0:	f000 f836 	bl	8008c60 <USBD_GetLen>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	005b      	lsls	r3, r3, #1
 8008bfc:	b29a      	uxth	r2, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008c02:	7dfb      	ldrb	r3, [r7, #23]
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	4413      	add	r3, r2
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	7812      	ldrb	r2, [r2, #0]
 8008c0c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c0e:	7dfb      	ldrb	r3, [r7, #23]
 8008c10:	3301      	adds	r3, #1
 8008c12:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008c14:	7dfb      	ldrb	r3, [r7, #23]
 8008c16:	68ba      	ldr	r2, [r7, #8]
 8008c18:	4413      	add	r3, r2
 8008c1a:	2203      	movs	r2, #3
 8008c1c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c1e:	7dfb      	ldrb	r3, [r7, #23]
 8008c20:	3301      	adds	r3, #1
 8008c22:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008c24:	e013      	b.n	8008c4e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008c26:	7dfb      	ldrb	r3, [r7, #23]
 8008c28:	68ba      	ldr	r2, [r7, #8]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	7812      	ldrb	r2, [r2, #0]
 8008c30:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	3301      	adds	r3, #1
 8008c36:	613b      	str	r3, [r7, #16]
    idx++;
 8008c38:	7dfb      	ldrb	r3, [r7, #23]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008c3e:	7dfb      	ldrb	r3, [r7, #23]
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	4413      	add	r3, r2
 8008c44:	2200      	movs	r2, #0
 8008c46:	701a      	strb	r2, [r3, #0]
    idx++;
 8008c48:	7dfb      	ldrb	r3, [r7, #23]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1e7      	bne.n	8008c26 <USBD_GetString+0x52>
 8008c56:	e000      	b.n	8008c5a <USBD_GetString+0x86>
    return;
 8008c58:	bf00      	nop
  }
}
 8008c5a:	3718      	adds	r7, #24
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b085      	sub	sp, #20
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008c70:	e005      	b.n	8008c7e <USBD_GetLen+0x1e>
  {
    len++;
 8008c72:	7bfb      	ldrb	r3, [r7, #15]
 8008c74:	3301      	adds	r3, #1
 8008c76:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d1f5      	bne.n	8008c72 <USBD_GetLen+0x12>
  }

  return len;
 8008c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3714      	adds	r7, #20
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	60b9      	str	r1, [r7, #8]
 8008c9e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	2100      	movs	r1, #0
 8008cba:	68f8      	ldr	r0, [r7, #12]
 8008cbc:	f002 ff37 	bl	800bb2e <USBD_LL_Transmit>

  return USBD_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b084      	sub	sp, #16
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	60f8      	str	r0, [r7, #12]
 8008cd2:	60b9      	str	r1, [r7, #8]
 8008cd4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	2100      	movs	r1, #0
 8008cdc:	68f8      	ldr	r0, [r7, #12]
 8008cde:	f002 ff26 	bl	800bb2e <USBD_LL_Transmit>

  return USBD_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3710      	adds	r7, #16
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2203      	movs	r2, #3
 8008cfc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	68ba      	ldr	r2, [r7, #8]
 8008d14:	2100      	movs	r1, #0
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f002 ff2a 	bl	800bb70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b084      	sub	sp, #16
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	60f8      	str	r0, [r7, #12]
 8008d2e:	60b9      	str	r1, [r7, #8]
 8008d30:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	2100      	movs	r1, #0
 8008d38:	68f8      	ldr	r0, [r7, #12]
 8008d3a:	f002 ff19 	bl	800bb70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2204      	movs	r2, #4
 8008d54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008d58:	2300      	movs	r3, #0
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	2100      	movs	r1, #0
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f002 fee5 	bl	800bb2e <USBD_LL_Transmit>

  return USBD_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b082      	sub	sp, #8
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2205      	movs	r2, #5
 8008d7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d7e:	2300      	movs	r3, #0
 8008d80:	2200      	movs	r2, #0
 8008d82:	2100      	movs	r1, #0
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f002 fef3 	bl	800bb70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3708      	adds	r7, #8
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008d9e:	79fb      	ldrb	r3, [r7, #7]
 8008da0:	4a08      	ldr	r2, [pc, #32]	; (8008dc4 <disk_status+0x30>)
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	4413      	add	r3, r2
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	79fa      	ldrb	r2, [r7, #7]
 8008dac:	4905      	ldr	r1, [pc, #20]	; (8008dc4 <disk_status+0x30>)
 8008dae:	440a      	add	r2, r1
 8008db0:	7a12      	ldrb	r2, [r2, #8]
 8008db2:	4610      	mov	r0, r2
 8008db4:	4798      	blx	r3
 8008db6:	4603      	mov	r3, r0
 8008db8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3710      	adds	r7, #16
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	20000db0 	.word	0x20000db0

08008dc8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	4603      	mov	r3, r0
 8008dd0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008dd6:	79fb      	ldrb	r3, [r7, #7]
 8008dd8:	4a0d      	ldr	r2, [pc, #52]	; (8008e10 <disk_initialize+0x48>)
 8008dda:	5cd3      	ldrb	r3, [r2, r3]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d111      	bne.n	8008e04 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008de0:	79fb      	ldrb	r3, [r7, #7]
 8008de2:	4a0b      	ldr	r2, [pc, #44]	; (8008e10 <disk_initialize+0x48>)
 8008de4:	2101      	movs	r1, #1
 8008de6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008de8:	79fb      	ldrb	r3, [r7, #7]
 8008dea:	4a09      	ldr	r2, [pc, #36]	; (8008e10 <disk_initialize+0x48>)
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	4413      	add	r3, r2
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	79fa      	ldrb	r2, [r7, #7]
 8008df6:	4906      	ldr	r1, [pc, #24]	; (8008e10 <disk_initialize+0x48>)
 8008df8:	440a      	add	r2, r1
 8008dfa:	7a12      	ldrb	r2, [r2, #8]
 8008dfc:	4610      	mov	r0, r2
 8008dfe:	4798      	blx	r3
 8008e00:	4603      	mov	r3, r0
 8008e02:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3710      	adds	r7, #16
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	20000db0 	.word	0x20000db0

08008e14 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008e14:	b590      	push	{r4, r7, lr}
 8008e16:	b087      	sub	sp, #28
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60b9      	str	r1, [r7, #8]
 8008e1c:	607a      	str	r2, [r7, #4]
 8008e1e:	603b      	str	r3, [r7, #0]
 8008e20:	4603      	mov	r3, r0
 8008e22:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008e24:	7bfb      	ldrb	r3, [r7, #15]
 8008e26:	4a0a      	ldr	r2, [pc, #40]	; (8008e50 <disk_read+0x3c>)
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	4413      	add	r3, r2
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	689c      	ldr	r4, [r3, #8]
 8008e30:	7bfb      	ldrb	r3, [r7, #15]
 8008e32:	4a07      	ldr	r2, [pc, #28]	; (8008e50 <disk_read+0x3c>)
 8008e34:	4413      	add	r3, r2
 8008e36:	7a18      	ldrb	r0, [r3, #8]
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	68b9      	ldr	r1, [r7, #8]
 8008e3e:	47a0      	blx	r4
 8008e40:	4603      	mov	r3, r0
 8008e42:	75fb      	strb	r3, [r7, #23]
  return res;
 8008e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	371c      	adds	r7, #28
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd90      	pop	{r4, r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	20000db0 	.word	0x20000db0

08008e54 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008e54:	b590      	push	{r4, r7, lr}
 8008e56:	b087      	sub	sp, #28
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60b9      	str	r1, [r7, #8]
 8008e5c:	607a      	str	r2, [r7, #4]
 8008e5e:	603b      	str	r3, [r7, #0]
 8008e60:	4603      	mov	r3, r0
 8008e62:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008e64:	7bfb      	ldrb	r3, [r7, #15]
 8008e66:	4a0a      	ldr	r2, [pc, #40]	; (8008e90 <disk_write+0x3c>)
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	4413      	add	r3, r2
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	68dc      	ldr	r4, [r3, #12]
 8008e70:	7bfb      	ldrb	r3, [r7, #15]
 8008e72:	4a07      	ldr	r2, [pc, #28]	; (8008e90 <disk_write+0x3c>)
 8008e74:	4413      	add	r3, r2
 8008e76:	7a18      	ldrb	r0, [r3, #8]
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	68b9      	ldr	r1, [r7, #8]
 8008e7e:	47a0      	blx	r4
 8008e80:	4603      	mov	r3, r0
 8008e82:	75fb      	strb	r3, [r7, #23]
  return res;
 8008e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	371c      	adds	r7, #28
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd90      	pop	{r4, r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	20000db0 	.word	0x20000db0

08008e94 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	603a      	str	r2, [r7, #0]
 8008e9e:	71fb      	strb	r3, [r7, #7]
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008ea4:	79fb      	ldrb	r3, [r7, #7]
 8008ea6:	4a09      	ldr	r2, [pc, #36]	; (8008ecc <disk_ioctl+0x38>)
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	4413      	add	r3, r2
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	79fa      	ldrb	r2, [r7, #7]
 8008eb2:	4906      	ldr	r1, [pc, #24]	; (8008ecc <disk_ioctl+0x38>)
 8008eb4:	440a      	add	r2, r1
 8008eb6:	7a10      	ldrb	r0, [r2, #8]
 8008eb8:	79b9      	ldrb	r1, [r7, #6]
 8008eba:	683a      	ldr	r2, [r7, #0]
 8008ebc:	4798      	blx	r3
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	73fb      	strb	r3, [r7, #15]
  return res;
 8008ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3710      	adds	r7, #16
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	20000db0 	.word	0x20000db0

08008ed0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b085      	sub	sp, #20
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	3301      	adds	r3, #1
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008ee0:	89fb      	ldrh	r3, [r7, #14]
 8008ee2:	021b      	lsls	r3, r3, #8
 8008ee4:	b21a      	sxth	r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	b21b      	sxth	r3, r3
 8008eec:	4313      	orrs	r3, r2
 8008eee:	b21b      	sxth	r3, r3
 8008ef0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008ef2:	89fb      	ldrh	r3, [r7, #14]
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3714      	adds	r7, #20
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	3303      	adds	r3, #3
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	021b      	lsls	r3, r3, #8
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	3202      	adds	r2, #2
 8008f18:	7812      	ldrb	r2, [r2, #0]
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	021b      	lsls	r3, r3, #8
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	3201      	adds	r2, #1
 8008f26:	7812      	ldrb	r2, [r2, #0]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	021b      	lsls	r3, r3, #8
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	7812      	ldrb	r2, [r2, #0]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	60fb      	str	r3, [r7, #12]
	return rv;
 8008f38:	68fb      	ldr	r3, [r7, #12]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3714      	adds	r7, #20
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr

08008f46 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008f46:	b480      	push	{r7}
 8008f48:	b083      	sub	sp, #12
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
 8008f4e:	460b      	mov	r3, r1
 8008f50:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	1c5a      	adds	r2, r3, #1
 8008f56:	607a      	str	r2, [r7, #4]
 8008f58:	887a      	ldrh	r2, [r7, #2]
 8008f5a:	b2d2      	uxtb	r2, r2
 8008f5c:	701a      	strb	r2, [r3, #0]
 8008f5e:	887b      	ldrh	r3, [r7, #2]
 8008f60:	0a1b      	lsrs	r3, r3, #8
 8008f62:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	1c5a      	adds	r2, r3, #1
 8008f68:	607a      	str	r2, [r7, #4]
 8008f6a:	887a      	ldrh	r2, [r7, #2]
 8008f6c:	b2d2      	uxtb	r2, r2
 8008f6e:	701a      	strb	r2, [r3, #0]
}
 8008f70:	bf00      	nop
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	1c5a      	adds	r2, r3, #1
 8008f8a:	607a      	str	r2, [r7, #4]
 8008f8c:	683a      	ldr	r2, [r7, #0]
 8008f8e:	b2d2      	uxtb	r2, r2
 8008f90:	701a      	strb	r2, [r3, #0]
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	0a1b      	lsrs	r3, r3, #8
 8008f96:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	1c5a      	adds	r2, r3, #1
 8008f9c:	607a      	str	r2, [r7, #4]
 8008f9e:	683a      	ldr	r2, [r7, #0]
 8008fa0:	b2d2      	uxtb	r2, r2
 8008fa2:	701a      	strb	r2, [r3, #0]
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	0a1b      	lsrs	r3, r3, #8
 8008fa8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	1c5a      	adds	r2, r3, #1
 8008fae:	607a      	str	r2, [r7, #4]
 8008fb0:	683a      	ldr	r2, [r7, #0]
 8008fb2:	b2d2      	uxtb	r2, r2
 8008fb4:	701a      	strb	r2, [r3, #0]
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	0a1b      	lsrs	r3, r3, #8
 8008fba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	1c5a      	adds	r2, r3, #1
 8008fc0:	607a      	str	r2, [r7, #4]
 8008fc2:	683a      	ldr	r2, [r7, #0]
 8008fc4:	b2d2      	uxtb	r2, r2
 8008fc6:	701a      	strb	r2, [r3, #0]
}
 8008fc8:	bf00      	nop
 8008fca:	370c      	adds	r7, #12
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008fd4:	b480      	push	{r7}
 8008fd6:	b087      	sub	sp, #28
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00d      	beq.n	800900a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008fee:	693a      	ldr	r2, [r7, #16]
 8008ff0:	1c53      	adds	r3, r2, #1
 8008ff2:	613b      	str	r3, [r7, #16]
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	1c59      	adds	r1, r3, #1
 8008ff8:	6179      	str	r1, [r7, #20]
 8008ffa:	7812      	ldrb	r2, [r2, #0]
 8008ffc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	3b01      	subs	r3, #1
 8009002:	607b      	str	r3, [r7, #4]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d1f1      	bne.n	8008fee <mem_cpy+0x1a>
	}
}
 800900a:	bf00      	nop
 800900c:	371c      	adds	r7, #28
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr

08009016 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009016:	b480      	push	{r7}
 8009018:	b087      	sub	sp, #28
 800901a:	af00      	add	r7, sp, #0
 800901c:	60f8      	str	r0, [r7, #12]
 800901e:	60b9      	str	r1, [r7, #8]
 8009020:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	1c5a      	adds	r2, r3, #1
 800902a:	617a      	str	r2, [r7, #20]
 800902c:	68ba      	ldr	r2, [r7, #8]
 800902e:	b2d2      	uxtb	r2, r2
 8009030:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	3b01      	subs	r3, #1
 8009036:	607b      	str	r3, [r7, #4]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d1f3      	bne.n	8009026 <mem_set+0x10>
}
 800903e:	bf00      	nop
 8009040:	bf00      	nop
 8009042:	371c      	adds	r7, #28
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800904c:	b480      	push	{r7}
 800904e:	b089      	sub	sp, #36	; 0x24
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	61fb      	str	r3, [r7, #28]
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009060:	2300      	movs	r3, #0
 8009062:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	1c5a      	adds	r2, r3, #1
 8009068:	61fa      	str	r2, [r7, #28]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	4619      	mov	r1, r3
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	1c5a      	adds	r2, r3, #1
 8009072:	61ba      	str	r2, [r7, #24]
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	1acb      	subs	r3, r1, r3
 8009078:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	3b01      	subs	r3, #1
 800907e:	607b      	str	r3, [r7, #4]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d002      	beq.n	800908c <mem_cmp+0x40>
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d0eb      	beq.n	8009064 <mem_cmp+0x18>

	return r;
 800908c:	697b      	ldr	r3, [r7, #20]
}
 800908e:	4618      	mov	r0, r3
 8009090:	3724      	adds	r7, #36	; 0x24
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr

0800909a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800909a:	b480      	push	{r7}
 800909c:	b083      	sub	sp, #12
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
 80090a2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80090a4:	e002      	b.n	80090ac <chk_chr+0x12>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	3301      	adds	r3, #1
 80090aa:	607b      	str	r3, [r7, #4]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d005      	beq.n	80090c0 <chk_chr+0x26>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	461a      	mov	r2, r3
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	4293      	cmp	r3, r2
 80090be:	d1f2      	bne.n	80090a6 <chk_chr+0xc>
	return *str;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	781b      	ldrb	r3, [r3, #0]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b085      	sub	sp, #20
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80090da:	2300      	movs	r3, #0
 80090dc:	60bb      	str	r3, [r7, #8]
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	60fb      	str	r3, [r7, #12]
 80090e2:	e029      	b.n	8009138 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80090e4:	4a27      	ldr	r2, [pc, #156]	; (8009184 <chk_lock+0xb4>)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	011b      	lsls	r3, r3, #4
 80090ea:	4413      	add	r3, r2
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d01d      	beq.n	800912e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80090f2:	4a24      	ldr	r2, [pc, #144]	; (8009184 <chk_lock+0xb4>)
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	011b      	lsls	r3, r3, #4
 80090f8:	4413      	add	r3, r2
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	429a      	cmp	r2, r3
 8009102:	d116      	bne.n	8009132 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009104:	4a1f      	ldr	r2, [pc, #124]	; (8009184 <chk_lock+0xb4>)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	011b      	lsls	r3, r3, #4
 800910a:	4413      	add	r3, r2
 800910c:	3304      	adds	r3, #4
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009114:	429a      	cmp	r2, r3
 8009116:	d10c      	bne.n	8009132 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009118:	4a1a      	ldr	r2, [pc, #104]	; (8009184 <chk_lock+0xb4>)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	011b      	lsls	r3, r3, #4
 800911e:	4413      	add	r3, r2
 8009120:	3308      	adds	r3, #8
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009128:	429a      	cmp	r2, r3
 800912a:	d102      	bne.n	8009132 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800912c:	e007      	b.n	800913e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800912e:	2301      	movs	r3, #1
 8009130:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	3301      	adds	r3, #1
 8009136:	60fb      	str	r3, [r7, #12]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2b01      	cmp	r3, #1
 800913c:	d9d2      	bls.n	80090e4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2b02      	cmp	r3, #2
 8009142:	d109      	bne.n	8009158 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d102      	bne.n	8009150 <chk_lock+0x80>
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	2b02      	cmp	r3, #2
 800914e:	d101      	bne.n	8009154 <chk_lock+0x84>
 8009150:	2300      	movs	r3, #0
 8009152:	e010      	b.n	8009176 <chk_lock+0xa6>
 8009154:	2312      	movs	r3, #18
 8009156:	e00e      	b.n	8009176 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d108      	bne.n	8009170 <chk_lock+0xa0>
 800915e:	4a09      	ldr	r2, [pc, #36]	; (8009184 <chk_lock+0xb4>)
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	011b      	lsls	r3, r3, #4
 8009164:	4413      	add	r3, r2
 8009166:	330c      	adds	r3, #12
 8009168:	881b      	ldrh	r3, [r3, #0]
 800916a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800916e:	d101      	bne.n	8009174 <chk_lock+0xa4>
 8009170:	2310      	movs	r3, #16
 8009172:	e000      	b.n	8009176 <chk_lock+0xa6>
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3714      	adds	r7, #20
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop
 8009184:	20000d90 	.word	0x20000d90

08009188 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800918e:	2300      	movs	r3, #0
 8009190:	607b      	str	r3, [r7, #4]
 8009192:	e002      	b.n	800919a <enq_lock+0x12>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	3301      	adds	r3, #1
 8009198:	607b      	str	r3, [r7, #4]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2b01      	cmp	r3, #1
 800919e:	d806      	bhi.n	80091ae <enq_lock+0x26>
 80091a0:	4a09      	ldr	r2, [pc, #36]	; (80091c8 <enq_lock+0x40>)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	011b      	lsls	r3, r3, #4
 80091a6:	4413      	add	r3, r2
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1f2      	bne.n	8009194 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2b02      	cmp	r3, #2
 80091b2:	bf14      	ite	ne
 80091b4:	2301      	movne	r3, #1
 80091b6:	2300      	moveq	r3, #0
 80091b8:	b2db      	uxtb	r3, r3
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	370c      	adds	r7, #12
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr
 80091c6:	bf00      	nop
 80091c8:	20000d90 	.word	0x20000d90

080091cc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b085      	sub	sp, #20
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80091d6:	2300      	movs	r3, #0
 80091d8:	60fb      	str	r3, [r7, #12]
 80091da:	e01f      	b.n	800921c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80091dc:	4a41      	ldr	r2, [pc, #260]	; (80092e4 <inc_lock+0x118>)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	011b      	lsls	r3, r3, #4
 80091e2:	4413      	add	r3, r2
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d113      	bne.n	8009216 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80091ee:	4a3d      	ldr	r2, [pc, #244]	; (80092e4 <inc_lock+0x118>)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	011b      	lsls	r3, r3, #4
 80091f4:	4413      	add	r3, r2
 80091f6:	3304      	adds	r3, #4
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80091fe:	429a      	cmp	r2, r3
 8009200:	d109      	bne.n	8009216 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009202:	4a38      	ldr	r2, [pc, #224]	; (80092e4 <inc_lock+0x118>)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	011b      	lsls	r3, r3, #4
 8009208:	4413      	add	r3, r2
 800920a:	3308      	adds	r3, #8
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009212:	429a      	cmp	r2, r3
 8009214:	d006      	beq.n	8009224 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	3301      	adds	r3, #1
 800921a:	60fb      	str	r3, [r7, #12]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2b01      	cmp	r3, #1
 8009220:	d9dc      	bls.n	80091dc <inc_lock+0x10>
 8009222:	e000      	b.n	8009226 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009224:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2b02      	cmp	r3, #2
 800922a:	d132      	bne.n	8009292 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800922c:	2300      	movs	r3, #0
 800922e:	60fb      	str	r3, [r7, #12]
 8009230:	e002      	b.n	8009238 <inc_lock+0x6c>
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	3301      	adds	r3, #1
 8009236:	60fb      	str	r3, [r7, #12]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2b01      	cmp	r3, #1
 800923c:	d806      	bhi.n	800924c <inc_lock+0x80>
 800923e:	4a29      	ldr	r2, [pc, #164]	; (80092e4 <inc_lock+0x118>)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	011b      	lsls	r3, r3, #4
 8009244:	4413      	add	r3, r2
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d1f2      	bne.n	8009232 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2b02      	cmp	r3, #2
 8009250:	d101      	bne.n	8009256 <inc_lock+0x8a>
 8009252:	2300      	movs	r3, #0
 8009254:	e040      	b.n	80092d8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	4922      	ldr	r1, [pc, #136]	; (80092e4 <inc_lock+0x118>)
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	011b      	lsls	r3, r3, #4
 8009260:	440b      	add	r3, r1
 8009262:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	689a      	ldr	r2, [r3, #8]
 8009268:	491e      	ldr	r1, [pc, #120]	; (80092e4 <inc_lock+0x118>)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	011b      	lsls	r3, r3, #4
 800926e:	440b      	add	r3, r1
 8009270:	3304      	adds	r3, #4
 8009272:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	695a      	ldr	r2, [r3, #20]
 8009278:	491a      	ldr	r1, [pc, #104]	; (80092e4 <inc_lock+0x118>)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	011b      	lsls	r3, r3, #4
 800927e:	440b      	add	r3, r1
 8009280:	3308      	adds	r3, #8
 8009282:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009284:	4a17      	ldr	r2, [pc, #92]	; (80092e4 <inc_lock+0x118>)
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	011b      	lsls	r3, r3, #4
 800928a:	4413      	add	r3, r2
 800928c:	330c      	adds	r3, #12
 800928e:	2200      	movs	r2, #0
 8009290:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d009      	beq.n	80092ac <inc_lock+0xe0>
 8009298:	4a12      	ldr	r2, [pc, #72]	; (80092e4 <inc_lock+0x118>)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	011b      	lsls	r3, r3, #4
 800929e:	4413      	add	r3, r2
 80092a0:	330c      	adds	r3, #12
 80092a2:	881b      	ldrh	r3, [r3, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d001      	beq.n	80092ac <inc_lock+0xe0>
 80092a8:	2300      	movs	r3, #0
 80092aa:	e015      	b.n	80092d8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d108      	bne.n	80092c4 <inc_lock+0xf8>
 80092b2:	4a0c      	ldr	r2, [pc, #48]	; (80092e4 <inc_lock+0x118>)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	011b      	lsls	r3, r3, #4
 80092b8:	4413      	add	r3, r2
 80092ba:	330c      	adds	r3, #12
 80092bc:	881b      	ldrh	r3, [r3, #0]
 80092be:	3301      	adds	r3, #1
 80092c0:	b29a      	uxth	r2, r3
 80092c2:	e001      	b.n	80092c8 <inc_lock+0xfc>
 80092c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80092c8:	4906      	ldr	r1, [pc, #24]	; (80092e4 <inc_lock+0x118>)
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	011b      	lsls	r3, r3, #4
 80092ce:	440b      	add	r3, r1
 80092d0:	330c      	adds	r3, #12
 80092d2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	3301      	adds	r3, #1
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3714      	adds	r7, #20
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr
 80092e4:	20000d90 	.word	0x20000d90

080092e8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	3b01      	subs	r3, #1
 80092f4:	607b      	str	r3, [r7, #4]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d825      	bhi.n	8009348 <dec_lock+0x60>
		n = Files[i].ctr;
 80092fc:	4a17      	ldr	r2, [pc, #92]	; (800935c <dec_lock+0x74>)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	011b      	lsls	r3, r3, #4
 8009302:	4413      	add	r3, r2
 8009304:	330c      	adds	r3, #12
 8009306:	881b      	ldrh	r3, [r3, #0]
 8009308:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800930a:	89fb      	ldrh	r3, [r7, #14]
 800930c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009310:	d101      	bne.n	8009316 <dec_lock+0x2e>
 8009312:	2300      	movs	r3, #0
 8009314:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009316:	89fb      	ldrh	r3, [r7, #14]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d002      	beq.n	8009322 <dec_lock+0x3a>
 800931c:	89fb      	ldrh	r3, [r7, #14]
 800931e:	3b01      	subs	r3, #1
 8009320:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009322:	4a0e      	ldr	r2, [pc, #56]	; (800935c <dec_lock+0x74>)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	011b      	lsls	r3, r3, #4
 8009328:	4413      	add	r3, r2
 800932a:	330c      	adds	r3, #12
 800932c:	89fa      	ldrh	r2, [r7, #14]
 800932e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009330:	89fb      	ldrh	r3, [r7, #14]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d105      	bne.n	8009342 <dec_lock+0x5a>
 8009336:	4a09      	ldr	r2, [pc, #36]	; (800935c <dec_lock+0x74>)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	011b      	lsls	r3, r3, #4
 800933c:	4413      	add	r3, r2
 800933e:	2200      	movs	r2, #0
 8009340:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009342:	2300      	movs	r3, #0
 8009344:	737b      	strb	r3, [r7, #13]
 8009346:	e001      	b.n	800934c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009348:	2302      	movs	r3, #2
 800934a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800934c:	7b7b      	ldrb	r3, [r7, #13]
}
 800934e:	4618      	mov	r0, r3
 8009350:	3714      	adds	r7, #20
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr
 800935a:	bf00      	nop
 800935c:	20000d90 	.word	0x20000d90

08009360 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009360:	b480      	push	{r7}
 8009362:	b085      	sub	sp, #20
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009368:	2300      	movs	r3, #0
 800936a:	60fb      	str	r3, [r7, #12]
 800936c:	e010      	b.n	8009390 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800936e:	4a0d      	ldr	r2, [pc, #52]	; (80093a4 <clear_lock+0x44>)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	011b      	lsls	r3, r3, #4
 8009374:	4413      	add	r3, r2
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	429a      	cmp	r2, r3
 800937c:	d105      	bne.n	800938a <clear_lock+0x2a>
 800937e:	4a09      	ldr	r2, [pc, #36]	; (80093a4 <clear_lock+0x44>)
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	011b      	lsls	r3, r3, #4
 8009384:	4413      	add	r3, r2
 8009386:	2200      	movs	r2, #0
 8009388:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	3301      	adds	r3, #1
 800938e:	60fb      	str	r3, [r7, #12]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2b01      	cmp	r3, #1
 8009394:	d9eb      	bls.n	800936e <clear_lock+0xe>
	}
}
 8009396:	bf00      	nop
 8009398:	bf00      	nop
 800939a:	3714      	adds	r7, #20
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr
 80093a4:	20000d90 	.word	0x20000d90

080093a8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b086      	sub	sp, #24
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80093b0:	2300      	movs	r3, #0
 80093b2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	78db      	ldrb	r3, [r3, #3]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d034      	beq.n	8009426 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	7858      	ldrb	r0, [r3, #1]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80093cc:	2301      	movs	r3, #1
 80093ce:	697a      	ldr	r2, [r7, #20]
 80093d0:	f7ff fd40 	bl	8008e54 <disk_write>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d002      	beq.n	80093e0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80093da:	2301      	movs	r3, #1
 80093dc:	73fb      	strb	r3, [r7, #15]
 80093de:	e022      	b.n	8009426 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6a1b      	ldr	r3, [r3, #32]
 80093ea:	697a      	ldr	r2, [r7, #20]
 80093ec:	1ad2      	subs	r2, r2, r3
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d217      	bcs.n	8009426 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	789b      	ldrb	r3, [r3, #2]
 80093fa:	613b      	str	r3, [r7, #16]
 80093fc:	e010      	b.n	8009420 <sync_window+0x78>
					wsect += fs->fsize;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	699b      	ldr	r3, [r3, #24]
 8009402:	697a      	ldr	r2, [r7, #20]
 8009404:	4413      	add	r3, r2
 8009406:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	7858      	ldrb	r0, [r3, #1]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009412:	2301      	movs	r3, #1
 8009414:	697a      	ldr	r2, [r7, #20]
 8009416:	f7ff fd1d 	bl	8008e54 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	3b01      	subs	r3, #1
 800941e:	613b      	str	r3, [r7, #16]
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	2b01      	cmp	r3, #1
 8009424:	d8eb      	bhi.n	80093fe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009426:	7bfb      	ldrb	r3, [r7, #15]
}
 8009428:	4618      	mov	r0, r3
 800942a:	3718      	adds	r7, #24
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800943a:	2300      	movs	r3, #0
 800943c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009442:	683a      	ldr	r2, [r7, #0]
 8009444:	429a      	cmp	r2, r3
 8009446:	d01b      	beq.n	8009480 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f7ff ffad 	bl	80093a8 <sync_window>
 800944e:	4603      	mov	r3, r0
 8009450:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009452:	7bfb      	ldrb	r3, [r7, #15]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d113      	bne.n	8009480 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	7858      	ldrb	r0, [r3, #1]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009462:	2301      	movs	r3, #1
 8009464:	683a      	ldr	r2, [r7, #0]
 8009466:	f7ff fcd5 	bl	8008e14 <disk_read>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d004      	beq.n	800947a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009470:	f04f 33ff 	mov.w	r3, #4294967295
 8009474:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009476:	2301      	movs	r3, #1
 8009478:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	683a      	ldr	r2, [r7, #0]
 800947e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8009480:	7bfb      	ldrb	r3, [r7, #15]
}
 8009482:	4618      	mov	r0, r3
 8009484:	3710      	adds	r7, #16
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
	...

0800948c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f7ff ff87 	bl	80093a8 <sync_window>
 800949a:	4603      	mov	r3, r0
 800949c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800949e:	7bfb      	ldrb	r3, [r7, #15]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d158      	bne.n	8009556 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	2b03      	cmp	r3, #3
 80094aa:	d148      	bne.n	800953e <sync_fs+0xb2>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	791b      	ldrb	r3, [r3, #4]
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d144      	bne.n	800953e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	3330      	adds	r3, #48	; 0x30
 80094b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094bc:	2100      	movs	r1, #0
 80094be:	4618      	mov	r0, r3
 80094c0:	f7ff fda9 	bl	8009016 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	3330      	adds	r3, #48	; 0x30
 80094c8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80094cc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7ff fd38 	bl	8008f46 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	3330      	adds	r3, #48	; 0x30
 80094da:	4921      	ldr	r1, [pc, #132]	; (8009560 <sync_fs+0xd4>)
 80094dc:	4618      	mov	r0, r3
 80094de:	f7ff fd4d 	bl	8008f7c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	3330      	adds	r3, #48	; 0x30
 80094e6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80094ea:	491e      	ldr	r1, [pc, #120]	; (8009564 <sync_fs+0xd8>)
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7ff fd45 	bl	8008f7c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	3330      	adds	r3, #48	; 0x30
 80094f6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	4619      	mov	r1, r3
 8009500:	4610      	mov	r0, r2
 8009502:	f7ff fd3b 	bl	8008f7c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	3330      	adds	r3, #48	; 0x30
 800950a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	4619      	mov	r1, r3
 8009514:	4610      	mov	r0, r2
 8009516:	f7ff fd31 	bl	8008f7c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	69db      	ldr	r3, [r3, #28]
 800951e:	1c5a      	adds	r2, r3, #1
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	7858      	ldrb	r0, [r3, #1]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009532:	2301      	movs	r3, #1
 8009534:	f7ff fc8e 	bl	8008e54 <disk_write>
			fs->fsi_flag = 0;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	785b      	ldrb	r3, [r3, #1]
 8009542:	2200      	movs	r2, #0
 8009544:	2100      	movs	r1, #0
 8009546:	4618      	mov	r0, r3
 8009548:	f7ff fca4 	bl	8008e94 <disk_ioctl>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d001      	beq.n	8009556 <sync_fs+0xca>
 8009552:	2301      	movs	r3, #1
 8009554:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009556:	7bfb      	ldrb	r3, [r7, #15]
}
 8009558:	4618      	mov	r0, r3
 800955a:	3710      	adds	r7, #16
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	41615252 	.word	0x41615252
 8009564:	61417272 	.word	0x61417272

08009568 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	3b02      	subs	r3, #2
 8009576:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	695b      	ldr	r3, [r3, #20]
 800957c:	3b02      	subs	r3, #2
 800957e:	683a      	ldr	r2, [r7, #0]
 8009580:	429a      	cmp	r2, r3
 8009582:	d301      	bcc.n	8009588 <clust2sect+0x20>
 8009584:	2300      	movs	r3, #0
 8009586:	e008      	b.n	800959a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	895b      	ldrh	r3, [r3, #10]
 800958c:	461a      	mov	r2, r3
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	fb03 f202 	mul.w	r2, r3, r2
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009598:	4413      	add	r3, r2
}
 800959a:	4618      	mov	r0, r3
 800959c:	370c      	adds	r7, #12
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr

080095a6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b086      	sub	sp, #24
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
 80095ae:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d904      	bls.n	80095c6 <get_fat+0x20>
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	695b      	ldr	r3, [r3, #20]
 80095c0:	683a      	ldr	r2, [r7, #0]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d302      	bcc.n	80095cc <get_fat+0x26>
		val = 1;	/* Internal error */
 80095c6:	2301      	movs	r3, #1
 80095c8:	617b      	str	r3, [r7, #20]
 80095ca:	e08f      	b.n	80096ec <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80095cc:	f04f 33ff 	mov.w	r3, #4294967295
 80095d0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	2b03      	cmp	r3, #3
 80095d8:	d062      	beq.n	80096a0 <get_fat+0xfa>
 80095da:	2b03      	cmp	r3, #3
 80095dc:	dc7c      	bgt.n	80096d8 <get_fat+0x132>
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d002      	beq.n	80095e8 <get_fat+0x42>
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	d042      	beq.n	800966c <get_fat+0xc6>
 80095e6:	e077      	b.n	80096d8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	60fb      	str	r3, [r7, #12]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	085b      	lsrs	r3, r3, #1
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	4413      	add	r3, r2
 80095f4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	6a1a      	ldr	r2, [r3, #32]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	0a5b      	lsrs	r3, r3, #9
 80095fe:	4413      	add	r3, r2
 8009600:	4619      	mov	r1, r3
 8009602:	6938      	ldr	r0, [r7, #16]
 8009604:	f7ff ff14 	bl	8009430 <move_window>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d167      	bne.n	80096de <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	1c5a      	adds	r2, r3, #1
 8009612:	60fa      	str	r2, [r7, #12]
 8009614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009618:	693a      	ldr	r2, [r7, #16]
 800961a:	4413      	add	r3, r2
 800961c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009620:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	6a1a      	ldr	r2, [r3, #32]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	0a5b      	lsrs	r3, r3, #9
 800962a:	4413      	add	r3, r2
 800962c:	4619      	mov	r1, r3
 800962e:	6938      	ldr	r0, [r7, #16]
 8009630:	f7ff fefe 	bl	8009430 <move_window>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d153      	bne.n	80096e2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009640:	693a      	ldr	r2, [r7, #16]
 8009642:	4413      	add	r3, r2
 8009644:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009648:	021b      	lsls	r3, r3, #8
 800964a:	461a      	mov	r2, r3
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	4313      	orrs	r3, r2
 8009650:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	f003 0301 	and.w	r3, r3, #1
 8009658:	2b00      	cmp	r3, #0
 800965a:	d002      	beq.n	8009662 <get_fat+0xbc>
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	091b      	lsrs	r3, r3, #4
 8009660:	e002      	b.n	8009668 <get_fat+0xc2>
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009668:	617b      	str	r3, [r7, #20]
			break;
 800966a:	e03f      	b.n	80096ec <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	6a1a      	ldr	r2, [r3, #32]
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	0a1b      	lsrs	r3, r3, #8
 8009674:	4413      	add	r3, r2
 8009676:	4619      	mov	r1, r3
 8009678:	6938      	ldr	r0, [r7, #16]
 800967a:	f7ff fed9 	bl	8009430 <move_window>
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d130      	bne.n	80096e6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	005b      	lsls	r3, r3, #1
 800968e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009692:	4413      	add	r3, r2
 8009694:	4618      	mov	r0, r3
 8009696:	f7ff fc1b 	bl	8008ed0 <ld_word>
 800969a:	4603      	mov	r3, r0
 800969c:	617b      	str	r3, [r7, #20]
			break;
 800969e:	e025      	b.n	80096ec <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	6a1a      	ldr	r2, [r3, #32]
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	09db      	lsrs	r3, r3, #7
 80096a8:	4413      	add	r3, r2
 80096aa:	4619      	mov	r1, r3
 80096ac:	6938      	ldr	r0, [r7, #16]
 80096ae:	f7ff febf 	bl	8009430 <move_window>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d118      	bne.n	80096ea <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80096c6:	4413      	add	r3, r2
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7ff fc19 	bl	8008f00 <ld_dword>
 80096ce:	4603      	mov	r3, r0
 80096d0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80096d4:	617b      	str	r3, [r7, #20]
			break;
 80096d6:	e009      	b.n	80096ec <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80096d8:	2301      	movs	r3, #1
 80096da:	617b      	str	r3, [r7, #20]
 80096dc:	e006      	b.n	80096ec <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80096de:	bf00      	nop
 80096e0:	e004      	b.n	80096ec <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80096e2:	bf00      	nop
 80096e4:	e002      	b.n	80096ec <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80096e6:	bf00      	nop
 80096e8:	e000      	b.n	80096ec <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80096ea:	bf00      	nop
		}
	}

	return val;
 80096ec:	697b      	ldr	r3, [r7, #20]
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3718      	adds	r7, #24
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80096f6:	b590      	push	{r4, r7, lr}
 80096f8:	b089      	sub	sp, #36	; 0x24
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	60f8      	str	r0, [r7, #12]
 80096fe:	60b9      	str	r1, [r7, #8]
 8009700:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009702:	2302      	movs	r3, #2
 8009704:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	2b01      	cmp	r3, #1
 800970a:	f240 80d2 	bls.w	80098b2 <put_fat+0x1bc>
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	695b      	ldr	r3, [r3, #20]
 8009712:	68ba      	ldr	r2, [r7, #8]
 8009714:	429a      	cmp	r2, r3
 8009716:	f080 80cc 	bcs.w	80098b2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	2b03      	cmp	r3, #3
 8009720:	f000 8096 	beq.w	8009850 <put_fat+0x15a>
 8009724:	2b03      	cmp	r3, #3
 8009726:	f300 80cd 	bgt.w	80098c4 <put_fat+0x1ce>
 800972a:	2b01      	cmp	r3, #1
 800972c:	d002      	beq.n	8009734 <put_fat+0x3e>
 800972e:	2b02      	cmp	r3, #2
 8009730:	d06e      	beq.n	8009810 <put_fat+0x11a>
 8009732:	e0c7      	b.n	80098c4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	61bb      	str	r3, [r7, #24]
 8009738:	69bb      	ldr	r3, [r7, #24]
 800973a:	085b      	lsrs	r3, r3, #1
 800973c:	69ba      	ldr	r2, [r7, #24]
 800973e:	4413      	add	r3, r2
 8009740:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	6a1a      	ldr	r2, [r3, #32]
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	0a5b      	lsrs	r3, r3, #9
 800974a:	4413      	add	r3, r2
 800974c:	4619      	mov	r1, r3
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	f7ff fe6e 	bl	8009430 <move_window>
 8009754:	4603      	mov	r3, r0
 8009756:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009758:	7ffb      	ldrb	r3, [r7, #31]
 800975a:	2b00      	cmp	r3, #0
 800975c:	f040 80ab 	bne.w	80098b6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	1c59      	adds	r1, r3, #1
 800976a:	61b9      	str	r1, [r7, #24]
 800976c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009770:	4413      	add	r3, r2
 8009772:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	f003 0301 	and.w	r3, r3, #1
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00d      	beq.n	800979a <put_fat+0xa4>
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	b25b      	sxtb	r3, r3
 8009784:	f003 030f 	and.w	r3, r3, #15
 8009788:	b25a      	sxtb	r2, r3
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	b2db      	uxtb	r3, r3
 800978e:	011b      	lsls	r3, r3, #4
 8009790:	b25b      	sxtb	r3, r3
 8009792:	4313      	orrs	r3, r2
 8009794:	b25b      	sxtb	r3, r3
 8009796:	b2db      	uxtb	r3, r3
 8009798:	e001      	b.n	800979e <put_fat+0xa8>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	b2db      	uxtb	r3, r3
 800979e:	697a      	ldr	r2, [r7, #20]
 80097a0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2201      	movs	r2, #1
 80097a6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6a1a      	ldr	r2, [r3, #32]
 80097ac:	69bb      	ldr	r3, [r7, #24]
 80097ae:	0a5b      	lsrs	r3, r3, #9
 80097b0:	4413      	add	r3, r2
 80097b2:	4619      	mov	r1, r3
 80097b4:	68f8      	ldr	r0, [r7, #12]
 80097b6:	f7ff fe3b 	bl	8009430 <move_window>
 80097ba:	4603      	mov	r3, r0
 80097bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80097be:	7ffb      	ldrb	r3, [r7, #31]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d17a      	bne.n	80098ba <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097d0:	4413      	add	r3, r2
 80097d2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	f003 0301 	and.w	r3, r3, #1
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d003      	beq.n	80097e6 <put_fat+0xf0>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	091b      	lsrs	r3, r3, #4
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	e00e      	b.n	8009804 <put_fat+0x10e>
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	b25b      	sxtb	r3, r3
 80097ec:	f023 030f 	bic.w	r3, r3, #15
 80097f0:	b25a      	sxtb	r2, r3
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	0a1b      	lsrs	r3, r3, #8
 80097f6:	b25b      	sxtb	r3, r3
 80097f8:	f003 030f 	and.w	r3, r3, #15
 80097fc:	b25b      	sxtb	r3, r3
 80097fe:	4313      	orrs	r3, r2
 8009800:	b25b      	sxtb	r3, r3
 8009802:	b2db      	uxtb	r3, r3
 8009804:	697a      	ldr	r2, [r7, #20]
 8009806:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2201      	movs	r2, #1
 800980c:	70da      	strb	r2, [r3, #3]
			break;
 800980e:	e059      	b.n	80098c4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	6a1a      	ldr	r2, [r3, #32]
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	0a1b      	lsrs	r3, r3, #8
 8009818:	4413      	add	r3, r2
 800981a:	4619      	mov	r1, r3
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	f7ff fe07 	bl	8009430 <move_window>
 8009822:	4603      	mov	r3, r0
 8009824:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009826:	7ffb      	ldrb	r3, [r7, #31]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d148      	bne.n	80098be <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	005b      	lsls	r3, r3, #1
 8009836:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800983a:	4413      	add	r3, r2
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	b292      	uxth	r2, r2
 8009840:	4611      	mov	r1, r2
 8009842:	4618      	mov	r0, r3
 8009844:	f7ff fb7f 	bl	8008f46 <st_word>
			fs->wflag = 1;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2201      	movs	r2, #1
 800984c:	70da      	strb	r2, [r3, #3]
			break;
 800984e:	e039      	b.n	80098c4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6a1a      	ldr	r2, [r3, #32]
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	09db      	lsrs	r3, r3, #7
 8009858:	4413      	add	r3, r2
 800985a:	4619      	mov	r1, r3
 800985c:	68f8      	ldr	r0, [r7, #12]
 800985e:	f7ff fde7 	bl	8009430 <move_window>
 8009862:	4603      	mov	r3, r0
 8009864:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009866:	7ffb      	ldrb	r3, [r7, #31]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d12a      	bne.n	80098c2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	009b      	lsls	r3, r3, #2
 800987c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009880:	4413      	add	r3, r2
 8009882:	4618      	mov	r0, r3
 8009884:	f7ff fb3c 	bl	8008f00 <ld_dword>
 8009888:	4603      	mov	r3, r0
 800988a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800988e:	4323      	orrs	r3, r4
 8009890:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80098a0:	4413      	add	r3, r2
 80098a2:	6879      	ldr	r1, [r7, #4]
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7ff fb69 	bl	8008f7c <st_dword>
			fs->wflag = 1;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2201      	movs	r2, #1
 80098ae:	70da      	strb	r2, [r3, #3]
			break;
 80098b0:	e008      	b.n	80098c4 <put_fat+0x1ce>
		}
	}
 80098b2:	bf00      	nop
 80098b4:	e006      	b.n	80098c4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80098b6:	bf00      	nop
 80098b8:	e004      	b.n	80098c4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80098ba:	bf00      	nop
 80098bc:	e002      	b.n	80098c4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80098be:	bf00      	nop
 80098c0:	e000      	b.n	80098c4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80098c2:	bf00      	nop
	return res;
 80098c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3724      	adds	r7, #36	; 0x24
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd90      	pop	{r4, r7, pc}

080098ce <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b088      	sub	sp, #32
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	60f8      	str	r0, [r7, #12]
 80098d6:	60b9      	str	r1, [r7, #8]
 80098d8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80098da:	2300      	movs	r3, #0
 80098dc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d904      	bls.n	80098f4 <remove_chain+0x26>
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	695b      	ldr	r3, [r3, #20]
 80098ee:	68ba      	ldr	r2, [r7, #8]
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d301      	bcc.n	80098f8 <remove_chain+0x2a>
 80098f4:	2302      	movs	r3, #2
 80098f6:	e04b      	b.n	8009990 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00c      	beq.n	8009918 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80098fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009902:	6879      	ldr	r1, [r7, #4]
 8009904:	69b8      	ldr	r0, [r7, #24]
 8009906:	f7ff fef6 	bl	80096f6 <put_fat>
 800990a:	4603      	mov	r3, r0
 800990c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800990e:	7ffb      	ldrb	r3, [r7, #31]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d001      	beq.n	8009918 <remove_chain+0x4a>
 8009914:	7ffb      	ldrb	r3, [r7, #31]
 8009916:	e03b      	b.n	8009990 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009918:	68b9      	ldr	r1, [r7, #8]
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f7ff fe43 	bl	80095a6 <get_fat>
 8009920:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d031      	beq.n	800998c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	2b01      	cmp	r3, #1
 800992c:	d101      	bne.n	8009932 <remove_chain+0x64>
 800992e:	2302      	movs	r3, #2
 8009930:	e02e      	b.n	8009990 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009938:	d101      	bne.n	800993e <remove_chain+0x70>
 800993a:	2301      	movs	r3, #1
 800993c:	e028      	b.n	8009990 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800993e:	2200      	movs	r2, #0
 8009940:	68b9      	ldr	r1, [r7, #8]
 8009942:	69b8      	ldr	r0, [r7, #24]
 8009944:	f7ff fed7 	bl	80096f6 <put_fat>
 8009948:	4603      	mov	r3, r0
 800994a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800994c:	7ffb      	ldrb	r3, [r7, #31]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d001      	beq.n	8009956 <remove_chain+0x88>
 8009952:	7ffb      	ldrb	r3, [r7, #31]
 8009954:	e01c      	b.n	8009990 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	691a      	ldr	r2, [r3, #16]
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	695b      	ldr	r3, [r3, #20]
 800995e:	3b02      	subs	r3, #2
 8009960:	429a      	cmp	r2, r3
 8009962:	d20b      	bcs.n	800997c <remove_chain+0xae>
			fs->free_clst++;
 8009964:	69bb      	ldr	r3, [r7, #24]
 8009966:	691b      	ldr	r3, [r3, #16]
 8009968:	1c5a      	adds	r2, r3, #1
 800996a:	69bb      	ldr	r3, [r7, #24]
 800996c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	791b      	ldrb	r3, [r3, #4]
 8009972:	f043 0301 	orr.w	r3, r3, #1
 8009976:	b2da      	uxtb	r2, r3
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009980:	69bb      	ldr	r3, [r7, #24]
 8009982:	695b      	ldr	r3, [r3, #20]
 8009984:	68ba      	ldr	r2, [r7, #8]
 8009986:	429a      	cmp	r2, r3
 8009988:	d3c6      	bcc.n	8009918 <remove_chain+0x4a>
 800998a:	e000      	b.n	800998e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800998c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800998e:	2300      	movs	r3, #0
}
 8009990:	4618      	mov	r0, r3
 8009992:	3720      	adds	r7, #32
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b088      	sub	sp, #32
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d10d      	bne.n	80099ca <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d004      	beq.n	80099c4 <create_chain+0x2c>
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	695b      	ldr	r3, [r3, #20]
 80099be:	69ba      	ldr	r2, [r7, #24]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d31b      	bcc.n	80099fc <create_chain+0x64>
 80099c4:	2301      	movs	r3, #1
 80099c6:	61bb      	str	r3, [r7, #24]
 80099c8:	e018      	b.n	80099fc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80099ca:	6839      	ldr	r1, [r7, #0]
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f7ff fdea 	bl	80095a6 <get_fat>
 80099d2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d801      	bhi.n	80099de <create_chain+0x46>
 80099da:	2301      	movs	r3, #1
 80099dc:	e070      	b.n	8009ac0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099e4:	d101      	bne.n	80099ea <create_chain+0x52>
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	e06a      	b.n	8009ac0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	695b      	ldr	r3, [r3, #20]
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d201      	bcs.n	80099f8 <create_chain+0x60>
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	e063      	b.n	8009ac0 <create_chain+0x128>
		scl = clst;
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80099fc:	69bb      	ldr	r3, [r7, #24]
 80099fe:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009a00:	69fb      	ldr	r3, [r7, #28]
 8009a02:	3301      	adds	r3, #1
 8009a04:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	695b      	ldr	r3, [r3, #20]
 8009a0a:	69fa      	ldr	r2, [r7, #28]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d307      	bcc.n	8009a20 <create_chain+0x88>
				ncl = 2;
 8009a10:	2302      	movs	r3, #2
 8009a12:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009a14:	69fa      	ldr	r2, [r7, #28]
 8009a16:	69bb      	ldr	r3, [r7, #24]
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d901      	bls.n	8009a20 <create_chain+0x88>
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	e04f      	b.n	8009ac0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009a20:	69f9      	ldr	r1, [r7, #28]
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f7ff fdbf 	bl	80095a6 <get_fat>
 8009a28:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d00e      	beq.n	8009a4e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d003      	beq.n	8009a3e <create_chain+0xa6>
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a3c:	d101      	bne.n	8009a42 <create_chain+0xaa>
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	e03e      	b.n	8009ac0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009a42:	69fa      	ldr	r2, [r7, #28]
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d1da      	bne.n	8009a00 <create_chain+0x68>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	e038      	b.n	8009ac0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009a4e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009a50:	f04f 32ff 	mov.w	r2, #4294967295
 8009a54:	69f9      	ldr	r1, [r7, #28]
 8009a56:	6938      	ldr	r0, [r7, #16]
 8009a58:	f7ff fe4d 	bl	80096f6 <put_fat>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009a60:	7dfb      	ldrb	r3, [r7, #23]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d109      	bne.n	8009a7a <create_chain+0xe2>
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d006      	beq.n	8009a7a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009a6c:	69fa      	ldr	r2, [r7, #28]
 8009a6e:	6839      	ldr	r1, [r7, #0]
 8009a70:	6938      	ldr	r0, [r7, #16]
 8009a72:	f7ff fe40 	bl	80096f6 <put_fat>
 8009a76:	4603      	mov	r3, r0
 8009a78:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009a7a:	7dfb      	ldrb	r3, [r7, #23]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d116      	bne.n	8009aae <create_chain+0x116>
		fs->last_clst = ncl;
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	69fa      	ldr	r2, [r7, #28]
 8009a84:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	691a      	ldr	r2, [r3, #16]
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	695b      	ldr	r3, [r3, #20]
 8009a8e:	3b02      	subs	r3, #2
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d804      	bhi.n	8009a9e <create_chain+0x106>
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	691b      	ldr	r3, [r3, #16]
 8009a98:	1e5a      	subs	r2, r3, #1
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	791b      	ldrb	r3, [r3, #4]
 8009aa2:	f043 0301 	orr.w	r3, r3, #1
 8009aa6:	b2da      	uxtb	r2, r3
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	711a      	strb	r2, [r3, #4]
 8009aac:	e007      	b.n	8009abe <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009aae:	7dfb      	ldrb	r3, [r7, #23]
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d102      	bne.n	8009aba <create_chain+0x122>
 8009ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ab8:	e000      	b.n	8009abc <create_chain+0x124>
 8009aba:	2301      	movs	r3, #1
 8009abc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009abe:	69fb      	ldr	r3, [r7, #28]
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3720      	adds	r7, #32
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b087      	sub	sp, #28
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009adc:	3304      	adds	r3, #4
 8009ade:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	0a5b      	lsrs	r3, r3, #9
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	8952      	ldrh	r2, [r2, #10]
 8009ae8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009aec:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	1d1a      	adds	r2, r3, #4
 8009af2:	613a      	str	r2, [r7, #16]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d101      	bne.n	8009b02 <clmt_clust+0x3a>
 8009afe:	2300      	movs	r3, #0
 8009b00:	e010      	b.n	8009b24 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009b02:	697a      	ldr	r2, [r7, #20]
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d307      	bcc.n	8009b1a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009b0a:	697a      	ldr	r2, [r7, #20]
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	1ad3      	subs	r3, r2, r3
 8009b10:	617b      	str	r3, [r7, #20]
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	3304      	adds	r3, #4
 8009b16:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009b18:	e7e9      	b.n	8009aee <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009b1a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	4413      	add	r3, r2
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	371c      	adds	r7, #28
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b46:	d204      	bcs.n	8009b52 <dir_sdi+0x22>
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	f003 031f 	and.w	r3, r3, #31
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d001      	beq.n	8009b56 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009b52:	2302      	movs	r3, #2
 8009b54:	e063      	b.n	8009c1e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	683a      	ldr	r2, [r7, #0]
 8009b5a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	689b      	ldr	r3, [r3, #8]
 8009b60:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d106      	bne.n	8009b76 <dir_sdi+0x46>
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	d902      	bls.n	8009b76 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b74:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d10c      	bne.n	8009b96 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	095b      	lsrs	r3, r3, #5
 8009b80:	693a      	ldr	r2, [r7, #16]
 8009b82:	8912      	ldrh	r2, [r2, #8]
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d301      	bcc.n	8009b8c <dir_sdi+0x5c>
 8009b88:	2302      	movs	r3, #2
 8009b8a:	e048      	b.n	8009c1e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	61da      	str	r2, [r3, #28]
 8009b94:	e029      	b.n	8009bea <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	895b      	ldrh	r3, [r3, #10]
 8009b9a:	025b      	lsls	r3, r3, #9
 8009b9c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009b9e:	e019      	b.n	8009bd4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6979      	ldr	r1, [r7, #20]
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f7ff fcfe 	bl	80095a6 <get_fat>
 8009baa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bb2:	d101      	bne.n	8009bb8 <dir_sdi+0x88>
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	e032      	b.n	8009c1e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d904      	bls.n	8009bc8 <dir_sdi+0x98>
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	695b      	ldr	r3, [r3, #20]
 8009bc2:	697a      	ldr	r2, [r7, #20]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d301      	bcc.n	8009bcc <dir_sdi+0x9c>
 8009bc8:	2302      	movs	r3, #2
 8009bca:	e028      	b.n	8009c1e <dir_sdi+0xee>
			ofs -= csz;
 8009bcc:	683a      	ldr	r2, [r7, #0]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	1ad3      	subs	r3, r2, r3
 8009bd2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009bd4:	683a      	ldr	r2, [r7, #0]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d2e1      	bcs.n	8009ba0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009bdc:	6979      	ldr	r1, [r7, #20]
 8009bde:	6938      	ldr	r0, [r7, #16]
 8009be0:	f7ff fcc2 	bl	8009568 <clust2sect>
 8009be4:	4602      	mov	r2, r0
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	697a      	ldr	r2, [r7, #20]
 8009bee:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	69db      	ldr	r3, [r3, #28]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d101      	bne.n	8009bfc <dir_sdi+0xcc>
 8009bf8:	2302      	movs	r3, #2
 8009bfa:	e010      	b.n	8009c1e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	69da      	ldr	r2, [r3, #28]
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	0a5b      	lsrs	r3, r3, #9
 8009c04:	441a      	add	r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c16:	441a      	add	r2, r3
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3718      	adds	r7, #24
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b086      	sub	sp, #24
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
 8009c2e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	695b      	ldr	r3, [r3, #20]
 8009c3a:	3320      	adds	r3, #32
 8009c3c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	69db      	ldr	r3, [r3, #28]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d003      	beq.n	8009c4e <dir_next+0x28>
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c4c:	d301      	bcc.n	8009c52 <dir_next+0x2c>
 8009c4e:	2304      	movs	r3, #4
 8009c50:	e0aa      	b.n	8009da8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	f040 8098 	bne.w	8009d8e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	69db      	ldr	r3, [r3, #28]
 8009c62:	1c5a      	adds	r2, r3, #1
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	699b      	ldr	r3, [r3, #24]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d10b      	bne.n	8009c88 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	095b      	lsrs	r3, r3, #5
 8009c74:	68fa      	ldr	r2, [r7, #12]
 8009c76:	8912      	ldrh	r2, [r2, #8]
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	f0c0 8088 	bcc.w	8009d8e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	61da      	str	r2, [r3, #28]
 8009c84:	2304      	movs	r3, #4
 8009c86:	e08f      	b.n	8009da8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	0a5b      	lsrs	r3, r3, #9
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	8952      	ldrh	r2, [r2, #10]
 8009c90:	3a01      	subs	r2, #1
 8009c92:	4013      	ands	r3, r2
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d17a      	bne.n	8009d8e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	699b      	ldr	r3, [r3, #24]
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	4610      	mov	r0, r2
 8009ca2:	f7ff fc80 	bl	80095a6 <get_fat>
 8009ca6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	d801      	bhi.n	8009cb2 <dir_next+0x8c>
 8009cae:	2302      	movs	r3, #2
 8009cb0:	e07a      	b.n	8009da8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb8:	d101      	bne.n	8009cbe <dir_next+0x98>
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e074      	b.n	8009da8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	695b      	ldr	r3, [r3, #20]
 8009cc2:	697a      	ldr	r2, [r7, #20]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d358      	bcc.n	8009d7a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d104      	bne.n	8009cd8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	61da      	str	r2, [r3, #28]
 8009cd4:	2304      	movs	r3, #4
 8009cd6:	e067      	b.n	8009da8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	699b      	ldr	r3, [r3, #24]
 8009cde:	4619      	mov	r1, r3
 8009ce0:	4610      	mov	r0, r2
 8009ce2:	f7ff fe59 	bl	8009998 <create_chain>
 8009ce6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d101      	bne.n	8009cf2 <dir_next+0xcc>
 8009cee:	2307      	movs	r3, #7
 8009cf0:	e05a      	b.n	8009da8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d101      	bne.n	8009cfc <dir_next+0xd6>
 8009cf8:	2302      	movs	r3, #2
 8009cfa:	e055      	b.n	8009da8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d02:	d101      	bne.n	8009d08 <dir_next+0xe2>
 8009d04:	2301      	movs	r3, #1
 8009d06:	e04f      	b.n	8009da8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f7ff fb4d 	bl	80093a8 <sync_window>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d001      	beq.n	8009d18 <dir_next+0xf2>
 8009d14:	2301      	movs	r3, #1
 8009d16:	e047      	b.n	8009da8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	3330      	adds	r3, #48	; 0x30
 8009d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d20:	2100      	movs	r1, #0
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7ff f977 	bl	8009016 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009d28:	2300      	movs	r3, #0
 8009d2a:	613b      	str	r3, [r7, #16]
 8009d2c:	6979      	ldr	r1, [r7, #20]
 8009d2e:	68f8      	ldr	r0, [r7, #12]
 8009d30:	f7ff fc1a 	bl	8009568 <clust2sect>
 8009d34:	4602      	mov	r2, r0
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	62da      	str	r2, [r3, #44]	; 0x2c
 8009d3a:	e012      	b.n	8009d62 <dir_next+0x13c>
						fs->wflag = 1;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f7ff fb30 	bl	80093a8 <sync_window>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d001      	beq.n	8009d52 <dir_next+0x12c>
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e02a      	b.n	8009da8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	3301      	adds	r3, #1
 8009d56:	613b      	str	r3, [r7, #16]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d5c:	1c5a      	adds	r2, r3, #1
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	62da      	str	r2, [r3, #44]	; 0x2c
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	895b      	ldrh	r3, [r3, #10]
 8009d66:	461a      	mov	r2, r3
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d3e6      	bcc.n	8009d3c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	1ad2      	subs	r2, r2, r3
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	697a      	ldr	r2, [r7, #20]
 8009d7e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009d80:	6979      	ldr	r1, [r7, #20]
 8009d82:	68f8      	ldr	r0, [r7, #12]
 8009d84:	f7ff fbf0 	bl	8009568 <clust2sect>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	68ba      	ldr	r2, [r7, #8]
 8009d92:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009da0:	441a      	add	r2, r3
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3718      	adds	r7, #24
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b086      	sub	sp, #24
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009dc0:	2100      	movs	r1, #0
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f7ff feb4 	bl	8009b30 <dir_sdi>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009dcc:	7dfb      	ldrb	r3, [r7, #23]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d12b      	bne.n	8009e2a <dir_alloc+0x7a>
		n = 0;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	69db      	ldr	r3, [r3, #28]
 8009dda:	4619      	mov	r1, r3
 8009ddc:	68f8      	ldr	r0, [r7, #12]
 8009dde:	f7ff fb27 	bl	8009430 <move_window>
 8009de2:	4603      	mov	r3, r0
 8009de4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009de6:	7dfb      	ldrb	r3, [r7, #23]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d11d      	bne.n	8009e28 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6a1b      	ldr	r3, [r3, #32]
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	2be5      	cmp	r3, #229	; 0xe5
 8009df4:	d004      	beq.n	8009e00 <dir_alloc+0x50>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6a1b      	ldr	r3, [r3, #32]
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d107      	bne.n	8009e10 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	3301      	adds	r3, #1
 8009e04:	613b      	str	r3, [r7, #16]
 8009e06:	693a      	ldr	r2, [r7, #16]
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d102      	bne.n	8009e14 <dir_alloc+0x64>
 8009e0e:	e00c      	b.n	8009e2a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009e10:	2300      	movs	r3, #0
 8009e12:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009e14:	2101      	movs	r1, #1
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f7ff ff05 	bl	8009c26 <dir_next>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009e20:	7dfb      	ldrb	r3, [r7, #23]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d0d7      	beq.n	8009dd6 <dir_alloc+0x26>
 8009e26:	e000      	b.n	8009e2a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009e28:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009e2a:	7dfb      	ldrb	r3, [r7, #23]
 8009e2c:	2b04      	cmp	r3, #4
 8009e2e:	d101      	bne.n	8009e34 <dir_alloc+0x84>
 8009e30:	2307      	movs	r3, #7
 8009e32:	75fb      	strb	r3, [r7, #23]
	return res;
 8009e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3718      	adds	r7, #24
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}

08009e3e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009e3e:	b580      	push	{r7, lr}
 8009e40:	b084      	sub	sp, #16
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
 8009e46:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	331a      	adds	r3, #26
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f7ff f83f 	bl	8008ed0 <ld_word>
 8009e52:	4603      	mov	r3, r0
 8009e54:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	2b03      	cmp	r3, #3
 8009e5c:	d109      	bne.n	8009e72 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	3314      	adds	r3, #20
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7ff f834 	bl	8008ed0 <ld_word>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	041b      	lsls	r3, r3, #16
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009e72:	68fb      	ldr	r3, [r7, #12]
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3710      	adds	r7, #16
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	60b9      	str	r1, [r7, #8]
 8009e86:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	331a      	adds	r3, #26
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	b292      	uxth	r2, r2
 8009e90:	4611      	mov	r1, r2
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7ff f857 	bl	8008f46 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	2b03      	cmp	r3, #3
 8009e9e:	d109      	bne.n	8009eb4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	f103 0214 	add.w	r2, r3, #20
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	0c1b      	lsrs	r3, r3, #16
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	4619      	mov	r1, r3
 8009eae:	4610      	mov	r0, r2
 8009eb0:	f7ff f849 	bl	8008f46 <st_word>
	}
}
 8009eb4:	bf00      	nop
 8009eb6:	3710      	adds	r7, #16
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b086      	sub	sp, #24
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009eca:	2100      	movs	r1, #0
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f7ff fe2f 	bl	8009b30 <dir_sdi>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009ed6:	7dfb      	ldrb	r3, [r7, #23]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d001      	beq.n	8009ee0 <dir_find+0x24>
 8009edc:	7dfb      	ldrb	r3, [r7, #23]
 8009ede:	e03e      	b.n	8009f5e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	69db      	ldr	r3, [r3, #28]
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	6938      	ldr	r0, [r7, #16]
 8009ee8:	f7ff faa2 	bl	8009430 <move_window>
 8009eec:	4603      	mov	r3, r0
 8009eee:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009ef0:	7dfb      	ldrb	r3, [r7, #23]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d12f      	bne.n	8009f56 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6a1b      	ldr	r3, [r3, #32]
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009efe:	7bfb      	ldrb	r3, [r7, #15]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d102      	bne.n	8009f0a <dir_find+0x4e>
 8009f04:	2304      	movs	r3, #4
 8009f06:	75fb      	strb	r3, [r7, #23]
 8009f08:	e028      	b.n	8009f5c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6a1b      	ldr	r3, [r3, #32]
 8009f0e:	330b      	adds	r3, #11
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f16:	b2da      	uxtb	r2, r3
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6a1b      	ldr	r3, [r3, #32]
 8009f20:	330b      	adds	r3, #11
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	f003 0308 	and.w	r3, r3, #8
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d10a      	bne.n	8009f42 <dir_find+0x86>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6a18      	ldr	r0, [r3, #32]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	3324      	adds	r3, #36	; 0x24
 8009f34:	220b      	movs	r2, #11
 8009f36:	4619      	mov	r1, r3
 8009f38:	f7ff f888 	bl	800904c <mem_cmp>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d00b      	beq.n	8009f5a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009f42:	2100      	movs	r1, #0
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f7ff fe6e 	bl	8009c26 <dir_next>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009f4e:	7dfb      	ldrb	r3, [r7, #23]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d0c5      	beq.n	8009ee0 <dir_find+0x24>
 8009f54:	e002      	b.n	8009f5c <dir_find+0xa0>
		if (res != FR_OK) break;
 8009f56:	bf00      	nop
 8009f58:	e000      	b.n	8009f5c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009f5a:	bf00      	nop

	return res;
 8009f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3718      	adds	r7, #24
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009f66:	b580      	push	{r7, lr}
 8009f68:	b084      	sub	sp, #16
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009f74:	2101      	movs	r1, #1
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f7ff ff1a 	bl	8009db0 <dir_alloc>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009f80:	7bfb      	ldrb	r3, [r7, #15]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d11c      	bne.n	8009fc0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	69db      	ldr	r3, [r3, #28]
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	68b8      	ldr	r0, [r7, #8]
 8009f8e:	f7ff fa4f 	bl	8009430 <move_window>
 8009f92:	4603      	mov	r3, r0
 8009f94:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009f96:	7bfb      	ldrb	r3, [r7, #15]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d111      	bne.n	8009fc0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6a1b      	ldr	r3, [r3, #32]
 8009fa0:	2220      	movs	r2, #32
 8009fa2:	2100      	movs	r1, #0
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f7ff f836 	bl	8009016 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6a18      	ldr	r0, [r3, #32]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	3324      	adds	r3, #36	; 0x24
 8009fb2:	220b      	movs	r2, #11
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	f7ff f80d 	bl	8008fd4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3710      	adds	r7, #16
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
	...

08009fcc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b088      	sub	sp, #32
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	60fb      	str	r3, [r7, #12]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	3324      	adds	r3, #36	; 0x24
 8009fe0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009fe2:	220b      	movs	r2, #11
 8009fe4:	2120      	movs	r1, #32
 8009fe6:	68b8      	ldr	r0, [r7, #8]
 8009fe8:	f7ff f815 	bl	8009016 <mem_set>
	si = i = 0; ni = 8;
 8009fec:	2300      	movs	r3, #0
 8009fee:	613b      	str	r3, [r7, #16]
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	61fb      	str	r3, [r7, #28]
 8009ff4:	2308      	movs	r3, #8
 8009ff6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009ff8:	69fb      	ldr	r3, [r7, #28]
 8009ffa:	1c5a      	adds	r2, r3, #1
 8009ffc:	61fa      	str	r2, [r7, #28]
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	4413      	add	r3, r2
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a006:	7efb      	ldrb	r3, [r7, #27]
 800a008:	2b20      	cmp	r3, #32
 800a00a:	d94e      	bls.n	800a0aa <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a00c:	7efb      	ldrb	r3, [r7, #27]
 800a00e:	2b2f      	cmp	r3, #47	; 0x2f
 800a010:	d006      	beq.n	800a020 <create_name+0x54>
 800a012:	7efb      	ldrb	r3, [r7, #27]
 800a014:	2b5c      	cmp	r3, #92	; 0x5c
 800a016:	d110      	bne.n	800a03a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a018:	e002      	b.n	800a020 <create_name+0x54>
 800a01a:	69fb      	ldr	r3, [r7, #28]
 800a01c:	3301      	adds	r3, #1
 800a01e:	61fb      	str	r3, [r7, #28]
 800a020:	68fa      	ldr	r2, [r7, #12]
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	4413      	add	r3, r2
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	2b2f      	cmp	r3, #47	; 0x2f
 800a02a:	d0f6      	beq.n	800a01a <create_name+0x4e>
 800a02c:	68fa      	ldr	r2, [r7, #12]
 800a02e:	69fb      	ldr	r3, [r7, #28]
 800a030:	4413      	add	r3, r2
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	2b5c      	cmp	r3, #92	; 0x5c
 800a036:	d0f0      	beq.n	800a01a <create_name+0x4e>
			break;
 800a038:	e038      	b.n	800a0ac <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a03a:	7efb      	ldrb	r3, [r7, #27]
 800a03c:	2b2e      	cmp	r3, #46	; 0x2e
 800a03e:	d003      	beq.n	800a048 <create_name+0x7c>
 800a040:	693a      	ldr	r2, [r7, #16]
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	429a      	cmp	r2, r3
 800a046:	d30c      	bcc.n	800a062 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	2b0b      	cmp	r3, #11
 800a04c:	d002      	beq.n	800a054 <create_name+0x88>
 800a04e:	7efb      	ldrb	r3, [r7, #27]
 800a050:	2b2e      	cmp	r3, #46	; 0x2e
 800a052:	d001      	beq.n	800a058 <create_name+0x8c>
 800a054:	2306      	movs	r3, #6
 800a056:	e044      	b.n	800a0e2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a058:	2308      	movs	r3, #8
 800a05a:	613b      	str	r3, [r7, #16]
 800a05c:	230b      	movs	r3, #11
 800a05e:	617b      	str	r3, [r7, #20]
			continue;
 800a060:	e022      	b.n	800a0a8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a062:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a066:	2b00      	cmp	r3, #0
 800a068:	da04      	bge.n	800a074 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a06a:	7efb      	ldrb	r3, [r7, #27]
 800a06c:	3b80      	subs	r3, #128	; 0x80
 800a06e:	4a1f      	ldr	r2, [pc, #124]	; (800a0ec <create_name+0x120>)
 800a070:	5cd3      	ldrb	r3, [r2, r3]
 800a072:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a074:	7efb      	ldrb	r3, [r7, #27]
 800a076:	4619      	mov	r1, r3
 800a078:	481d      	ldr	r0, [pc, #116]	; (800a0f0 <create_name+0x124>)
 800a07a:	f7ff f80e 	bl	800909a <chk_chr>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b00      	cmp	r3, #0
 800a082:	d001      	beq.n	800a088 <create_name+0xbc>
 800a084:	2306      	movs	r3, #6
 800a086:	e02c      	b.n	800a0e2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a088:	7efb      	ldrb	r3, [r7, #27]
 800a08a:	2b60      	cmp	r3, #96	; 0x60
 800a08c:	d905      	bls.n	800a09a <create_name+0xce>
 800a08e:	7efb      	ldrb	r3, [r7, #27]
 800a090:	2b7a      	cmp	r3, #122	; 0x7a
 800a092:	d802      	bhi.n	800a09a <create_name+0xce>
 800a094:	7efb      	ldrb	r3, [r7, #27]
 800a096:	3b20      	subs	r3, #32
 800a098:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	1c5a      	adds	r2, r3, #1
 800a09e:	613a      	str	r2, [r7, #16]
 800a0a0:	68ba      	ldr	r2, [r7, #8]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	7efa      	ldrb	r2, [r7, #27]
 800a0a6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a0a8:	e7a6      	b.n	8009ff8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a0aa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	69fb      	ldr	r3, [r7, #28]
 800a0b0:	441a      	add	r2, r3
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d101      	bne.n	800a0c0 <create_name+0xf4>
 800a0bc:	2306      	movs	r3, #6
 800a0be:	e010      	b.n	800a0e2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	2be5      	cmp	r3, #229	; 0xe5
 800a0c6:	d102      	bne.n	800a0ce <create_name+0x102>
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	2205      	movs	r2, #5
 800a0cc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a0ce:	7efb      	ldrb	r3, [r7, #27]
 800a0d0:	2b20      	cmp	r3, #32
 800a0d2:	d801      	bhi.n	800a0d8 <create_name+0x10c>
 800a0d4:	2204      	movs	r2, #4
 800a0d6:	e000      	b.n	800a0da <create_name+0x10e>
 800a0d8:	2200      	movs	r2, #0
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	330b      	adds	r3, #11
 800a0de:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a0e0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3720      	adds	r7, #32
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	0800eb8c 	.word	0x0800eb8c
 800a0f0:	0800eae8 	.word	0x0800eae8

0800a0f4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b086      	sub	sp, #24
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a108:	e002      	b.n	800a110 <follow_path+0x1c>
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	3301      	adds	r3, #1
 800a10e:	603b      	str	r3, [r7, #0]
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	2b2f      	cmp	r3, #47	; 0x2f
 800a116:	d0f8      	beq.n	800a10a <follow_path+0x16>
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	2b5c      	cmp	r3, #92	; 0x5c
 800a11e:	d0f4      	beq.n	800a10a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	2200      	movs	r2, #0
 800a124:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	2b1f      	cmp	r3, #31
 800a12c:	d80a      	bhi.n	800a144 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2280      	movs	r2, #128	; 0x80
 800a132:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a136:	2100      	movs	r1, #0
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f7ff fcf9 	bl	8009b30 <dir_sdi>
 800a13e:	4603      	mov	r3, r0
 800a140:	75fb      	strb	r3, [r7, #23]
 800a142:	e043      	b.n	800a1cc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a144:	463b      	mov	r3, r7
 800a146:	4619      	mov	r1, r3
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f7ff ff3f 	bl	8009fcc <create_name>
 800a14e:	4603      	mov	r3, r0
 800a150:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a152:	7dfb      	ldrb	r3, [r7, #23]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d134      	bne.n	800a1c2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f7ff feaf 	bl	8009ebc <dir_find>
 800a15e:	4603      	mov	r3, r0
 800a160:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a168:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a16a:	7dfb      	ldrb	r3, [r7, #23]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d00a      	beq.n	800a186 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a170:	7dfb      	ldrb	r3, [r7, #23]
 800a172:	2b04      	cmp	r3, #4
 800a174:	d127      	bne.n	800a1c6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a176:	7afb      	ldrb	r3, [r7, #11]
 800a178:	f003 0304 	and.w	r3, r3, #4
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d122      	bne.n	800a1c6 <follow_path+0xd2>
 800a180:	2305      	movs	r3, #5
 800a182:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a184:	e01f      	b.n	800a1c6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a186:	7afb      	ldrb	r3, [r7, #11]
 800a188:	f003 0304 	and.w	r3, r3, #4
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d11c      	bne.n	800a1ca <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	799b      	ldrb	r3, [r3, #6]
 800a194:	f003 0310 	and.w	r3, r3, #16
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d102      	bne.n	800a1a2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a19c:	2305      	movs	r3, #5
 800a19e:	75fb      	strb	r3, [r7, #23]
 800a1a0:	e014      	b.n	800a1cc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	695b      	ldr	r3, [r3, #20]
 800a1ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1b0:	4413      	add	r3, r2
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	68f8      	ldr	r0, [r7, #12]
 800a1b6:	f7ff fe42 	bl	8009e3e <ld_clust>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a1c0:	e7c0      	b.n	800a144 <follow_path+0x50>
			if (res != FR_OK) break;
 800a1c2:	bf00      	nop
 800a1c4:	e002      	b.n	800a1cc <follow_path+0xd8>
				break;
 800a1c6:	bf00      	nop
 800a1c8:	e000      	b.n	800a1cc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a1ca:	bf00      	nop
			}
		}
	}

	return res;
 800a1cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3718      	adds	r7, #24
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}

0800a1d6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a1d6:	b480      	push	{r7}
 800a1d8:	b087      	sub	sp, #28
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a1de:	f04f 33ff 	mov.w	r3, #4294967295
 800a1e2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d031      	beq.n	800a250 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	617b      	str	r3, [r7, #20]
 800a1f2:	e002      	b.n	800a1fa <get_ldnumber+0x24>
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	617b      	str	r3, [r7, #20]
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	2b20      	cmp	r3, #32
 800a200:	d903      	bls.n	800a20a <get_ldnumber+0x34>
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	2b3a      	cmp	r3, #58	; 0x3a
 800a208:	d1f4      	bne.n	800a1f4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	2b3a      	cmp	r3, #58	; 0x3a
 800a210:	d11c      	bne.n	800a24c <get_ldnumber+0x76>
			tp = *path;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	1c5a      	adds	r2, r3, #1
 800a21c:	60fa      	str	r2, [r7, #12]
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	3b30      	subs	r3, #48	; 0x30
 800a222:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	2b09      	cmp	r3, #9
 800a228:	d80e      	bhi.n	800a248 <get_ldnumber+0x72>
 800a22a:	68fa      	ldr	r2, [r7, #12]
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d10a      	bne.n	800a248 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d107      	bne.n	800a248 <get_ldnumber+0x72>
					vol = (int)i;
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	3301      	adds	r3, #1
 800a240:	617b      	str	r3, [r7, #20]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	697a      	ldr	r2, [r7, #20]
 800a246:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	e002      	b.n	800a252 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a24c:	2300      	movs	r3, #0
 800a24e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a250:	693b      	ldr	r3, [r7, #16]
}
 800a252:	4618      	mov	r0, r3
 800a254:	371c      	adds	r7, #28
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr
	...

0800a260 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b082      	sub	sp, #8
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2200      	movs	r2, #0
 800a26e:	70da      	strb	r2, [r3, #3]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f04f 32ff 	mov.w	r2, #4294967295
 800a276:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a278:	6839      	ldr	r1, [r7, #0]
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f7ff f8d8 	bl	8009430 <move_window>
 800a280:	4603      	mov	r3, r0
 800a282:	2b00      	cmp	r3, #0
 800a284:	d001      	beq.n	800a28a <check_fs+0x2a>
 800a286:	2304      	movs	r3, #4
 800a288:	e038      	b.n	800a2fc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	3330      	adds	r3, #48	; 0x30
 800a28e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a292:	4618      	mov	r0, r3
 800a294:	f7fe fe1c 	bl	8008ed0 <ld_word>
 800a298:	4603      	mov	r3, r0
 800a29a:	461a      	mov	r2, r3
 800a29c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d001      	beq.n	800a2a8 <check_fs+0x48>
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	e029      	b.n	800a2fc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a2ae:	2be9      	cmp	r3, #233	; 0xe9
 800a2b0:	d009      	beq.n	800a2c6 <check_fs+0x66>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a2b8:	2beb      	cmp	r3, #235	; 0xeb
 800a2ba:	d11e      	bne.n	800a2fa <check_fs+0x9a>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a2c2:	2b90      	cmp	r3, #144	; 0x90
 800a2c4:	d119      	bne.n	800a2fa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	3330      	adds	r3, #48	; 0x30
 800a2ca:	3336      	adds	r3, #54	; 0x36
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7fe fe17 	bl	8008f00 <ld_dword>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a2d8:	4a0a      	ldr	r2, [pc, #40]	; (800a304 <check_fs+0xa4>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d101      	bne.n	800a2e2 <check_fs+0x82>
 800a2de:	2300      	movs	r3, #0
 800a2e0:	e00c      	b.n	800a2fc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	3330      	adds	r3, #48	; 0x30
 800a2e6:	3352      	adds	r3, #82	; 0x52
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7fe fe09 	bl	8008f00 <ld_dword>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	4a05      	ldr	r2, [pc, #20]	; (800a308 <check_fs+0xa8>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d101      	bne.n	800a2fa <check_fs+0x9a>
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	e000      	b.n	800a2fc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a2fa:	2302      	movs	r3, #2
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3708      	adds	r7, #8
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	00544146 	.word	0x00544146
 800a308:	33544146 	.word	0x33544146

0800a30c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b096      	sub	sp, #88	; 0x58
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	4613      	mov	r3, r2
 800a318:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	2200      	movs	r2, #0
 800a31e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a320:	68f8      	ldr	r0, [r7, #12]
 800a322:	f7ff ff58 	bl	800a1d6 <get_ldnumber>
 800a326:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	da01      	bge.n	800a332 <find_volume+0x26>
 800a32e:	230b      	movs	r3, #11
 800a330:	e22d      	b.n	800a78e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a332:	4aa1      	ldr	r2, [pc, #644]	; (800a5b8 <find_volume+0x2ac>)
 800a334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a33a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d101      	bne.n	800a346 <find_volume+0x3a>
 800a342:	230c      	movs	r3, #12
 800a344:	e223      	b.n	800a78e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a34a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a34c:	79fb      	ldrb	r3, [r7, #7]
 800a34e:	f023 0301 	bic.w	r3, r3, #1
 800a352:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d01a      	beq.n	800a392 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35e:	785b      	ldrb	r3, [r3, #1]
 800a360:	4618      	mov	r0, r3
 800a362:	f7fe fd17 	bl	8008d94 <disk_status>
 800a366:	4603      	mov	r3, r0
 800a368:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a36c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a370:	f003 0301 	and.w	r3, r3, #1
 800a374:	2b00      	cmp	r3, #0
 800a376:	d10c      	bne.n	800a392 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a378:	79fb      	ldrb	r3, [r7, #7]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d007      	beq.n	800a38e <find_volume+0x82>
 800a37e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a382:	f003 0304 	and.w	r3, r3, #4
 800a386:	2b00      	cmp	r3, #0
 800a388:	d001      	beq.n	800a38e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a38a:	230a      	movs	r3, #10
 800a38c:	e1ff      	b.n	800a78e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800a38e:	2300      	movs	r3, #0
 800a390:	e1fd      	b.n	800a78e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a394:	2200      	movs	r2, #0
 800a396:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a39a:	b2da      	uxtb	r2, r3
 800a39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a39e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a2:	785b      	ldrb	r3, [r3, #1]
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7fe fd0f 	bl	8008dc8 <disk_initialize>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a3b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a3b4:	f003 0301 	and.w	r3, r3, #1
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d001      	beq.n	800a3c0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a3bc:	2303      	movs	r3, #3
 800a3be:	e1e6      	b.n	800a78e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a3c0:	79fb      	ldrb	r3, [r7, #7]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d007      	beq.n	800a3d6 <find_volume+0xca>
 800a3c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a3ca:	f003 0304 	and.w	r3, r3, #4
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d001      	beq.n	800a3d6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a3d2:	230a      	movs	r3, #10
 800a3d4:	e1db      	b.n	800a78e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a3da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a3dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a3de:	f7ff ff3f 	bl	800a260 <check_fs>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a3e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a3ec:	2b02      	cmp	r3, #2
 800a3ee:	d149      	bne.n	800a484 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	643b      	str	r3, [r7, #64]	; 0x40
 800a3f4:	e01e      	b.n	800a434 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a3fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3fe:	011b      	lsls	r3, r3, #4
 800a400:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a404:	4413      	add	r3, r2
 800a406:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40a:	3304      	adds	r3, #4
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d006      	beq.n	800a420 <find_volume+0x114>
 800a412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a414:	3308      	adds	r3, #8
 800a416:	4618      	mov	r0, r3
 800a418:	f7fe fd72 	bl	8008f00 <ld_dword>
 800a41c:	4602      	mov	r2, r0
 800a41e:	e000      	b.n	800a422 <find_volume+0x116>
 800a420:	2200      	movs	r2, #0
 800a422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a424:	009b      	lsls	r3, r3, #2
 800a426:	3358      	adds	r3, #88	; 0x58
 800a428:	443b      	add	r3, r7
 800a42a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a42e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a430:	3301      	adds	r3, #1
 800a432:	643b      	str	r3, [r7, #64]	; 0x40
 800a434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a436:	2b03      	cmp	r3, #3
 800a438:	d9dd      	bls.n	800a3f6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a43a:	2300      	movs	r3, #0
 800a43c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a43e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a440:	2b00      	cmp	r3, #0
 800a442:	d002      	beq.n	800a44a <find_volume+0x13e>
 800a444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a446:	3b01      	subs	r3, #1
 800a448:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a44a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a44c:	009b      	lsls	r3, r3, #2
 800a44e:	3358      	adds	r3, #88	; 0x58
 800a450:	443b      	add	r3, r7
 800a452:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a456:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d005      	beq.n	800a46a <find_volume+0x15e>
 800a45e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a460:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a462:	f7ff fefd 	bl	800a260 <check_fs>
 800a466:	4603      	mov	r3, r0
 800a468:	e000      	b.n	800a46c <find_volume+0x160>
 800a46a:	2303      	movs	r3, #3
 800a46c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a470:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a474:	2b01      	cmp	r3, #1
 800a476:	d905      	bls.n	800a484 <find_volume+0x178>
 800a478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a47a:	3301      	adds	r3, #1
 800a47c:	643b      	str	r3, [r7, #64]	; 0x40
 800a47e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a480:	2b03      	cmp	r3, #3
 800a482:	d9e2      	bls.n	800a44a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a484:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a488:	2b04      	cmp	r3, #4
 800a48a:	d101      	bne.n	800a490 <find_volume+0x184>
 800a48c:	2301      	movs	r3, #1
 800a48e:	e17e      	b.n	800a78e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a490:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a494:	2b01      	cmp	r3, #1
 800a496:	d901      	bls.n	800a49c <find_volume+0x190>
 800a498:	230d      	movs	r3, #13
 800a49a:	e178      	b.n	800a78e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49e:	3330      	adds	r3, #48	; 0x30
 800a4a0:	330b      	adds	r3, #11
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f7fe fd14 	bl	8008ed0 <ld_word>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4ae:	d001      	beq.n	800a4b4 <find_volume+0x1a8>
 800a4b0:	230d      	movs	r3, #13
 800a4b2:	e16c      	b.n	800a78e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b6:	3330      	adds	r3, #48	; 0x30
 800a4b8:	3316      	adds	r3, #22
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f7fe fd08 	bl	8008ed0 <ld_word>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a4c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d106      	bne.n	800a4d8 <find_volume+0x1cc>
 800a4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4cc:	3330      	adds	r3, #48	; 0x30
 800a4ce:	3324      	adds	r3, #36	; 0x24
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7fe fd15 	bl	8008f00 <ld_dword>
 800a4d6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a4dc:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800a4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ea:	789b      	ldrb	r3, [r3, #2]
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d005      	beq.n	800a4fc <find_volume+0x1f0>
 800a4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f2:	789b      	ldrb	r3, [r3, #2]
 800a4f4:	2b02      	cmp	r3, #2
 800a4f6:	d001      	beq.n	800a4fc <find_volume+0x1f0>
 800a4f8:	230d      	movs	r3, #13
 800a4fa:	e148      	b.n	800a78e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fe:	789b      	ldrb	r3, [r3, #2]
 800a500:	461a      	mov	r2, r3
 800a502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a504:	fb02 f303 	mul.w	r3, r2, r3
 800a508:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a50c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a510:	b29a      	uxth	r2, r3
 800a512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a514:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a518:	895b      	ldrh	r3, [r3, #10]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d008      	beq.n	800a530 <find_volume+0x224>
 800a51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a520:	895b      	ldrh	r3, [r3, #10]
 800a522:	461a      	mov	r2, r3
 800a524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a526:	895b      	ldrh	r3, [r3, #10]
 800a528:	3b01      	subs	r3, #1
 800a52a:	4013      	ands	r3, r2
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d001      	beq.n	800a534 <find_volume+0x228>
 800a530:	230d      	movs	r3, #13
 800a532:	e12c      	b.n	800a78e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a536:	3330      	adds	r3, #48	; 0x30
 800a538:	3311      	adds	r3, #17
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7fe fcc8 	bl	8008ed0 <ld_word>
 800a540:	4603      	mov	r3, r0
 800a542:	461a      	mov	r2, r3
 800a544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a546:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a54a:	891b      	ldrh	r3, [r3, #8]
 800a54c:	f003 030f 	and.w	r3, r3, #15
 800a550:	b29b      	uxth	r3, r3
 800a552:	2b00      	cmp	r3, #0
 800a554:	d001      	beq.n	800a55a <find_volume+0x24e>
 800a556:	230d      	movs	r3, #13
 800a558:	e119      	b.n	800a78e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55c:	3330      	adds	r3, #48	; 0x30
 800a55e:	3313      	adds	r3, #19
 800a560:	4618      	mov	r0, r3
 800a562:	f7fe fcb5 	bl	8008ed0 <ld_word>
 800a566:	4603      	mov	r3, r0
 800a568:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a56a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d106      	bne.n	800a57e <find_volume+0x272>
 800a570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a572:	3330      	adds	r3, #48	; 0x30
 800a574:	3320      	adds	r3, #32
 800a576:	4618      	mov	r0, r3
 800a578:	f7fe fcc2 	bl	8008f00 <ld_dword>
 800a57c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a580:	3330      	adds	r3, #48	; 0x30
 800a582:	330e      	adds	r3, #14
 800a584:	4618      	mov	r0, r3
 800a586:	f7fe fca3 	bl	8008ed0 <ld_word>
 800a58a:	4603      	mov	r3, r0
 800a58c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a58e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a590:	2b00      	cmp	r3, #0
 800a592:	d101      	bne.n	800a598 <find_volume+0x28c>
 800a594:	230d      	movs	r3, #13
 800a596:	e0fa      	b.n	800a78e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a598:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a59a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a59c:	4413      	add	r3, r2
 800a59e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5a0:	8912      	ldrh	r2, [r2, #8]
 800a5a2:	0912      	lsrs	r2, r2, #4
 800a5a4:	b292      	uxth	r2, r2
 800a5a6:	4413      	add	r3, r2
 800a5a8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a5aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d204      	bcs.n	800a5bc <find_volume+0x2b0>
 800a5b2:	230d      	movs	r3, #13
 800a5b4:	e0eb      	b.n	800a78e <find_volume+0x482>
 800a5b6:	bf00      	nop
 800a5b8:	20000d88 	.word	0x20000d88
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a5bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c0:	1ad3      	subs	r3, r2, r3
 800a5c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5c4:	8952      	ldrh	r2, [r2, #10]
 800a5c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5ca:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d101      	bne.n	800a5d6 <find_volume+0x2ca>
 800a5d2:	230d      	movs	r3, #13
 800a5d4:	e0db      	b.n	800a78e <find_volume+0x482>
		fmt = FS_FAT32;
 800a5d6:	2303      	movs	r3, #3
 800a5d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5de:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d802      	bhi.n	800a5ec <find_volume+0x2e0>
 800a5e6:	2302      	movs	r3, #2
 800a5e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ee:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d802      	bhi.n	800a5fc <find_volume+0x2f0>
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fe:	1c9a      	adds	r2, r3, #2
 800a600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a602:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a606:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a608:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a60a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a60c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a60e:	441a      	add	r2, r3
 800a610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a612:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a614:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a618:	441a      	add	r2, r3
 800a61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a61c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800a61e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a622:	2b03      	cmp	r3, #3
 800a624:	d11e      	bne.n	800a664 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a628:	3330      	adds	r3, #48	; 0x30
 800a62a:	332a      	adds	r3, #42	; 0x2a
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7fe fc4f 	bl	8008ed0 <ld_word>
 800a632:	4603      	mov	r3, r0
 800a634:	2b00      	cmp	r3, #0
 800a636:	d001      	beq.n	800a63c <find_volume+0x330>
 800a638:	230d      	movs	r3, #13
 800a63a:	e0a8      	b.n	800a78e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63e:	891b      	ldrh	r3, [r3, #8]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d001      	beq.n	800a648 <find_volume+0x33c>
 800a644:	230d      	movs	r3, #13
 800a646:	e0a2      	b.n	800a78e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a64a:	3330      	adds	r3, #48	; 0x30
 800a64c:	332c      	adds	r3, #44	; 0x2c
 800a64e:	4618      	mov	r0, r3
 800a650:	f7fe fc56 	bl	8008f00 <ld_dword>
 800a654:	4602      	mov	r2, r0
 800a656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a658:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a65c:	695b      	ldr	r3, [r3, #20]
 800a65e:	009b      	lsls	r3, r3, #2
 800a660:	647b      	str	r3, [r7, #68]	; 0x44
 800a662:	e01f      	b.n	800a6a4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a666:	891b      	ldrh	r3, [r3, #8]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d101      	bne.n	800a670 <find_volume+0x364>
 800a66c:	230d      	movs	r3, #13
 800a66e:	e08e      	b.n	800a78e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a672:	6a1a      	ldr	r2, [r3, #32]
 800a674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a676:	441a      	add	r2, r3
 800a678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a67a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a67c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a680:	2b02      	cmp	r3, #2
 800a682:	d103      	bne.n	800a68c <find_volume+0x380>
 800a684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a686:	695b      	ldr	r3, [r3, #20]
 800a688:	005b      	lsls	r3, r3, #1
 800a68a:	e00a      	b.n	800a6a2 <find_volume+0x396>
 800a68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68e:	695a      	ldr	r2, [r3, #20]
 800a690:	4613      	mov	r3, r2
 800a692:	005b      	lsls	r3, r3, #1
 800a694:	4413      	add	r3, r2
 800a696:	085a      	lsrs	r2, r3, #1
 800a698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69a:	695b      	ldr	r3, [r3, #20]
 800a69c:	f003 0301 	and.w	r3, r3, #1
 800a6a0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a6a2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a6:	699a      	ldr	r2, [r3, #24]
 800a6a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6aa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a6ae:	0a5b      	lsrs	r3, r3, #9
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d201      	bcs.n	800a6b8 <find_volume+0x3ac>
 800a6b4:	230d      	movs	r3, #13
 800a6b6:	e06a      	b.n	800a78e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a6be:	611a      	str	r2, [r3, #16]
 800a6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c2:	691a      	ldr	r2, [r3, #16]
 800a6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ca:	2280      	movs	r2, #128	; 0x80
 800a6cc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a6ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a6d2:	2b03      	cmp	r3, #3
 800a6d4:	d149      	bne.n	800a76a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d8:	3330      	adds	r3, #48	; 0x30
 800a6da:	3330      	adds	r3, #48	; 0x30
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f7fe fbf7 	bl	8008ed0 <ld_word>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d140      	bne.n	800a76a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a6e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a6f0:	f7fe fe9e 	bl	8009430 <move_window>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d137      	bne.n	800a76a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800a6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a702:	3330      	adds	r3, #48	; 0x30
 800a704:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a708:	4618      	mov	r0, r3
 800a70a:	f7fe fbe1 	bl	8008ed0 <ld_word>
 800a70e:	4603      	mov	r3, r0
 800a710:	461a      	mov	r2, r3
 800a712:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a716:	429a      	cmp	r2, r3
 800a718:	d127      	bne.n	800a76a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a71c:	3330      	adds	r3, #48	; 0x30
 800a71e:	4618      	mov	r0, r3
 800a720:	f7fe fbee 	bl	8008f00 <ld_dword>
 800a724:	4603      	mov	r3, r0
 800a726:	4a1c      	ldr	r2, [pc, #112]	; (800a798 <find_volume+0x48c>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d11e      	bne.n	800a76a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a72e:	3330      	adds	r3, #48	; 0x30
 800a730:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a734:	4618      	mov	r0, r3
 800a736:	f7fe fbe3 	bl	8008f00 <ld_dword>
 800a73a:	4603      	mov	r3, r0
 800a73c:	4a17      	ldr	r2, [pc, #92]	; (800a79c <find_volume+0x490>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d113      	bne.n	800a76a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a744:	3330      	adds	r3, #48	; 0x30
 800a746:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a74a:	4618      	mov	r0, r3
 800a74c:	f7fe fbd8 	bl	8008f00 <ld_dword>
 800a750:	4602      	mov	r2, r0
 800a752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a754:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a758:	3330      	adds	r3, #48	; 0x30
 800a75a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a75e:	4618      	mov	r0, r3
 800a760:	f7fe fbce 	bl	8008f00 <ld_dword>
 800a764:	4602      	mov	r2, r0
 800a766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a768:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a76c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a770:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a772:	4b0b      	ldr	r3, [pc, #44]	; (800a7a0 <find_volume+0x494>)
 800a774:	881b      	ldrh	r3, [r3, #0]
 800a776:	3301      	adds	r3, #1
 800a778:	b29a      	uxth	r2, r3
 800a77a:	4b09      	ldr	r3, [pc, #36]	; (800a7a0 <find_volume+0x494>)
 800a77c:	801a      	strh	r2, [r3, #0]
 800a77e:	4b08      	ldr	r3, [pc, #32]	; (800a7a0 <find_volume+0x494>)
 800a780:	881a      	ldrh	r2, [r3, #0]
 800a782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a784:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a786:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a788:	f7fe fdea 	bl	8009360 <clear_lock>
#endif
	return FR_OK;
 800a78c:	2300      	movs	r3, #0
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3758      	adds	r7, #88	; 0x58
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	41615252 	.word	0x41615252
 800a79c:	61417272 	.word	0x61417272
 800a7a0:	20000d8c 	.word	0x20000d8c

0800a7a4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a7ae:	2309      	movs	r3, #9
 800a7b0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d01c      	beq.n	800a7f2 <validate+0x4e>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d018      	beq.n	800a7f2 <validate+0x4e>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d013      	beq.n	800a7f2 <validate+0x4e>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	889a      	ldrh	r2, [r3, #4]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	88db      	ldrh	r3, [r3, #6]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d10c      	bne.n	800a7f2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	785b      	ldrb	r3, [r3, #1]
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7fe fad8 	bl	8008d94 <disk_status>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	f003 0301 	and.w	r3, r3, #1
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d101      	bne.n	800a7f2 <validate+0x4e>
			res = FR_OK;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a7f2:	7bfb      	ldrb	r3, [r7, #15]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d102      	bne.n	800a7fe <validate+0x5a>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	e000      	b.n	800a800 <validate+0x5c>
 800a7fe:	2300      	movs	r3, #0
 800a800:	683a      	ldr	r2, [r7, #0]
 800a802:	6013      	str	r3, [r2, #0]
	return res;
 800a804:	7bfb      	ldrb	r3, [r7, #15]
}
 800a806:	4618      	mov	r0, r3
 800a808:	3710      	adds	r7, #16
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
	...

0800a810 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b088      	sub	sp, #32
 800a814:	af00      	add	r7, sp, #0
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	4613      	mov	r3, r2
 800a81c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a822:	f107 0310 	add.w	r3, r7, #16
 800a826:	4618      	mov	r0, r3
 800a828:	f7ff fcd5 	bl	800a1d6 <get_ldnumber>
 800a82c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a82e:	69fb      	ldr	r3, [r7, #28]
 800a830:	2b00      	cmp	r3, #0
 800a832:	da01      	bge.n	800a838 <f_mount+0x28>
 800a834:	230b      	movs	r3, #11
 800a836:	e02b      	b.n	800a890 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a838:	4a17      	ldr	r2, [pc, #92]	; (800a898 <f_mount+0x88>)
 800a83a:	69fb      	ldr	r3, [r7, #28]
 800a83c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a840:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d005      	beq.n	800a854 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a848:	69b8      	ldr	r0, [r7, #24]
 800a84a:	f7fe fd89 	bl	8009360 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a84e:	69bb      	ldr	r3, [r7, #24]
 800a850:	2200      	movs	r2, #0
 800a852:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d002      	beq.n	800a860 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2200      	movs	r2, #0
 800a85e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a860:	68fa      	ldr	r2, [r7, #12]
 800a862:	490d      	ldr	r1, [pc, #52]	; (800a898 <f_mount+0x88>)
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d002      	beq.n	800a876 <f_mount+0x66>
 800a870:	79fb      	ldrb	r3, [r7, #7]
 800a872:	2b01      	cmp	r3, #1
 800a874:	d001      	beq.n	800a87a <f_mount+0x6a>
 800a876:	2300      	movs	r3, #0
 800a878:	e00a      	b.n	800a890 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a87a:	f107 010c 	add.w	r1, r7, #12
 800a87e:	f107 0308 	add.w	r3, r7, #8
 800a882:	2200      	movs	r2, #0
 800a884:	4618      	mov	r0, r3
 800a886:	f7ff fd41 	bl	800a30c <find_volume>
 800a88a:	4603      	mov	r3, r0
 800a88c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a88e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a890:	4618      	mov	r0, r3
 800a892:	3720      	adds	r7, #32
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	20000d88 	.word	0x20000d88

0800a89c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b098      	sub	sp, #96	; 0x60
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	60f8      	str	r0, [r7, #12]
 800a8a4:	60b9      	str	r1, [r7, #8]
 800a8a6:	4613      	mov	r3, r2
 800a8a8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d101      	bne.n	800a8b4 <f_open+0x18>
 800a8b0:	2309      	movs	r3, #9
 800a8b2:	e1ad      	b.n	800ac10 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a8b4:	79fb      	ldrb	r3, [r7, #7]
 800a8b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8ba:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a8bc:	79fa      	ldrb	r2, [r7, #7]
 800a8be:	f107 0110 	add.w	r1, r7, #16
 800a8c2:	f107 0308 	add.w	r3, r7, #8
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7ff fd20 	bl	800a30c <find_volume>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a8d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	f040 8191 	bne.w	800abfe <f_open+0x362>
		dj.obj.fs = fs;
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a8e0:	68ba      	ldr	r2, [r7, #8]
 800a8e2:	f107 0314 	add.w	r3, r7, #20
 800a8e6:	4611      	mov	r1, r2
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7ff fc03 	bl	800a0f4 <follow_path>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a8f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d11a      	bne.n	800a932 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a8fc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a900:	b25b      	sxtb	r3, r3
 800a902:	2b00      	cmp	r3, #0
 800a904:	da03      	bge.n	800a90e <f_open+0x72>
				res = FR_INVALID_NAME;
 800a906:	2306      	movs	r3, #6
 800a908:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a90c:	e011      	b.n	800a932 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a90e:	79fb      	ldrb	r3, [r7, #7]
 800a910:	f023 0301 	bic.w	r3, r3, #1
 800a914:	2b00      	cmp	r3, #0
 800a916:	bf14      	ite	ne
 800a918:	2301      	movne	r3, #1
 800a91a:	2300      	moveq	r3, #0
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	461a      	mov	r2, r3
 800a920:	f107 0314 	add.w	r3, r7, #20
 800a924:	4611      	mov	r1, r2
 800a926:	4618      	mov	r0, r3
 800a928:	f7fe fbd2 	bl	80090d0 <chk_lock>
 800a92c:	4603      	mov	r3, r0
 800a92e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a932:	79fb      	ldrb	r3, [r7, #7]
 800a934:	f003 031c 	and.w	r3, r3, #28
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d07f      	beq.n	800aa3c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a93c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a940:	2b00      	cmp	r3, #0
 800a942:	d017      	beq.n	800a974 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a944:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a948:	2b04      	cmp	r3, #4
 800a94a:	d10e      	bne.n	800a96a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a94c:	f7fe fc1c 	bl	8009188 <enq_lock>
 800a950:	4603      	mov	r3, r0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d006      	beq.n	800a964 <f_open+0xc8>
 800a956:	f107 0314 	add.w	r3, r7, #20
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7ff fb03 	bl	8009f66 <dir_register>
 800a960:	4603      	mov	r3, r0
 800a962:	e000      	b.n	800a966 <f_open+0xca>
 800a964:	2312      	movs	r3, #18
 800a966:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a96a:	79fb      	ldrb	r3, [r7, #7]
 800a96c:	f043 0308 	orr.w	r3, r3, #8
 800a970:	71fb      	strb	r3, [r7, #7]
 800a972:	e010      	b.n	800a996 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a974:	7ebb      	ldrb	r3, [r7, #26]
 800a976:	f003 0311 	and.w	r3, r3, #17
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d003      	beq.n	800a986 <f_open+0xea>
					res = FR_DENIED;
 800a97e:	2307      	movs	r3, #7
 800a980:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a984:	e007      	b.n	800a996 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a986:	79fb      	ldrb	r3, [r7, #7]
 800a988:	f003 0304 	and.w	r3, r3, #4
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d002      	beq.n	800a996 <f_open+0xfa>
 800a990:	2308      	movs	r3, #8
 800a992:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a996:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d168      	bne.n	800aa70 <f_open+0x1d4>
 800a99e:	79fb      	ldrb	r3, [r7, #7]
 800a9a0:	f003 0308 	and.w	r3, r3, #8
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d063      	beq.n	800aa70 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a9a8:	f7fc f810 	bl	80069cc <get_fattime>
 800a9ac:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a9ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9b0:	330e      	adds	r3, #14
 800a9b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7fe fae1 	bl	8008f7c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a9ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9bc:	3316      	adds	r3, #22
 800a9be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7fe fadb 	bl	8008f7c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a9c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9c8:	330b      	adds	r3, #11
 800a9ca:	2220      	movs	r2, #32
 800a9cc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9d2:	4611      	mov	r1, r2
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7ff fa32 	bl	8009e3e <ld_clust>
 800a9da:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f7ff fa4a 	bl	8009e7c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ea:	331c      	adds	r3, #28
 800a9ec:	2100      	movs	r1, #0
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7fe fac4 	bl	8008f7c <st_dword>
					fs->wflag = 1;
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a9fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d037      	beq.n	800aa70 <f_open+0x1d4>
						dw = fs->winsect;
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa04:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800aa06:	f107 0314 	add.w	r3, r7, #20
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7fe ff5d 	bl	80098ce <remove_chain>
 800aa14:	4603      	mov	r3, r0
 800aa16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800aa1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d126      	bne.n	800aa70 <f_open+0x1d4>
							res = move_window(fs, dw);
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aa26:	4618      	mov	r0, r3
 800aa28:	f7fe fd02 	bl	8009430 <move_window>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aa36:	3a01      	subs	r2, #1
 800aa38:	60da      	str	r2, [r3, #12]
 800aa3a:	e019      	b.n	800aa70 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800aa3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d115      	bne.n	800aa70 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800aa44:	7ebb      	ldrb	r3, [r7, #26]
 800aa46:	f003 0310 	and.w	r3, r3, #16
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d003      	beq.n	800aa56 <f_open+0x1ba>
					res = FR_NO_FILE;
 800aa4e:	2304      	movs	r3, #4
 800aa50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aa54:	e00c      	b.n	800aa70 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800aa56:	79fb      	ldrb	r3, [r7, #7]
 800aa58:	f003 0302 	and.w	r3, r3, #2
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d007      	beq.n	800aa70 <f_open+0x1d4>
 800aa60:	7ebb      	ldrb	r3, [r7, #26]
 800aa62:	f003 0301 	and.w	r3, r3, #1
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d002      	beq.n	800aa70 <f_open+0x1d4>
						res = FR_DENIED;
 800aa6a:	2307      	movs	r3, #7
 800aa6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800aa70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d128      	bne.n	800aaca <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800aa78:	79fb      	ldrb	r3, [r7, #7]
 800aa7a:	f003 0308 	and.w	r3, r3, #8
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d003      	beq.n	800aa8a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800aa82:	79fb      	ldrb	r3, [r7, #7]
 800aa84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa88:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800aa92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800aa98:	79fb      	ldrb	r3, [r7, #7]
 800aa9a:	f023 0301 	bic.w	r3, r3, #1
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	bf14      	ite	ne
 800aaa2:	2301      	movne	r3, #1
 800aaa4:	2300      	moveq	r3, #0
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	f107 0314 	add.w	r3, r7, #20
 800aaae:	4611      	mov	r1, r2
 800aab0:	4618      	mov	r0, r3
 800aab2:	f7fe fb8b 	bl	80091cc <inc_lock>
 800aab6:	4602      	mov	r2, r0
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	691b      	ldr	r3, [r3, #16]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d102      	bne.n	800aaca <f_open+0x22e>
 800aac4:	2302      	movs	r3, #2
 800aac6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800aaca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aace:	2b00      	cmp	r3, #0
 800aad0:	f040 8095 	bne.w	800abfe <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aad8:	4611      	mov	r1, r2
 800aada:	4618      	mov	r0, r3
 800aadc:	f7ff f9af 	bl	8009e3e <ld_clust>
 800aae0:	4602      	mov	r2, r0
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800aae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aae8:	331c      	adds	r3, #28
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fe fa08 	bl	8008f00 <ld_dword>
 800aaf0:	4602      	mov	r2, r0
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800aafc:	693a      	ldr	r2, [r7, #16]
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	88da      	ldrh	r2, [r3, #6]
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	79fa      	ldrb	r2, [r7, #7]
 800ab0e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2200      	movs	r2, #0
 800ab14:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	3330      	adds	r3, #48	; 0x30
 800ab26:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab2a:	2100      	movs	r1, #0
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7fe fa72 	bl	8009016 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ab32:	79fb      	ldrb	r3, [r7, #7]
 800ab34:	f003 0320 	and.w	r3, r3, #32
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d060      	beq.n	800abfe <f_open+0x362>
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d05c      	beq.n	800abfe <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	68da      	ldr	r2, [r3, #12]
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	895b      	ldrh	r3, [r3, #10]
 800ab50:	025b      	lsls	r3, r3, #9
 800ab52:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	68db      	ldr	r3, [r3, #12]
 800ab5e:	657b      	str	r3, [r7, #84]	; 0x54
 800ab60:	e016      	b.n	800ab90 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7fe fd1d 	bl	80095a6 <get_fat>
 800ab6c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ab6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	d802      	bhi.n	800ab7a <f_open+0x2de>
 800ab74:	2302      	movs	r3, #2
 800ab76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ab7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab80:	d102      	bne.n	800ab88 <f_open+0x2ec>
 800ab82:	2301      	movs	r3, #1
 800ab84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ab88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ab8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab8c:	1ad3      	subs	r3, r2, r3
 800ab8e:	657b      	str	r3, [r7, #84]	; 0x54
 800ab90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d103      	bne.n	800aba0 <f_open+0x304>
 800ab98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ab9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d8e0      	bhi.n	800ab62 <f_open+0x2c6>
				}
				fp->clust = clst;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aba4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800aba6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d127      	bne.n	800abfe <f_open+0x362>
 800abae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d022      	beq.n	800abfe <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800abbc:	4618      	mov	r0, r3
 800abbe:	f7fe fcd3 	bl	8009568 <clust2sect>
 800abc2:	6478      	str	r0, [r7, #68]	; 0x44
 800abc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d103      	bne.n	800abd2 <f_open+0x336>
						res = FR_INT_ERR;
 800abca:	2302      	movs	r3, #2
 800abcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800abd0:	e015      	b.n	800abfe <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800abd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abd4:	0a5a      	lsrs	r2, r3, #9
 800abd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abd8:	441a      	add	r2, r3
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	7858      	ldrb	r0, [r3, #1]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	6a1a      	ldr	r2, [r3, #32]
 800abec:	2301      	movs	r3, #1
 800abee:	f7fe f911 	bl	8008e14 <disk_read>
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d002      	beq.n	800abfe <f_open+0x362>
 800abf8:	2301      	movs	r3, #1
 800abfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800abfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d002      	beq.n	800ac0c <f_open+0x370>
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ac0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3760      	adds	r7, #96	; 0x60
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b08c      	sub	sp, #48	; 0x30
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	60f8      	str	r0, [r7, #12]
 800ac20:	60b9      	str	r1, [r7, #8]
 800ac22:	607a      	str	r2, [r7, #4]
 800ac24:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f107 0210 	add.w	r2, r7, #16
 800ac36:	4611      	mov	r1, r2
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f7ff fdb3 	bl	800a7a4 <validate>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ac44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d107      	bne.n	800ac5c <f_write+0x44>
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	7d5b      	ldrb	r3, [r3, #21]
 800ac50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ac54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d002      	beq.n	800ac62 <f_write+0x4a>
 800ac5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac60:	e14b      	b.n	800aefa <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	7d1b      	ldrb	r3, [r3, #20]
 800ac66:	f003 0302 	and.w	r3, r3, #2
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d101      	bne.n	800ac72 <f_write+0x5a>
 800ac6e:	2307      	movs	r3, #7
 800ac70:	e143      	b.n	800aefa <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	699a      	ldr	r2, [r3, #24]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	441a      	add	r2, r3
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	699b      	ldr	r3, [r3, #24]
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	f080 812d 	bcs.w	800aede <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	699b      	ldr	r3, [r3, #24]
 800ac88:	43db      	mvns	r3, r3
 800ac8a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ac8c:	e127      	b.n	800aede <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	699b      	ldr	r3, [r3, #24]
 800ac92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	f040 80e3 	bne.w	800ae62 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	699b      	ldr	r3, [r3, #24]
 800aca0:	0a5b      	lsrs	r3, r3, #9
 800aca2:	693a      	ldr	r2, [r7, #16]
 800aca4:	8952      	ldrh	r2, [r2, #10]
 800aca6:	3a01      	subs	r2, #1
 800aca8:	4013      	ands	r3, r2
 800acaa:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800acac:	69bb      	ldr	r3, [r7, #24]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d143      	bne.n	800ad3a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	699b      	ldr	r3, [r3, #24]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d10c      	bne.n	800acd4 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800acc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d11a      	bne.n	800acfc <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2100      	movs	r1, #0
 800acca:	4618      	mov	r0, r3
 800accc:	f7fe fe64 	bl	8009998 <create_chain>
 800acd0:	62b8      	str	r0, [r7, #40]	; 0x28
 800acd2:	e013      	b.n	800acfc <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d007      	beq.n	800acec <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	699b      	ldr	r3, [r3, #24]
 800ace0:	4619      	mov	r1, r3
 800ace2:	68f8      	ldr	r0, [r7, #12]
 800ace4:	f7fe fef0 	bl	8009ac8 <clmt_clust>
 800ace8:	62b8      	str	r0, [r7, #40]	; 0x28
 800acea:	e007      	b.n	800acfc <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	69db      	ldr	r3, [r3, #28]
 800acf2:	4619      	mov	r1, r3
 800acf4:	4610      	mov	r0, r2
 800acf6:	f7fe fe4f 	bl	8009998 <create_chain>
 800acfa:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800acfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	f000 80f2 	beq.w	800aee8 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ad04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad06:	2b01      	cmp	r3, #1
 800ad08:	d104      	bne.n	800ad14 <f_write+0xfc>
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2202      	movs	r2, #2
 800ad0e:	755a      	strb	r2, [r3, #21]
 800ad10:	2302      	movs	r3, #2
 800ad12:	e0f2      	b.n	800aefa <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ad14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad1a:	d104      	bne.n	800ad26 <f_write+0x10e>
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	755a      	strb	r2, [r3, #21]
 800ad22:	2301      	movs	r3, #1
 800ad24:	e0e9      	b.n	800aefa <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad2a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d102      	bne.n	800ad3a <f_write+0x122>
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad38:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	7d1b      	ldrb	r3, [r3, #20]
 800ad3e:	b25b      	sxtb	r3, r3
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	da18      	bge.n	800ad76 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	7858      	ldrb	r0, [r3, #1]
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	6a1a      	ldr	r2, [r3, #32]
 800ad52:	2301      	movs	r3, #1
 800ad54:	f7fe f87e 	bl	8008e54 <disk_write>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d004      	beq.n	800ad68 <f_write+0x150>
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2201      	movs	r2, #1
 800ad62:	755a      	strb	r2, [r3, #21]
 800ad64:	2301      	movs	r3, #1
 800ad66:	e0c8      	b.n	800aefa <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	7d1b      	ldrb	r3, [r3, #20]
 800ad6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad70:	b2da      	uxtb	r2, r3
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ad76:	693a      	ldr	r2, [r7, #16]
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	69db      	ldr	r3, [r3, #28]
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	4610      	mov	r0, r2
 800ad80:	f7fe fbf2 	bl	8009568 <clust2sect>
 800ad84:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d104      	bne.n	800ad96 <f_write+0x17e>
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2202      	movs	r2, #2
 800ad90:	755a      	strb	r2, [r3, #21]
 800ad92:	2302      	movs	r3, #2
 800ad94:	e0b1      	b.n	800aefa <f_write+0x2e2>
			sect += csect;
 800ad96:	697a      	ldr	r2, [r7, #20]
 800ad98:	69bb      	ldr	r3, [r7, #24]
 800ad9a:	4413      	add	r3, r2
 800ad9c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	0a5b      	lsrs	r3, r3, #9
 800ada2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ada4:	6a3b      	ldr	r3, [r7, #32]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d03c      	beq.n	800ae24 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800adaa:	69ba      	ldr	r2, [r7, #24]
 800adac:	6a3b      	ldr	r3, [r7, #32]
 800adae:	4413      	add	r3, r2
 800adb0:	693a      	ldr	r2, [r7, #16]
 800adb2:	8952      	ldrh	r2, [r2, #10]
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d905      	bls.n	800adc4 <f_write+0x1ac>
					cc = fs->csize - csect;
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	895b      	ldrh	r3, [r3, #10]
 800adbc:	461a      	mov	r2, r3
 800adbe:	69bb      	ldr	r3, [r7, #24]
 800adc0:	1ad3      	subs	r3, r2, r3
 800adc2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	7858      	ldrb	r0, [r3, #1]
 800adc8:	6a3b      	ldr	r3, [r7, #32]
 800adca:	697a      	ldr	r2, [r7, #20]
 800adcc:	69f9      	ldr	r1, [r7, #28]
 800adce:	f7fe f841 	bl	8008e54 <disk_write>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d004      	beq.n	800ade2 <f_write+0x1ca>
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2201      	movs	r2, #1
 800addc:	755a      	strb	r2, [r3, #21]
 800adde:	2301      	movs	r3, #1
 800ade0:	e08b      	b.n	800aefa <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	6a1a      	ldr	r2, [r3, #32]
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	1ad3      	subs	r3, r2, r3
 800adea:	6a3a      	ldr	r2, [r7, #32]
 800adec:	429a      	cmp	r2, r3
 800adee:	d915      	bls.n	800ae1c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	6a1a      	ldr	r2, [r3, #32]
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	1ad3      	subs	r3, r2, r3
 800adfe:	025b      	lsls	r3, r3, #9
 800ae00:	69fa      	ldr	r2, [r7, #28]
 800ae02:	4413      	add	r3, r2
 800ae04:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae08:	4619      	mov	r1, r3
 800ae0a:	f7fe f8e3 	bl	8008fd4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	7d1b      	ldrb	r3, [r3, #20]
 800ae12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae16:	b2da      	uxtb	r2, r3
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ae1c:	6a3b      	ldr	r3, [r7, #32]
 800ae1e:	025b      	lsls	r3, r3, #9
 800ae20:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ae22:	e03f      	b.n	800aea4 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6a1b      	ldr	r3, [r3, #32]
 800ae28:	697a      	ldr	r2, [r7, #20]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d016      	beq.n	800ae5c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	699a      	ldr	r2, [r3, #24]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d210      	bcs.n	800ae5c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	7858      	ldrb	r0, [r3, #1]
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae44:	2301      	movs	r3, #1
 800ae46:	697a      	ldr	r2, [r7, #20]
 800ae48:	f7fd ffe4 	bl	8008e14 <disk_read>
 800ae4c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d004      	beq.n	800ae5c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2201      	movs	r2, #1
 800ae56:	755a      	strb	r2, [r3, #21]
 800ae58:	2301      	movs	r3, #1
 800ae5a:	e04e      	b.n	800aefa <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	697a      	ldr	r2, [r7, #20]
 800ae60:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	699b      	ldr	r3, [r3, #24]
 800ae66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae6a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ae6e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ae70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d901      	bls.n	800ae7c <f_write+0x264>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	699b      	ldr	r3, [r3, #24]
 800ae86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae8a:	4413      	add	r3, r2
 800ae8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae8e:	69f9      	ldr	r1, [r7, #28]
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7fe f89f 	bl	8008fd4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	7d1b      	ldrb	r3, [r3, #20]
 800ae9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ae9e:	b2da      	uxtb	r2, r3
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800aea4:	69fa      	ldr	r2, [r7, #28]
 800aea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea8:	4413      	add	r3, r2
 800aeaa:	61fb      	str	r3, [r7, #28]
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	699a      	ldr	r2, [r3, #24]
 800aeb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb2:	441a      	add	r2, r3
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	619a      	str	r2, [r3, #24]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	68da      	ldr	r2, [r3, #12]
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	699b      	ldr	r3, [r3, #24]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	bf38      	it	cc
 800aec4:	461a      	movcc	r2, r3
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	60da      	str	r2, [r3, #12]
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed0:	441a      	add	r2, r3
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	601a      	str	r2, [r3, #0]
 800aed6:	687a      	ldr	r2, [r7, #4]
 800aed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeda:	1ad3      	subs	r3, r2, r3
 800aedc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	f47f aed4 	bne.w	800ac8e <f_write+0x76>
 800aee6:	e000      	b.n	800aeea <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800aee8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	7d1b      	ldrb	r3, [r3, #20]
 800aeee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aef2:	b2da      	uxtb	r2, r3
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800aef8:	2300      	movs	r3, #0
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3730      	adds	r7, #48	; 0x30
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}

0800af02 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800af02:	b580      	push	{r7, lr}
 800af04:	b086      	sub	sp, #24
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f107 0208 	add.w	r2, r7, #8
 800af10:	4611      	mov	r1, r2
 800af12:	4618      	mov	r0, r3
 800af14:	f7ff fc46 	bl	800a7a4 <validate>
 800af18:	4603      	mov	r3, r0
 800af1a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800af1c:	7dfb      	ldrb	r3, [r7, #23]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d168      	bne.n	800aff4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	7d1b      	ldrb	r3, [r3, #20]
 800af26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d062      	beq.n	800aff4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	7d1b      	ldrb	r3, [r3, #20]
 800af32:	b25b      	sxtb	r3, r3
 800af34:	2b00      	cmp	r3, #0
 800af36:	da15      	bge.n	800af64 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	7858      	ldrb	r0, [r3, #1]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6a1a      	ldr	r2, [r3, #32]
 800af46:	2301      	movs	r3, #1
 800af48:	f7fd ff84 	bl	8008e54 <disk_write>
 800af4c:	4603      	mov	r3, r0
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d001      	beq.n	800af56 <f_sync+0x54>
 800af52:	2301      	movs	r3, #1
 800af54:	e04f      	b.n	800aff6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	7d1b      	ldrb	r3, [r3, #20]
 800af5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af5e:	b2da      	uxtb	r2, r3
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800af64:	f7fb fd32 	bl	80069cc <get_fattime>
 800af68:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800af6a:	68ba      	ldr	r2, [r7, #8]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af70:	4619      	mov	r1, r3
 800af72:	4610      	mov	r0, r2
 800af74:	f7fe fa5c 	bl	8009430 <move_window>
 800af78:	4603      	mov	r3, r0
 800af7a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800af7c:	7dfb      	ldrb	r3, [r7, #23]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d138      	bne.n	800aff4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af86:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	330b      	adds	r3, #11
 800af8c:	781a      	ldrb	r2, [r3, #0]
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	330b      	adds	r3, #11
 800af92:	f042 0220 	orr.w	r2, r2, #32
 800af96:	b2d2      	uxtb	r2, r2
 800af98:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6818      	ldr	r0, [r3, #0]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	689b      	ldr	r3, [r3, #8]
 800afa2:	461a      	mov	r2, r3
 800afa4:	68f9      	ldr	r1, [r7, #12]
 800afa6:	f7fe ff69 	bl	8009e7c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f103 021c 	add.w	r2, r3, #28
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	68db      	ldr	r3, [r3, #12]
 800afb4:	4619      	mov	r1, r3
 800afb6:	4610      	mov	r0, r2
 800afb8:	f7fd ffe0 	bl	8008f7c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	3316      	adds	r3, #22
 800afc0:	6939      	ldr	r1, [r7, #16]
 800afc2:	4618      	mov	r0, r3
 800afc4:	f7fd ffda 	bl	8008f7c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	3312      	adds	r3, #18
 800afcc:	2100      	movs	r1, #0
 800afce:	4618      	mov	r0, r3
 800afd0:	f7fd ffb9 	bl	8008f46 <st_word>
					fs->wflag = 1;
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	2201      	movs	r2, #1
 800afd8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	4618      	mov	r0, r3
 800afde:	f7fe fa55 	bl	800948c <sync_fs>
 800afe2:	4603      	mov	r3, r0
 800afe4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	7d1b      	ldrb	r3, [r3, #20]
 800afea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afee:	b2da      	uxtb	r2, r3
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800aff4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3718      	adds	r7, #24
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}

0800affe <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800affe:	b580      	push	{r7, lr}
 800b000:	b084      	sub	sp, #16
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f7ff ff7b 	bl	800af02 <f_sync>
 800b00c:	4603      	mov	r3, r0
 800b00e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b010:	7bfb      	ldrb	r3, [r7, #15]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d118      	bne.n	800b048 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f107 0208 	add.w	r2, r7, #8
 800b01c:	4611      	mov	r1, r2
 800b01e:	4618      	mov	r0, r3
 800b020:	f7ff fbc0 	bl	800a7a4 <validate>
 800b024:	4603      	mov	r3, r0
 800b026:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b028:	7bfb      	ldrb	r3, [r7, #15]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d10c      	bne.n	800b048 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	691b      	ldr	r3, [r3, #16]
 800b032:	4618      	mov	r0, r3
 800b034:	f7fe f958 	bl	80092e8 <dec_lock>
 800b038:	4603      	mov	r3, r0
 800b03a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b03c:	7bfb      	ldrb	r3, [r7, #15]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d102      	bne.n	800b048 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2200      	movs	r2, #0
 800b046:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b048:	7bfb      	ldrb	r3, [r7, #15]
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3710      	adds	r7, #16
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}

0800b052 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800b052:	b580      	push	{r7, lr}
 800b054:	b084      	sub	sp, #16
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
 800b05a:	460b      	mov	r3, r1
 800b05c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800b05e:	78fb      	ldrb	r3, [r7, #3]
 800b060:	2b0a      	cmp	r3, #10
 800b062:	d103      	bne.n	800b06c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800b064:	210d      	movs	r1, #13
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f7ff fff3 	bl	800b052 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2b00      	cmp	r3, #0
 800b076:	db25      	blt.n	800b0c4 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	1c5a      	adds	r2, r3, #1
 800b07c:	60fa      	str	r2, [r7, #12]
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	4413      	add	r3, r2
 800b082:	78fa      	ldrb	r2, [r7, #3]
 800b084:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2b3c      	cmp	r3, #60	; 0x3c
 800b08a:	dd12      	ble.n	800b0b2 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6818      	ldr	r0, [r3, #0]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f103 010c 	add.w	r1, r3, #12
 800b096:	68fa      	ldr	r2, [r7, #12]
 800b098:	f107 0308 	add.w	r3, r7, #8
 800b09c:	f7ff fdbc 	bl	800ac18 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800b0a0:	68ba      	ldr	r2, [r7, #8]
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d101      	bne.n	800b0ac <putc_bfd+0x5a>
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	e001      	b.n	800b0b0 <putc_bfd+0x5e>
 800b0ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b0b0:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	68fa      	ldr	r2, [r7, #12]
 800b0b6:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	689b      	ldr	r3, [r3, #8]
 800b0bc:	1c5a      	adds	r2, r3, #1
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	609a      	str	r2, [r3, #8]
 800b0c2:	e000      	b.n	800b0c6 <putc_bfd+0x74>
	if (i < 0) return;
 800b0c4:	bf00      	nop
}
 800b0c6:	3710      	adds	r7, #16
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b084      	sub	sp, #16
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	db16      	blt.n	800b10a <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6818      	ldr	r0, [r3, #0]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f103 010c 	add.w	r1, r3, #12
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	f107 030c 	add.w	r3, r7, #12
 800b0f0:	f7ff fd92 	bl	800ac18 <f_write>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d107      	bne.n	800b10a <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	68fa      	ldr	r2, [r7, #12]
 800b100:	4293      	cmp	r3, r2
 800b102:	d102      	bne.n	800b10a <putc_flush+0x3e>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	689b      	ldr	r3, [r3, #8]
 800b108:	e001      	b.n	800b10e <putc_flush+0x42>
	return EOF;
 800b10a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3710      	adds	r7, #16
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}

0800b116 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800b116:	b480      	push	{r7}
 800b118:	b083      	sub	sp, #12
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
 800b11e:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	683a      	ldr	r2, [r7, #0]
 800b124:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	605a      	str	r2, [r3, #4]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	685a      	ldr	r2, [r3, #4]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	609a      	str	r2, [r3, #8]
}
 800b134:	bf00      	nop
 800b136:	370c      	adds	r7, #12
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b096      	sub	sp, #88	; 0x58
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800b14a:	f107 030c 	add.w	r3, r7, #12
 800b14e:	6839      	ldr	r1, [r7, #0]
 800b150:	4618      	mov	r0, r3
 800b152:	f7ff ffe0 	bl	800b116 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800b156:	e009      	b.n	800b16c <f_puts+0x2c>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	1c5a      	adds	r2, r3, #1
 800b15c:	607a      	str	r2, [r7, #4]
 800b15e:	781a      	ldrb	r2, [r3, #0]
 800b160:	f107 030c 	add.w	r3, r7, #12
 800b164:	4611      	mov	r1, r2
 800b166:	4618      	mov	r0, r3
 800b168:	f7ff ff73 	bl	800b052 <putc_bfd>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d1f1      	bne.n	800b158 <f_puts+0x18>
	return putc_flush(&pb);
 800b174:	f107 030c 	add.w	r3, r7, #12
 800b178:	4618      	mov	r0, r3
 800b17a:	f7ff ffa7 	bl	800b0cc <putc_flush>
 800b17e:	4603      	mov	r3, r0
}
 800b180:	4618      	mov	r0, r3
 800b182:	3758      	adds	r7, #88	; 0x58
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b188:	b480      	push	{r7}
 800b18a:	b087      	sub	sp, #28
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	4613      	mov	r3, r2
 800b194:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b196:	2301      	movs	r3, #1
 800b198:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b19a:	2300      	movs	r3, #0
 800b19c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b19e:	4b1f      	ldr	r3, [pc, #124]	; (800b21c <FATFS_LinkDriverEx+0x94>)
 800b1a0:	7a5b      	ldrb	r3, [r3, #9]
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d131      	bne.n	800b20c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b1a8:	4b1c      	ldr	r3, [pc, #112]	; (800b21c <FATFS_LinkDriverEx+0x94>)
 800b1aa:	7a5b      	ldrb	r3, [r3, #9]
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	4b1a      	ldr	r3, [pc, #104]	; (800b21c <FATFS_LinkDriverEx+0x94>)
 800b1b2:	2100      	movs	r1, #0
 800b1b4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b1b6:	4b19      	ldr	r3, [pc, #100]	; (800b21c <FATFS_LinkDriverEx+0x94>)
 800b1b8:	7a5b      	ldrb	r3, [r3, #9]
 800b1ba:	b2db      	uxtb	r3, r3
 800b1bc:	4a17      	ldr	r2, [pc, #92]	; (800b21c <FATFS_LinkDriverEx+0x94>)
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	4413      	add	r3, r2
 800b1c2:	68fa      	ldr	r2, [r7, #12]
 800b1c4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b1c6:	4b15      	ldr	r3, [pc, #84]	; (800b21c <FATFS_LinkDriverEx+0x94>)
 800b1c8:	7a5b      	ldrb	r3, [r3, #9]
 800b1ca:	b2db      	uxtb	r3, r3
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	4b13      	ldr	r3, [pc, #76]	; (800b21c <FATFS_LinkDriverEx+0x94>)
 800b1d0:	4413      	add	r3, r2
 800b1d2:	79fa      	ldrb	r2, [r7, #7]
 800b1d4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b1d6:	4b11      	ldr	r3, [pc, #68]	; (800b21c <FATFS_LinkDriverEx+0x94>)
 800b1d8:	7a5b      	ldrb	r3, [r3, #9]
 800b1da:	b2db      	uxtb	r3, r3
 800b1dc:	1c5a      	adds	r2, r3, #1
 800b1de:	b2d1      	uxtb	r1, r2
 800b1e0:	4a0e      	ldr	r2, [pc, #56]	; (800b21c <FATFS_LinkDriverEx+0x94>)
 800b1e2:	7251      	strb	r1, [r2, #9]
 800b1e4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b1e6:	7dbb      	ldrb	r3, [r7, #22]
 800b1e8:	3330      	adds	r3, #48	; 0x30
 800b1ea:	b2da      	uxtb	r2, r3
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	223a      	movs	r2, #58	; 0x3a
 800b1f6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	3302      	adds	r3, #2
 800b1fc:	222f      	movs	r2, #47	; 0x2f
 800b1fe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	3303      	adds	r3, #3
 800b204:	2200      	movs	r2, #0
 800b206:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b208:	2300      	movs	r3, #0
 800b20a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b20c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b20e:	4618      	mov	r0, r3
 800b210:	371c      	adds	r7, #28
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr
 800b21a:	bf00      	nop
 800b21c:	20000db0 	.word	0x20000db0

0800b220 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b082      	sub	sp, #8
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b22a:	2200      	movs	r2, #0
 800b22c:	6839      	ldr	r1, [r7, #0]
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f7ff ffaa 	bl	800b188 <FATFS_LinkDriverEx>
 800b234:	4603      	mov	r3, r0
}
 800b236:	4618      	mov	r0, r3
 800b238:	3708      	adds	r7, #8
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
	...

0800b240 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b244:	2200      	movs	r2, #0
 800b246:	4912      	ldr	r1, [pc, #72]	; (800b290 <MX_USB_DEVICE_Init+0x50>)
 800b248:	4812      	ldr	r0, [pc, #72]	; (800b294 <MX_USB_DEVICE_Init+0x54>)
 800b24a:	f7fc fab1 	bl	80077b0 <USBD_Init>
 800b24e:	4603      	mov	r3, r0
 800b250:	2b00      	cmp	r3, #0
 800b252:	d001      	beq.n	800b258 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b254:	f7f6 fdaa 	bl	8001dac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b258:	490f      	ldr	r1, [pc, #60]	; (800b298 <MX_USB_DEVICE_Init+0x58>)
 800b25a:	480e      	ldr	r0, [pc, #56]	; (800b294 <MX_USB_DEVICE_Init+0x54>)
 800b25c:	f7fc fad8 	bl	8007810 <USBD_RegisterClass>
 800b260:	4603      	mov	r3, r0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d001      	beq.n	800b26a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b266:	f7f6 fda1 	bl	8001dac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b26a:	490c      	ldr	r1, [pc, #48]	; (800b29c <MX_USB_DEVICE_Init+0x5c>)
 800b26c:	4809      	ldr	r0, [pc, #36]	; (800b294 <MX_USB_DEVICE_Init+0x54>)
 800b26e:	f7fc f9c9 	bl	8007604 <USBD_CDC_RegisterInterface>
 800b272:	4603      	mov	r3, r0
 800b274:	2b00      	cmp	r3, #0
 800b276:	d001      	beq.n	800b27c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b278:	f7f6 fd98 	bl	8001dac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b27c:	4805      	ldr	r0, [pc, #20]	; (800b294 <MX_USB_DEVICE_Init+0x54>)
 800b27e:	f7fc fafd 	bl	800787c <USBD_Start>
 800b282:	4603      	mov	r3, r0
 800b284:	2b00      	cmp	r3, #0
 800b286:	d001      	beq.n	800b28c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b288:	f7f6 fd90 	bl	8001dac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b28c:	bf00      	nop
 800b28e:	bd80      	pop	{r7, pc}
 800b290:	200000c4 	.word	0x200000c4
 800b294:	20000dbc 	.word	0x20000dbc
 800b298:	20000030 	.word	0x20000030
 800b29c:	200000b0 	.word	0x200000b0

0800b2a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	4905      	ldr	r1, [pc, #20]	; (800b2bc <CDC_Init_FS+0x1c>)
 800b2a8:	4805      	ldr	r0, [pc, #20]	; (800b2c0 <CDC_Init_FS+0x20>)
 800b2aa:	f7fc f9c5 	bl	8007638 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b2ae:	4905      	ldr	r1, [pc, #20]	; (800b2c4 <CDC_Init_FS+0x24>)
 800b2b0:	4803      	ldr	r0, [pc, #12]	; (800b2c0 <CDC_Init_FS+0x20>)
 800b2b2:	f7fc f9e3 	bl	800767c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b2b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	bd80      	pop	{r7, pc}
 800b2bc:	20001898 	.word	0x20001898
 800b2c0:	20000dbc 	.word	0x20000dbc
 800b2c4:	20001098 	.word	0x20001098

0800b2c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b2cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	4603      	mov	r3, r0
 800b2e0:	6039      	str	r1, [r7, #0]
 800b2e2:	71fb      	strb	r3, [r7, #7]
 800b2e4:	4613      	mov	r3, r2
 800b2e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b2e8:	79fb      	ldrb	r3, [r7, #7]
 800b2ea:	2b23      	cmp	r3, #35	; 0x23
 800b2ec:	d84a      	bhi.n	800b384 <CDC_Control_FS+0xac>
 800b2ee:	a201      	add	r2, pc, #4	; (adr r2, 800b2f4 <CDC_Control_FS+0x1c>)
 800b2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f4:	0800b385 	.word	0x0800b385
 800b2f8:	0800b385 	.word	0x0800b385
 800b2fc:	0800b385 	.word	0x0800b385
 800b300:	0800b385 	.word	0x0800b385
 800b304:	0800b385 	.word	0x0800b385
 800b308:	0800b385 	.word	0x0800b385
 800b30c:	0800b385 	.word	0x0800b385
 800b310:	0800b385 	.word	0x0800b385
 800b314:	0800b385 	.word	0x0800b385
 800b318:	0800b385 	.word	0x0800b385
 800b31c:	0800b385 	.word	0x0800b385
 800b320:	0800b385 	.word	0x0800b385
 800b324:	0800b385 	.word	0x0800b385
 800b328:	0800b385 	.word	0x0800b385
 800b32c:	0800b385 	.word	0x0800b385
 800b330:	0800b385 	.word	0x0800b385
 800b334:	0800b385 	.word	0x0800b385
 800b338:	0800b385 	.word	0x0800b385
 800b33c:	0800b385 	.word	0x0800b385
 800b340:	0800b385 	.word	0x0800b385
 800b344:	0800b385 	.word	0x0800b385
 800b348:	0800b385 	.word	0x0800b385
 800b34c:	0800b385 	.word	0x0800b385
 800b350:	0800b385 	.word	0x0800b385
 800b354:	0800b385 	.word	0x0800b385
 800b358:	0800b385 	.word	0x0800b385
 800b35c:	0800b385 	.word	0x0800b385
 800b360:	0800b385 	.word	0x0800b385
 800b364:	0800b385 	.word	0x0800b385
 800b368:	0800b385 	.word	0x0800b385
 800b36c:	0800b385 	.word	0x0800b385
 800b370:	0800b385 	.word	0x0800b385
 800b374:	0800b385 	.word	0x0800b385
 800b378:	0800b385 	.word	0x0800b385
 800b37c:	0800b385 	.word	0x0800b385
 800b380:	0800b385 	.word	0x0800b385
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b384:	bf00      	nop
  }

  return (USBD_OK);
 800b386:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b388:	4618      	mov	r0, r3
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b39e:	6879      	ldr	r1, [r7, #4]
 800b3a0:	4805      	ldr	r0, [pc, #20]	; (800b3b8 <CDC_Receive_FS+0x24>)
 800b3a2:	f7fc f96b 	bl	800767c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b3a6:	4804      	ldr	r0, [pc, #16]	; (800b3b8 <CDC_Receive_FS+0x24>)
 800b3a8:	f7fc f9cc 	bl	8007744 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b3ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3708      	adds	r7, #8
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	20000dbc 	.word	0x20000dbc

0800b3bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b084      	sub	sp, #16
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b3cc:	4b0d      	ldr	r3, [pc, #52]	; (800b404 <CDC_Transmit_FS+0x48>)
 800b3ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3d2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d001      	beq.n	800b3e2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	e00b      	b.n	800b3fa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b3e2:	887b      	ldrh	r3, [r7, #2]
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	6879      	ldr	r1, [r7, #4]
 800b3e8:	4806      	ldr	r0, [pc, #24]	; (800b404 <CDC_Transmit_FS+0x48>)
 800b3ea:	f7fc f925 	bl	8007638 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b3ee:	4805      	ldr	r0, [pc, #20]	; (800b404 <CDC_Transmit_FS+0x48>)
 800b3f0:	f7fc f962 	bl	80076b8 <USBD_CDC_TransmitPacket>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b3f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3710      	adds	r7, #16
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	20000dbc 	.word	0x20000dbc

0800b408 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b408:	b480      	push	{r7}
 800b40a:	b087      	sub	sp, #28
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	4613      	mov	r3, r2
 800b414:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b416:	2300      	movs	r3, #0
 800b418:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b41a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b41e:	4618      	mov	r0, r3
 800b420:	371c      	adds	r7, #28
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr
	...

0800b42c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
 800b432:	4603      	mov	r3, r0
 800b434:	6039      	str	r1, [r7, #0]
 800b436:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	2212      	movs	r2, #18
 800b43c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b43e:	4b03      	ldr	r3, [pc, #12]	; (800b44c <USBD_FS_DeviceDescriptor+0x20>)
}
 800b440:	4618      	mov	r0, r3
 800b442:	370c      	adds	r7, #12
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr
 800b44c:	200000e0 	.word	0x200000e0

0800b450 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b450:	b480      	push	{r7}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
 800b456:	4603      	mov	r3, r0
 800b458:	6039      	str	r1, [r7, #0]
 800b45a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	2204      	movs	r2, #4
 800b460:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b462:	4b03      	ldr	r3, [pc, #12]	; (800b470 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b464:	4618      	mov	r0, r3
 800b466:	370c      	adds	r7, #12
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr
 800b470:	200000f4 	.word	0x200000f4

0800b474 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
 800b47a:	4603      	mov	r3, r0
 800b47c:	6039      	str	r1, [r7, #0]
 800b47e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b480:	79fb      	ldrb	r3, [r7, #7]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d105      	bne.n	800b492 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b486:	683a      	ldr	r2, [r7, #0]
 800b488:	4907      	ldr	r1, [pc, #28]	; (800b4a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b48a:	4808      	ldr	r0, [pc, #32]	; (800b4ac <USBD_FS_ProductStrDescriptor+0x38>)
 800b48c:	f7fd fba2 	bl	8008bd4 <USBD_GetString>
 800b490:	e004      	b.n	800b49c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b492:	683a      	ldr	r2, [r7, #0]
 800b494:	4904      	ldr	r1, [pc, #16]	; (800b4a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b496:	4805      	ldr	r0, [pc, #20]	; (800b4ac <USBD_FS_ProductStrDescriptor+0x38>)
 800b498:	f7fd fb9c 	bl	8008bd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b49c:	4b02      	ldr	r3, [pc, #8]	; (800b4a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3708      	adds	r7, #8
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	20002098 	.word	0x20002098
 800b4ac:	0800eb2c 	.word	0x0800eb2c

0800b4b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	6039      	str	r1, [r7, #0]
 800b4ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b4bc:	683a      	ldr	r2, [r7, #0]
 800b4be:	4904      	ldr	r1, [pc, #16]	; (800b4d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b4c0:	4804      	ldr	r0, [pc, #16]	; (800b4d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b4c2:	f7fd fb87 	bl	8008bd4 <USBD_GetString>
  return USBD_StrDesc;
 800b4c6:	4b02      	ldr	r3, [pc, #8]	; (800b4d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3708      	adds	r7, #8
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	20002098 	.word	0x20002098
 800b4d4:	0800eb44 	.word	0x0800eb44

0800b4d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	4603      	mov	r3, r0
 800b4e0:	6039      	str	r1, [r7, #0]
 800b4e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	221a      	movs	r2, #26
 800b4e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b4ea:	f000 f843 	bl	800b574 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b4ee:	4b02      	ldr	r3, [pc, #8]	; (800b4f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3708      	adds	r7, #8
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	200000f8 	.word	0x200000f8

0800b4fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b082      	sub	sp, #8
 800b500:	af00      	add	r7, sp, #0
 800b502:	4603      	mov	r3, r0
 800b504:	6039      	str	r1, [r7, #0]
 800b506:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b508:	79fb      	ldrb	r3, [r7, #7]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d105      	bne.n	800b51a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b50e:	683a      	ldr	r2, [r7, #0]
 800b510:	4907      	ldr	r1, [pc, #28]	; (800b530 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b512:	4808      	ldr	r0, [pc, #32]	; (800b534 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b514:	f7fd fb5e 	bl	8008bd4 <USBD_GetString>
 800b518:	e004      	b.n	800b524 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b51a:	683a      	ldr	r2, [r7, #0]
 800b51c:	4904      	ldr	r1, [pc, #16]	; (800b530 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b51e:	4805      	ldr	r0, [pc, #20]	; (800b534 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b520:	f7fd fb58 	bl	8008bd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b524:	4b02      	ldr	r3, [pc, #8]	; (800b530 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b526:	4618      	mov	r0, r3
 800b528:	3708      	adds	r7, #8
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	20002098 	.word	0x20002098
 800b534:	0800eb58 	.word	0x0800eb58

0800b538 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	4603      	mov	r3, r0
 800b540:	6039      	str	r1, [r7, #0]
 800b542:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b544:	79fb      	ldrb	r3, [r7, #7]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d105      	bne.n	800b556 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b54a:	683a      	ldr	r2, [r7, #0]
 800b54c:	4907      	ldr	r1, [pc, #28]	; (800b56c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b54e:	4808      	ldr	r0, [pc, #32]	; (800b570 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b550:	f7fd fb40 	bl	8008bd4 <USBD_GetString>
 800b554:	e004      	b.n	800b560 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b556:	683a      	ldr	r2, [r7, #0]
 800b558:	4904      	ldr	r1, [pc, #16]	; (800b56c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b55a:	4805      	ldr	r0, [pc, #20]	; (800b570 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b55c:	f7fd fb3a 	bl	8008bd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b560:	4b02      	ldr	r3, [pc, #8]	; (800b56c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b562:	4618      	mov	r0, r3
 800b564:	3708      	adds	r7, #8
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	20002098 	.word	0x20002098
 800b570:	0800eb64 	.word	0x0800eb64

0800b574 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b57a:	4b0f      	ldr	r3, [pc, #60]	; (800b5b8 <Get_SerialNum+0x44>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b580:	4b0e      	ldr	r3, [pc, #56]	; (800b5bc <Get_SerialNum+0x48>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b586:	4b0e      	ldr	r3, [pc, #56]	; (800b5c0 <Get_SerialNum+0x4c>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b58c:	68fa      	ldr	r2, [r7, #12]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	4413      	add	r3, r2
 800b592:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d009      	beq.n	800b5ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b59a:	2208      	movs	r2, #8
 800b59c:	4909      	ldr	r1, [pc, #36]	; (800b5c4 <Get_SerialNum+0x50>)
 800b59e:	68f8      	ldr	r0, [r7, #12]
 800b5a0:	f000 f814 	bl	800b5cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b5a4:	2204      	movs	r2, #4
 800b5a6:	4908      	ldr	r1, [pc, #32]	; (800b5c8 <Get_SerialNum+0x54>)
 800b5a8:	68b8      	ldr	r0, [r7, #8]
 800b5aa:	f000 f80f 	bl	800b5cc <IntToUnicode>
  }
}
 800b5ae:	bf00      	nop
 800b5b0:	3710      	adds	r7, #16
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	1fff7a10 	.word	0x1fff7a10
 800b5bc:	1fff7a14 	.word	0x1fff7a14
 800b5c0:	1fff7a18 	.word	0x1fff7a18
 800b5c4:	200000fa 	.word	0x200000fa
 800b5c8:	2000010a 	.word	0x2000010a

0800b5cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b087      	sub	sp, #28
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	60f8      	str	r0, [r7, #12]
 800b5d4:	60b9      	str	r1, [r7, #8]
 800b5d6:	4613      	mov	r3, r2
 800b5d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b5de:	2300      	movs	r3, #0
 800b5e0:	75fb      	strb	r3, [r7, #23]
 800b5e2:	e027      	b.n	800b634 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	0f1b      	lsrs	r3, r3, #28
 800b5e8:	2b09      	cmp	r3, #9
 800b5ea:	d80b      	bhi.n	800b604 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	0f1b      	lsrs	r3, r3, #28
 800b5f0:	b2da      	uxtb	r2, r3
 800b5f2:	7dfb      	ldrb	r3, [r7, #23]
 800b5f4:	005b      	lsls	r3, r3, #1
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	440b      	add	r3, r1
 800b5fc:	3230      	adds	r2, #48	; 0x30
 800b5fe:	b2d2      	uxtb	r2, r2
 800b600:	701a      	strb	r2, [r3, #0]
 800b602:	e00a      	b.n	800b61a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	0f1b      	lsrs	r3, r3, #28
 800b608:	b2da      	uxtb	r2, r3
 800b60a:	7dfb      	ldrb	r3, [r7, #23]
 800b60c:	005b      	lsls	r3, r3, #1
 800b60e:	4619      	mov	r1, r3
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	440b      	add	r3, r1
 800b614:	3237      	adds	r2, #55	; 0x37
 800b616:	b2d2      	uxtb	r2, r2
 800b618:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	011b      	lsls	r3, r3, #4
 800b61e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b620:	7dfb      	ldrb	r3, [r7, #23]
 800b622:	005b      	lsls	r3, r3, #1
 800b624:	3301      	adds	r3, #1
 800b626:	68ba      	ldr	r2, [r7, #8]
 800b628:	4413      	add	r3, r2
 800b62a:	2200      	movs	r2, #0
 800b62c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b62e:	7dfb      	ldrb	r3, [r7, #23]
 800b630:	3301      	adds	r3, #1
 800b632:	75fb      	strb	r3, [r7, #23]
 800b634:	7dfa      	ldrb	r2, [r7, #23]
 800b636:	79fb      	ldrb	r3, [r7, #7]
 800b638:	429a      	cmp	r2, r3
 800b63a:	d3d3      	bcc.n	800b5e4 <IntToUnicode+0x18>
  }
}
 800b63c:	bf00      	nop
 800b63e:	bf00      	nop
 800b640:	371c      	adds	r7, #28
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr
	...

0800b64c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b08a      	sub	sp, #40	; 0x28
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b654:	f107 0314 	add.w	r3, r7, #20
 800b658:	2200      	movs	r2, #0
 800b65a:	601a      	str	r2, [r3, #0]
 800b65c:	605a      	str	r2, [r3, #4]
 800b65e:	609a      	str	r2, [r3, #8]
 800b660:	60da      	str	r2, [r3, #12]
 800b662:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b66c:	d13a      	bne.n	800b6e4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b66e:	2300      	movs	r3, #0
 800b670:	613b      	str	r3, [r7, #16]
 800b672:	4b1e      	ldr	r3, [pc, #120]	; (800b6ec <HAL_PCD_MspInit+0xa0>)
 800b674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b676:	4a1d      	ldr	r2, [pc, #116]	; (800b6ec <HAL_PCD_MspInit+0xa0>)
 800b678:	f043 0301 	orr.w	r3, r3, #1
 800b67c:	6313      	str	r3, [r2, #48]	; 0x30
 800b67e:	4b1b      	ldr	r3, [pc, #108]	; (800b6ec <HAL_PCD_MspInit+0xa0>)
 800b680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b682:	f003 0301 	and.w	r3, r3, #1
 800b686:	613b      	str	r3, [r7, #16]
 800b688:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b68a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b68e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b690:	2302      	movs	r3, #2
 800b692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b694:	2300      	movs	r3, #0
 800b696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b698:	2303      	movs	r3, #3
 800b69a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b69c:	230a      	movs	r3, #10
 800b69e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b6a0:	f107 0314 	add.w	r3, r7, #20
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	4812      	ldr	r0, [pc, #72]	; (800b6f0 <HAL_PCD_MspInit+0xa4>)
 800b6a8:	f7f6 ff42 	bl	8002530 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b6ac:	4b0f      	ldr	r3, [pc, #60]	; (800b6ec <HAL_PCD_MspInit+0xa0>)
 800b6ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6b0:	4a0e      	ldr	r2, [pc, #56]	; (800b6ec <HAL_PCD_MspInit+0xa0>)
 800b6b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6b6:	6353      	str	r3, [r2, #52]	; 0x34
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	60fb      	str	r3, [r7, #12]
 800b6bc:	4b0b      	ldr	r3, [pc, #44]	; (800b6ec <HAL_PCD_MspInit+0xa0>)
 800b6be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6c0:	4a0a      	ldr	r2, [pc, #40]	; (800b6ec <HAL_PCD_MspInit+0xa0>)
 800b6c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b6c6:	6453      	str	r3, [r2, #68]	; 0x44
 800b6c8:	4b08      	ldr	r3, [pc, #32]	; (800b6ec <HAL_PCD_MspInit+0xa0>)
 800b6ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6d0:	60fb      	str	r3, [r7, #12]
 800b6d2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	2100      	movs	r1, #0
 800b6d8:	2043      	movs	r0, #67	; 0x43
 800b6da:	f7f6 fee6 	bl	80024aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b6de:	2043      	movs	r0, #67	; 0x43
 800b6e0:	f7f6 feff 	bl	80024e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b6e4:	bf00      	nop
 800b6e6:	3728      	adds	r7, #40	; 0x28
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}
 800b6ec:	40023800 	.word	0x40023800
 800b6f0:	40020000 	.word	0x40020000

0800b6f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b082      	sub	sp, #8
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b708:	4619      	mov	r1, r3
 800b70a:	4610      	mov	r0, r2
 800b70c:	f7fc f903 	bl	8007916 <USBD_LL_SetupStage>
}
 800b710:	bf00      	nop
 800b712:	3708      	adds	r7, #8
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b082      	sub	sp, #8
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	460b      	mov	r3, r1
 800b722:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b72a:	78fa      	ldrb	r2, [r7, #3]
 800b72c:	6879      	ldr	r1, [r7, #4]
 800b72e:	4613      	mov	r3, r2
 800b730:	00db      	lsls	r3, r3, #3
 800b732:	4413      	add	r3, r2
 800b734:	009b      	lsls	r3, r3, #2
 800b736:	440b      	add	r3, r1
 800b738:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	78fb      	ldrb	r3, [r7, #3]
 800b740:	4619      	mov	r1, r3
 800b742:	f7fc f93d 	bl	80079c0 <USBD_LL_DataOutStage>
}
 800b746:	bf00      	nop
 800b748:	3708      	adds	r7, #8
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}

0800b74e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b74e:	b580      	push	{r7, lr}
 800b750:	b082      	sub	sp, #8
 800b752:	af00      	add	r7, sp, #0
 800b754:	6078      	str	r0, [r7, #4]
 800b756:	460b      	mov	r3, r1
 800b758:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b760:	78fa      	ldrb	r2, [r7, #3]
 800b762:	6879      	ldr	r1, [r7, #4]
 800b764:	4613      	mov	r3, r2
 800b766:	00db      	lsls	r3, r3, #3
 800b768:	4413      	add	r3, r2
 800b76a:	009b      	lsls	r3, r3, #2
 800b76c:	440b      	add	r3, r1
 800b76e:	334c      	adds	r3, #76	; 0x4c
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	78fb      	ldrb	r3, [r7, #3]
 800b774:	4619      	mov	r1, r3
 800b776:	f7fc f9d6 	bl	8007b26 <USBD_LL_DataInStage>
}
 800b77a:	bf00      	nop
 800b77c:	3708      	adds	r7, #8
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}

0800b782 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b782:	b580      	push	{r7, lr}
 800b784:	b082      	sub	sp, #8
 800b786:	af00      	add	r7, sp, #0
 800b788:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b790:	4618      	mov	r0, r3
 800b792:	f7fc fb0a 	bl	8007daa <USBD_LL_SOF>
}
 800b796:	bf00      	nop
 800b798:	3708      	adds	r7, #8
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}

0800b79e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b79e:	b580      	push	{r7, lr}
 800b7a0:	b084      	sub	sp, #16
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	68db      	ldr	r3, [r3, #12]
 800b7ae:	2b02      	cmp	r3, #2
 800b7b0:	d001      	beq.n	800b7b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b7b2:	f7f6 fafb 	bl	8001dac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b7bc:	7bfa      	ldrb	r2, [r7, #15]
 800b7be:	4611      	mov	r1, r2
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f7fc fab4 	bl	8007d2e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7fc fa5c 	bl	8007c8a <USBD_LL_Reset>
}
 800b7d2:	bf00      	nop
 800b7d4:	3710      	adds	r7, #16
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}
	...

0800b7dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b082      	sub	sp, #8
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f7fc faaf 	bl	8007d4e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	687a      	ldr	r2, [r7, #4]
 800b7fc:	6812      	ldr	r2, [r2, #0]
 800b7fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b802:	f043 0301 	orr.w	r3, r3, #1
 800b806:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6a1b      	ldr	r3, [r3, #32]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d005      	beq.n	800b81c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b810:	4b04      	ldr	r3, [pc, #16]	; (800b824 <HAL_PCD_SuspendCallback+0x48>)
 800b812:	691b      	ldr	r3, [r3, #16]
 800b814:	4a03      	ldr	r2, [pc, #12]	; (800b824 <HAL_PCD_SuspendCallback+0x48>)
 800b816:	f043 0306 	orr.w	r3, r3, #6
 800b81a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b81c:	bf00      	nop
 800b81e:	3708      	adds	r7, #8
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}
 800b824:	e000ed00 	.word	0xe000ed00

0800b828 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b836:	4618      	mov	r0, r3
 800b838:	f7fc fa9f 	bl	8007d7a <USBD_LL_Resume>
}
 800b83c:	bf00      	nop
 800b83e:	3708      	adds	r7, #8
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}

0800b844 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	460b      	mov	r3, r1
 800b84e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b856:	78fa      	ldrb	r2, [r7, #3]
 800b858:	4611      	mov	r1, r2
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7fc faf7 	bl	8007e4e <USBD_LL_IsoOUTIncomplete>
}
 800b860:	bf00      	nop
 800b862:	3708      	adds	r7, #8
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b082      	sub	sp, #8
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	460b      	mov	r3, r1
 800b872:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b87a:	78fa      	ldrb	r2, [r7, #3]
 800b87c:	4611      	mov	r1, r2
 800b87e:	4618      	mov	r0, r3
 800b880:	f7fc fab3 	bl	8007dea <USBD_LL_IsoINIncomplete>
}
 800b884:	bf00      	nop
 800b886:	3708      	adds	r7, #8
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b082      	sub	sp, #8
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7fc fb09 	bl	8007eb2 <USBD_LL_DevConnected>
}
 800b8a0:	bf00      	nop
 800b8a2:	3708      	adds	r7, #8
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7fc fb06 	bl	8007ec8 <USBD_LL_DevDisconnected>
}
 800b8bc:	bf00      	nop
 800b8be:	3708      	adds	r7, #8
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	781b      	ldrb	r3, [r3, #0]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d13c      	bne.n	800b94e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b8d4:	4a20      	ldr	r2, [pc, #128]	; (800b958 <USBD_LL_Init+0x94>)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	4a1e      	ldr	r2, [pc, #120]	; (800b958 <USBD_LL_Init+0x94>)
 800b8e0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b8e4:	4b1c      	ldr	r3, [pc, #112]	; (800b958 <USBD_LL_Init+0x94>)
 800b8e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b8ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b8ec:	4b1a      	ldr	r3, [pc, #104]	; (800b958 <USBD_LL_Init+0x94>)
 800b8ee:	2204      	movs	r2, #4
 800b8f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b8f2:	4b19      	ldr	r3, [pc, #100]	; (800b958 <USBD_LL_Init+0x94>)
 800b8f4:	2202      	movs	r2, #2
 800b8f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b8f8:	4b17      	ldr	r3, [pc, #92]	; (800b958 <USBD_LL_Init+0x94>)
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b8fe:	4b16      	ldr	r3, [pc, #88]	; (800b958 <USBD_LL_Init+0x94>)
 800b900:	2202      	movs	r2, #2
 800b902:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b904:	4b14      	ldr	r3, [pc, #80]	; (800b958 <USBD_LL_Init+0x94>)
 800b906:	2200      	movs	r2, #0
 800b908:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b90a:	4b13      	ldr	r3, [pc, #76]	; (800b958 <USBD_LL_Init+0x94>)
 800b90c:	2200      	movs	r2, #0
 800b90e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b910:	4b11      	ldr	r3, [pc, #68]	; (800b958 <USBD_LL_Init+0x94>)
 800b912:	2200      	movs	r2, #0
 800b914:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b916:	4b10      	ldr	r3, [pc, #64]	; (800b958 <USBD_LL_Init+0x94>)
 800b918:	2200      	movs	r2, #0
 800b91a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b91c:	4b0e      	ldr	r3, [pc, #56]	; (800b958 <USBD_LL_Init+0x94>)
 800b91e:	2200      	movs	r2, #0
 800b920:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b922:	480d      	ldr	r0, [pc, #52]	; (800b958 <USBD_LL_Init+0x94>)
 800b924:	f7f7 f8fe 	bl	8002b24 <HAL_PCD_Init>
 800b928:	4603      	mov	r3, r0
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d001      	beq.n	800b932 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b92e:	f7f6 fa3d 	bl	8001dac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b932:	2180      	movs	r1, #128	; 0x80
 800b934:	4808      	ldr	r0, [pc, #32]	; (800b958 <USBD_LL_Init+0x94>)
 800b936:	f7f8 fb56 	bl	8003fe6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b93a:	2240      	movs	r2, #64	; 0x40
 800b93c:	2100      	movs	r1, #0
 800b93e:	4806      	ldr	r0, [pc, #24]	; (800b958 <USBD_LL_Init+0x94>)
 800b940:	f7f8 fb0a 	bl	8003f58 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b944:	2280      	movs	r2, #128	; 0x80
 800b946:	2101      	movs	r1, #1
 800b948:	4803      	ldr	r0, [pc, #12]	; (800b958 <USBD_LL_Init+0x94>)
 800b94a:	f7f8 fb05 	bl	8003f58 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b94e:	2300      	movs	r3, #0
}
 800b950:	4618      	mov	r0, r3
 800b952:	3708      	adds	r7, #8
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}
 800b958:	20002298 	.word	0x20002298

0800b95c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b084      	sub	sp, #16
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b964:	2300      	movs	r3, #0
 800b966:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b968:	2300      	movs	r3, #0
 800b96a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b972:	4618      	mov	r0, r3
 800b974:	f7f7 f9f3 	bl	8002d5e <HAL_PCD_Start>
 800b978:	4603      	mov	r3, r0
 800b97a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b97c:	7bfb      	ldrb	r3, [r7, #15]
 800b97e:	4618      	mov	r0, r3
 800b980:	f000 f942 	bl	800bc08 <USBD_Get_USB_Status>
 800b984:	4603      	mov	r3, r0
 800b986:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b988:	7bbb      	ldrb	r3, [r7, #14]
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3710      	adds	r7, #16
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}

0800b992 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b992:	b580      	push	{r7, lr}
 800b994:	b084      	sub	sp, #16
 800b996:	af00      	add	r7, sp, #0
 800b998:	6078      	str	r0, [r7, #4]
 800b99a:	4608      	mov	r0, r1
 800b99c:	4611      	mov	r1, r2
 800b99e:	461a      	mov	r2, r3
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	70fb      	strb	r3, [r7, #3]
 800b9a4:	460b      	mov	r3, r1
 800b9a6:	70bb      	strb	r3, [r7, #2]
 800b9a8:	4613      	mov	r3, r2
 800b9aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b9ba:	78bb      	ldrb	r3, [r7, #2]
 800b9bc:	883a      	ldrh	r2, [r7, #0]
 800b9be:	78f9      	ldrb	r1, [r7, #3]
 800b9c0:	f7f7 fec4 	bl	800374c <HAL_PCD_EP_Open>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9c8:	7bfb      	ldrb	r3, [r7, #15]
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f000 f91c 	bl	800bc08 <USBD_Get_USB_Status>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3710      	adds	r7, #16
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}

0800b9de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9de:	b580      	push	{r7, lr}
 800b9e0:	b084      	sub	sp, #16
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b9f8:	78fa      	ldrb	r2, [r7, #3]
 800b9fa:	4611      	mov	r1, r2
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f7f7 ff0d 	bl	800381c <HAL_PCD_EP_Close>
 800ba02:	4603      	mov	r3, r0
 800ba04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba06:	7bfb      	ldrb	r3, [r7, #15]
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f000 f8fd 	bl	800bc08 <USBD_Get_USB_Status>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba12:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3710      	adds	r7, #16
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b084      	sub	sp, #16
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	460b      	mov	r3, r1
 800ba26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba36:	78fa      	ldrb	r2, [r7, #3]
 800ba38:	4611      	mov	r1, r2
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7f7 ffe5 	bl	8003a0a <HAL_PCD_EP_SetStall>
 800ba40:	4603      	mov	r3, r0
 800ba42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba44:	7bfb      	ldrb	r3, [r7, #15]
 800ba46:	4618      	mov	r0, r3
 800ba48:	f000 f8de 	bl	800bc08 <USBD_Get_USB_Status>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba50:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3710      	adds	r7, #16
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b084      	sub	sp, #16
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
 800ba62:	460b      	mov	r3, r1
 800ba64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba66:	2300      	movs	r3, #0
 800ba68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba74:	78fa      	ldrb	r2, [r7, #3]
 800ba76:	4611      	mov	r1, r2
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7f8 f82a 	bl	8003ad2 <HAL_PCD_EP_ClrStall>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba82:	7bfb      	ldrb	r3, [r7, #15]
 800ba84:	4618      	mov	r0, r3
 800ba86:	f000 f8bf 	bl	800bc08 <USBD_Get_USB_Status>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba8e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3710      	adds	r7, #16
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b085      	sub	sp, #20
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	460b      	mov	r3, r1
 800baa2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800baaa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800baac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	da0b      	bge.n	800bacc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bab4:	78fb      	ldrb	r3, [r7, #3]
 800bab6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800baba:	68f9      	ldr	r1, [r7, #12]
 800babc:	4613      	mov	r3, r2
 800babe:	00db      	lsls	r3, r3, #3
 800bac0:	4413      	add	r3, r2
 800bac2:	009b      	lsls	r3, r3, #2
 800bac4:	440b      	add	r3, r1
 800bac6:	333e      	adds	r3, #62	; 0x3e
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	e00b      	b.n	800bae4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bacc:	78fb      	ldrb	r3, [r7, #3]
 800bace:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bad2:	68f9      	ldr	r1, [r7, #12]
 800bad4:	4613      	mov	r3, r2
 800bad6:	00db      	lsls	r3, r3, #3
 800bad8:	4413      	add	r3, r2
 800bada:	009b      	lsls	r3, r3, #2
 800badc:	440b      	add	r3, r1
 800bade:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800bae2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3714      	adds	r7, #20
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	460b      	mov	r3, r1
 800bafa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bafc:	2300      	movs	r3, #0
 800bafe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb00:	2300      	movs	r3, #0
 800bb02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bb0a:	78fa      	ldrb	r2, [r7, #3]
 800bb0c:	4611      	mov	r1, r2
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7f7 fdf7 	bl	8003702 <HAL_PCD_SetAddress>
 800bb14:	4603      	mov	r3, r0
 800bb16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb18:	7bfb      	ldrb	r3, [r7, #15]
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f000 f874 	bl	800bc08 <USBD_Get_USB_Status>
 800bb20:	4603      	mov	r3, r0
 800bb22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb24:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3710      	adds	r7, #16
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}

0800bb2e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb2e:	b580      	push	{r7, lr}
 800bb30:	b086      	sub	sp, #24
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	60f8      	str	r0, [r7, #12]
 800bb36:	607a      	str	r2, [r7, #4]
 800bb38:	603b      	str	r3, [r7, #0]
 800bb3a:	460b      	mov	r3, r1
 800bb3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb42:	2300      	movs	r3, #0
 800bb44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bb4c:	7af9      	ldrb	r1, [r7, #11]
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	687a      	ldr	r2, [r7, #4]
 800bb52:	f7f7 ff10 	bl	8003976 <HAL_PCD_EP_Transmit>
 800bb56:	4603      	mov	r3, r0
 800bb58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb5a:	7dfb      	ldrb	r3, [r7, #23]
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f000 f853 	bl	800bc08 <USBD_Get_USB_Status>
 800bb62:	4603      	mov	r3, r0
 800bb64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb66:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3718      	adds	r7, #24
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b086      	sub	sp, #24
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	607a      	str	r2, [r7, #4]
 800bb7a:	603b      	str	r3, [r7, #0]
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb80:	2300      	movs	r3, #0
 800bb82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb84:	2300      	movs	r3, #0
 800bb86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bb8e:	7af9      	ldrb	r1, [r7, #11]
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	f7f7 fe8c 	bl	80038b0 <HAL_PCD_EP_Receive>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb9c:	7dfb      	ldrb	r3, [r7, #23]
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f000 f832 	bl	800bc08 <USBD_Get_USB_Status>
 800bba4:	4603      	mov	r3, r0
 800bba6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bba8:	7dbb      	ldrb	r3, [r7, #22]
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3718      	adds	r7, #24
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}

0800bbb2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbb2:	b580      	push	{r7, lr}
 800bbb4:	b082      	sub	sp, #8
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
 800bbba:	460b      	mov	r3, r1
 800bbbc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bbc4:	78fa      	ldrb	r2, [r7, #3]
 800bbc6:	4611      	mov	r1, r2
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f7f7 febc 	bl	8003946 <HAL_PCD_EP_GetRxCount>
 800bbce:	4603      	mov	r3, r0
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3708      	adds	r7, #8
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b083      	sub	sp, #12
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bbe0:	4b03      	ldr	r3, [pc, #12]	; (800bbf0 <USBD_static_malloc+0x18>)
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	370c      	adds	r7, #12
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbec:	4770      	bx	lr
 800bbee:	bf00      	nop
 800bbf0:	200027a4 	.word	0x200027a4

0800bbf4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b083      	sub	sp, #12
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]

}
 800bbfc:	bf00      	nop
 800bbfe:	370c      	adds	r7, #12
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr

0800bc08 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b085      	sub	sp, #20
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	4603      	mov	r3, r0
 800bc10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc12:	2300      	movs	r3, #0
 800bc14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bc16:	79fb      	ldrb	r3, [r7, #7]
 800bc18:	2b03      	cmp	r3, #3
 800bc1a:	d817      	bhi.n	800bc4c <USBD_Get_USB_Status+0x44>
 800bc1c:	a201      	add	r2, pc, #4	; (adr r2, 800bc24 <USBD_Get_USB_Status+0x1c>)
 800bc1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc22:	bf00      	nop
 800bc24:	0800bc35 	.word	0x0800bc35
 800bc28:	0800bc3b 	.word	0x0800bc3b
 800bc2c:	0800bc41 	.word	0x0800bc41
 800bc30:	0800bc47 	.word	0x0800bc47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bc34:	2300      	movs	r3, #0
 800bc36:	73fb      	strb	r3, [r7, #15]
    break;
 800bc38:	e00b      	b.n	800bc52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc3a:	2303      	movs	r3, #3
 800bc3c:	73fb      	strb	r3, [r7, #15]
    break;
 800bc3e:	e008      	b.n	800bc52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc40:	2301      	movs	r3, #1
 800bc42:	73fb      	strb	r3, [r7, #15]
    break;
 800bc44:	e005      	b.n	800bc52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc46:	2303      	movs	r3, #3
 800bc48:	73fb      	strb	r3, [r7, #15]
    break;
 800bc4a:	e002      	b.n	800bc52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bc4c:	2303      	movs	r3, #3
 800bc4e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc50:	bf00      	nop
  }
  return usb_status;
 800bc52:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3714      	adds	r7, #20
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr

0800bc60 <__errno>:
 800bc60:	4b01      	ldr	r3, [pc, #4]	; (800bc68 <__errno+0x8>)
 800bc62:	6818      	ldr	r0, [r3, #0]
 800bc64:	4770      	bx	lr
 800bc66:	bf00      	nop
 800bc68:	20000114 	.word	0x20000114

0800bc6c <__libc_init_array>:
 800bc6c:	b570      	push	{r4, r5, r6, lr}
 800bc6e:	4d0d      	ldr	r5, [pc, #52]	; (800bca4 <__libc_init_array+0x38>)
 800bc70:	4c0d      	ldr	r4, [pc, #52]	; (800bca8 <__libc_init_array+0x3c>)
 800bc72:	1b64      	subs	r4, r4, r5
 800bc74:	10a4      	asrs	r4, r4, #2
 800bc76:	2600      	movs	r6, #0
 800bc78:	42a6      	cmp	r6, r4
 800bc7a:	d109      	bne.n	800bc90 <__libc_init_array+0x24>
 800bc7c:	4d0b      	ldr	r5, [pc, #44]	; (800bcac <__libc_init_array+0x40>)
 800bc7e:	4c0c      	ldr	r4, [pc, #48]	; (800bcb0 <__libc_init_array+0x44>)
 800bc80:	f002 ff02 	bl	800ea88 <_init>
 800bc84:	1b64      	subs	r4, r4, r5
 800bc86:	10a4      	asrs	r4, r4, #2
 800bc88:	2600      	movs	r6, #0
 800bc8a:	42a6      	cmp	r6, r4
 800bc8c:	d105      	bne.n	800bc9a <__libc_init_array+0x2e>
 800bc8e:	bd70      	pop	{r4, r5, r6, pc}
 800bc90:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc94:	4798      	blx	r3
 800bc96:	3601      	adds	r6, #1
 800bc98:	e7ee      	b.n	800bc78 <__libc_init_array+0xc>
 800bc9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc9e:	4798      	blx	r3
 800bca0:	3601      	adds	r6, #1
 800bca2:	e7f2      	b.n	800bc8a <__libc_init_array+0x1e>
 800bca4:	0800efec 	.word	0x0800efec
 800bca8:	0800efec 	.word	0x0800efec
 800bcac:	0800efec 	.word	0x0800efec
 800bcb0:	0800eff0 	.word	0x0800eff0

0800bcb4 <memset>:
 800bcb4:	4402      	add	r2, r0
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d100      	bne.n	800bcbe <memset+0xa>
 800bcbc:	4770      	bx	lr
 800bcbe:	f803 1b01 	strb.w	r1, [r3], #1
 800bcc2:	e7f9      	b.n	800bcb8 <memset+0x4>

0800bcc4 <__cvt>:
 800bcc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bcc8:	ec55 4b10 	vmov	r4, r5, d0
 800bccc:	2d00      	cmp	r5, #0
 800bcce:	460e      	mov	r6, r1
 800bcd0:	4619      	mov	r1, r3
 800bcd2:	462b      	mov	r3, r5
 800bcd4:	bfbb      	ittet	lt
 800bcd6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bcda:	461d      	movlt	r5, r3
 800bcdc:	2300      	movge	r3, #0
 800bcde:	232d      	movlt	r3, #45	; 0x2d
 800bce0:	700b      	strb	r3, [r1, #0]
 800bce2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bce4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bce8:	4691      	mov	r9, r2
 800bcea:	f023 0820 	bic.w	r8, r3, #32
 800bcee:	bfbc      	itt	lt
 800bcf0:	4622      	movlt	r2, r4
 800bcf2:	4614      	movlt	r4, r2
 800bcf4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bcf8:	d005      	beq.n	800bd06 <__cvt+0x42>
 800bcfa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bcfe:	d100      	bne.n	800bd02 <__cvt+0x3e>
 800bd00:	3601      	adds	r6, #1
 800bd02:	2102      	movs	r1, #2
 800bd04:	e000      	b.n	800bd08 <__cvt+0x44>
 800bd06:	2103      	movs	r1, #3
 800bd08:	ab03      	add	r3, sp, #12
 800bd0a:	9301      	str	r3, [sp, #4]
 800bd0c:	ab02      	add	r3, sp, #8
 800bd0e:	9300      	str	r3, [sp, #0]
 800bd10:	ec45 4b10 	vmov	d0, r4, r5
 800bd14:	4653      	mov	r3, sl
 800bd16:	4632      	mov	r2, r6
 800bd18:	f000 fcea 	bl	800c6f0 <_dtoa_r>
 800bd1c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bd20:	4607      	mov	r7, r0
 800bd22:	d102      	bne.n	800bd2a <__cvt+0x66>
 800bd24:	f019 0f01 	tst.w	r9, #1
 800bd28:	d022      	beq.n	800bd70 <__cvt+0xac>
 800bd2a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bd2e:	eb07 0906 	add.w	r9, r7, r6
 800bd32:	d110      	bne.n	800bd56 <__cvt+0x92>
 800bd34:	783b      	ldrb	r3, [r7, #0]
 800bd36:	2b30      	cmp	r3, #48	; 0x30
 800bd38:	d10a      	bne.n	800bd50 <__cvt+0x8c>
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	4620      	mov	r0, r4
 800bd40:	4629      	mov	r1, r5
 800bd42:	f7f4 fec9 	bl	8000ad8 <__aeabi_dcmpeq>
 800bd46:	b918      	cbnz	r0, 800bd50 <__cvt+0x8c>
 800bd48:	f1c6 0601 	rsb	r6, r6, #1
 800bd4c:	f8ca 6000 	str.w	r6, [sl]
 800bd50:	f8da 3000 	ldr.w	r3, [sl]
 800bd54:	4499      	add	r9, r3
 800bd56:	2200      	movs	r2, #0
 800bd58:	2300      	movs	r3, #0
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	4629      	mov	r1, r5
 800bd5e:	f7f4 febb 	bl	8000ad8 <__aeabi_dcmpeq>
 800bd62:	b108      	cbz	r0, 800bd68 <__cvt+0xa4>
 800bd64:	f8cd 900c 	str.w	r9, [sp, #12]
 800bd68:	2230      	movs	r2, #48	; 0x30
 800bd6a:	9b03      	ldr	r3, [sp, #12]
 800bd6c:	454b      	cmp	r3, r9
 800bd6e:	d307      	bcc.n	800bd80 <__cvt+0xbc>
 800bd70:	9b03      	ldr	r3, [sp, #12]
 800bd72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd74:	1bdb      	subs	r3, r3, r7
 800bd76:	4638      	mov	r0, r7
 800bd78:	6013      	str	r3, [r2, #0]
 800bd7a:	b004      	add	sp, #16
 800bd7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd80:	1c59      	adds	r1, r3, #1
 800bd82:	9103      	str	r1, [sp, #12]
 800bd84:	701a      	strb	r2, [r3, #0]
 800bd86:	e7f0      	b.n	800bd6a <__cvt+0xa6>

0800bd88 <__exponent>:
 800bd88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	2900      	cmp	r1, #0
 800bd8e:	bfb8      	it	lt
 800bd90:	4249      	neglt	r1, r1
 800bd92:	f803 2b02 	strb.w	r2, [r3], #2
 800bd96:	bfb4      	ite	lt
 800bd98:	222d      	movlt	r2, #45	; 0x2d
 800bd9a:	222b      	movge	r2, #43	; 0x2b
 800bd9c:	2909      	cmp	r1, #9
 800bd9e:	7042      	strb	r2, [r0, #1]
 800bda0:	dd2a      	ble.n	800bdf8 <__exponent+0x70>
 800bda2:	f10d 0407 	add.w	r4, sp, #7
 800bda6:	46a4      	mov	ip, r4
 800bda8:	270a      	movs	r7, #10
 800bdaa:	46a6      	mov	lr, r4
 800bdac:	460a      	mov	r2, r1
 800bdae:	fb91 f6f7 	sdiv	r6, r1, r7
 800bdb2:	fb07 1516 	mls	r5, r7, r6, r1
 800bdb6:	3530      	adds	r5, #48	; 0x30
 800bdb8:	2a63      	cmp	r2, #99	; 0x63
 800bdba:	f104 34ff 	add.w	r4, r4, #4294967295
 800bdbe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bdc2:	4631      	mov	r1, r6
 800bdc4:	dcf1      	bgt.n	800bdaa <__exponent+0x22>
 800bdc6:	3130      	adds	r1, #48	; 0x30
 800bdc8:	f1ae 0502 	sub.w	r5, lr, #2
 800bdcc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bdd0:	1c44      	adds	r4, r0, #1
 800bdd2:	4629      	mov	r1, r5
 800bdd4:	4561      	cmp	r1, ip
 800bdd6:	d30a      	bcc.n	800bdee <__exponent+0x66>
 800bdd8:	f10d 0209 	add.w	r2, sp, #9
 800bddc:	eba2 020e 	sub.w	r2, r2, lr
 800bde0:	4565      	cmp	r5, ip
 800bde2:	bf88      	it	hi
 800bde4:	2200      	movhi	r2, #0
 800bde6:	4413      	add	r3, r2
 800bde8:	1a18      	subs	r0, r3, r0
 800bdea:	b003      	add	sp, #12
 800bdec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bdf2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bdf6:	e7ed      	b.n	800bdd4 <__exponent+0x4c>
 800bdf8:	2330      	movs	r3, #48	; 0x30
 800bdfa:	3130      	adds	r1, #48	; 0x30
 800bdfc:	7083      	strb	r3, [r0, #2]
 800bdfe:	70c1      	strb	r1, [r0, #3]
 800be00:	1d03      	adds	r3, r0, #4
 800be02:	e7f1      	b.n	800bde8 <__exponent+0x60>

0800be04 <_printf_float>:
 800be04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be08:	ed2d 8b02 	vpush	{d8}
 800be0c:	b08d      	sub	sp, #52	; 0x34
 800be0e:	460c      	mov	r4, r1
 800be10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800be14:	4616      	mov	r6, r2
 800be16:	461f      	mov	r7, r3
 800be18:	4605      	mov	r5, r0
 800be1a:	f001 fa57 	bl	800d2cc <_localeconv_r>
 800be1e:	f8d0 a000 	ldr.w	sl, [r0]
 800be22:	4650      	mov	r0, sl
 800be24:	f7f4 f9dc 	bl	80001e0 <strlen>
 800be28:	2300      	movs	r3, #0
 800be2a:	930a      	str	r3, [sp, #40]	; 0x28
 800be2c:	6823      	ldr	r3, [r4, #0]
 800be2e:	9305      	str	r3, [sp, #20]
 800be30:	f8d8 3000 	ldr.w	r3, [r8]
 800be34:	f894 b018 	ldrb.w	fp, [r4, #24]
 800be38:	3307      	adds	r3, #7
 800be3a:	f023 0307 	bic.w	r3, r3, #7
 800be3e:	f103 0208 	add.w	r2, r3, #8
 800be42:	f8c8 2000 	str.w	r2, [r8]
 800be46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800be4e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800be52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800be56:	9307      	str	r3, [sp, #28]
 800be58:	f8cd 8018 	str.w	r8, [sp, #24]
 800be5c:	ee08 0a10 	vmov	s16, r0
 800be60:	4b9f      	ldr	r3, [pc, #636]	; (800c0e0 <_printf_float+0x2dc>)
 800be62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be66:	f04f 32ff 	mov.w	r2, #4294967295
 800be6a:	f7f4 fe67 	bl	8000b3c <__aeabi_dcmpun>
 800be6e:	bb88      	cbnz	r0, 800bed4 <_printf_float+0xd0>
 800be70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be74:	4b9a      	ldr	r3, [pc, #616]	; (800c0e0 <_printf_float+0x2dc>)
 800be76:	f04f 32ff 	mov.w	r2, #4294967295
 800be7a:	f7f4 fe41 	bl	8000b00 <__aeabi_dcmple>
 800be7e:	bb48      	cbnz	r0, 800bed4 <_printf_float+0xd0>
 800be80:	2200      	movs	r2, #0
 800be82:	2300      	movs	r3, #0
 800be84:	4640      	mov	r0, r8
 800be86:	4649      	mov	r1, r9
 800be88:	f7f4 fe30 	bl	8000aec <__aeabi_dcmplt>
 800be8c:	b110      	cbz	r0, 800be94 <_printf_float+0x90>
 800be8e:	232d      	movs	r3, #45	; 0x2d
 800be90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be94:	4b93      	ldr	r3, [pc, #588]	; (800c0e4 <_printf_float+0x2e0>)
 800be96:	4894      	ldr	r0, [pc, #592]	; (800c0e8 <_printf_float+0x2e4>)
 800be98:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800be9c:	bf94      	ite	ls
 800be9e:	4698      	movls	r8, r3
 800bea0:	4680      	movhi	r8, r0
 800bea2:	2303      	movs	r3, #3
 800bea4:	6123      	str	r3, [r4, #16]
 800bea6:	9b05      	ldr	r3, [sp, #20]
 800bea8:	f023 0204 	bic.w	r2, r3, #4
 800beac:	6022      	str	r2, [r4, #0]
 800beae:	f04f 0900 	mov.w	r9, #0
 800beb2:	9700      	str	r7, [sp, #0]
 800beb4:	4633      	mov	r3, r6
 800beb6:	aa0b      	add	r2, sp, #44	; 0x2c
 800beb8:	4621      	mov	r1, r4
 800beba:	4628      	mov	r0, r5
 800bebc:	f000 f9d8 	bl	800c270 <_printf_common>
 800bec0:	3001      	adds	r0, #1
 800bec2:	f040 8090 	bne.w	800bfe6 <_printf_float+0x1e2>
 800bec6:	f04f 30ff 	mov.w	r0, #4294967295
 800beca:	b00d      	add	sp, #52	; 0x34
 800becc:	ecbd 8b02 	vpop	{d8}
 800bed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bed4:	4642      	mov	r2, r8
 800bed6:	464b      	mov	r3, r9
 800bed8:	4640      	mov	r0, r8
 800beda:	4649      	mov	r1, r9
 800bedc:	f7f4 fe2e 	bl	8000b3c <__aeabi_dcmpun>
 800bee0:	b140      	cbz	r0, 800bef4 <_printf_float+0xf0>
 800bee2:	464b      	mov	r3, r9
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	bfbc      	itt	lt
 800bee8:	232d      	movlt	r3, #45	; 0x2d
 800beea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800beee:	487f      	ldr	r0, [pc, #508]	; (800c0ec <_printf_float+0x2e8>)
 800bef0:	4b7f      	ldr	r3, [pc, #508]	; (800c0f0 <_printf_float+0x2ec>)
 800bef2:	e7d1      	b.n	800be98 <_printf_float+0x94>
 800bef4:	6863      	ldr	r3, [r4, #4]
 800bef6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800befa:	9206      	str	r2, [sp, #24]
 800befc:	1c5a      	adds	r2, r3, #1
 800befe:	d13f      	bne.n	800bf80 <_printf_float+0x17c>
 800bf00:	2306      	movs	r3, #6
 800bf02:	6063      	str	r3, [r4, #4]
 800bf04:	9b05      	ldr	r3, [sp, #20]
 800bf06:	6861      	ldr	r1, [r4, #4]
 800bf08:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	9303      	str	r3, [sp, #12]
 800bf10:	ab0a      	add	r3, sp, #40	; 0x28
 800bf12:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bf16:	ab09      	add	r3, sp, #36	; 0x24
 800bf18:	ec49 8b10 	vmov	d0, r8, r9
 800bf1c:	9300      	str	r3, [sp, #0]
 800bf1e:	6022      	str	r2, [r4, #0]
 800bf20:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bf24:	4628      	mov	r0, r5
 800bf26:	f7ff fecd 	bl	800bcc4 <__cvt>
 800bf2a:	9b06      	ldr	r3, [sp, #24]
 800bf2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf2e:	2b47      	cmp	r3, #71	; 0x47
 800bf30:	4680      	mov	r8, r0
 800bf32:	d108      	bne.n	800bf46 <_printf_float+0x142>
 800bf34:	1cc8      	adds	r0, r1, #3
 800bf36:	db02      	blt.n	800bf3e <_printf_float+0x13a>
 800bf38:	6863      	ldr	r3, [r4, #4]
 800bf3a:	4299      	cmp	r1, r3
 800bf3c:	dd41      	ble.n	800bfc2 <_printf_float+0x1be>
 800bf3e:	f1ab 0b02 	sub.w	fp, fp, #2
 800bf42:	fa5f fb8b 	uxtb.w	fp, fp
 800bf46:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bf4a:	d820      	bhi.n	800bf8e <_printf_float+0x18a>
 800bf4c:	3901      	subs	r1, #1
 800bf4e:	465a      	mov	r2, fp
 800bf50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bf54:	9109      	str	r1, [sp, #36]	; 0x24
 800bf56:	f7ff ff17 	bl	800bd88 <__exponent>
 800bf5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf5c:	1813      	adds	r3, r2, r0
 800bf5e:	2a01      	cmp	r2, #1
 800bf60:	4681      	mov	r9, r0
 800bf62:	6123      	str	r3, [r4, #16]
 800bf64:	dc02      	bgt.n	800bf6c <_printf_float+0x168>
 800bf66:	6822      	ldr	r2, [r4, #0]
 800bf68:	07d2      	lsls	r2, r2, #31
 800bf6a:	d501      	bpl.n	800bf70 <_printf_float+0x16c>
 800bf6c:	3301      	adds	r3, #1
 800bf6e:	6123      	str	r3, [r4, #16]
 800bf70:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d09c      	beq.n	800beb2 <_printf_float+0xae>
 800bf78:	232d      	movs	r3, #45	; 0x2d
 800bf7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf7e:	e798      	b.n	800beb2 <_printf_float+0xae>
 800bf80:	9a06      	ldr	r2, [sp, #24]
 800bf82:	2a47      	cmp	r2, #71	; 0x47
 800bf84:	d1be      	bne.n	800bf04 <_printf_float+0x100>
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d1bc      	bne.n	800bf04 <_printf_float+0x100>
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	e7b9      	b.n	800bf02 <_printf_float+0xfe>
 800bf8e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bf92:	d118      	bne.n	800bfc6 <_printf_float+0x1c2>
 800bf94:	2900      	cmp	r1, #0
 800bf96:	6863      	ldr	r3, [r4, #4]
 800bf98:	dd0b      	ble.n	800bfb2 <_printf_float+0x1ae>
 800bf9a:	6121      	str	r1, [r4, #16]
 800bf9c:	b913      	cbnz	r3, 800bfa4 <_printf_float+0x1a0>
 800bf9e:	6822      	ldr	r2, [r4, #0]
 800bfa0:	07d0      	lsls	r0, r2, #31
 800bfa2:	d502      	bpl.n	800bfaa <_printf_float+0x1a6>
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	440b      	add	r3, r1
 800bfa8:	6123      	str	r3, [r4, #16]
 800bfaa:	65a1      	str	r1, [r4, #88]	; 0x58
 800bfac:	f04f 0900 	mov.w	r9, #0
 800bfb0:	e7de      	b.n	800bf70 <_printf_float+0x16c>
 800bfb2:	b913      	cbnz	r3, 800bfba <_printf_float+0x1b6>
 800bfb4:	6822      	ldr	r2, [r4, #0]
 800bfb6:	07d2      	lsls	r2, r2, #31
 800bfb8:	d501      	bpl.n	800bfbe <_printf_float+0x1ba>
 800bfba:	3302      	adds	r3, #2
 800bfbc:	e7f4      	b.n	800bfa8 <_printf_float+0x1a4>
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	e7f2      	b.n	800bfa8 <_printf_float+0x1a4>
 800bfc2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bfc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfc8:	4299      	cmp	r1, r3
 800bfca:	db05      	blt.n	800bfd8 <_printf_float+0x1d4>
 800bfcc:	6823      	ldr	r3, [r4, #0]
 800bfce:	6121      	str	r1, [r4, #16]
 800bfd0:	07d8      	lsls	r0, r3, #31
 800bfd2:	d5ea      	bpl.n	800bfaa <_printf_float+0x1a6>
 800bfd4:	1c4b      	adds	r3, r1, #1
 800bfd6:	e7e7      	b.n	800bfa8 <_printf_float+0x1a4>
 800bfd8:	2900      	cmp	r1, #0
 800bfda:	bfd4      	ite	le
 800bfdc:	f1c1 0202 	rsble	r2, r1, #2
 800bfe0:	2201      	movgt	r2, #1
 800bfe2:	4413      	add	r3, r2
 800bfe4:	e7e0      	b.n	800bfa8 <_printf_float+0x1a4>
 800bfe6:	6823      	ldr	r3, [r4, #0]
 800bfe8:	055a      	lsls	r2, r3, #21
 800bfea:	d407      	bmi.n	800bffc <_printf_float+0x1f8>
 800bfec:	6923      	ldr	r3, [r4, #16]
 800bfee:	4642      	mov	r2, r8
 800bff0:	4631      	mov	r1, r6
 800bff2:	4628      	mov	r0, r5
 800bff4:	47b8      	blx	r7
 800bff6:	3001      	adds	r0, #1
 800bff8:	d12c      	bne.n	800c054 <_printf_float+0x250>
 800bffa:	e764      	b.n	800bec6 <_printf_float+0xc2>
 800bffc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c000:	f240 80e0 	bls.w	800c1c4 <_printf_float+0x3c0>
 800c004:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c008:	2200      	movs	r2, #0
 800c00a:	2300      	movs	r3, #0
 800c00c:	f7f4 fd64 	bl	8000ad8 <__aeabi_dcmpeq>
 800c010:	2800      	cmp	r0, #0
 800c012:	d034      	beq.n	800c07e <_printf_float+0x27a>
 800c014:	4a37      	ldr	r2, [pc, #220]	; (800c0f4 <_printf_float+0x2f0>)
 800c016:	2301      	movs	r3, #1
 800c018:	4631      	mov	r1, r6
 800c01a:	4628      	mov	r0, r5
 800c01c:	47b8      	blx	r7
 800c01e:	3001      	adds	r0, #1
 800c020:	f43f af51 	beq.w	800bec6 <_printf_float+0xc2>
 800c024:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c028:	429a      	cmp	r2, r3
 800c02a:	db02      	blt.n	800c032 <_printf_float+0x22e>
 800c02c:	6823      	ldr	r3, [r4, #0]
 800c02e:	07d8      	lsls	r0, r3, #31
 800c030:	d510      	bpl.n	800c054 <_printf_float+0x250>
 800c032:	ee18 3a10 	vmov	r3, s16
 800c036:	4652      	mov	r2, sl
 800c038:	4631      	mov	r1, r6
 800c03a:	4628      	mov	r0, r5
 800c03c:	47b8      	blx	r7
 800c03e:	3001      	adds	r0, #1
 800c040:	f43f af41 	beq.w	800bec6 <_printf_float+0xc2>
 800c044:	f04f 0800 	mov.w	r8, #0
 800c048:	f104 091a 	add.w	r9, r4, #26
 800c04c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c04e:	3b01      	subs	r3, #1
 800c050:	4543      	cmp	r3, r8
 800c052:	dc09      	bgt.n	800c068 <_printf_float+0x264>
 800c054:	6823      	ldr	r3, [r4, #0]
 800c056:	079b      	lsls	r3, r3, #30
 800c058:	f100 8105 	bmi.w	800c266 <_printf_float+0x462>
 800c05c:	68e0      	ldr	r0, [r4, #12]
 800c05e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c060:	4298      	cmp	r0, r3
 800c062:	bfb8      	it	lt
 800c064:	4618      	movlt	r0, r3
 800c066:	e730      	b.n	800beca <_printf_float+0xc6>
 800c068:	2301      	movs	r3, #1
 800c06a:	464a      	mov	r2, r9
 800c06c:	4631      	mov	r1, r6
 800c06e:	4628      	mov	r0, r5
 800c070:	47b8      	blx	r7
 800c072:	3001      	adds	r0, #1
 800c074:	f43f af27 	beq.w	800bec6 <_printf_float+0xc2>
 800c078:	f108 0801 	add.w	r8, r8, #1
 800c07c:	e7e6      	b.n	800c04c <_printf_float+0x248>
 800c07e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c080:	2b00      	cmp	r3, #0
 800c082:	dc39      	bgt.n	800c0f8 <_printf_float+0x2f4>
 800c084:	4a1b      	ldr	r2, [pc, #108]	; (800c0f4 <_printf_float+0x2f0>)
 800c086:	2301      	movs	r3, #1
 800c088:	4631      	mov	r1, r6
 800c08a:	4628      	mov	r0, r5
 800c08c:	47b8      	blx	r7
 800c08e:	3001      	adds	r0, #1
 800c090:	f43f af19 	beq.w	800bec6 <_printf_float+0xc2>
 800c094:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c098:	4313      	orrs	r3, r2
 800c09a:	d102      	bne.n	800c0a2 <_printf_float+0x29e>
 800c09c:	6823      	ldr	r3, [r4, #0]
 800c09e:	07d9      	lsls	r1, r3, #31
 800c0a0:	d5d8      	bpl.n	800c054 <_printf_float+0x250>
 800c0a2:	ee18 3a10 	vmov	r3, s16
 800c0a6:	4652      	mov	r2, sl
 800c0a8:	4631      	mov	r1, r6
 800c0aa:	4628      	mov	r0, r5
 800c0ac:	47b8      	blx	r7
 800c0ae:	3001      	adds	r0, #1
 800c0b0:	f43f af09 	beq.w	800bec6 <_printf_float+0xc2>
 800c0b4:	f04f 0900 	mov.w	r9, #0
 800c0b8:	f104 0a1a 	add.w	sl, r4, #26
 800c0bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0be:	425b      	negs	r3, r3
 800c0c0:	454b      	cmp	r3, r9
 800c0c2:	dc01      	bgt.n	800c0c8 <_printf_float+0x2c4>
 800c0c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0c6:	e792      	b.n	800bfee <_printf_float+0x1ea>
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	4652      	mov	r2, sl
 800c0cc:	4631      	mov	r1, r6
 800c0ce:	4628      	mov	r0, r5
 800c0d0:	47b8      	blx	r7
 800c0d2:	3001      	adds	r0, #1
 800c0d4:	f43f aef7 	beq.w	800bec6 <_printf_float+0xc2>
 800c0d8:	f109 0901 	add.w	r9, r9, #1
 800c0dc:	e7ee      	b.n	800c0bc <_printf_float+0x2b8>
 800c0de:	bf00      	nop
 800c0e0:	7fefffff 	.word	0x7fefffff
 800c0e4:	0800ec10 	.word	0x0800ec10
 800c0e8:	0800ec14 	.word	0x0800ec14
 800c0ec:	0800ec1c 	.word	0x0800ec1c
 800c0f0:	0800ec18 	.word	0x0800ec18
 800c0f4:	0800ec20 	.word	0x0800ec20
 800c0f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	bfa8      	it	ge
 800c100:	461a      	movge	r2, r3
 800c102:	2a00      	cmp	r2, #0
 800c104:	4691      	mov	r9, r2
 800c106:	dc37      	bgt.n	800c178 <_printf_float+0x374>
 800c108:	f04f 0b00 	mov.w	fp, #0
 800c10c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c110:	f104 021a 	add.w	r2, r4, #26
 800c114:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c116:	9305      	str	r3, [sp, #20]
 800c118:	eba3 0309 	sub.w	r3, r3, r9
 800c11c:	455b      	cmp	r3, fp
 800c11e:	dc33      	bgt.n	800c188 <_printf_float+0x384>
 800c120:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c124:	429a      	cmp	r2, r3
 800c126:	db3b      	blt.n	800c1a0 <_printf_float+0x39c>
 800c128:	6823      	ldr	r3, [r4, #0]
 800c12a:	07da      	lsls	r2, r3, #31
 800c12c:	d438      	bmi.n	800c1a0 <_printf_float+0x39c>
 800c12e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c130:	9a05      	ldr	r2, [sp, #20]
 800c132:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c134:	1a9a      	subs	r2, r3, r2
 800c136:	eba3 0901 	sub.w	r9, r3, r1
 800c13a:	4591      	cmp	r9, r2
 800c13c:	bfa8      	it	ge
 800c13e:	4691      	movge	r9, r2
 800c140:	f1b9 0f00 	cmp.w	r9, #0
 800c144:	dc35      	bgt.n	800c1b2 <_printf_float+0x3ae>
 800c146:	f04f 0800 	mov.w	r8, #0
 800c14a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c14e:	f104 0a1a 	add.w	sl, r4, #26
 800c152:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c156:	1a9b      	subs	r3, r3, r2
 800c158:	eba3 0309 	sub.w	r3, r3, r9
 800c15c:	4543      	cmp	r3, r8
 800c15e:	f77f af79 	ble.w	800c054 <_printf_float+0x250>
 800c162:	2301      	movs	r3, #1
 800c164:	4652      	mov	r2, sl
 800c166:	4631      	mov	r1, r6
 800c168:	4628      	mov	r0, r5
 800c16a:	47b8      	blx	r7
 800c16c:	3001      	adds	r0, #1
 800c16e:	f43f aeaa 	beq.w	800bec6 <_printf_float+0xc2>
 800c172:	f108 0801 	add.w	r8, r8, #1
 800c176:	e7ec      	b.n	800c152 <_printf_float+0x34e>
 800c178:	4613      	mov	r3, r2
 800c17a:	4631      	mov	r1, r6
 800c17c:	4642      	mov	r2, r8
 800c17e:	4628      	mov	r0, r5
 800c180:	47b8      	blx	r7
 800c182:	3001      	adds	r0, #1
 800c184:	d1c0      	bne.n	800c108 <_printf_float+0x304>
 800c186:	e69e      	b.n	800bec6 <_printf_float+0xc2>
 800c188:	2301      	movs	r3, #1
 800c18a:	4631      	mov	r1, r6
 800c18c:	4628      	mov	r0, r5
 800c18e:	9205      	str	r2, [sp, #20]
 800c190:	47b8      	blx	r7
 800c192:	3001      	adds	r0, #1
 800c194:	f43f ae97 	beq.w	800bec6 <_printf_float+0xc2>
 800c198:	9a05      	ldr	r2, [sp, #20]
 800c19a:	f10b 0b01 	add.w	fp, fp, #1
 800c19e:	e7b9      	b.n	800c114 <_printf_float+0x310>
 800c1a0:	ee18 3a10 	vmov	r3, s16
 800c1a4:	4652      	mov	r2, sl
 800c1a6:	4631      	mov	r1, r6
 800c1a8:	4628      	mov	r0, r5
 800c1aa:	47b8      	blx	r7
 800c1ac:	3001      	adds	r0, #1
 800c1ae:	d1be      	bne.n	800c12e <_printf_float+0x32a>
 800c1b0:	e689      	b.n	800bec6 <_printf_float+0xc2>
 800c1b2:	9a05      	ldr	r2, [sp, #20]
 800c1b4:	464b      	mov	r3, r9
 800c1b6:	4442      	add	r2, r8
 800c1b8:	4631      	mov	r1, r6
 800c1ba:	4628      	mov	r0, r5
 800c1bc:	47b8      	blx	r7
 800c1be:	3001      	adds	r0, #1
 800c1c0:	d1c1      	bne.n	800c146 <_printf_float+0x342>
 800c1c2:	e680      	b.n	800bec6 <_printf_float+0xc2>
 800c1c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1c6:	2a01      	cmp	r2, #1
 800c1c8:	dc01      	bgt.n	800c1ce <_printf_float+0x3ca>
 800c1ca:	07db      	lsls	r3, r3, #31
 800c1cc:	d538      	bpl.n	800c240 <_printf_float+0x43c>
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	4642      	mov	r2, r8
 800c1d2:	4631      	mov	r1, r6
 800c1d4:	4628      	mov	r0, r5
 800c1d6:	47b8      	blx	r7
 800c1d8:	3001      	adds	r0, #1
 800c1da:	f43f ae74 	beq.w	800bec6 <_printf_float+0xc2>
 800c1de:	ee18 3a10 	vmov	r3, s16
 800c1e2:	4652      	mov	r2, sl
 800c1e4:	4631      	mov	r1, r6
 800c1e6:	4628      	mov	r0, r5
 800c1e8:	47b8      	blx	r7
 800c1ea:	3001      	adds	r0, #1
 800c1ec:	f43f ae6b 	beq.w	800bec6 <_printf_float+0xc2>
 800c1f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	f7f4 fc6e 	bl	8000ad8 <__aeabi_dcmpeq>
 800c1fc:	b9d8      	cbnz	r0, 800c236 <_printf_float+0x432>
 800c1fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c200:	f108 0201 	add.w	r2, r8, #1
 800c204:	3b01      	subs	r3, #1
 800c206:	4631      	mov	r1, r6
 800c208:	4628      	mov	r0, r5
 800c20a:	47b8      	blx	r7
 800c20c:	3001      	adds	r0, #1
 800c20e:	d10e      	bne.n	800c22e <_printf_float+0x42a>
 800c210:	e659      	b.n	800bec6 <_printf_float+0xc2>
 800c212:	2301      	movs	r3, #1
 800c214:	4652      	mov	r2, sl
 800c216:	4631      	mov	r1, r6
 800c218:	4628      	mov	r0, r5
 800c21a:	47b8      	blx	r7
 800c21c:	3001      	adds	r0, #1
 800c21e:	f43f ae52 	beq.w	800bec6 <_printf_float+0xc2>
 800c222:	f108 0801 	add.w	r8, r8, #1
 800c226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c228:	3b01      	subs	r3, #1
 800c22a:	4543      	cmp	r3, r8
 800c22c:	dcf1      	bgt.n	800c212 <_printf_float+0x40e>
 800c22e:	464b      	mov	r3, r9
 800c230:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c234:	e6dc      	b.n	800bff0 <_printf_float+0x1ec>
 800c236:	f04f 0800 	mov.w	r8, #0
 800c23a:	f104 0a1a 	add.w	sl, r4, #26
 800c23e:	e7f2      	b.n	800c226 <_printf_float+0x422>
 800c240:	2301      	movs	r3, #1
 800c242:	4642      	mov	r2, r8
 800c244:	e7df      	b.n	800c206 <_printf_float+0x402>
 800c246:	2301      	movs	r3, #1
 800c248:	464a      	mov	r2, r9
 800c24a:	4631      	mov	r1, r6
 800c24c:	4628      	mov	r0, r5
 800c24e:	47b8      	blx	r7
 800c250:	3001      	adds	r0, #1
 800c252:	f43f ae38 	beq.w	800bec6 <_printf_float+0xc2>
 800c256:	f108 0801 	add.w	r8, r8, #1
 800c25a:	68e3      	ldr	r3, [r4, #12]
 800c25c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c25e:	1a5b      	subs	r3, r3, r1
 800c260:	4543      	cmp	r3, r8
 800c262:	dcf0      	bgt.n	800c246 <_printf_float+0x442>
 800c264:	e6fa      	b.n	800c05c <_printf_float+0x258>
 800c266:	f04f 0800 	mov.w	r8, #0
 800c26a:	f104 0919 	add.w	r9, r4, #25
 800c26e:	e7f4      	b.n	800c25a <_printf_float+0x456>

0800c270 <_printf_common>:
 800c270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c274:	4616      	mov	r6, r2
 800c276:	4699      	mov	r9, r3
 800c278:	688a      	ldr	r2, [r1, #8]
 800c27a:	690b      	ldr	r3, [r1, #16]
 800c27c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c280:	4293      	cmp	r3, r2
 800c282:	bfb8      	it	lt
 800c284:	4613      	movlt	r3, r2
 800c286:	6033      	str	r3, [r6, #0]
 800c288:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c28c:	4607      	mov	r7, r0
 800c28e:	460c      	mov	r4, r1
 800c290:	b10a      	cbz	r2, 800c296 <_printf_common+0x26>
 800c292:	3301      	adds	r3, #1
 800c294:	6033      	str	r3, [r6, #0]
 800c296:	6823      	ldr	r3, [r4, #0]
 800c298:	0699      	lsls	r1, r3, #26
 800c29a:	bf42      	ittt	mi
 800c29c:	6833      	ldrmi	r3, [r6, #0]
 800c29e:	3302      	addmi	r3, #2
 800c2a0:	6033      	strmi	r3, [r6, #0]
 800c2a2:	6825      	ldr	r5, [r4, #0]
 800c2a4:	f015 0506 	ands.w	r5, r5, #6
 800c2a8:	d106      	bne.n	800c2b8 <_printf_common+0x48>
 800c2aa:	f104 0a19 	add.w	sl, r4, #25
 800c2ae:	68e3      	ldr	r3, [r4, #12]
 800c2b0:	6832      	ldr	r2, [r6, #0]
 800c2b2:	1a9b      	subs	r3, r3, r2
 800c2b4:	42ab      	cmp	r3, r5
 800c2b6:	dc26      	bgt.n	800c306 <_printf_common+0x96>
 800c2b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c2bc:	1e13      	subs	r3, r2, #0
 800c2be:	6822      	ldr	r2, [r4, #0]
 800c2c0:	bf18      	it	ne
 800c2c2:	2301      	movne	r3, #1
 800c2c4:	0692      	lsls	r2, r2, #26
 800c2c6:	d42b      	bmi.n	800c320 <_printf_common+0xb0>
 800c2c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c2cc:	4649      	mov	r1, r9
 800c2ce:	4638      	mov	r0, r7
 800c2d0:	47c0      	blx	r8
 800c2d2:	3001      	adds	r0, #1
 800c2d4:	d01e      	beq.n	800c314 <_printf_common+0xa4>
 800c2d6:	6823      	ldr	r3, [r4, #0]
 800c2d8:	68e5      	ldr	r5, [r4, #12]
 800c2da:	6832      	ldr	r2, [r6, #0]
 800c2dc:	f003 0306 	and.w	r3, r3, #6
 800c2e0:	2b04      	cmp	r3, #4
 800c2e2:	bf08      	it	eq
 800c2e4:	1aad      	subeq	r5, r5, r2
 800c2e6:	68a3      	ldr	r3, [r4, #8]
 800c2e8:	6922      	ldr	r2, [r4, #16]
 800c2ea:	bf0c      	ite	eq
 800c2ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c2f0:	2500      	movne	r5, #0
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	bfc4      	itt	gt
 800c2f6:	1a9b      	subgt	r3, r3, r2
 800c2f8:	18ed      	addgt	r5, r5, r3
 800c2fa:	2600      	movs	r6, #0
 800c2fc:	341a      	adds	r4, #26
 800c2fe:	42b5      	cmp	r5, r6
 800c300:	d11a      	bne.n	800c338 <_printf_common+0xc8>
 800c302:	2000      	movs	r0, #0
 800c304:	e008      	b.n	800c318 <_printf_common+0xa8>
 800c306:	2301      	movs	r3, #1
 800c308:	4652      	mov	r2, sl
 800c30a:	4649      	mov	r1, r9
 800c30c:	4638      	mov	r0, r7
 800c30e:	47c0      	blx	r8
 800c310:	3001      	adds	r0, #1
 800c312:	d103      	bne.n	800c31c <_printf_common+0xac>
 800c314:	f04f 30ff 	mov.w	r0, #4294967295
 800c318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c31c:	3501      	adds	r5, #1
 800c31e:	e7c6      	b.n	800c2ae <_printf_common+0x3e>
 800c320:	18e1      	adds	r1, r4, r3
 800c322:	1c5a      	adds	r2, r3, #1
 800c324:	2030      	movs	r0, #48	; 0x30
 800c326:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c32a:	4422      	add	r2, r4
 800c32c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c330:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c334:	3302      	adds	r3, #2
 800c336:	e7c7      	b.n	800c2c8 <_printf_common+0x58>
 800c338:	2301      	movs	r3, #1
 800c33a:	4622      	mov	r2, r4
 800c33c:	4649      	mov	r1, r9
 800c33e:	4638      	mov	r0, r7
 800c340:	47c0      	blx	r8
 800c342:	3001      	adds	r0, #1
 800c344:	d0e6      	beq.n	800c314 <_printf_common+0xa4>
 800c346:	3601      	adds	r6, #1
 800c348:	e7d9      	b.n	800c2fe <_printf_common+0x8e>
	...

0800c34c <_printf_i>:
 800c34c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c350:	7e0f      	ldrb	r7, [r1, #24]
 800c352:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c354:	2f78      	cmp	r7, #120	; 0x78
 800c356:	4691      	mov	r9, r2
 800c358:	4680      	mov	r8, r0
 800c35a:	460c      	mov	r4, r1
 800c35c:	469a      	mov	sl, r3
 800c35e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c362:	d807      	bhi.n	800c374 <_printf_i+0x28>
 800c364:	2f62      	cmp	r7, #98	; 0x62
 800c366:	d80a      	bhi.n	800c37e <_printf_i+0x32>
 800c368:	2f00      	cmp	r7, #0
 800c36a:	f000 80d8 	beq.w	800c51e <_printf_i+0x1d2>
 800c36e:	2f58      	cmp	r7, #88	; 0x58
 800c370:	f000 80a3 	beq.w	800c4ba <_printf_i+0x16e>
 800c374:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c378:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c37c:	e03a      	b.n	800c3f4 <_printf_i+0xa8>
 800c37e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c382:	2b15      	cmp	r3, #21
 800c384:	d8f6      	bhi.n	800c374 <_printf_i+0x28>
 800c386:	a101      	add	r1, pc, #4	; (adr r1, 800c38c <_printf_i+0x40>)
 800c388:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c38c:	0800c3e5 	.word	0x0800c3e5
 800c390:	0800c3f9 	.word	0x0800c3f9
 800c394:	0800c375 	.word	0x0800c375
 800c398:	0800c375 	.word	0x0800c375
 800c39c:	0800c375 	.word	0x0800c375
 800c3a0:	0800c375 	.word	0x0800c375
 800c3a4:	0800c3f9 	.word	0x0800c3f9
 800c3a8:	0800c375 	.word	0x0800c375
 800c3ac:	0800c375 	.word	0x0800c375
 800c3b0:	0800c375 	.word	0x0800c375
 800c3b4:	0800c375 	.word	0x0800c375
 800c3b8:	0800c505 	.word	0x0800c505
 800c3bc:	0800c429 	.word	0x0800c429
 800c3c0:	0800c4e7 	.word	0x0800c4e7
 800c3c4:	0800c375 	.word	0x0800c375
 800c3c8:	0800c375 	.word	0x0800c375
 800c3cc:	0800c527 	.word	0x0800c527
 800c3d0:	0800c375 	.word	0x0800c375
 800c3d4:	0800c429 	.word	0x0800c429
 800c3d8:	0800c375 	.word	0x0800c375
 800c3dc:	0800c375 	.word	0x0800c375
 800c3e0:	0800c4ef 	.word	0x0800c4ef
 800c3e4:	682b      	ldr	r3, [r5, #0]
 800c3e6:	1d1a      	adds	r2, r3, #4
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	602a      	str	r2, [r5, #0]
 800c3ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	e0a3      	b.n	800c540 <_printf_i+0x1f4>
 800c3f8:	6820      	ldr	r0, [r4, #0]
 800c3fa:	6829      	ldr	r1, [r5, #0]
 800c3fc:	0606      	lsls	r6, r0, #24
 800c3fe:	f101 0304 	add.w	r3, r1, #4
 800c402:	d50a      	bpl.n	800c41a <_printf_i+0xce>
 800c404:	680e      	ldr	r6, [r1, #0]
 800c406:	602b      	str	r3, [r5, #0]
 800c408:	2e00      	cmp	r6, #0
 800c40a:	da03      	bge.n	800c414 <_printf_i+0xc8>
 800c40c:	232d      	movs	r3, #45	; 0x2d
 800c40e:	4276      	negs	r6, r6
 800c410:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c414:	485e      	ldr	r0, [pc, #376]	; (800c590 <_printf_i+0x244>)
 800c416:	230a      	movs	r3, #10
 800c418:	e019      	b.n	800c44e <_printf_i+0x102>
 800c41a:	680e      	ldr	r6, [r1, #0]
 800c41c:	602b      	str	r3, [r5, #0]
 800c41e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c422:	bf18      	it	ne
 800c424:	b236      	sxthne	r6, r6
 800c426:	e7ef      	b.n	800c408 <_printf_i+0xbc>
 800c428:	682b      	ldr	r3, [r5, #0]
 800c42a:	6820      	ldr	r0, [r4, #0]
 800c42c:	1d19      	adds	r1, r3, #4
 800c42e:	6029      	str	r1, [r5, #0]
 800c430:	0601      	lsls	r1, r0, #24
 800c432:	d501      	bpl.n	800c438 <_printf_i+0xec>
 800c434:	681e      	ldr	r6, [r3, #0]
 800c436:	e002      	b.n	800c43e <_printf_i+0xf2>
 800c438:	0646      	lsls	r6, r0, #25
 800c43a:	d5fb      	bpl.n	800c434 <_printf_i+0xe8>
 800c43c:	881e      	ldrh	r6, [r3, #0]
 800c43e:	4854      	ldr	r0, [pc, #336]	; (800c590 <_printf_i+0x244>)
 800c440:	2f6f      	cmp	r7, #111	; 0x6f
 800c442:	bf0c      	ite	eq
 800c444:	2308      	moveq	r3, #8
 800c446:	230a      	movne	r3, #10
 800c448:	2100      	movs	r1, #0
 800c44a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c44e:	6865      	ldr	r5, [r4, #4]
 800c450:	60a5      	str	r5, [r4, #8]
 800c452:	2d00      	cmp	r5, #0
 800c454:	bfa2      	ittt	ge
 800c456:	6821      	ldrge	r1, [r4, #0]
 800c458:	f021 0104 	bicge.w	r1, r1, #4
 800c45c:	6021      	strge	r1, [r4, #0]
 800c45e:	b90e      	cbnz	r6, 800c464 <_printf_i+0x118>
 800c460:	2d00      	cmp	r5, #0
 800c462:	d04d      	beq.n	800c500 <_printf_i+0x1b4>
 800c464:	4615      	mov	r5, r2
 800c466:	fbb6 f1f3 	udiv	r1, r6, r3
 800c46a:	fb03 6711 	mls	r7, r3, r1, r6
 800c46e:	5dc7      	ldrb	r7, [r0, r7]
 800c470:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c474:	4637      	mov	r7, r6
 800c476:	42bb      	cmp	r3, r7
 800c478:	460e      	mov	r6, r1
 800c47a:	d9f4      	bls.n	800c466 <_printf_i+0x11a>
 800c47c:	2b08      	cmp	r3, #8
 800c47e:	d10b      	bne.n	800c498 <_printf_i+0x14c>
 800c480:	6823      	ldr	r3, [r4, #0]
 800c482:	07de      	lsls	r6, r3, #31
 800c484:	d508      	bpl.n	800c498 <_printf_i+0x14c>
 800c486:	6923      	ldr	r3, [r4, #16]
 800c488:	6861      	ldr	r1, [r4, #4]
 800c48a:	4299      	cmp	r1, r3
 800c48c:	bfde      	ittt	le
 800c48e:	2330      	movle	r3, #48	; 0x30
 800c490:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c494:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c498:	1b52      	subs	r2, r2, r5
 800c49a:	6122      	str	r2, [r4, #16]
 800c49c:	f8cd a000 	str.w	sl, [sp]
 800c4a0:	464b      	mov	r3, r9
 800c4a2:	aa03      	add	r2, sp, #12
 800c4a4:	4621      	mov	r1, r4
 800c4a6:	4640      	mov	r0, r8
 800c4a8:	f7ff fee2 	bl	800c270 <_printf_common>
 800c4ac:	3001      	adds	r0, #1
 800c4ae:	d14c      	bne.n	800c54a <_printf_i+0x1fe>
 800c4b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4b4:	b004      	add	sp, #16
 800c4b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4ba:	4835      	ldr	r0, [pc, #212]	; (800c590 <_printf_i+0x244>)
 800c4bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c4c0:	6829      	ldr	r1, [r5, #0]
 800c4c2:	6823      	ldr	r3, [r4, #0]
 800c4c4:	f851 6b04 	ldr.w	r6, [r1], #4
 800c4c8:	6029      	str	r1, [r5, #0]
 800c4ca:	061d      	lsls	r5, r3, #24
 800c4cc:	d514      	bpl.n	800c4f8 <_printf_i+0x1ac>
 800c4ce:	07df      	lsls	r7, r3, #31
 800c4d0:	bf44      	itt	mi
 800c4d2:	f043 0320 	orrmi.w	r3, r3, #32
 800c4d6:	6023      	strmi	r3, [r4, #0]
 800c4d8:	b91e      	cbnz	r6, 800c4e2 <_printf_i+0x196>
 800c4da:	6823      	ldr	r3, [r4, #0]
 800c4dc:	f023 0320 	bic.w	r3, r3, #32
 800c4e0:	6023      	str	r3, [r4, #0]
 800c4e2:	2310      	movs	r3, #16
 800c4e4:	e7b0      	b.n	800c448 <_printf_i+0xfc>
 800c4e6:	6823      	ldr	r3, [r4, #0]
 800c4e8:	f043 0320 	orr.w	r3, r3, #32
 800c4ec:	6023      	str	r3, [r4, #0]
 800c4ee:	2378      	movs	r3, #120	; 0x78
 800c4f0:	4828      	ldr	r0, [pc, #160]	; (800c594 <_printf_i+0x248>)
 800c4f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c4f6:	e7e3      	b.n	800c4c0 <_printf_i+0x174>
 800c4f8:	0659      	lsls	r1, r3, #25
 800c4fa:	bf48      	it	mi
 800c4fc:	b2b6      	uxthmi	r6, r6
 800c4fe:	e7e6      	b.n	800c4ce <_printf_i+0x182>
 800c500:	4615      	mov	r5, r2
 800c502:	e7bb      	b.n	800c47c <_printf_i+0x130>
 800c504:	682b      	ldr	r3, [r5, #0]
 800c506:	6826      	ldr	r6, [r4, #0]
 800c508:	6961      	ldr	r1, [r4, #20]
 800c50a:	1d18      	adds	r0, r3, #4
 800c50c:	6028      	str	r0, [r5, #0]
 800c50e:	0635      	lsls	r5, r6, #24
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	d501      	bpl.n	800c518 <_printf_i+0x1cc>
 800c514:	6019      	str	r1, [r3, #0]
 800c516:	e002      	b.n	800c51e <_printf_i+0x1d2>
 800c518:	0670      	lsls	r0, r6, #25
 800c51a:	d5fb      	bpl.n	800c514 <_printf_i+0x1c8>
 800c51c:	8019      	strh	r1, [r3, #0]
 800c51e:	2300      	movs	r3, #0
 800c520:	6123      	str	r3, [r4, #16]
 800c522:	4615      	mov	r5, r2
 800c524:	e7ba      	b.n	800c49c <_printf_i+0x150>
 800c526:	682b      	ldr	r3, [r5, #0]
 800c528:	1d1a      	adds	r2, r3, #4
 800c52a:	602a      	str	r2, [r5, #0]
 800c52c:	681d      	ldr	r5, [r3, #0]
 800c52e:	6862      	ldr	r2, [r4, #4]
 800c530:	2100      	movs	r1, #0
 800c532:	4628      	mov	r0, r5
 800c534:	f7f3 fe5c 	bl	80001f0 <memchr>
 800c538:	b108      	cbz	r0, 800c53e <_printf_i+0x1f2>
 800c53a:	1b40      	subs	r0, r0, r5
 800c53c:	6060      	str	r0, [r4, #4]
 800c53e:	6863      	ldr	r3, [r4, #4]
 800c540:	6123      	str	r3, [r4, #16]
 800c542:	2300      	movs	r3, #0
 800c544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c548:	e7a8      	b.n	800c49c <_printf_i+0x150>
 800c54a:	6923      	ldr	r3, [r4, #16]
 800c54c:	462a      	mov	r2, r5
 800c54e:	4649      	mov	r1, r9
 800c550:	4640      	mov	r0, r8
 800c552:	47d0      	blx	sl
 800c554:	3001      	adds	r0, #1
 800c556:	d0ab      	beq.n	800c4b0 <_printf_i+0x164>
 800c558:	6823      	ldr	r3, [r4, #0]
 800c55a:	079b      	lsls	r3, r3, #30
 800c55c:	d413      	bmi.n	800c586 <_printf_i+0x23a>
 800c55e:	68e0      	ldr	r0, [r4, #12]
 800c560:	9b03      	ldr	r3, [sp, #12]
 800c562:	4298      	cmp	r0, r3
 800c564:	bfb8      	it	lt
 800c566:	4618      	movlt	r0, r3
 800c568:	e7a4      	b.n	800c4b4 <_printf_i+0x168>
 800c56a:	2301      	movs	r3, #1
 800c56c:	4632      	mov	r2, r6
 800c56e:	4649      	mov	r1, r9
 800c570:	4640      	mov	r0, r8
 800c572:	47d0      	blx	sl
 800c574:	3001      	adds	r0, #1
 800c576:	d09b      	beq.n	800c4b0 <_printf_i+0x164>
 800c578:	3501      	adds	r5, #1
 800c57a:	68e3      	ldr	r3, [r4, #12]
 800c57c:	9903      	ldr	r1, [sp, #12]
 800c57e:	1a5b      	subs	r3, r3, r1
 800c580:	42ab      	cmp	r3, r5
 800c582:	dcf2      	bgt.n	800c56a <_printf_i+0x21e>
 800c584:	e7eb      	b.n	800c55e <_printf_i+0x212>
 800c586:	2500      	movs	r5, #0
 800c588:	f104 0619 	add.w	r6, r4, #25
 800c58c:	e7f5      	b.n	800c57a <_printf_i+0x22e>
 800c58e:	bf00      	nop
 800c590:	0800ec22 	.word	0x0800ec22
 800c594:	0800ec33 	.word	0x0800ec33

0800c598 <siprintf>:
 800c598:	b40e      	push	{r1, r2, r3}
 800c59a:	b500      	push	{lr}
 800c59c:	b09c      	sub	sp, #112	; 0x70
 800c59e:	ab1d      	add	r3, sp, #116	; 0x74
 800c5a0:	9002      	str	r0, [sp, #8]
 800c5a2:	9006      	str	r0, [sp, #24]
 800c5a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c5a8:	4809      	ldr	r0, [pc, #36]	; (800c5d0 <siprintf+0x38>)
 800c5aa:	9107      	str	r1, [sp, #28]
 800c5ac:	9104      	str	r1, [sp, #16]
 800c5ae:	4909      	ldr	r1, [pc, #36]	; (800c5d4 <siprintf+0x3c>)
 800c5b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5b4:	9105      	str	r1, [sp, #20]
 800c5b6:	6800      	ldr	r0, [r0, #0]
 800c5b8:	9301      	str	r3, [sp, #4]
 800c5ba:	a902      	add	r1, sp, #8
 800c5bc:	f001 fb76 	bl	800dcac <_svfiprintf_r>
 800c5c0:	9b02      	ldr	r3, [sp, #8]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	701a      	strb	r2, [r3, #0]
 800c5c6:	b01c      	add	sp, #112	; 0x70
 800c5c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5cc:	b003      	add	sp, #12
 800c5ce:	4770      	bx	lr
 800c5d0:	20000114 	.word	0x20000114
 800c5d4:	ffff0208 	.word	0xffff0208

0800c5d8 <quorem>:
 800c5d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5dc:	6903      	ldr	r3, [r0, #16]
 800c5de:	690c      	ldr	r4, [r1, #16]
 800c5e0:	42a3      	cmp	r3, r4
 800c5e2:	4607      	mov	r7, r0
 800c5e4:	f2c0 8081 	blt.w	800c6ea <quorem+0x112>
 800c5e8:	3c01      	subs	r4, #1
 800c5ea:	f101 0814 	add.w	r8, r1, #20
 800c5ee:	f100 0514 	add.w	r5, r0, #20
 800c5f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c5f6:	9301      	str	r3, [sp, #4]
 800c5f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c5fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c600:	3301      	adds	r3, #1
 800c602:	429a      	cmp	r2, r3
 800c604:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c608:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c60c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c610:	d331      	bcc.n	800c676 <quorem+0x9e>
 800c612:	f04f 0e00 	mov.w	lr, #0
 800c616:	4640      	mov	r0, r8
 800c618:	46ac      	mov	ip, r5
 800c61a:	46f2      	mov	sl, lr
 800c61c:	f850 2b04 	ldr.w	r2, [r0], #4
 800c620:	b293      	uxth	r3, r2
 800c622:	fb06 e303 	mla	r3, r6, r3, lr
 800c626:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c62a:	b29b      	uxth	r3, r3
 800c62c:	ebaa 0303 	sub.w	r3, sl, r3
 800c630:	f8dc a000 	ldr.w	sl, [ip]
 800c634:	0c12      	lsrs	r2, r2, #16
 800c636:	fa13 f38a 	uxtah	r3, r3, sl
 800c63a:	fb06 e202 	mla	r2, r6, r2, lr
 800c63e:	9300      	str	r3, [sp, #0]
 800c640:	9b00      	ldr	r3, [sp, #0]
 800c642:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c646:	b292      	uxth	r2, r2
 800c648:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c64c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c650:	f8bd 3000 	ldrh.w	r3, [sp]
 800c654:	4581      	cmp	r9, r0
 800c656:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c65a:	f84c 3b04 	str.w	r3, [ip], #4
 800c65e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c662:	d2db      	bcs.n	800c61c <quorem+0x44>
 800c664:	f855 300b 	ldr.w	r3, [r5, fp]
 800c668:	b92b      	cbnz	r3, 800c676 <quorem+0x9e>
 800c66a:	9b01      	ldr	r3, [sp, #4]
 800c66c:	3b04      	subs	r3, #4
 800c66e:	429d      	cmp	r5, r3
 800c670:	461a      	mov	r2, r3
 800c672:	d32e      	bcc.n	800c6d2 <quorem+0xfa>
 800c674:	613c      	str	r4, [r7, #16]
 800c676:	4638      	mov	r0, r7
 800c678:	f001 f8c4 	bl	800d804 <__mcmp>
 800c67c:	2800      	cmp	r0, #0
 800c67e:	db24      	blt.n	800c6ca <quorem+0xf2>
 800c680:	3601      	adds	r6, #1
 800c682:	4628      	mov	r0, r5
 800c684:	f04f 0c00 	mov.w	ip, #0
 800c688:	f858 2b04 	ldr.w	r2, [r8], #4
 800c68c:	f8d0 e000 	ldr.w	lr, [r0]
 800c690:	b293      	uxth	r3, r2
 800c692:	ebac 0303 	sub.w	r3, ip, r3
 800c696:	0c12      	lsrs	r2, r2, #16
 800c698:	fa13 f38e 	uxtah	r3, r3, lr
 800c69c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c6a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c6a4:	b29b      	uxth	r3, r3
 800c6a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6aa:	45c1      	cmp	r9, r8
 800c6ac:	f840 3b04 	str.w	r3, [r0], #4
 800c6b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c6b4:	d2e8      	bcs.n	800c688 <quorem+0xb0>
 800c6b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c6ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c6be:	b922      	cbnz	r2, 800c6ca <quorem+0xf2>
 800c6c0:	3b04      	subs	r3, #4
 800c6c2:	429d      	cmp	r5, r3
 800c6c4:	461a      	mov	r2, r3
 800c6c6:	d30a      	bcc.n	800c6de <quorem+0x106>
 800c6c8:	613c      	str	r4, [r7, #16]
 800c6ca:	4630      	mov	r0, r6
 800c6cc:	b003      	add	sp, #12
 800c6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6d2:	6812      	ldr	r2, [r2, #0]
 800c6d4:	3b04      	subs	r3, #4
 800c6d6:	2a00      	cmp	r2, #0
 800c6d8:	d1cc      	bne.n	800c674 <quorem+0x9c>
 800c6da:	3c01      	subs	r4, #1
 800c6dc:	e7c7      	b.n	800c66e <quorem+0x96>
 800c6de:	6812      	ldr	r2, [r2, #0]
 800c6e0:	3b04      	subs	r3, #4
 800c6e2:	2a00      	cmp	r2, #0
 800c6e4:	d1f0      	bne.n	800c6c8 <quorem+0xf0>
 800c6e6:	3c01      	subs	r4, #1
 800c6e8:	e7eb      	b.n	800c6c2 <quorem+0xea>
 800c6ea:	2000      	movs	r0, #0
 800c6ec:	e7ee      	b.n	800c6cc <quorem+0xf4>
	...

0800c6f0 <_dtoa_r>:
 800c6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f4:	ed2d 8b04 	vpush	{d8-d9}
 800c6f8:	ec57 6b10 	vmov	r6, r7, d0
 800c6fc:	b093      	sub	sp, #76	; 0x4c
 800c6fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c700:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c704:	9106      	str	r1, [sp, #24]
 800c706:	ee10 aa10 	vmov	sl, s0
 800c70a:	4604      	mov	r4, r0
 800c70c:	9209      	str	r2, [sp, #36]	; 0x24
 800c70e:	930c      	str	r3, [sp, #48]	; 0x30
 800c710:	46bb      	mov	fp, r7
 800c712:	b975      	cbnz	r5, 800c732 <_dtoa_r+0x42>
 800c714:	2010      	movs	r0, #16
 800c716:	f000 fddd 	bl	800d2d4 <malloc>
 800c71a:	4602      	mov	r2, r0
 800c71c:	6260      	str	r0, [r4, #36]	; 0x24
 800c71e:	b920      	cbnz	r0, 800c72a <_dtoa_r+0x3a>
 800c720:	4ba7      	ldr	r3, [pc, #668]	; (800c9c0 <_dtoa_r+0x2d0>)
 800c722:	21ea      	movs	r1, #234	; 0xea
 800c724:	48a7      	ldr	r0, [pc, #668]	; (800c9c4 <_dtoa_r+0x2d4>)
 800c726:	f001 fbd1 	bl	800decc <__assert_func>
 800c72a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c72e:	6005      	str	r5, [r0, #0]
 800c730:	60c5      	str	r5, [r0, #12]
 800c732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c734:	6819      	ldr	r1, [r3, #0]
 800c736:	b151      	cbz	r1, 800c74e <_dtoa_r+0x5e>
 800c738:	685a      	ldr	r2, [r3, #4]
 800c73a:	604a      	str	r2, [r1, #4]
 800c73c:	2301      	movs	r3, #1
 800c73e:	4093      	lsls	r3, r2
 800c740:	608b      	str	r3, [r1, #8]
 800c742:	4620      	mov	r0, r4
 800c744:	f000 fe1c 	bl	800d380 <_Bfree>
 800c748:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c74a:	2200      	movs	r2, #0
 800c74c:	601a      	str	r2, [r3, #0]
 800c74e:	1e3b      	subs	r3, r7, #0
 800c750:	bfaa      	itet	ge
 800c752:	2300      	movge	r3, #0
 800c754:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c758:	f8c8 3000 	strge.w	r3, [r8]
 800c75c:	4b9a      	ldr	r3, [pc, #616]	; (800c9c8 <_dtoa_r+0x2d8>)
 800c75e:	bfbc      	itt	lt
 800c760:	2201      	movlt	r2, #1
 800c762:	f8c8 2000 	strlt.w	r2, [r8]
 800c766:	ea33 030b 	bics.w	r3, r3, fp
 800c76a:	d11b      	bne.n	800c7a4 <_dtoa_r+0xb4>
 800c76c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c76e:	f242 730f 	movw	r3, #9999	; 0x270f
 800c772:	6013      	str	r3, [r2, #0]
 800c774:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c778:	4333      	orrs	r3, r6
 800c77a:	f000 8592 	beq.w	800d2a2 <_dtoa_r+0xbb2>
 800c77e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c780:	b963      	cbnz	r3, 800c79c <_dtoa_r+0xac>
 800c782:	4b92      	ldr	r3, [pc, #584]	; (800c9cc <_dtoa_r+0x2dc>)
 800c784:	e022      	b.n	800c7cc <_dtoa_r+0xdc>
 800c786:	4b92      	ldr	r3, [pc, #584]	; (800c9d0 <_dtoa_r+0x2e0>)
 800c788:	9301      	str	r3, [sp, #4]
 800c78a:	3308      	adds	r3, #8
 800c78c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c78e:	6013      	str	r3, [r2, #0]
 800c790:	9801      	ldr	r0, [sp, #4]
 800c792:	b013      	add	sp, #76	; 0x4c
 800c794:	ecbd 8b04 	vpop	{d8-d9}
 800c798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c79c:	4b8b      	ldr	r3, [pc, #556]	; (800c9cc <_dtoa_r+0x2dc>)
 800c79e:	9301      	str	r3, [sp, #4]
 800c7a0:	3303      	adds	r3, #3
 800c7a2:	e7f3      	b.n	800c78c <_dtoa_r+0x9c>
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	4650      	mov	r0, sl
 800c7aa:	4659      	mov	r1, fp
 800c7ac:	f7f4 f994 	bl	8000ad8 <__aeabi_dcmpeq>
 800c7b0:	ec4b ab19 	vmov	d9, sl, fp
 800c7b4:	4680      	mov	r8, r0
 800c7b6:	b158      	cbz	r0, 800c7d0 <_dtoa_r+0xe0>
 800c7b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	6013      	str	r3, [r2, #0]
 800c7be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	f000 856b 	beq.w	800d29c <_dtoa_r+0xbac>
 800c7c6:	4883      	ldr	r0, [pc, #524]	; (800c9d4 <_dtoa_r+0x2e4>)
 800c7c8:	6018      	str	r0, [r3, #0]
 800c7ca:	1e43      	subs	r3, r0, #1
 800c7cc:	9301      	str	r3, [sp, #4]
 800c7ce:	e7df      	b.n	800c790 <_dtoa_r+0xa0>
 800c7d0:	ec4b ab10 	vmov	d0, sl, fp
 800c7d4:	aa10      	add	r2, sp, #64	; 0x40
 800c7d6:	a911      	add	r1, sp, #68	; 0x44
 800c7d8:	4620      	mov	r0, r4
 800c7da:	f001 f8b9 	bl	800d950 <__d2b>
 800c7de:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c7e2:	ee08 0a10 	vmov	s16, r0
 800c7e6:	2d00      	cmp	r5, #0
 800c7e8:	f000 8084 	beq.w	800c8f4 <_dtoa_r+0x204>
 800c7ec:	ee19 3a90 	vmov	r3, s19
 800c7f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c7f4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c7f8:	4656      	mov	r6, sl
 800c7fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c7fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c802:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c806:	4b74      	ldr	r3, [pc, #464]	; (800c9d8 <_dtoa_r+0x2e8>)
 800c808:	2200      	movs	r2, #0
 800c80a:	4630      	mov	r0, r6
 800c80c:	4639      	mov	r1, r7
 800c80e:	f7f3 fd43 	bl	8000298 <__aeabi_dsub>
 800c812:	a365      	add	r3, pc, #404	; (adr r3, 800c9a8 <_dtoa_r+0x2b8>)
 800c814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c818:	f7f3 fef6 	bl	8000608 <__aeabi_dmul>
 800c81c:	a364      	add	r3, pc, #400	; (adr r3, 800c9b0 <_dtoa_r+0x2c0>)
 800c81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c822:	f7f3 fd3b 	bl	800029c <__adddf3>
 800c826:	4606      	mov	r6, r0
 800c828:	4628      	mov	r0, r5
 800c82a:	460f      	mov	r7, r1
 800c82c:	f7f3 fe82 	bl	8000534 <__aeabi_i2d>
 800c830:	a361      	add	r3, pc, #388	; (adr r3, 800c9b8 <_dtoa_r+0x2c8>)
 800c832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c836:	f7f3 fee7 	bl	8000608 <__aeabi_dmul>
 800c83a:	4602      	mov	r2, r0
 800c83c:	460b      	mov	r3, r1
 800c83e:	4630      	mov	r0, r6
 800c840:	4639      	mov	r1, r7
 800c842:	f7f3 fd2b 	bl	800029c <__adddf3>
 800c846:	4606      	mov	r6, r0
 800c848:	460f      	mov	r7, r1
 800c84a:	f7f4 f98d 	bl	8000b68 <__aeabi_d2iz>
 800c84e:	2200      	movs	r2, #0
 800c850:	9000      	str	r0, [sp, #0]
 800c852:	2300      	movs	r3, #0
 800c854:	4630      	mov	r0, r6
 800c856:	4639      	mov	r1, r7
 800c858:	f7f4 f948 	bl	8000aec <__aeabi_dcmplt>
 800c85c:	b150      	cbz	r0, 800c874 <_dtoa_r+0x184>
 800c85e:	9800      	ldr	r0, [sp, #0]
 800c860:	f7f3 fe68 	bl	8000534 <__aeabi_i2d>
 800c864:	4632      	mov	r2, r6
 800c866:	463b      	mov	r3, r7
 800c868:	f7f4 f936 	bl	8000ad8 <__aeabi_dcmpeq>
 800c86c:	b910      	cbnz	r0, 800c874 <_dtoa_r+0x184>
 800c86e:	9b00      	ldr	r3, [sp, #0]
 800c870:	3b01      	subs	r3, #1
 800c872:	9300      	str	r3, [sp, #0]
 800c874:	9b00      	ldr	r3, [sp, #0]
 800c876:	2b16      	cmp	r3, #22
 800c878:	d85a      	bhi.n	800c930 <_dtoa_r+0x240>
 800c87a:	9a00      	ldr	r2, [sp, #0]
 800c87c:	4b57      	ldr	r3, [pc, #348]	; (800c9dc <_dtoa_r+0x2ec>)
 800c87e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c886:	ec51 0b19 	vmov	r0, r1, d9
 800c88a:	f7f4 f92f 	bl	8000aec <__aeabi_dcmplt>
 800c88e:	2800      	cmp	r0, #0
 800c890:	d050      	beq.n	800c934 <_dtoa_r+0x244>
 800c892:	9b00      	ldr	r3, [sp, #0]
 800c894:	3b01      	subs	r3, #1
 800c896:	9300      	str	r3, [sp, #0]
 800c898:	2300      	movs	r3, #0
 800c89a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c89c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c89e:	1b5d      	subs	r5, r3, r5
 800c8a0:	1e6b      	subs	r3, r5, #1
 800c8a2:	9305      	str	r3, [sp, #20]
 800c8a4:	bf45      	ittet	mi
 800c8a6:	f1c5 0301 	rsbmi	r3, r5, #1
 800c8aa:	9304      	strmi	r3, [sp, #16]
 800c8ac:	2300      	movpl	r3, #0
 800c8ae:	2300      	movmi	r3, #0
 800c8b0:	bf4c      	ite	mi
 800c8b2:	9305      	strmi	r3, [sp, #20]
 800c8b4:	9304      	strpl	r3, [sp, #16]
 800c8b6:	9b00      	ldr	r3, [sp, #0]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	db3d      	blt.n	800c938 <_dtoa_r+0x248>
 800c8bc:	9b05      	ldr	r3, [sp, #20]
 800c8be:	9a00      	ldr	r2, [sp, #0]
 800c8c0:	920a      	str	r2, [sp, #40]	; 0x28
 800c8c2:	4413      	add	r3, r2
 800c8c4:	9305      	str	r3, [sp, #20]
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	9307      	str	r3, [sp, #28]
 800c8ca:	9b06      	ldr	r3, [sp, #24]
 800c8cc:	2b09      	cmp	r3, #9
 800c8ce:	f200 8089 	bhi.w	800c9e4 <_dtoa_r+0x2f4>
 800c8d2:	2b05      	cmp	r3, #5
 800c8d4:	bfc4      	itt	gt
 800c8d6:	3b04      	subgt	r3, #4
 800c8d8:	9306      	strgt	r3, [sp, #24]
 800c8da:	9b06      	ldr	r3, [sp, #24]
 800c8dc:	f1a3 0302 	sub.w	r3, r3, #2
 800c8e0:	bfcc      	ite	gt
 800c8e2:	2500      	movgt	r5, #0
 800c8e4:	2501      	movle	r5, #1
 800c8e6:	2b03      	cmp	r3, #3
 800c8e8:	f200 8087 	bhi.w	800c9fa <_dtoa_r+0x30a>
 800c8ec:	e8df f003 	tbb	[pc, r3]
 800c8f0:	59383a2d 	.word	0x59383a2d
 800c8f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c8f8:	441d      	add	r5, r3
 800c8fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c8fe:	2b20      	cmp	r3, #32
 800c900:	bfc1      	itttt	gt
 800c902:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c906:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c90a:	fa0b f303 	lslgt.w	r3, fp, r3
 800c90e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c912:	bfda      	itte	le
 800c914:	f1c3 0320 	rsble	r3, r3, #32
 800c918:	fa06 f003 	lslle.w	r0, r6, r3
 800c91c:	4318      	orrgt	r0, r3
 800c91e:	f7f3 fdf9 	bl	8000514 <__aeabi_ui2d>
 800c922:	2301      	movs	r3, #1
 800c924:	4606      	mov	r6, r0
 800c926:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c92a:	3d01      	subs	r5, #1
 800c92c:	930e      	str	r3, [sp, #56]	; 0x38
 800c92e:	e76a      	b.n	800c806 <_dtoa_r+0x116>
 800c930:	2301      	movs	r3, #1
 800c932:	e7b2      	b.n	800c89a <_dtoa_r+0x1aa>
 800c934:	900b      	str	r0, [sp, #44]	; 0x2c
 800c936:	e7b1      	b.n	800c89c <_dtoa_r+0x1ac>
 800c938:	9b04      	ldr	r3, [sp, #16]
 800c93a:	9a00      	ldr	r2, [sp, #0]
 800c93c:	1a9b      	subs	r3, r3, r2
 800c93e:	9304      	str	r3, [sp, #16]
 800c940:	4253      	negs	r3, r2
 800c942:	9307      	str	r3, [sp, #28]
 800c944:	2300      	movs	r3, #0
 800c946:	930a      	str	r3, [sp, #40]	; 0x28
 800c948:	e7bf      	b.n	800c8ca <_dtoa_r+0x1da>
 800c94a:	2300      	movs	r3, #0
 800c94c:	9308      	str	r3, [sp, #32]
 800c94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c950:	2b00      	cmp	r3, #0
 800c952:	dc55      	bgt.n	800ca00 <_dtoa_r+0x310>
 800c954:	2301      	movs	r3, #1
 800c956:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c95a:	461a      	mov	r2, r3
 800c95c:	9209      	str	r2, [sp, #36]	; 0x24
 800c95e:	e00c      	b.n	800c97a <_dtoa_r+0x28a>
 800c960:	2301      	movs	r3, #1
 800c962:	e7f3      	b.n	800c94c <_dtoa_r+0x25c>
 800c964:	2300      	movs	r3, #0
 800c966:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c968:	9308      	str	r3, [sp, #32]
 800c96a:	9b00      	ldr	r3, [sp, #0]
 800c96c:	4413      	add	r3, r2
 800c96e:	9302      	str	r3, [sp, #8]
 800c970:	3301      	adds	r3, #1
 800c972:	2b01      	cmp	r3, #1
 800c974:	9303      	str	r3, [sp, #12]
 800c976:	bfb8      	it	lt
 800c978:	2301      	movlt	r3, #1
 800c97a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c97c:	2200      	movs	r2, #0
 800c97e:	6042      	str	r2, [r0, #4]
 800c980:	2204      	movs	r2, #4
 800c982:	f102 0614 	add.w	r6, r2, #20
 800c986:	429e      	cmp	r6, r3
 800c988:	6841      	ldr	r1, [r0, #4]
 800c98a:	d93d      	bls.n	800ca08 <_dtoa_r+0x318>
 800c98c:	4620      	mov	r0, r4
 800c98e:	f000 fcb7 	bl	800d300 <_Balloc>
 800c992:	9001      	str	r0, [sp, #4]
 800c994:	2800      	cmp	r0, #0
 800c996:	d13b      	bne.n	800ca10 <_dtoa_r+0x320>
 800c998:	4b11      	ldr	r3, [pc, #68]	; (800c9e0 <_dtoa_r+0x2f0>)
 800c99a:	4602      	mov	r2, r0
 800c99c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c9a0:	e6c0      	b.n	800c724 <_dtoa_r+0x34>
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	e7df      	b.n	800c966 <_dtoa_r+0x276>
 800c9a6:	bf00      	nop
 800c9a8:	636f4361 	.word	0x636f4361
 800c9ac:	3fd287a7 	.word	0x3fd287a7
 800c9b0:	8b60c8b3 	.word	0x8b60c8b3
 800c9b4:	3fc68a28 	.word	0x3fc68a28
 800c9b8:	509f79fb 	.word	0x509f79fb
 800c9bc:	3fd34413 	.word	0x3fd34413
 800c9c0:	0800ec51 	.word	0x0800ec51
 800c9c4:	0800ec68 	.word	0x0800ec68
 800c9c8:	7ff00000 	.word	0x7ff00000
 800c9cc:	0800ec4d 	.word	0x0800ec4d
 800c9d0:	0800ec44 	.word	0x0800ec44
 800c9d4:	0800ec21 	.word	0x0800ec21
 800c9d8:	3ff80000 	.word	0x3ff80000
 800c9dc:	0800ed58 	.word	0x0800ed58
 800c9e0:	0800ecc3 	.word	0x0800ecc3
 800c9e4:	2501      	movs	r5, #1
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	9306      	str	r3, [sp, #24]
 800c9ea:	9508      	str	r5, [sp, #32]
 800c9ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c9f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	2312      	movs	r3, #18
 800c9f8:	e7b0      	b.n	800c95c <_dtoa_r+0x26c>
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	9308      	str	r3, [sp, #32]
 800c9fe:	e7f5      	b.n	800c9ec <_dtoa_r+0x2fc>
 800ca00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca02:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ca06:	e7b8      	b.n	800c97a <_dtoa_r+0x28a>
 800ca08:	3101      	adds	r1, #1
 800ca0a:	6041      	str	r1, [r0, #4]
 800ca0c:	0052      	lsls	r2, r2, #1
 800ca0e:	e7b8      	b.n	800c982 <_dtoa_r+0x292>
 800ca10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca12:	9a01      	ldr	r2, [sp, #4]
 800ca14:	601a      	str	r2, [r3, #0]
 800ca16:	9b03      	ldr	r3, [sp, #12]
 800ca18:	2b0e      	cmp	r3, #14
 800ca1a:	f200 809d 	bhi.w	800cb58 <_dtoa_r+0x468>
 800ca1e:	2d00      	cmp	r5, #0
 800ca20:	f000 809a 	beq.w	800cb58 <_dtoa_r+0x468>
 800ca24:	9b00      	ldr	r3, [sp, #0]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	dd32      	ble.n	800ca90 <_dtoa_r+0x3a0>
 800ca2a:	4ab7      	ldr	r2, [pc, #732]	; (800cd08 <_dtoa_r+0x618>)
 800ca2c:	f003 030f 	and.w	r3, r3, #15
 800ca30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ca34:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ca38:	9b00      	ldr	r3, [sp, #0]
 800ca3a:	05d8      	lsls	r0, r3, #23
 800ca3c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ca40:	d516      	bpl.n	800ca70 <_dtoa_r+0x380>
 800ca42:	4bb2      	ldr	r3, [pc, #712]	; (800cd0c <_dtoa_r+0x61c>)
 800ca44:	ec51 0b19 	vmov	r0, r1, d9
 800ca48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ca4c:	f7f3 ff06 	bl	800085c <__aeabi_ddiv>
 800ca50:	f007 070f 	and.w	r7, r7, #15
 800ca54:	4682      	mov	sl, r0
 800ca56:	468b      	mov	fp, r1
 800ca58:	2503      	movs	r5, #3
 800ca5a:	4eac      	ldr	r6, [pc, #688]	; (800cd0c <_dtoa_r+0x61c>)
 800ca5c:	b957      	cbnz	r7, 800ca74 <_dtoa_r+0x384>
 800ca5e:	4642      	mov	r2, r8
 800ca60:	464b      	mov	r3, r9
 800ca62:	4650      	mov	r0, sl
 800ca64:	4659      	mov	r1, fp
 800ca66:	f7f3 fef9 	bl	800085c <__aeabi_ddiv>
 800ca6a:	4682      	mov	sl, r0
 800ca6c:	468b      	mov	fp, r1
 800ca6e:	e028      	b.n	800cac2 <_dtoa_r+0x3d2>
 800ca70:	2502      	movs	r5, #2
 800ca72:	e7f2      	b.n	800ca5a <_dtoa_r+0x36a>
 800ca74:	07f9      	lsls	r1, r7, #31
 800ca76:	d508      	bpl.n	800ca8a <_dtoa_r+0x39a>
 800ca78:	4640      	mov	r0, r8
 800ca7a:	4649      	mov	r1, r9
 800ca7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ca80:	f7f3 fdc2 	bl	8000608 <__aeabi_dmul>
 800ca84:	3501      	adds	r5, #1
 800ca86:	4680      	mov	r8, r0
 800ca88:	4689      	mov	r9, r1
 800ca8a:	107f      	asrs	r7, r7, #1
 800ca8c:	3608      	adds	r6, #8
 800ca8e:	e7e5      	b.n	800ca5c <_dtoa_r+0x36c>
 800ca90:	f000 809b 	beq.w	800cbca <_dtoa_r+0x4da>
 800ca94:	9b00      	ldr	r3, [sp, #0]
 800ca96:	4f9d      	ldr	r7, [pc, #628]	; (800cd0c <_dtoa_r+0x61c>)
 800ca98:	425e      	negs	r6, r3
 800ca9a:	4b9b      	ldr	r3, [pc, #620]	; (800cd08 <_dtoa_r+0x618>)
 800ca9c:	f006 020f 	and.w	r2, r6, #15
 800caa0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800caa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa8:	ec51 0b19 	vmov	r0, r1, d9
 800caac:	f7f3 fdac 	bl	8000608 <__aeabi_dmul>
 800cab0:	1136      	asrs	r6, r6, #4
 800cab2:	4682      	mov	sl, r0
 800cab4:	468b      	mov	fp, r1
 800cab6:	2300      	movs	r3, #0
 800cab8:	2502      	movs	r5, #2
 800caba:	2e00      	cmp	r6, #0
 800cabc:	d17a      	bne.n	800cbb4 <_dtoa_r+0x4c4>
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d1d3      	bne.n	800ca6a <_dtoa_r+0x37a>
 800cac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	f000 8082 	beq.w	800cbce <_dtoa_r+0x4de>
 800caca:	4b91      	ldr	r3, [pc, #580]	; (800cd10 <_dtoa_r+0x620>)
 800cacc:	2200      	movs	r2, #0
 800cace:	4650      	mov	r0, sl
 800cad0:	4659      	mov	r1, fp
 800cad2:	f7f4 f80b 	bl	8000aec <__aeabi_dcmplt>
 800cad6:	2800      	cmp	r0, #0
 800cad8:	d079      	beq.n	800cbce <_dtoa_r+0x4de>
 800cada:	9b03      	ldr	r3, [sp, #12]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d076      	beq.n	800cbce <_dtoa_r+0x4de>
 800cae0:	9b02      	ldr	r3, [sp, #8]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	dd36      	ble.n	800cb54 <_dtoa_r+0x464>
 800cae6:	9b00      	ldr	r3, [sp, #0]
 800cae8:	4650      	mov	r0, sl
 800caea:	4659      	mov	r1, fp
 800caec:	1e5f      	subs	r7, r3, #1
 800caee:	2200      	movs	r2, #0
 800caf0:	4b88      	ldr	r3, [pc, #544]	; (800cd14 <_dtoa_r+0x624>)
 800caf2:	f7f3 fd89 	bl	8000608 <__aeabi_dmul>
 800caf6:	9e02      	ldr	r6, [sp, #8]
 800caf8:	4682      	mov	sl, r0
 800cafa:	468b      	mov	fp, r1
 800cafc:	3501      	adds	r5, #1
 800cafe:	4628      	mov	r0, r5
 800cb00:	f7f3 fd18 	bl	8000534 <__aeabi_i2d>
 800cb04:	4652      	mov	r2, sl
 800cb06:	465b      	mov	r3, fp
 800cb08:	f7f3 fd7e 	bl	8000608 <__aeabi_dmul>
 800cb0c:	4b82      	ldr	r3, [pc, #520]	; (800cd18 <_dtoa_r+0x628>)
 800cb0e:	2200      	movs	r2, #0
 800cb10:	f7f3 fbc4 	bl	800029c <__adddf3>
 800cb14:	46d0      	mov	r8, sl
 800cb16:	46d9      	mov	r9, fp
 800cb18:	4682      	mov	sl, r0
 800cb1a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800cb1e:	2e00      	cmp	r6, #0
 800cb20:	d158      	bne.n	800cbd4 <_dtoa_r+0x4e4>
 800cb22:	4b7e      	ldr	r3, [pc, #504]	; (800cd1c <_dtoa_r+0x62c>)
 800cb24:	2200      	movs	r2, #0
 800cb26:	4640      	mov	r0, r8
 800cb28:	4649      	mov	r1, r9
 800cb2a:	f7f3 fbb5 	bl	8000298 <__aeabi_dsub>
 800cb2e:	4652      	mov	r2, sl
 800cb30:	465b      	mov	r3, fp
 800cb32:	4680      	mov	r8, r0
 800cb34:	4689      	mov	r9, r1
 800cb36:	f7f3 fff7 	bl	8000b28 <__aeabi_dcmpgt>
 800cb3a:	2800      	cmp	r0, #0
 800cb3c:	f040 8295 	bne.w	800d06a <_dtoa_r+0x97a>
 800cb40:	4652      	mov	r2, sl
 800cb42:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cb46:	4640      	mov	r0, r8
 800cb48:	4649      	mov	r1, r9
 800cb4a:	f7f3 ffcf 	bl	8000aec <__aeabi_dcmplt>
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	f040 8289 	bne.w	800d066 <_dtoa_r+0x976>
 800cb54:	ec5b ab19 	vmov	sl, fp, d9
 800cb58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	f2c0 8148 	blt.w	800cdf0 <_dtoa_r+0x700>
 800cb60:	9a00      	ldr	r2, [sp, #0]
 800cb62:	2a0e      	cmp	r2, #14
 800cb64:	f300 8144 	bgt.w	800cdf0 <_dtoa_r+0x700>
 800cb68:	4b67      	ldr	r3, [pc, #412]	; (800cd08 <_dtoa_r+0x618>)
 800cb6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb6e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cb72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	f280 80d5 	bge.w	800cd24 <_dtoa_r+0x634>
 800cb7a:	9b03      	ldr	r3, [sp, #12]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	f300 80d1 	bgt.w	800cd24 <_dtoa_r+0x634>
 800cb82:	f040 826f 	bne.w	800d064 <_dtoa_r+0x974>
 800cb86:	4b65      	ldr	r3, [pc, #404]	; (800cd1c <_dtoa_r+0x62c>)
 800cb88:	2200      	movs	r2, #0
 800cb8a:	4640      	mov	r0, r8
 800cb8c:	4649      	mov	r1, r9
 800cb8e:	f7f3 fd3b 	bl	8000608 <__aeabi_dmul>
 800cb92:	4652      	mov	r2, sl
 800cb94:	465b      	mov	r3, fp
 800cb96:	f7f3 ffbd 	bl	8000b14 <__aeabi_dcmpge>
 800cb9a:	9e03      	ldr	r6, [sp, #12]
 800cb9c:	4637      	mov	r7, r6
 800cb9e:	2800      	cmp	r0, #0
 800cba0:	f040 8245 	bne.w	800d02e <_dtoa_r+0x93e>
 800cba4:	9d01      	ldr	r5, [sp, #4]
 800cba6:	2331      	movs	r3, #49	; 0x31
 800cba8:	f805 3b01 	strb.w	r3, [r5], #1
 800cbac:	9b00      	ldr	r3, [sp, #0]
 800cbae:	3301      	adds	r3, #1
 800cbb0:	9300      	str	r3, [sp, #0]
 800cbb2:	e240      	b.n	800d036 <_dtoa_r+0x946>
 800cbb4:	07f2      	lsls	r2, r6, #31
 800cbb6:	d505      	bpl.n	800cbc4 <_dtoa_r+0x4d4>
 800cbb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbbc:	f7f3 fd24 	bl	8000608 <__aeabi_dmul>
 800cbc0:	3501      	adds	r5, #1
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	1076      	asrs	r6, r6, #1
 800cbc6:	3708      	adds	r7, #8
 800cbc8:	e777      	b.n	800caba <_dtoa_r+0x3ca>
 800cbca:	2502      	movs	r5, #2
 800cbcc:	e779      	b.n	800cac2 <_dtoa_r+0x3d2>
 800cbce:	9f00      	ldr	r7, [sp, #0]
 800cbd0:	9e03      	ldr	r6, [sp, #12]
 800cbd2:	e794      	b.n	800cafe <_dtoa_r+0x40e>
 800cbd4:	9901      	ldr	r1, [sp, #4]
 800cbd6:	4b4c      	ldr	r3, [pc, #304]	; (800cd08 <_dtoa_r+0x618>)
 800cbd8:	4431      	add	r1, r6
 800cbda:	910d      	str	r1, [sp, #52]	; 0x34
 800cbdc:	9908      	ldr	r1, [sp, #32]
 800cbde:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cbe2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cbe6:	2900      	cmp	r1, #0
 800cbe8:	d043      	beq.n	800cc72 <_dtoa_r+0x582>
 800cbea:	494d      	ldr	r1, [pc, #308]	; (800cd20 <_dtoa_r+0x630>)
 800cbec:	2000      	movs	r0, #0
 800cbee:	f7f3 fe35 	bl	800085c <__aeabi_ddiv>
 800cbf2:	4652      	mov	r2, sl
 800cbf4:	465b      	mov	r3, fp
 800cbf6:	f7f3 fb4f 	bl	8000298 <__aeabi_dsub>
 800cbfa:	9d01      	ldr	r5, [sp, #4]
 800cbfc:	4682      	mov	sl, r0
 800cbfe:	468b      	mov	fp, r1
 800cc00:	4649      	mov	r1, r9
 800cc02:	4640      	mov	r0, r8
 800cc04:	f7f3 ffb0 	bl	8000b68 <__aeabi_d2iz>
 800cc08:	4606      	mov	r6, r0
 800cc0a:	f7f3 fc93 	bl	8000534 <__aeabi_i2d>
 800cc0e:	4602      	mov	r2, r0
 800cc10:	460b      	mov	r3, r1
 800cc12:	4640      	mov	r0, r8
 800cc14:	4649      	mov	r1, r9
 800cc16:	f7f3 fb3f 	bl	8000298 <__aeabi_dsub>
 800cc1a:	3630      	adds	r6, #48	; 0x30
 800cc1c:	f805 6b01 	strb.w	r6, [r5], #1
 800cc20:	4652      	mov	r2, sl
 800cc22:	465b      	mov	r3, fp
 800cc24:	4680      	mov	r8, r0
 800cc26:	4689      	mov	r9, r1
 800cc28:	f7f3 ff60 	bl	8000aec <__aeabi_dcmplt>
 800cc2c:	2800      	cmp	r0, #0
 800cc2e:	d163      	bne.n	800ccf8 <_dtoa_r+0x608>
 800cc30:	4642      	mov	r2, r8
 800cc32:	464b      	mov	r3, r9
 800cc34:	4936      	ldr	r1, [pc, #216]	; (800cd10 <_dtoa_r+0x620>)
 800cc36:	2000      	movs	r0, #0
 800cc38:	f7f3 fb2e 	bl	8000298 <__aeabi_dsub>
 800cc3c:	4652      	mov	r2, sl
 800cc3e:	465b      	mov	r3, fp
 800cc40:	f7f3 ff54 	bl	8000aec <__aeabi_dcmplt>
 800cc44:	2800      	cmp	r0, #0
 800cc46:	f040 80b5 	bne.w	800cdb4 <_dtoa_r+0x6c4>
 800cc4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc4c:	429d      	cmp	r5, r3
 800cc4e:	d081      	beq.n	800cb54 <_dtoa_r+0x464>
 800cc50:	4b30      	ldr	r3, [pc, #192]	; (800cd14 <_dtoa_r+0x624>)
 800cc52:	2200      	movs	r2, #0
 800cc54:	4650      	mov	r0, sl
 800cc56:	4659      	mov	r1, fp
 800cc58:	f7f3 fcd6 	bl	8000608 <__aeabi_dmul>
 800cc5c:	4b2d      	ldr	r3, [pc, #180]	; (800cd14 <_dtoa_r+0x624>)
 800cc5e:	4682      	mov	sl, r0
 800cc60:	468b      	mov	fp, r1
 800cc62:	4640      	mov	r0, r8
 800cc64:	4649      	mov	r1, r9
 800cc66:	2200      	movs	r2, #0
 800cc68:	f7f3 fcce 	bl	8000608 <__aeabi_dmul>
 800cc6c:	4680      	mov	r8, r0
 800cc6e:	4689      	mov	r9, r1
 800cc70:	e7c6      	b.n	800cc00 <_dtoa_r+0x510>
 800cc72:	4650      	mov	r0, sl
 800cc74:	4659      	mov	r1, fp
 800cc76:	f7f3 fcc7 	bl	8000608 <__aeabi_dmul>
 800cc7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc7c:	9d01      	ldr	r5, [sp, #4]
 800cc7e:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc80:	4682      	mov	sl, r0
 800cc82:	468b      	mov	fp, r1
 800cc84:	4649      	mov	r1, r9
 800cc86:	4640      	mov	r0, r8
 800cc88:	f7f3 ff6e 	bl	8000b68 <__aeabi_d2iz>
 800cc8c:	4606      	mov	r6, r0
 800cc8e:	f7f3 fc51 	bl	8000534 <__aeabi_i2d>
 800cc92:	3630      	adds	r6, #48	; 0x30
 800cc94:	4602      	mov	r2, r0
 800cc96:	460b      	mov	r3, r1
 800cc98:	4640      	mov	r0, r8
 800cc9a:	4649      	mov	r1, r9
 800cc9c:	f7f3 fafc 	bl	8000298 <__aeabi_dsub>
 800cca0:	f805 6b01 	strb.w	r6, [r5], #1
 800cca4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cca6:	429d      	cmp	r5, r3
 800cca8:	4680      	mov	r8, r0
 800ccaa:	4689      	mov	r9, r1
 800ccac:	f04f 0200 	mov.w	r2, #0
 800ccb0:	d124      	bne.n	800ccfc <_dtoa_r+0x60c>
 800ccb2:	4b1b      	ldr	r3, [pc, #108]	; (800cd20 <_dtoa_r+0x630>)
 800ccb4:	4650      	mov	r0, sl
 800ccb6:	4659      	mov	r1, fp
 800ccb8:	f7f3 faf0 	bl	800029c <__adddf3>
 800ccbc:	4602      	mov	r2, r0
 800ccbe:	460b      	mov	r3, r1
 800ccc0:	4640      	mov	r0, r8
 800ccc2:	4649      	mov	r1, r9
 800ccc4:	f7f3 ff30 	bl	8000b28 <__aeabi_dcmpgt>
 800ccc8:	2800      	cmp	r0, #0
 800ccca:	d173      	bne.n	800cdb4 <_dtoa_r+0x6c4>
 800cccc:	4652      	mov	r2, sl
 800ccce:	465b      	mov	r3, fp
 800ccd0:	4913      	ldr	r1, [pc, #76]	; (800cd20 <_dtoa_r+0x630>)
 800ccd2:	2000      	movs	r0, #0
 800ccd4:	f7f3 fae0 	bl	8000298 <__aeabi_dsub>
 800ccd8:	4602      	mov	r2, r0
 800ccda:	460b      	mov	r3, r1
 800ccdc:	4640      	mov	r0, r8
 800ccde:	4649      	mov	r1, r9
 800cce0:	f7f3 ff04 	bl	8000aec <__aeabi_dcmplt>
 800cce4:	2800      	cmp	r0, #0
 800cce6:	f43f af35 	beq.w	800cb54 <_dtoa_r+0x464>
 800ccea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ccec:	1e6b      	subs	r3, r5, #1
 800ccee:	930f      	str	r3, [sp, #60]	; 0x3c
 800ccf0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ccf4:	2b30      	cmp	r3, #48	; 0x30
 800ccf6:	d0f8      	beq.n	800ccea <_dtoa_r+0x5fa>
 800ccf8:	9700      	str	r7, [sp, #0]
 800ccfa:	e049      	b.n	800cd90 <_dtoa_r+0x6a0>
 800ccfc:	4b05      	ldr	r3, [pc, #20]	; (800cd14 <_dtoa_r+0x624>)
 800ccfe:	f7f3 fc83 	bl	8000608 <__aeabi_dmul>
 800cd02:	4680      	mov	r8, r0
 800cd04:	4689      	mov	r9, r1
 800cd06:	e7bd      	b.n	800cc84 <_dtoa_r+0x594>
 800cd08:	0800ed58 	.word	0x0800ed58
 800cd0c:	0800ed30 	.word	0x0800ed30
 800cd10:	3ff00000 	.word	0x3ff00000
 800cd14:	40240000 	.word	0x40240000
 800cd18:	401c0000 	.word	0x401c0000
 800cd1c:	40140000 	.word	0x40140000
 800cd20:	3fe00000 	.word	0x3fe00000
 800cd24:	9d01      	ldr	r5, [sp, #4]
 800cd26:	4656      	mov	r6, sl
 800cd28:	465f      	mov	r7, fp
 800cd2a:	4642      	mov	r2, r8
 800cd2c:	464b      	mov	r3, r9
 800cd2e:	4630      	mov	r0, r6
 800cd30:	4639      	mov	r1, r7
 800cd32:	f7f3 fd93 	bl	800085c <__aeabi_ddiv>
 800cd36:	f7f3 ff17 	bl	8000b68 <__aeabi_d2iz>
 800cd3a:	4682      	mov	sl, r0
 800cd3c:	f7f3 fbfa 	bl	8000534 <__aeabi_i2d>
 800cd40:	4642      	mov	r2, r8
 800cd42:	464b      	mov	r3, r9
 800cd44:	f7f3 fc60 	bl	8000608 <__aeabi_dmul>
 800cd48:	4602      	mov	r2, r0
 800cd4a:	460b      	mov	r3, r1
 800cd4c:	4630      	mov	r0, r6
 800cd4e:	4639      	mov	r1, r7
 800cd50:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800cd54:	f7f3 faa0 	bl	8000298 <__aeabi_dsub>
 800cd58:	f805 6b01 	strb.w	r6, [r5], #1
 800cd5c:	9e01      	ldr	r6, [sp, #4]
 800cd5e:	9f03      	ldr	r7, [sp, #12]
 800cd60:	1bae      	subs	r6, r5, r6
 800cd62:	42b7      	cmp	r7, r6
 800cd64:	4602      	mov	r2, r0
 800cd66:	460b      	mov	r3, r1
 800cd68:	d135      	bne.n	800cdd6 <_dtoa_r+0x6e6>
 800cd6a:	f7f3 fa97 	bl	800029c <__adddf3>
 800cd6e:	4642      	mov	r2, r8
 800cd70:	464b      	mov	r3, r9
 800cd72:	4606      	mov	r6, r0
 800cd74:	460f      	mov	r7, r1
 800cd76:	f7f3 fed7 	bl	8000b28 <__aeabi_dcmpgt>
 800cd7a:	b9d0      	cbnz	r0, 800cdb2 <_dtoa_r+0x6c2>
 800cd7c:	4642      	mov	r2, r8
 800cd7e:	464b      	mov	r3, r9
 800cd80:	4630      	mov	r0, r6
 800cd82:	4639      	mov	r1, r7
 800cd84:	f7f3 fea8 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd88:	b110      	cbz	r0, 800cd90 <_dtoa_r+0x6a0>
 800cd8a:	f01a 0f01 	tst.w	sl, #1
 800cd8e:	d110      	bne.n	800cdb2 <_dtoa_r+0x6c2>
 800cd90:	4620      	mov	r0, r4
 800cd92:	ee18 1a10 	vmov	r1, s16
 800cd96:	f000 faf3 	bl	800d380 <_Bfree>
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	9800      	ldr	r0, [sp, #0]
 800cd9e:	702b      	strb	r3, [r5, #0]
 800cda0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cda2:	3001      	adds	r0, #1
 800cda4:	6018      	str	r0, [r3, #0]
 800cda6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	f43f acf1 	beq.w	800c790 <_dtoa_r+0xa0>
 800cdae:	601d      	str	r5, [r3, #0]
 800cdb0:	e4ee      	b.n	800c790 <_dtoa_r+0xa0>
 800cdb2:	9f00      	ldr	r7, [sp, #0]
 800cdb4:	462b      	mov	r3, r5
 800cdb6:	461d      	mov	r5, r3
 800cdb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cdbc:	2a39      	cmp	r2, #57	; 0x39
 800cdbe:	d106      	bne.n	800cdce <_dtoa_r+0x6de>
 800cdc0:	9a01      	ldr	r2, [sp, #4]
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	d1f7      	bne.n	800cdb6 <_dtoa_r+0x6c6>
 800cdc6:	9901      	ldr	r1, [sp, #4]
 800cdc8:	2230      	movs	r2, #48	; 0x30
 800cdca:	3701      	adds	r7, #1
 800cdcc:	700a      	strb	r2, [r1, #0]
 800cdce:	781a      	ldrb	r2, [r3, #0]
 800cdd0:	3201      	adds	r2, #1
 800cdd2:	701a      	strb	r2, [r3, #0]
 800cdd4:	e790      	b.n	800ccf8 <_dtoa_r+0x608>
 800cdd6:	4ba6      	ldr	r3, [pc, #664]	; (800d070 <_dtoa_r+0x980>)
 800cdd8:	2200      	movs	r2, #0
 800cdda:	f7f3 fc15 	bl	8000608 <__aeabi_dmul>
 800cdde:	2200      	movs	r2, #0
 800cde0:	2300      	movs	r3, #0
 800cde2:	4606      	mov	r6, r0
 800cde4:	460f      	mov	r7, r1
 800cde6:	f7f3 fe77 	bl	8000ad8 <__aeabi_dcmpeq>
 800cdea:	2800      	cmp	r0, #0
 800cdec:	d09d      	beq.n	800cd2a <_dtoa_r+0x63a>
 800cdee:	e7cf      	b.n	800cd90 <_dtoa_r+0x6a0>
 800cdf0:	9a08      	ldr	r2, [sp, #32]
 800cdf2:	2a00      	cmp	r2, #0
 800cdf4:	f000 80d7 	beq.w	800cfa6 <_dtoa_r+0x8b6>
 800cdf8:	9a06      	ldr	r2, [sp, #24]
 800cdfa:	2a01      	cmp	r2, #1
 800cdfc:	f300 80ba 	bgt.w	800cf74 <_dtoa_r+0x884>
 800ce00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ce02:	2a00      	cmp	r2, #0
 800ce04:	f000 80b2 	beq.w	800cf6c <_dtoa_r+0x87c>
 800ce08:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ce0c:	9e07      	ldr	r6, [sp, #28]
 800ce0e:	9d04      	ldr	r5, [sp, #16]
 800ce10:	9a04      	ldr	r2, [sp, #16]
 800ce12:	441a      	add	r2, r3
 800ce14:	9204      	str	r2, [sp, #16]
 800ce16:	9a05      	ldr	r2, [sp, #20]
 800ce18:	2101      	movs	r1, #1
 800ce1a:	441a      	add	r2, r3
 800ce1c:	4620      	mov	r0, r4
 800ce1e:	9205      	str	r2, [sp, #20]
 800ce20:	f000 fb66 	bl	800d4f0 <__i2b>
 800ce24:	4607      	mov	r7, r0
 800ce26:	2d00      	cmp	r5, #0
 800ce28:	dd0c      	ble.n	800ce44 <_dtoa_r+0x754>
 800ce2a:	9b05      	ldr	r3, [sp, #20]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	dd09      	ble.n	800ce44 <_dtoa_r+0x754>
 800ce30:	42ab      	cmp	r3, r5
 800ce32:	9a04      	ldr	r2, [sp, #16]
 800ce34:	bfa8      	it	ge
 800ce36:	462b      	movge	r3, r5
 800ce38:	1ad2      	subs	r2, r2, r3
 800ce3a:	9204      	str	r2, [sp, #16]
 800ce3c:	9a05      	ldr	r2, [sp, #20]
 800ce3e:	1aed      	subs	r5, r5, r3
 800ce40:	1ad3      	subs	r3, r2, r3
 800ce42:	9305      	str	r3, [sp, #20]
 800ce44:	9b07      	ldr	r3, [sp, #28]
 800ce46:	b31b      	cbz	r3, 800ce90 <_dtoa_r+0x7a0>
 800ce48:	9b08      	ldr	r3, [sp, #32]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	f000 80af 	beq.w	800cfae <_dtoa_r+0x8be>
 800ce50:	2e00      	cmp	r6, #0
 800ce52:	dd13      	ble.n	800ce7c <_dtoa_r+0x78c>
 800ce54:	4639      	mov	r1, r7
 800ce56:	4632      	mov	r2, r6
 800ce58:	4620      	mov	r0, r4
 800ce5a:	f000 fc09 	bl	800d670 <__pow5mult>
 800ce5e:	ee18 2a10 	vmov	r2, s16
 800ce62:	4601      	mov	r1, r0
 800ce64:	4607      	mov	r7, r0
 800ce66:	4620      	mov	r0, r4
 800ce68:	f000 fb58 	bl	800d51c <__multiply>
 800ce6c:	ee18 1a10 	vmov	r1, s16
 800ce70:	4680      	mov	r8, r0
 800ce72:	4620      	mov	r0, r4
 800ce74:	f000 fa84 	bl	800d380 <_Bfree>
 800ce78:	ee08 8a10 	vmov	s16, r8
 800ce7c:	9b07      	ldr	r3, [sp, #28]
 800ce7e:	1b9a      	subs	r2, r3, r6
 800ce80:	d006      	beq.n	800ce90 <_dtoa_r+0x7a0>
 800ce82:	ee18 1a10 	vmov	r1, s16
 800ce86:	4620      	mov	r0, r4
 800ce88:	f000 fbf2 	bl	800d670 <__pow5mult>
 800ce8c:	ee08 0a10 	vmov	s16, r0
 800ce90:	2101      	movs	r1, #1
 800ce92:	4620      	mov	r0, r4
 800ce94:	f000 fb2c 	bl	800d4f0 <__i2b>
 800ce98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	4606      	mov	r6, r0
 800ce9e:	f340 8088 	ble.w	800cfb2 <_dtoa_r+0x8c2>
 800cea2:	461a      	mov	r2, r3
 800cea4:	4601      	mov	r1, r0
 800cea6:	4620      	mov	r0, r4
 800cea8:	f000 fbe2 	bl	800d670 <__pow5mult>
 800ceac:	9b06      	ldr	r3, [sp, #24]
 800ceae:	2b01      	cmp	r3, #1
 800ceb0:	4606      	mov	r6, r0
 800ceb2:	f340 8081 	ble.w	800cfb8 <_dtoa_r+0x8c8>
 800ceb6:	f04f 0800 	mov.w	r8, #0
 800ceba:	6933      	ldr	r3, [r6, #16]
 800cebc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cec0:	6918      	ldr	r0, [r3, #16]
 800cec2:	f000 fac5 	bl	800d450 <__hi0bits>
 800cec6:	f1c0 0020 	rsb	r0, r0, #32
 800ceca:	9b05      	ldr	r3, [sp, #20]
 800cecc:	4418      	add	r0, r3
 800cece:	f010 001f 	ands.w	r0, r0, #31
 800ced2:	f000 8092 	beq.w	800cffa <_dtoa_r+0x90a>
 800ced6:	f1c0 0320 	rsb	r3, r0, #32
 800ceda:	2b04      	cmp	r3, #4
 800cedc:	f340 808a 	ble.w	800cff4 <_dtoa_r+0x904>
 800cee0:	f1c0 001c 	rsb	r0, r0, #28
 800cee4:	9b04      	ldr	r3, [sp, #16]
 800cee6:	4403      	add	r3, r0
 800cee8:	9304      	str	r3, [sp, #16]
 800ceea:	9b05      	ldr	r3, [sp, #20]
 800ceec:	4403      	add	r3, r0
 800ceee:	4405      	add	r5, r0
 800cef0:	9305      	str	r3, [sp, #20]
 800cef2:	9b04      	ldr	r3, [sp, #16]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	dd07      	ble.n	800cf08 <_dtoa_r+0x818>
 800cef8:	ee18 1a10 	vmov	r1, s16
 800cefc:	461a      	mov	r2, r3
 800cefe:	4620      	mov	r0, r4
 800cf00:	f000 fc10 	bl	800d724 <__lshift>
 800cf04:	ee08 0a10 	vmov	s16, r0
 800cf08:	9b05      	ldr	r3, [sp, #20]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	dd05      	ble.n	800cf1a <_dtoa_r+0x82a>
 800cf0e:	4631      	mov	r1, r6
 800cf10:	461a      	mov	r2, r3
 800cf12:	4620      	mov	r0, r4
 800cf14:	f000 fc06 	bl	800d724 <__lshift>
 800cf18:	4606      	mov	r6, r0
 800cf1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d06e      	beq.n	800cffe <_dtoa_r+0x90e>
 800cf20:	ee18 0a10 	vmov	r0, s16
 800cf24:	4631      	mov	r1, r6
 800cf26:	f000 fc6d 	bl	800d804 <__mcmp>
 800cf2a:	2800      	cmp	r0, #0
 800cf2c:	da67      	bge.n	800cffe <_dtoa_r+0x90e>
 800cf2e:	9b00      	ldr	r3, [sp, #0]
 800cf30:	3b01      	subs	r3, #1
 800cf32:	ee18 1a10 	vmov	r1, s16
 800cf36:	9300      	str	r3, [sp, #0]
 800cf38:	220a      	movs	r2, #10
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	4620      	mov	r0, r4
 800cf3e:	f000 fa41 	bl	800d3c4 <__multadd>
 800cf42:	9b08      	ldr	r3, [sp, #32]
 800cf44:	ee08 0a10 	vmov	s16, r0
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	f000 81b1 	beq.w	800d2b0 <_dtoa_r+0xbc0>
 800cf4e:	2300      	movs	r3, #0
 800cf50:	4639      	mov	r1, r7
 800cf52:	220a      	movs	r2, #10
 800cf54:	4620      	mov	r0, r4
 800cf56:	f000 fa35 	bl	800d3c4 <__multadd>
 800cf5a:	9b02      	ldr	r3, [sp, #8]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	4607      	mov	r7, r0
 800cf60:	f300 808e 	bgt.w	800d080 <_dtoa_r+0x990>
 800cf64:	9b06      	ldr	r3, [sp, #24]
 800cf66:	2b02      	cmp	r3, #2
 800cf68:	dc51      	bgt.n	800d00e <_dtoa_r+0x91e>
 800cf6a:	e089      	b.n	800d080 <_dtoa_r+0x990>
 800cf6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cf72:	e74b      	b.n	800ce0c <_dtoa_r+0x71c>
 800cf74:	9b03      	ldr	r3, [sp, #12]
 800cf76:	1e5e      	subs	r6, r3, #1
 800cf78:	9b07      	ldr	r3, [sp, #28]
 800cf7a:	42b3      	cmp	r3, r6
 800cf7c:	bfbf      	itttt	lt
 800cf7e:	9b07      	ldrlt	r3, [sp, #28]
 800cf80:	9607      	strlt	r6, [sp, #28]
 800cf82:	1af2      	sublt	r2, r6, r3
 800cf84:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cf86:	bfb6      	itet	lt
 800cf88:	189b      	addlt	r3, r3, r2
 800cf8a:	1b9e      	subge	r6, r3, r6
 800cf8c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cf8e:	9b03      	ldr	r3, [sp, #12]
 800cf90:	bfb8      	it	lt
 800cf92:	2600      	movlt	r6, #0
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	bfb7      	itett	lt
 800cf98:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cf9c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cfa0:	1a9d      	sublt	r5, r3, r2
 800cfa2:	2300      	movlt	r3, #0
 800cfa4:	e734      	b.n	800ce10 <_dtoa_r+0x720>
 800cfa6:	9e07      	ldr	r6, [sp, #28]
 800cfa8:	9d04      	ldr	r5, [sp, #16]
 800cfaa:	9f08      	ldr	r7, [sp, #32]
 800cfac:	e73b      	b.n	800ce26 <_dtoa_r+0x736>
 800cfae:	9a07      	ldr	r2, [sp, #28]
 800cfb0:	e767      	b.n	800ce82 <_dtoa_r+0x792>
 800cfb2:	9b06      	ldr	r3, [sp, #24]
 800cfb4:	2b01      	cmp	r3, #1
 800cfb6:	dc18      	bgt.n	800cfea <_dtoa_r+0x8fa>
 800cfb8:	f1ba 0f00 	cmp.w	sl, #0
 800cfbc:	d115      	bne.n	800cfea <_dtoa_r+0x8fa>
 800cfbe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cfc2:	b993      	cbnz	r3, 800cfea <_dtoa_r+0x8fa>
 800cfc4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cfc8:	0d1b      	lsrs	r3, r3, #20
 800cfca:	051b      	lsls	r3, r3, #20
 800cfcc:	b183      	cbz	r3, 800cff0 <_dtoa_r+0x900>
 800cfce:	9b04      	ldr	r3, [sp, #16]
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	9304      	str	r3, [sp, #16]
 800cfd4:	9b05      	ldr	r3, [sp, #20]
 800cfd6:	3301      	adds	r3, #1
 800cfd8:	9305      	str	r3, [sp, #20]
 800cfda:	f04f 0801 	mov.w	r8, #1
 800cfde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	f47f af6a 	bne.w	800ceba <_dtoa_r+0x7ca>
 800cfe6:	2001      	movs	r0, #1
 800cfe8:	e76f      	b.n	800ceca <_dtoa_r+0x7da>
 800cfea:	f04f 0800 	mov.w	r8, #0
 800cfee:	e7f6      	b.n	800cfde <_dtoa_r+0x8ee>
 800cff0:	4698      	mov	r8, r3
 800cff2:	e7f4      	b.n	800cfde <_dtoa_r+0x8ee>
 800cff4:	f43f af7d 	beq.w	800cef2 <_dtoa_r+0x802>
 800cff8:	4618      	mov	r0, r3
 800cffa:	301c      	adds	r0, #28
 800cffc:	e772      	b.n	800cee4 <_dtoa_r+0x7f4>
 800cffe:	9b03      	ldr	r3, [sp, #12]
 800d000:	2b00      	cmp	r3, #0
 800d002:	dc37      	bgt.n	800d074 <_dtoa_r+0x984>
 800d004:	9b06      	ldr	r3, [sp, #24]
 800d006:	2b02      	cmp	r3, #2
 800d008:	dd34      	ble.n	800d074 <_dtoa_r+0x984>
 800d00a:	9b03      	ldr	r3, [sp, #12]
 800d00c:	9302      	str	r3, [sp, #8]
 800d00e:	9b02      	ldr	r3, [sp, #8]
 800d010:	b96b      	cbnz	r3, 800d02e <_dtoa_r+0x93e>
 800d012:	4631      	mov	r1, r6
 800d014:	2205      	movs	r2, #5
 800d016:	4620      	mov	r0, r4
 800d018:	f000 f9d4 	bl	800d3c4 <__multadd>
 800d01c:	4601      	mov	r1, r0
 800d01e:	4606      	mov	r6, r0
 800d020:	ee18 0a10 	vmov	r0, s16
 800d024:	f000 fbee 	bl	800d804 <__mcmp>
 800d028:	2800      	cmp	r0, #0
 800d02a:	f73f adbb 	bgt.w	800cba4 <_dtoa_r+0x4b4>
 800d02e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d030:	9d01      	ldr	r5, [sp, #4]
 800d032:	43db      	mvns	r3, r3
 800d034:	9300      	str	r3, [sp, #0]
 800d036:	f04f 0800 	mov.w	r8, #0
 800d03a:	4631      	mov	r1, r6
 800d03c:	4620      	mov	r0, r4
 800d03e:	f000 f99f 	bl	800d380 <_Bfree>
 800d042:	2f00      	cmp	r7, #0
 800d044:	f43f aea4 	beq.w	800cd90 <_dtoa_r+0x6a0>
 800d048:	f1b8 0f00 	cmp.w	r8, #0
 800d04c:	d005      	beq.n	800d05a <_dtoa_r+0x96a>
 800d04e:	45b8      	cmp	r8, r7
 800d050:	d003      	beq.n	800d05a <_dtoa_r+0x96a>
 800d052:	4641      	mov	r1, r8
 800d054:	4620      	mov	r0, r4
 800d056:	f000 f993 	bl	800d380 <_Bfree>
 800d05a:	4639      	mov	r1, r7
 800d05c:	4620      	mov	r0, r4
 800d05e:	f000 f98f 	bl	800d380 <_Bfree>
 800d062:	e695      	b.n	800cd90 <_dtoa_r+0x6a0>
 800d064:	2600      	movs	r6, #0
 800d066:	4637      	mov	r7, r6
 800d068:	e7e1      	b.n	800d02e <_dtoa_r+0x93e>
 800d06a:	9700      	str	r7, [sp, #0]
 800d06c:	4637      	mov	r7, r6
 800d06e:	e599      	b.n	800cba4 <_dtoa_r+0x4b4>
 800d070:	40240000 	.word	0x40240000
 800d074:	9b08      	ldr	r3, [sp, #32]
 800d076:	2b00      	cmp	r3, #0
 800d078:	f000 80ca 	beq.w	800d210 <_dtoa_r+0xb20>
 800d07c:	9b03      	ldr	r3, [sp, #12]
 800d07e:	9302      	str	r3, [sp, #8]
 800d080:	2d00      	cmp	r5, #0
 800d082:	dd05      	ble.n	800d090 <_dtoa_r+0x9a0>
 800d084:	4639      	mov	r1, r7
 800d086:	462a      	mov	r2, r5
 800d088:	4620      	mov	r0, r4
 800d08a:	f000 fb4b 	bl	800d724 <__lshift>
 800d08e:	4607      	mov	r7, r0
 800d090:	f1b8 0f00 	cmp.w	r8, #0
 800d094:	d05b      	beq.n	800d14e <_dtoa_r+0xa5e>
 800d096:	6879      	ldr	r1, [r7, #4]
 800d098:	4620      	mov	r0, r4
 800d09a:	f000 f931 	bl	800d300 <_Balloc>
 800d09e:	4605      	mov	r5, r0
 800d0a0:	b928      	cbnz	r0, 800d0ae <_dtoa_r+0x9be>
 800d0a2:	4b87      	ldr	r3, [pc, #540]	; (800d2c0 <_dtoa_r+0xbd0>)
 800d0a4:	4602      	mov	r2, r0
 800d0a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d0aa:	f7ff bb3b 	b.w	800c724 <_dtoa_r+0x34>
 800d0ae:	693a      	ldr	r2, [r7, #16]
 800d0b0:	3202      	adds	r2, #2
 800d0b2:	0092      	lsls	r2, r2, #2
 800d0b4:	f107 010c 	add.w	r1, r7, #12
 800d0b8:	300c      	adds	r0, #12
 800d0ba:	f000 f913 	bl	800d2e4 <memcpy>
 800d0be:	2201      	movs	r2, #1
 800d0c0:	4629      	mov	r1, r5
 800d0c2:	4620      	mov	r0, r4
 800d0c4:	f000 fb2e 	bl	800d724 <__lshift>
 800d0c8:	9b01      	ldr	r3, [sp, #4]
 800d0ca:	f103 0901 	add.w	r9, r3, #1
 800d0ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d0d2:	4413      	add	r3, r2
 800d0d4:	9305      	str	r3, [sp, #20]
 800d0d6:	f00a 0301 	and.w	r3, sl, #1
 800d0da:	46b8      	mov	r8, r7
 800d0dc:	9304      	str	r3, [sp, #16]
 800d0de:	4607      	mov	r7, r0
 800d0e0:	4631      	mov	r1, r6
 800d0e2:	ee18 0a10 	vmov	r0, s16
 800d0e6:	f7ff fa77 	bl	800c5d8 <quorem>
 800d0ea:	4641      	mov	r1, r8
 800d0ec:	9002      	str	r0, [sp, #8]
 800d0ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d0f2:	ee18 0a10 	vmov	r0, s16
 800d0f6:	f000 fb85 	bl	800d804 <__mcmp>
 800d0fa:	463a      	mov	r2, r7
 800d0fc:	9003      	str	r0, [sp, #12]
 800d0fe:	4631      	mov	r1, r6
 800d100:	4620      	mov	r0, r4
 800d102:	f000 fb9b 	bl	800d83c <__mdiff>
 800d106:	68c2      	ldr	r2, [r0, #12]
 800d108:	f109 3bff 	add.w	fp, r9, #4294967295
 800d10c:	4605      	mov	r5, r0
 800d10e:	bb02      	cbnz	r2, 800d152 <_dtoa_r+0xa62>
 800d110:	4601      	mov	r1, r0
 800d112:	ee18 0a10 	vmov	r0, s16
 800d116:	f000 fb75 	bl	800d804 <__mcmp>
 800d11a:	4602      	mov	r2, r0
 800d11c:	4629      	mov	r1, r5
 800d11e:	4620      	mov	r0, r4
 800d120:	9207      	str	r2, [sp, #28]
 800d122:	f000 f92d 	bl	800d380 <_Bfree>
 800d126:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d12a:	ea43 0102 	orr.w	r1, r3, r2
 800d12e:	9b04      	ldr	r3, [sp, #16]
 800d130:	430b      	orrs	r3, r1
 800d132:	464d      	mov	r5, r9
 800d134:	d10f      	bne.n	800d156 <_dtoa_r+0xa66>
 800d136:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d13a:	d02a      	beq.n	800d192 <_dtoa_r+0xaa2>
 800d13c:	9b03      	ldr	r3, [sp, #12]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	dd02      	ble.n	800d148 <_dtoa_r+0xa58>
 800d142:	9b02      	ldr	r3, [sp, #8]
 800d144:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d148:	f88b a000 	strb.w	sl, [fp]
 800d14c:	e775      	b.n	800d03a <_dtoa_r+0x94a>
 800d14e:	4638      	mov	r0, r7
 800d150:	e7ba      	b.n	800d0c8 <_dtoa_r+0x9d8>
 800d152:	2201      	movs	r2, #1
 800d154:	e7e2      	b.n	800d11c <_dtoa_r+0xa2c>
 800d156:	9b03      	ldr	r3, [sp, #12]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	db04      	blt.n	800d166 <_dtoa_r+0xa76>
 800d15c:	9906      	ldr	r1, [sp, #24]
 800d15e:	430b      	orrs	r3, r1
 800d160:	9904      	ldr	r1, [sp, #16]
 800d162:	430b      	orrs	r3, r1
 800d164:	d122      	bne.n	800d1ac <_dtoa_r+0xabc>
 800d166:	2a00      	cmp	r2, #0
 800d168:	ddee      	ble.n	800d148 <_dtoa_r+0xa58>
 800d16a:	ee18 1a10 	vmov	r1, s16
 800d16e:	2201      	movs	r2, #1
 800d170:	4620      	mov	r0, r4
 800d172:	f000 fad7 	bl	800d724 <__lshift>
 800d176:	4631      	mov	r1, r6
 800d178:	ee08 0a10 	vmov	s16, r0
 800d17c:	f000 fb42 	bl	800d804 <__mcmp>
 800d180:	2800      	cmp	r0, #0
 800d182:	dc03      	bgt.n	800d18c <_dtoa_r+0xa9c>
 800d184:	d1e0      	bne.n	800d148 <_dtoa_r+0xa58>
 800d186:	f01a 0f01 	tst.w	sl, #1
 800d18a:	d0dd      	beq.n	800d148 <_dtoa_r+0xa58>
 800d18c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d190:	d1d7      	bne.n	800d142 <_dtoa_r+0xa52>
 800d192:	2339      	movs	r3, #57	; 0x39
 800d194:	f88b 3000 	strb.w	r3, [fp]
 800d198:	462b      	mov	r3, r5
 800d19a:	461d      	mov	r5, r3
 800d19c:	3b01      	subs	r3, #1
 800d19e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d1a2:	2a39      	cmp	r2, #57	; 0x39
 800d1a4:	d071      	beq.n	800d28a <_dtoa_r+0xb9a>
 800d1a6:	3201      	adds	r2, #1
 800d1a8:	701a      	strb	r2, [r3, #0]
 800d1aa:	e746      	b.n	800d03a <_dtoa_r+0x94a>
 800d1ac:	2a00      	cmp	r2, #0
 800d1ae:	dd07      	ble.n	800d1c0 <_dtoa_r+0xad0>
 800d1b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d1b4:	d0ed      	beq.n	800d192 <_dtoa_r+0xaa2>
 800d1b6:	f10a 0301 	add.w	r3, sl, #1
 800d1ba:	f88b 3000 	strb.w	r3, [fp]
 800d1be:	e73c      	b.n	800d03a <_dtoa_r+0x94a>
 800d1c0:	9b05      	ldr	r3, [sp, #20]
 800d1c2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d1c6:	4599      	cmp	r9, r3
 800d1c8:	d047      	beq.n	800d25a <_dtoa_r+0xb6a>
 800d1ca:	ee18 1a10 	vmov	r1, s16
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	220a      	movs	r2, #10
 800d1d2:	4620      	mov	r0, r4
 800d1d4:	f000 f8f6 	bl	800d3c4 <__multadd>
 800d1d8:	45b8      	cmp	r8, r7
 800d1da:	ee08 0a10 	vmov	s16, r0
 800d1de:	f04f 0300 	mov.w	r3, #0
 800d1e2:	f04f 020a 	mov.w	r2, #10
 800d1e6:	4641      	mov	r1, r8
 800d1e8:	4620      	mov	r0, r4
 800d1ea:	d106      	bne.n	800d1fa <_dtoa_r+0xb0a>
 800d1ec:	f000 f8ea 	bl	800d3c4 <__multadd>
 800d1f0:	4680      	mov	r8, r0
 800d1f2:	4607      	mov	r7, r0
 800d1f4:	f109 0901 	add.w	r9, r9, #1
 800d1f8:	e772      	b.n	800d0e0 <_dtoa_r+0x9f0>
 800d1fa:	f000 f8e3 	bl	800d3c4 <__multadd>
 800d1fe:	4639      	mov	r1, r7
 800d200:	4680      	mov	r8, r0
 800d202:	2300      	movs	r3, #0
 800d204:	220a      	movs	r2, #10
 800d206:	4620      	mov	r0, r4
 800d208:	f000 f8dc 	bl	800d3c4 <__multadd>
 800d20c:	4607      	mov	r7, r0
 800d20e:	e7f1      	b.n	800d1f4 <_dtoa_r+0xb04>
 800d210:	9b03      	ldr	r3, [sp, #12]
 800d212:	9302      	str	r3, [sp, #8]
 800d214:	9d01      	ldr	r5, [sp, #4]
 800d216:	ee18 0a10 	vmov	r0, s16
 800d21a:	4631      	mov	r1, r6
 800d21c:	f7ff f9dc 	bl	800c5d8 <quorem>
 800d220:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d224:	9b01      	ldr	r3, [sp, #4]
 800d226:	f805 ab01 	strb.w	sl, [r5], #1
 800d22a:	1aea      	subs	r2, r5, r3
 800d22c:	9b02      	ldr	r3, [sp, #8]
 800d22e:	4293      	cmp	r3, r2
 800d230:	dd09      	ble.n	800d246 <_dtoa_r+0xb56>
 800d232:	ee18 1a10 	vmov	r1, s16
 800d236:	2300      	movs	r3, #0
 800d238:	220a      	movs	r2, #10
 800d23a:	4620      	mov	r0, r4
 800d23c:	f000 f8c2 	bl	800d3c4 <__multadd>
 800d240:	ee08 0a10 	vmov	s16, r0
 800d244:	e7e7      	b.n	800d216 <_dtoa_r+0xb26>
 800d246:	9b02      	ldr	r3, [sp, #8]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	bfc8      	it	gt
 800d24c:	461d      	movgt	r5, r3
 800d24e:	9b01      	ldr	r3, [sp, #4]
 800d250:	bfd8      	it	le
 800d252:	2501      	movle	r5, #1
 800d254:	441d      	add	r5, r3
 800d256:	f04f 0800 	mov.w	r8, #0
 800d25a:	ee18 1a10 	vmov	r1, s16
 800d25e:	2201      	movs	r2, #1
 800d260:	4620      	mov	r0, r4
 800d262:	f000 fa5f 	bl	800d724 <__lshift>
 800d266:	4631      	mov	r1, r6
 800d268:	ee08 0a10 	vmov	s16, r0
 800d26c:	f000 faca 	bl	800d804 <__mcmp>
 800d270:	2800      	cmp	r0, #0
 800d272:	dc91      	bgt.n	800d198 <_dtoa_r+0xaa8>
 800d274:	d102      	bne.n	800d27c <_dtoa_r+0xb8c>
 800d276:	f01a 0f01 	tst.w	sl, #1
 800d27a:	d18d      	bne.n	800d198 <_dtoa_r+0xaa8>
 800d27c:	462b      	mov	r3, r5
 800d27e:	461d      	mov	r5, r3
 800d280:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d284:	2a30      	cmp	r2, #48	; 0x30
 800d286:	d0fa      	beq.n	800d27e <_dtoa_r+0xb8e>
 800d288:	e6d7      	b.n	800d03a <_dtoa_r+0x94a>
 800d28a:	9a01      	ldr	r2, [sp, #4]
 800d28c:	429a      	cmp	r2, r3
 800d28e:	d184      	bne.n	800d19a <_dtoa_r+0xaaa>
 800d290:	9b00      	ldr	r3, [sp, #0]
 800d292:	3301      	adds	r3, #1
 800d294:	9300      	str	r3, [sp, #0]
 800d296:	2331      	movs	r3, #49	; 0x31
 800d298:	7013      	strb	r3, [r2, #0]
 800d29a:	e6ce      	b.n	800d03a <_dtoa_r+0x94a>
 800d29c:	4b09      	ldr	r3, [pc, #36]	; (800d2c4 <_dtoa_r+0xbd4>)
 800d29e:	f7ff ba95 	b.w	800c7cc <_dtoa_r+0xdc>
 800d2a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	f47f aa6e 	bne.w	800c786 <_dtoa_r+0x96>
 800d2aa:	4b07      	ldr	r3, [pc, #28]	; (800d2c8 <_dtoa_r+0xbd8>)
 800d2ac:	f7ff ba8e 	b.w	800c7cc <_dtoa_r+0xdc>
 800d2b0:	9b02      	ldr	r3, [sp, #8]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	dcae      	bgt.n	800d214 <_dtoa_r+0xb24>
 800d2b6:	9b06      	ldr	r3, [sp, #24]
 800d2b8:	2b02      	cmp	r3, #2
 800d2ba:	f73f aea8 	bgt.w	800d00e <_dtoa_r+0x91e>
 800d2be:	e7a9      	b.n	800d214 <_dtoa_r+0xb24>
 800d2c0:	0800ecc3 	.word	0x0800ecc3
 800d2c4:	0800ec20 	.word	0x0800ec20
 800d2c8:	0800ec44 	.word	0x0800ec44

0800d2cc <_localeconv_r>:
 800d2cc:	4800      	ldr	r0, [pc, #0]	; (800d2d0 <_localeconv_r+0x4>)
 800d2ce:	4770      	bx	lr
 800d2d0:	20000268 	.word	0x20000268

0800d2d4 <malloc>:
 800d2d4:	4b02      	ldr	r3, [pc, #8]	; (800d2e0 <malloc+0xc>)
 800d2d6:	4601      	mov	r1, r0
 800d2d8:	6818      	ldr	r0, [r3, #0]
 800d2da:	f000 bc17 	b.w	800db0c <_malloc_r>
 800d2de:	bf00      	nop
 800d2e0:	20000114 	.word	0x20000114

0800d2e4 <memcpy>:
 800d2e4:	440a      	add	r2, r1
 800d2e6:	4291      	cmp	r1, r2
 800d2e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d2ec:	d100      	bne.n	800d2f0 <memcpy+0xc>
 800d2ee:	4770      	bx	lr
 800d2f0:	b510      	push	{r4, lr}
 800d2f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2fa:	4291      	cmp	r1, r2
 800d2fc:	d1f9      	bne.n	800d2f2 <memcpy+0xe>
 800d2fe:	bd10      	pop	{r4, pc}

0800d300 <_Balloc>:
 800d300:	b570      	push	{r4, r5, r6, lr}
 800d302:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d304:	4604      	mov	r4, r0
 800d306:	460d      	mov	r5, r1
 800d308:	b976      	cbnz	r6, 800d328 <_Balloc+0x28>
 800d30a:	2010      	movs	r0, #16
 800d30c:	f7ff ffe2 	bl	800d2d4 <malloc>
 800d310:	4602      	mov	r2, r0
 800d312:	6260      	str	r0, [r4, #36]	; 0x24
 800d314:	b920      	cbnz	r0, 800d320 <_Balloc+0x20>
 800d316:	4b18      	ldr	r3, [pc, #96]	; (800d378 <_Balloc+0x78>)
 800d318:	4818      	ldr	r0, [pc, #96]	; (800d37c <_Balloc+0x7c>)
 800d31a:	2166      	movs	r1, #102	; 0x66
 800d31c:	f000 fdd6 	bl	800decc <__assert_func>
 800d320:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d324:	6006      	str	r6, [r0, #0]
 800d326:	60c6      	str	r6, [r0, #12]
 800d328:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d32a:	68f3      	ldr	r3, [r6, #12]
 800d32c:	b183      	cbz	r3, 800d350 <_Balloc+0x50>
 800d32e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d330:	68db      	ldr	r3, [r3, #12]
 800d332:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d336:	b9b8      	cbnz	r0, 800d368 <_Balloc+0x68>
 800d338:	2101      	movs	r1, #1
 800d33a:	fa01 f605 	lsl.w	r6, r1, r5
 800d33e:	1d72      	adds	r2, r6, #5
 800d340:	0092      	lsls	r2, r2, #2
 800d342:	4620      	mov	r0, r4
 800d344:	f000 fb60 	bl	800da08 <_calloc_r>
 800d348:	b160      	cbz	r0, 800d364 <_Balloc+0x64>
 800d34a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d34e:	e00e      	b.n	800d36e <_Balloc+0x6e>
 800d350:	2221      	movs	r2, #33	; 0x21
 800d352:	2104      	movs	r1, #4
 800d354:	4620      	mov	r0, r4
 800d356:	f000 fb57 	bl	800da08 <_calloc_r>
 800d35a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d35c:	60f0      	str	r0, [r6, #12]
 800d35e:	68db      	ldr	r3, [r3, #12]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d1e4      	bne.n	800d32e <_Balloc+0x2e>
 800d364:	2000      	movs	r0, #0
 800d366:	bd70      	pop	{r4, r5, r6, pc}
 800d368:	6802      	ldr	r2, [r0, #0]
 800d36a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d36e:	2300      	movs	r3, #0
 800d370:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d374:	e7f7      	b.n	800d366 <_Balloc+0x66>
 800d376:	bf00      	nop
 800d378:	0800ec51 	.word	0x0800ec51
 800d37c:	0800ecd4 	.word	0x0800ecd4

0800d380 <_Bfree>:
 800d380:	b570      	push	{r4, r5, r6, lr}
 800d382:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d384:	4605      	mov	r5, r0
 800d386:	460c      	mov	r4, r1
 800d388:	b976      	cbnz	r6, 800d3a8 <_Bfree+0x28>
 800d38a:	2010      	movs	r0, #16
 800d38c:	f7ff ffa2 	bl	800d2d4 <malloc>
 800d390:	4602      	mov	r2, r0
 800d392:	6268      	str	r0, [r5, #36]	; 0x24
 800d394:	b920      	cbnz	r0, 800d3a0 <_Bfree+0x20>
 800d396:	4b09      	ldr	r3, [pc, #36]	; (800d3bc <_Bfree+0x3c>)
 800d398:	4809      	ldr	r0, [pc, #36]	; (800d3c0 <_Bfree+0x40>)
 800d39a:	218a      	movs	r1, #138	; 0x8a
 800d39c:	f000 fd96 	bl	800decc <__assert_func>
 800d3a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3a4:	6006      	str	r6, [r0, #0]
 800d3a6:	60c6      	str	r6, [r0, #12]
 800d3a8:	b13c      	cbz	r4, 800d3ba <_Bfree+0x3a>
 800d3aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d3ac:	6862      	ldr	r2, [r4, #4]
 800d3ae:	68db      	ldr	r3, [r3, #12]
 800d3b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d3b4:	6021      	str	r1, [r4, #0]
 800d3b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d3ba:	bd70      	pop	{r4, r5, r6, pc}
 800d3bc:	0800ec51 	.word	0x0800ec51
 800d3c0:	0800ecd4 	.word	0x0800ecd4

0800d3c4 <__multadd>:
 800d3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3c8:	690d      	ldr	r5, [r1, #16]
 800d3ca:	4607      	mov	r7, r0
 800d3cc:	460c      	mov	r4, r1
 800d3ce:	461e      	mov	r6, r3
 800d3d0:	f101 0c14 	add.w	ip, r1, #20
 800d3d4:	2000      	movs	r0, #0
 800d3d6:	f8dc 3000 	ldr.w	r3, [ip]
 800d3da:	b299      	uxth	r1, r3
 800d3dc:	fb02 6101 	mla	r1, r2, r1, r6
 800d3e0:	0c1e      	lsrs	r6, r3, #16
 800d3e2:	0c0b      	lsrs	r3, r1, #16
 800d3e4:	fb02 3306 	mla	r3, r2, r6, r3
 800d3e8:	b289      	uxth	r1, r1
 800d3ea:	3001      	adds	r0, #1
 800d3ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d3f0:	4285      	cmp	r5, r0
 800d3f2:	f84c 1b04 	str.w	r1, [ip], #4
 800d3f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d3fa:	dcec      	bgt.n	800d3d6 <__multadd+0x12>
 800d3fc:	b30e      	cbz	r6, 800d442 <__multadd+0x7e>
 800d3fe:	68a3      	ldr	r3, [r4, #8]
 800d400:	42ab      	cmp	r3, r5
 800d402:	dc19      	bgt.n	800d438 <__multadd+0x74>
 800d404:	6861      	ldr	r1, [r4, #4]
 800d406:	4638      	mov	r0, r7
 800d408:	3101      	adds	r1, #1
 800d40a:	f7ff ff79 	bl	800d300 <_Balloc>
 800d40e:	4680      	mov	r8, r0
 800d410:	b928      	cbnz	r0, 800d41e <__multadd+0x5a>
 800d412:	4602      	mov	r2, r0
 800d414:	4b0c      	ldr	r3, [pc, #48]	; (800d448 <__multadd+0x84>)
 800d416:	480d      	ldr	r0, [pc, #52]	; (800d44c <__multadd+0x88>)
 800d418:	21b5      	movs	r1, #181	; 0xb5
 800d41a:	f000 fd57 	bl	800decc <__assert_func>
 800d41e:	6922      	ldr	r2, [r4, #16]
 800d420:	3202      	adds	r2, #2
 800d422:	f104 010c 	add.w	r1, r4, #12
 800d426:	0092      	lsls	r2, r2, #2
 800d428:	300c      	adds	r0, #12
 800d42a:	f7ff ff5b 	bl	800d2e4 <memcpy>
 800d42e:	4621      	mov	r1, r4
 800d430:	4638      	mov	r0, r7
 800d432:	f7ff ffa5 	bl	800d380 <_Bfree>
 800d436:	4644      	mov	r4, r8
 800d438:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d43c:	3501      	adds	r5, #1
 800d43e:	615e      	str	r6, [r3, #20]
 800d440:	6125      	str	r5, [r4, #16]
 800d442:	4620      	mov	r0, r4
 800d444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d448:	0800ecc3 	.word	0x0800ecc3
 800d44c:	0800ecd4 	.word	0x0800ecd4

0800d450 <__hi0bits>:
 800d450:	0c03      	lsrs	r3, r0, #16
 800d452:	041b      	lsls	r3, r3, #16
 800d454:	b9d3      	cbnz	r3, 800d48c <__hi0bits+0x3c>
 800d456:	0400      	lsls	r0, r0, #16
 800d458:	2310      	movs	r3, #16
 800d45a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d45e:	bf04      	itt	eq
 800d460:	0200      	lsleq	r0, r0, #8
 800d462:	3308      	addeq	r3, #8
 800d464:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d468:	bf04      	itt	eq
 800d46a:	0100      	lsleq	r0, r0, #4
 800d46c:	3304      	addeq	r3, #4
 800d46e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d472:	bf04      	itt	eq
 800d474:	0080      	lsleq	r0, r0, #2
 800d476:	3302      	addeq	r3, #2
 800d478:	2800      	cmp	r0, #0
 800d47a:	db05      	blt.n	800d488 <__hi0bits+0x38>
 800d47c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d480:	f103 0301 	add.w	r3, r3, #1
 800d484:	bf08      	it	eq
 800d486:	2320      	moveq	r3, #32
 800d488:	4618      	mov	r0, r3
 800d48a:	4770      	bx	lr
 800d48c:	2300      	movs	r3, #0
 800d48e:	e7e4      	b.n	800d45a <__hi0bits+0xa>

0800d490 <__lo0bits>:
 800d490:	6803      	ldr	r3, [r0, #0]
 800d492:	f013 0207 	ands.w	r2, r3, #7
 800d496:	4601      	mov	r1, r0
 800d498:	d00b      	beq.n	800d4b2 <__lo0bits+0x22>
 800d49a:	07da      	lsls	r2, r3, #31
 800d49c:	d423      	bmi.n	800d4e6 <__lo0bits+0x56>
 800d49e:	0798      	lsls	r0, r3, #30
 800d4a0:	bf49      	itett	mi
 800d4a2:	085b      	lsrmi	r3, r3, #1
 800d4a4:	089b      	lsrpl	r3, r3, #2
 800d4a6:	2001      	movmi	r0, #1
 800d4a8:	600b      	strmi	r3, [r1, #0]
 800d4aa:	bf5c      	itt	pl
 800d4ac:	600b      	strpl	r3, [r1, #0]
 800d4ae:	2002      	movpl	r0, #2
 800d4b0:	4770      	bx	lr
 800d4b2:	b298      	uxth	r0, r3
 800d4b4:	b9a8      	cbnz	r0, 800d4e2 <__lo0bits+0x52>
 800d4b6:	0c1b      	lsrs	r3, r3, #16
 800d4b8:	2010      	movs	r0, #16
 800d4ba:	b2da      	uxtb	r2, r3
 800d4bc:	b90a      	cbnz	r2, 800d4c2 <__lo0bits+0x32>
 800d4be:	3008      	adds	r0, #8
 800d4c0:	0a1b      	lsrs	r3, r3, #8
 800d4c2:	071a      	lsls	r2, r3, #28
 800d4c4:	bf04      	itt	eq
 800d4c6:	091b      	lsreq	r3, r3, #4
 800d4c8:	3004      	addeq	r0, #4
 800d4ca:	079a      	lsls	r2, r3, #30
 800d4cc:	bf04      	itt	eq
 800d4ce:	089b      	lsreq	r3, r3, #2
 800d4d0:	3002      	addeq	r0, #2
 800d4d2:	07da      	lsls	r2, r3, #31
 800d4d4:	d403      	bmi.n	800d4de <__lo0bits+0x4e>
 800d4d6:	085b      	lsrs	r3, r3, #1
 800d4d8:	f100 0001 	add.w	r0, r0, #1
 800d4dc:	d005      	beq.n	800d4ea <__lo0bits+0x5a>
 800d4de:	600b      	str	r3, [r1, #0]
 800d4e0:	4770      	bx	lr
 800d4e2:	4610      	mov	r0, r2
 800d4e4:	e7e9      	b.n	800d4ba <__lo0bits+0x2a>
 800d4e6:	2000      	movs	r0, #0
 800d4e8:	4770      	bx	lr
 800d4ea:	2020      	movs	r0, #32
 800d4ec:	4770      	bx	lr
	...

0800d4f0 <__i2b>:
 800d4f0:	b510      	push	{r4, lr}
 800d4f2:	460c      	mov	r4, r1
 800d4f4:	2101      	movs	r1, #1
 800d4f6:	f7ff ff03 	bl	800d300 <_Balloc>
 800d4fa:	4602      	mov	r2, r0
 800d4fc:	b928      	cbnz	r0, 800d50a <__i2b+0x1a>
 800d4fe:	4b05      	ldr	r3, [pc, #20]	; (800d514 <__i2b+0x24>)
 800d500:	4805      	ldr	r0, [pc, #20]	; (800d518 <__i2b+0x28>)
 800d502:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d506:	f000 fce1 	bl	800decc <__assert_func>
 800d50a:	2301      	movs	r3, #1
 800d50c:	6144      	str	r4, [r0, #20]
 800d50e:	6103      	str	r3, [r0, #16]
 800d510:	bd10      	pop	{r4, pc}
 800d512:	bf00      	nop
 800d514:	0800ecc3 	.word	0x0800ecc3
 800d518:	0800ecd4 	.word	0x0800ecd4

0800d51c <__multiply>:
 800d51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d520:	4691      	mov	r9, r2
 800d522:	690a      	ldr	r2, [r1, #16]
 800d524:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d528:	429a      	cmp	r2, r3
 800d52a:	bfb8      	it	lt
 800d52c:	460b      	movlt	r3, r1
 800d52e:	460c      	mov	r4, r1
 800d530:	bfbc      	itt	lt
 800d532:	464c      	movlt	r4, r9
 800d534:	4699      	movlt	r9, r3
 800d536:	6927      	ldr	r7, [r4, #16]
 800d538:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d53c:	68a3      	ldr	r3, [r4, #8]
 800d53e:	6861      	ldr	r1, [r4, #4]
 800d540:	eb07 060a 	add.w	r6, r7, sl
 800d544:	42b3      	cmp	r3, r6
 800d546:	b085      	sub	sp, #20
 800d548:	bfb8      	it	lt
 800d54a:	3101      	addlt	r1, #1
 800d54c:	f7ff fed8 	bl	800d300 <_Balloc>
 800d550:	b930      	cbnz	r0, 800d560 <__multiply+0x44>
 800d552:	4602      	mov	r2, r0
 800d554:	4b44      	ldr	r3, [pc, #272]	; (800d668 <__multiply+0x14c>)
 800d556:	4845      	ldr	r0, [pc, #276]	; (800d66c <__multiply+0x150>)
 800d558:	f240 115d 	movw	r1, #349	; 0x15d
 800d55c:	f000 fcb6 	bl	800decc <__assert_func>
 800d560:	f100 0514 	add.w	r5, r0, #20
 800d564:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d568:	462b      	mov	r3, r5
 800d56a:	2200      	movs	r2, #0
 800d56c:	4543      	cmp	r3, r8
 800d56e:	d321      	bcc.n	800d5b4 <__multiply+0x98>
 800d570:	f104 0314 	add.w	r3, r4, #20
 800d574:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d578:	f109 0314 	add.w	r3, r9, #20
 800d57c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d580:	9202      	str	r2, [sp, #8]
 800d582:	1b3a      	subs	r2, r7, r4
 800d584:	3a15      	subs	r2, #21
 800d586:	f022 0203 	bic.w	r2, r2, #3
 800d58a:	3204      	adds	r2, #4
 800d58c:	f104 0115 	add.w	r1, r4, #21
 800d590:	428f      	cmp	r7, r1
 800d592:	bf38      	it	cc
 800d594:	2204      	movcc	r2, #4
 800d596:	9201      	str	r2, [sp, #4]
 800d598:	9a02      	ldr	r2, [sp, #8]
 800d59a:	9303      	str	r3, [sp, #12]
 800d59c:	429a      	cmp	r2, r3
 800d59e:	d80c      	bhi.n	800d5ba <__multiply+0x9e>
 800d5a0:	2e00      	cmp	r6, #0
 800d5a2:	dd03      	ble.n	800d5ac <__multiply+0x90>
 800d5a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d05a      	beq.n	800d662 <__multiply+0x146>
 800d5ac:	6106      	str	r6, [r0, #16]
 800d5ae:	b005      	add	sp, #20
 800d5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5b4:	f843 2b04 	str.w	r2, [r3], #4
 800d5b8:	e7d8      	b.n	800d56c <__multiply+0x50>
 800d5ba:	f8b3 a000 	ldrh.w	sl, [r3]
 800d5be:	f1ba 0f00 	cmp.w	sl, #0
 800d5c2:	d024      	beq.n	800d60e <__multiply+0xf2>
 800d5c4:	f104 0e14 	add.w	lr, r4, #20
 800d5c8:	46a9      	mov	r9, r5
 800d5ca:	f04f 0c00 	mov.w	ip, #0
 800d5ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d5d2:	f8d9 1000 	ldr.w	r1, [r9]
 800d5d6:	fa1f fb82 	uxth.w	fp, r2
 800d5da:	b289      	uxth	r1, r1
 800d5dc:	fb0a 110b 	mla	r1, sl, fp, r1
 800d5e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d5e4:	f8d9 2000 	ldr.w	r2, [r9]
 800d5e8:	4461      	add	r1, ip
 800d5ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d5ee:	fb0a c20b 	mla	r2, sl, fp, ip
 800d5f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d5f6:	b289      	uxth	r1, r1
 800d5f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d5fc:	4577      	cmp	r7, lr
 800d5fe:	f849 1b04 	str.w	r1, [r9], #4
 800d602:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d606:	d8e2      	bhi.n	800d5ce <__multiply+0xb2>
 800d608:	9a01      	ldr	r2, [sp, #4]
 800d60a:	f845 c002 	str.w	ip, [r5, r2]
 800d60e:	9a03      	ldr	r2, [sp, #12]
 800d610:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d614:	3304      	adds	r3, #4
 800d616:	f1b9 0f00 	cmp.w	r9, #0
 800d61a:	d020      	beq.n	800d65e <__multiply+0x142>
 800d61c:	6829      	ldr	r1, [r5, #0]
 800d61e:	f104 0c14 	add.w	ip, r4, #20
 800d622:	46ae      	mov	lr, r5
 800d624:	f04f 0a00 	mov.w	sl, #0
 800d628:	f8bc b000 	ldrh.w	fp, [ip]
 800d62c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d630:	fb09 220b 	mla	r2, r9, fp, r2
 800d634:	4492      	add	sl, r2
 800d636:	b289      	uxth	r1, r1
 800d638:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d63c:	f84e 1b04 	str.w	r1, [lr], #4
 800d640:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d644:	f8be 1000 	ldrh.w	r1, [lr]
 800d648:	0c12      	lsrs	r2, r2, #16
 800d64a:	fb09 1102 	mla	r1, r9, r2, r1
 800d64e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d652:	4567      	cmp	r7, ip
 800d654:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d658:	d8e6      	bhi.n	800d628 <__multiply+0x10c>
 800d65a:	9a01      	ldr	r2, [sp, #4]
 800d65c:	50a9      	str	r1, [r5, r2]
 800d65e:	3504      	adds	r5, #4
 800d660:	e79a      	b.n	800d598 <__multiply+0x7c>
 800d662:	3e01      	subs	r6, #1
 800d664:	e79c      	b.n	800d5a0 <__multiply+0x84>
 800d666:	bf00      	nop
 800d668:	0800ecc3 	.word	0x0800ecc3
 800d66c:	0800ecd4 	.word	0x0800ecd4

0800d670 <__pow5mult>:
 800d670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d674:	4615      	mov	r5, r2
 800d676:	f012 0203 	ands.w	r2, r2, #3
 800d67a:	4606      	mov	r6, r0
 800d67c:	460f      	mov	r7, r1
 800d67e:	d007      	beq.n	800d690 <__pow5mult+0x20>
 800d680:	4c25      	ldr	r4, [pc, #148]	; (800d718 <__pow5mult+0xa8>)
 800d682:	3a01      	subs	r2, #1
 800d684:	2300      	movs	r3, #0
 800d686:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d68a:	f7ff fe9b 	bl	800d3c4 <__multadd>
 800d68e:	4607      	mov	r7, r0
 800d690:	10ad      	asrs	r5, r5, #2
 800d692:	d03d      	beq.n	800d710 <__pow5mult+0xa0>
 800d694:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d696:	b97c      	cbnz	r4, 800d6b8 <__pow5mult+0x48>
 800d698:	2010      	movs	r0, #16
 800d69a:	f7ff fe1b 	bl	800d2d4 <malloc>
 800d69e:	4602      	mov	r2, r0
 800d6a0:	6270      	str	r0, [r6, #36]	; 0x24
 800d6a2:	b928      	cbnz	r0, 800d6b0 <__pow5mult+0x40>
 800d6a4:	4b1d      	ldr	r3, [pc, #116]	; (800d71c <__pow5mult+0xac>)
 800d6a6:	481e      	ldr	r0, [pc, #120]	; (800d720 <__pow5mult+0xb0>)
 800d6a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d6ac:	f000 fc0e 	bl	800decc <__assert_func>
 800d6b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d6b4:	6004      	str	r4, [r0, #0]
 800d6b6:	60c4      	str	r4, [r0, #12]
 800d6b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d6bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d6c0:	b94c      	cbnz	r4, 800d6d6 <__pow5mult+0x66>
 800d6c2:	f240 2171 	movw	r1, #625	; 0x271
 800d6c6:	4630      	mov	r0, r6
 800d6c8:	f7ff ff12 	bl	800d4f0 <__i2b>
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800d6d2:	4604      	mov	r4, r0
 800d6d4:	6003      	str	r3, [r0, #0]
 800d6d6:	f04f 0900 	mov.w	r9, #0
 800d6da:	07eb      	lsls	r3, r5, #31
 800d6dc:	d50a      	bpl.n	800d6f4 <__pow5mult+0x84>
 800d6de:	4639      	mov	r1, r7
 800d6e0:	4622      	mov	r2, r4
 800d6e2:	4630      	mov	r0, r6
 800d6e4:	f7ff ff1a 	bl	800d51c <__multiply>
 800d6e8:	4639      	mov	r1, r7
 800d6ea:	4680      	mov	r8, r0
 800d6ec:	4630      	mov	r0, r6
 800d6ee:	f7ff fe47 	bl	800d380 <_Bfree>
 800d6f2:	4647      	mov	r7, r8
 800d6f4:	106d      	asrs	r5, r5, #1
 800d6f6:	d00b      	beq.n	800d710 <__pow5mult+0xa0>
 800d6f8:	6820      	ldr	r0, [r4, #0]
 800d6fa:	b938      	cbnz	r0, 800d70c <__pow5mult+0x9c>
 800d6fc:	4622      	mov	r2, r4
 800d6fe:	4621      	mov	r1, r4
 800d700:	4630      	mov	r0, r6
 800d702:	f7ff ff0b 	bl	800d51c <__multiply>
 800d706:	6020      	str	r0, [r4, #0]
 800d708:	f8c0 9000 	str.w	r9, [r0]
 800d70c:	4604      	mov	r4, r0
 800d70e:	e7e4      	b.n	800d6da <__pow5mult+0x6a>
 800d710:	4638      	mov	r0, r7
 800d712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d716:	bf00      	nop
 800d718:	0800ee20 	.word	0x0800ee20
 800d71c:	0800ec51 	.word	0x0800ec51
 800d720:	0800ecd4 	.word	0x0800ecd4

0800d724 <__lshift>:
 800d724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d728:	460c      	mov	r4, r1
 800d72a:	6849      	ldr	r1, [r1, #4]
 800d72c:	6923      	ldr	r3, [r4, #16]
 800d72e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d732:	68a3      	ldr	r3, [r4, #8]
 800d734:	4607      	mov	r7, r0
 800d736:	4691      	mov	r9, r2
 800d738:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d73c:	f108 0601 	add.w	r6, r8, #1
 800d740:	42b3      	cmp	r3, r6
 800d742:	db0b      	blt.n	800d75c <__lshift+0x38>
 800d744:	4638      	mov	r0, r7
 800d746:	f7ff fddb 	bl	800d300 <_Balloc>
 800d74a:	4605      	mov	r5, r0
 800d74c:	b948      	cbnz	r0, 800d762 <__lshift+0x3e>
 800d74e:	4602      	mov	r2, r0
 800d750:	4b2a      	ldr	r3, [pc, #168]	; (800d7fc <__lshift+0xd8>)
 800d752:	482b      	ldr	r0, [pc, #172]	; (800d800 <__lshift+0xdc>)
 800d754:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d758:	f000 fbb8 	bl	800decc <__assert_func>
 800d75c:	3101      	adds	r1, #1
 800d75e:	005b      	lsls	r3, r3, #1
 800d760:	e7ee      	b.n	800d740 <__lshift+0x1c>
 800d762:	2300      	movs	r3, #0
 800d764:	f100 0114 	add.w	r1, r0, #20
 800d768:	f100 0210 	add.w	r2, r0, #16
 800d76c:	4618      	mov	r0, r3
 800d76e:	4553      	cmp	r3, sl
 800d770:	db37      	blt.n	800d7e2 <__lshift+0xbe>
 800d772:	6920      	ldr	r0, [r4, #16]
 800d774:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d778:	f104 0314 	add.w	r3, r4, #20
 800d77c:	f019 091f 	ands.w	r9, r9, #31
 800d780:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d784:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d788:	d02f      	beq.n	800d7ea <__lshift+0xc6>
 800d78a:	f1c9 0e20 	rsb	lr, r9, #32
 800d78e:	468a      	mov	sl, r1
 800d790:	f04f 0c00 	mov.w	ip, #0
 800d794:	681a      	ldr	r2, [r3, #0]
 800d796:	fa02 f209 	lsl.w	r2, r2, r9
 800d79a:	ea42 020c 	orr.w	r2, r2, ip
 800d79e:	f84a 2b04 	str.w	r2, [sl], #4
 800d7a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7a6:	4298      	cmp	r0, r3
 800d7a8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d7ac:	d8f2      	bhi.n	800d794 <__lshift+0x70>
 800d7ae:	1b03      	subs	r3, r0, r4
 800d7b0:	3b15      	subs	r3, #21
 800d7b2:	f023 0303 	bic.w	r3, r3, #3
 800d7b6:	3304      	adds	r3, #4
 800d7b8:	f104 0215 	add.w	r2, r4, #21
 800d7bc:	4290      	cmp	r0, r2
 800d7be:	bf38      	it	cc
 800d7c0:	2304      	movcc	r3, #4
 800d7c2:	f841 c003 	str.w	ip, [r1, r3]
 800d7c6:	f1bc 0f00 	cmp.w	ip, #0
 800d7ca:	d001      	beq.n	800d7d0 <__lshift+0xac>
 800d7cc:	f108 0602 	add.w	r6, r8, #2
 800d7d0:	3e01      	subs	r6, #1
 800d7d2:	4638      	mov	r0, r7
 800d7d4:	612e      	str	r6, [r5, #16]
 800d7d6:	4621      	mov	r1, r4
 800d7d8:	f7ff fdd2 	bl	800d380 <_Bfree>
 800d7dc:	4628      	mov	r0, r5
 800d7de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d7e6:	3301      	adds	r3, #1
 800d7e8:	e7c1      	b.n	800d76e <__lshift+0x4a>
 800d7ea:	3904      	subs	r1, #4
 800d7ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800d7f4:	4298      	cmp	r0, r3
 800d7f6:	d8f9      	bhi.n	800d7ec <__lshift+0xc8>
 800d7f8:	e7ea      	b.n	800d7d0 <__lshift+0xac>
 800d7fa:	bf00      	nop
 800d7fc:	0800ecc3 	.word	0x0800ecc3
 800d800:	0800ecd4 	.word	0x0800ecd4

0800d804 <__mcmp>:
 800d804:	b530      	push	{r4, r5, lr}
 800d806:	6902      	ldr	r2, [r0, #16]
 800d808:	690c      	ldr	r4, [r1, #16]
 800d80a:	1b12      	subs	r2, r2, r4
 800d80c:	d10e      	bne.n	800d82c <__mcmp+0x28>
 800d80e:	f100 0314 	add.w	r3, r0, #20
 800d812:	3114      	adds	r1, #20
 800d814:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d818:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d81c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d820:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d824:	42a5      	cmp	r5, r4
 800d826:	d003      	beq.n	800d830 <__mcmp+0x2c>
 800d828:	d305      	bcc.n	800d836 <__mcmp+0x32>
 800d82a:	2201      	movs	r2, #1
 800d82c:	4610      	mov	r0, r2
 800d82e:	bd30      	pop	{r4, r5, pc}
 800d830:	4283      	cmp	r3, r0
 800d832:	d3f3      	bcc.n	800d81c <__mcmp+0x18>
 800d834:	e7fa      	b.n	800d82c <__mcmp+0x28>
 800d836:	f04f 32ff 	mov.w	r2, #4294967295
 800d83a:	e7f7      	b.n	800d82c <__mcmp+0x28>

0800d83c <__mdiff>:
 800d83c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d840:	460c      	mov	r4, r1
 800d842:	4606      	mov	r6, r0
 800d844:	4611      	mov	r1, r2
 800d846:	4620      	mov	r0, r4
 800d848:	4690      	mov	r8, r2
 800d84a:	f7ff ffdb 	bl	800d804 <__mcmp>
 800d84e:	1e05      	subs	r5, r0, #0
 800d850:	d110      	bne.n	800d874 <__mdiff+0x38>
 800d852:	4629      	mov	r1, r5
 800d854:	4630      	mov	r0, r6
 800d856:	f7ff fd53 	bl	800d300 <_Balloc>
 800d85a:	b930      	cbnz	r0, 800d86a <__mdiff+0x2e>
 800d85c:	4b3a      	ldr	r3, [pc, #232]	; (800d948 <__mdiff+0x10c>)
 800d85e:	4602      	mov	r2, r0
 800d860:	f240 2132 	movw	r1, #562	; 0x232
 800d864:	4839      	ldr	r0, [pc, #228]	; (800d94c <__mdiff+0x110>)
 800d866:	f000 fb31 	bl	800decc <__assert_func>
 800d86a:	2301      	movs	r3, #1
 800d86c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d870:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d874:	bfa4      	itt	ge
 800d876:	4643      	movge	r3, r8
 800d878:	46a0      	movge	r8, r4
 800d87a:	4630      	mov	r0, r6
 800d87c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d880:	bfa6      	itte	ge
 800d882:	461c      	movge	r4, r3
 800d884:	2500      	movge	r5, #0
 800d886:	2501      	movlt	r5, #1
 800d888:	f7ff fd3a 	bl	800d300 <_Balloc>
 800d88c:	b920      	cbnz	r0, 800d898 <__mdiff+0x5c>
 800d88e:	4b2e      	ldr	r3, [pc, #184]	; (800d948 <__mdiff+0x10c>)
 800d890:	4602      	mov	r2, r0
 800d892:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d896:	e7e5      	b.n	800d864 <__mdiff+0x28>
 800d898:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d89c:	6926      	ldr	r6, [r4, #16]
 800d89e:	60c5      	str	r5, [r0, #12]
 800d8a0:	f104 0914 	add.w	r9, r4, #20
 800d8a4:	f108 0514 	add.w	r5, r8, #20
 800d8a8:	f100 0e14 	add.w	lr, r0, #20
 800d8ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d8b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d8b4:	f108 0210 	add.w	r2, r8, #16
 800d8b8:	46f2      	mov	sl, lr
 800d8ba:	2100      	movs	r1, #0
 800d8bc:	f859 3b04 	ldr.w	r3, [r9], #4
 800d8c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d8c4:	fa1f f883 	uxth.w	r8, r3
 800d8c8:	fa11 f18b 	uxtah	r1, r1, fp
 800d8cc:	0c1b      	lsrs	r3, r3, #16
 800d8ce:	eba1 0808 	sub.w	r8, r1, r8
 800d8d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d8d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d8da:	fa1f f888 	uxth.w	r8, r8
 800d8de:	1419      	asrs	r1, r3, #16
 800d8e0:	454e      	cmp	r6, r9
 800d8e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d8e6:	f84a 3b04 	str.w	r3, [sl], #4
 800d8ea:	d8e7      	bhi.n	800d8bc <__mdiff+0x80>
 800d8ec:	1b33      	subs	r3, r6, r4
 800d8ee:	3b15      	subs	r3, #21
 800d8f0:	f023 0303 	bic.w	r3, r3, #3
 800d8f4:	3304      	adds	r3, #4
 800d8f6:	3415      	adds	r4, #21
 800d8f8:	42a6      	cmp	r6, r4
 800d8fa:	bf38      	it	cc
 800d8fc:	2304      	movcc	r3, #4
 800d8fe:	441d      	add	r5, r3
 800d900:	4473      	add	r3, lr
 800d902:	469e      	mov	lr, r3
 800d904:	462e      	mov	r6, r5
 800d906:	4566      	cmp	r6, ip
 800d908:	d30e      	bcc.n	800d928 <__mdiff+0xec>
 800d90a:	f10c 0203 	add.w	r2, ip, #3
 800d90e:	1b52      	subs	r2, r2, r5
 800d910:	f022 0203 	bic.w	r2, r2, #3
 800d914:	3d03      	subs	r5, #3
 800d916:	45ac      	cmp	ip, r5
 800d918:	bf38      	it	cc
 800d91a:	2200      	movcc	r2, #0
 800d91c:	441a      	add	r2, r3
 800d91e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d922:	b17b      	cbz	r3, 800d944 <__mdiff+0x108>
 800d924:	6107      	str	r7, [r0, #16]
 800d926:	e7a3      	b.n	800d870 <__mdiff+0x34>
 800d928:	f856 8b04 	ldr.w	r8, [r6], #4
 800d92c:	fa11 f288 	uxtah	r2, r1, r8
 800d930:	1414      	asrs	r4, r2, #16
 800d932:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d936:	b292      	uxth	r2, r2
 800d938:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d93c:	f84e 2b04 	str.w	r2, [lr], #4
 800d940:	1421      	asrs	r1, r4, #16
 800d942:	e7e0      	b.n	800d906 <__mdiff+0xca>
 800d944:	3f01      	subs	r7, #1
 800d946:	e7ea      	b.n	800d91e <__mdiff+0xe2>
 800d948:	0800ecc3 	.word	0x0800ecc3
 800d94c:	0800ecd4 	.word	0x0800ecd4

0800d950 <__d2b>:
 800d950:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d954:	4689      	mov	r9, r1
 800d956:	2101      	movs	r1, #1
 800d958:	ec57 6b10 	vmov	r6, r7, d0
 800d95c:	4690      	mov	r8, r2
 800d95e:	f7ff fccf 	bl	800d300 <_Balloc>
 800d962:	4604      	mov	r4, r0
 800d964:	b930      	cbnz	r0, 800d974 <__d2b+0x24>
 800d966:	4602      	mov	r2, r0
 800d968:	4b25      	ldr	r3, [pc, #148]	; (800da00 <__d2b+0xb0>)
 800d96a:	4826      	ldr	r0, [pc, #152]	; (800da04 <__d2b+0xb4>)
 800d96c:	f240 310a 	movw	r1, #778	; 0x30a
 800d970:	f000 faac 	bl	800decc <__assert_func>
 800d974:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d978:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d97c:	bb35      	cbnz	r5, 800d9cc <__d2b+0x7c>
 800d97e:	2e00      	cmp	r6, #0
 800d980:	9301      	str	r3, [sp, #4]
 800d982:	d028      	beq.n	800d9d6 <__d2b+0x86>
 800d984:	4668      	mov	r0, sp
 800d986:	9600      	str	r6, [sp, #0]
 800d988:	f7ff fd82 	bl	800d490 <__lo0bits>
 800d98c:	9900      	ldr	r1, [sp, #0]
 800d98e:	b300      	cbz	r0, 800d9d2 <__d2b+0x82>
 800d990:	9a01      	ldr	r2, [sp, #4]
 800d992:	f1c0 0320 	rsb	r3, r0, #32
 800d996:	fa02 f303 	lsl.w	r3, r2, r3
 800d99a:	430b      	orrs	r3, r1
 800d99c:	40c2      	lsrs	r2, r0
 800d99e:	6163      	str	r3, [r4, #20]
 800d9a0:	9201      	str	r2, [sp, #4]
 800d9a2:	9b01      	ldr	r3, [sp, #4]
 800d9a4:	61a3      	str	r3, [r4, #24]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	bf14      	ite	ne
 800d9aa:	2202      	movne	r2, #2
 800d9ac:	2201      	moveq	r2, #1
 800d9ae:	6122      	str	r2, [r4, #16]
 800d9b0:	b1d5      	cbz	r5, 800d9e8 <__d2b+0x98>
 800d9b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d9b6:	4405      	add	r5, r0
 800d9b8:	f8c9 5000 	str.w	r5, [r9]
 800d9bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d9c0:	f8c8 0000 	str.w	r0, [r8]
 800d9c4:	4620      	mov	r0, r4
 800d9c6:	b003      	add	sp, #12
 800d9c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d9d0:	e7d5      	b.n	800d97e <__d2b+0x2e>
 800d9d2:	6161      	str	r1, [r4, #20]
 800d9d4:	e7e5      	b.n	800d9a2 <__d2b+0x52>
 800d9d6:	a801      	add	r0, sp, #4
 800d9d8:	f7ff fd5a 	bl	800d490 <__lo0bits>
 800d9dc:	9b01      	ldr	r3, [sp, #4]
 800d9de:	6163      	str	r3, [r4, #20]
 800d9e0:	2201      	movs	r2, #1
 800d9e2:	6122      	str	r2, [r4, #16]
 800d9e4:	3020      	adds	r0, #32
 800d9e6:	e7e3      	b.n	800d9b0 <__d2b+0x60>
 800d9e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d9ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d9f0:	f8c9 0000 	str.w	r0, [r9]
 800d9f4:	6918      	ldr	r0, [r3, #16]
 800d9f6:	f7ff fd2b 	bl	800d450 <__hi0bits>
 800d9fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d9fe:	e7df      	b.n	800d9c0 <__d2b+0x70>
 800da00:	0800ecc3 	.word	0x0800ecc3
 800da04:	0800ecd4 	.word	0x0800ecd4

0800da08 <_calloc_r>:
 800da08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da0a:	fba1 2402 	umull	r2, r4, r1, r2
 800da0e:	b94c      	cbnz	r4, 800da24 <_calloc_r+0x1c>
 800da10:	4611      	mov	r1, r2
 800da12:	9201      	str	r2, [sp, #4]
 800da14:	f000 f87a 	bl	800db0c <_malloc_r>
 800da18:	9a01      	ldr	r2, [sp, #4]
 800da1a:	4605      	mov	r5, r0
 800da1c:	b930      	cbnz	r0, 800da2c <_calloc_r+0x24>
 800da1e:	4628      	mov	r0, r5
 800da20:	b003      	add	sp, #12
 800da22:	bd30      	pop	{r4, r5, pc}
 800da24:	220c      	movs	r2, #12
 800da26:	6002      	str	r2, [r0, #0]
 800da28:	2500      	movs	r5, #0
 800da2a:	e7f8      	b.n	800da1e <_calloc_r+0x16>
 800da2c:	4621      	mov	r1, r4
 800da2e:	f7fe f941 	bl	800bcb4 <memset>
 800da32:	e7f4      	b.n	800da1e <_calloc_r+0x16>

0800da34 <_free_r>:
 800da34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da36:	2900      	cmp	r1, #0
 800da38:	d044      	beq.n	800dac4 <_free_r+0x90>
 800da3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da3e:	9001      	str	r0, [sp, #4]
 800da40:	2b00      	cmp	r3, #0
 800da42:	f1a1 0404 	sub.w	r4, r1, #4
 800da46:	bfb8      	it	lt
 800da48:	18e4      	addlt	r4, r4, r3
 800da4a:	f000 fa9b 	bl	800df84 <__malloc_lock>
 800da4e:	4a1e      	ldr	r2, [pc, #120]	; (800dac8 <_free_r+0x94>)
 800da50:	9801      	ldr	r0, [sp, #4]
 800da52:	6813      	ldr	r3, [r2, #0]
 800da54:	b933      	cbnz	r3, 800da64 <_free_r+0x30>
 800da56:	6063      	str	r3, [r4, #4]
 800da58:	6014      	str	r4, [r2, #0]
 800da5a:	b003      	add	sp, #12
 800da5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da60:	f000 ba96 	b.w	800df90 <__malloc_unlock>
 800da64:	42a3      	cmp	r3, r4
 800da66:	d908      	bls.n	800da7a <_free_r+0x46>
 800da68:	6825      	ldr	r5, [r4, #0]
 800da6a:	1961      	adds	r1, r4, r5
 800da6c:	428b      	cmp	r3, r1
 800da6e:	bf01      	itttt	eq
 800da70:	6819      	ldreq	r1, [r3, #0]
 800da72:	685b      	ldreq	r3, [r3, #4]
 800da74:	1949      	addeq	r1, r1, r5
 800da76:	6021      	streq	r1, [r4, #0]
 800da78:	e7ed      	b.n	800da56 <_free_r+0x22>
 800da7a:	461a      	mov	r2, r3
 800da7c:	685b      	ldr	r3, [r3, #4]
 800da7e:	b10b      	cbz	r3, 800da84 <_free_r+0x50>
 800da80:	42a3      	cmp	r3, r4
 800da82:	d9fa      	bls.n	800da7a <_free_r+0x46>
 800da84:	6811      	ldr	r1, [r2, #0]
 800da86:	1855      	adds	r5, r2, r1
 800da88:	42a5      	cmp	r5, r4
 800da8a:	d10b      	bne.n	800daa4 <_free_r+0x70>
 800da8c:	6824      	ldr	r4, [r4, #0]
 800da8e:	4421      	add	r1, r4
 800da90:	1854      	adds	r4, r2, r1
 800da92:	42a3      	cmp	r3, r4
 800da94:	6011      	str	r1, [r2, #0]
 800da96:	d1e0      	bne.n	800da5a <_free_r+0x26>
 800da98:	681c      	ldr	r4, [r3, #0]
 800da9a:	685b      	ldr	r3, [r3, #4]
 800da9c:	6053      	str	r3, [r2, #4]
 800da9e:	4421      	add	r1, r4
 800daa0:	6011      	str	r1, [r2, #0]
 800daa2:	e7da      	b.n	800da5a <_free_r+0x26>
 800daa4:	d902      	bls.n	800daac <_free_r+0x78>
 800daa6:	230c      	movs	r3, #12
 800daa8:	6003      	str	r3, [r0, #0]
 800daaa:	e7d6      	b.n	800da5a <_free_r+0x26>
 800daac:	6825      	ldr	r5, [r4, #0]
 800daae:	1961      	adds	r1, r4, r5
 800dab0:	428b      	cmp	r3, r1
 800dab2:	bf04      	itt	eq
 800dab4:	6819      	ldreq	r1, [r3, #0]
 800dab6:	685b      	ldreq	r3, [r3, #4]
 800dab8:	6063      	str	r3, [r4, #4]
 800daba:	bf04      	itt	eq
 800dabc:	1949      	addeq	r1, r1, r5
 800dabe:	6021      	streq	r1, [r4, #0]
 800dac0:	6054      	str	r4, [r2, #4]
 800dac2:	e7ca      	b.n	800da5a <_free_r+0x26>
 800dac4:	b003      	add	sp, #12
 800dac6:	bd30      	pop	{r4, r5, pc}
 800dac8:	200029c4 	.word	0x200029c4

0800dacc <sbrk_aligned>:
 800dacc:	b570      	push	{r4, r5, r6, lr}
 800dace:	4e0e      	ldr	r6, [pc, #56]	; (800db08 <sbrk_aligned+0x3c>)
 800dad0:	460c      	mov	r4, r1
 800dad2:	6831      	ldr	r1, [r6, #0]
 800dad4:	4605      	mov	r5, r0
 800dad6:	b911      	cbnz	r1, 800dade <sbrk_aligned+0x12>
 800dad8:	f000 f9e8 	bl	800deac <_sbrk_r>
 800dadc:	6030      	str	r0, [r6, #0]
 800dade:	4621      	mov	r1, r4
 800dae0:	4628      	mov	r0, r5
 800dae2:	f000 f9e3 	bl	800deac <_sbrk_r>
 800dae6:	1c43      	adds	r3, r0, #1
 800dae8:	d00a      	beq.n	800db00 <sbrk_aligned+0x34>
 800daea:	1cc4      	adds	r4, r0, #3
 800daec:	f024 0403 	bic.w	r4, r4, #3
 800daf0:	42a0      	cmp	r0, r4
 800daf2:	d007      	beq.n	800db04 <sbrk_aligned+0x38>
 800daf4:	1a21      	subs	r1, r4, r0
 800daf6:	4628      	mov	r0, r5
 800daf8:	f000 f9d8 	bl	800deac <_sbrk_r>
 800dafc:	3001      	adds	r0, #1
 800dafe:	d101      	bne.n	800db04 <sbrk_aligned+0x38>
 800db00:	f04f 34ff 	mov.w	r4, #4294967295
 800db04:	4620      	mov	r0, r4
 800db06:	bd70      	pop	{r4, r5, r6, pc}
 800db08:	200029c8 	.word	0x200029c8

0800db0c <_malloc_r>:
 800db0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db10:	1ccd      	adds	r5, r1, #3
 800db12:	f025 0503 	bic.w	r5, r5, #3
 800db16:	3508      	adds	r5, #8
 800db18:	2d0c      	cmp	r5, #12
 800db1a:	bf38      	it	cc
 800db1c:	250c      	movcc	r5, #12
 800db1e:	2d00      	cmp	r5, #0
 800db20:	4607      	mov	r7, r0
 800db22:	db01      	blt.n	800db28 <_malloc_r+0x1c>
 800db24:	42a9      	cmp	r1, r5
 800db26:	d905      	bls.n	800db34 <_malloc_r+0x28>
 800db28:	230c      	movs	r3, #12
 800db2a:	603b      	str	r3, [r7, #0]
 800db2c:	2600      	movs	r6, #0
 800db2e:	4630      	mov	r0, r6
 800db30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db34:	4e2e      	ldr	r6, [pc, #184]	; (800dbf0 <_malloc_r+0xe4>)
 800db36:	f000 fa25 	bl	800df84 <__malloc_lock>
 800db3a:	6833      	ldr	r3, [r6, #0]
 800db3c:	461c      	mov	r4, r3
 800db3e:	bb34      	cbnz	r4, 800db8e <_malloc_r+0x82>
 800db40:	4629      	mov	r1, r5
 800db42:	4638      	mov	r0, r7
 800db44:	f7ff ffc2 	bl	800dacc <sbrk_aligned>
 800db48:	1c43      	adds	r3, r0, #1
 800db4a:	4604      	mov	r4, r0
 800db4c:	d14d      	bne.n	800dbea <_malloc_r+0xde>
 800db4e:	6834      	ldr	r4, [r6, #0]
 800db50:	4626      	mov	r6, r4
 800db52:	2e00      	cmp	r6, #0
 800db54:	d140      	bne.n	800dbd8 <_malloc_r+0xcc>
 800db56:	6823      	ldr	r3, [r4, #0]
 800db58:	4631      	mov	r1, r6
 800db5a:	4638      	mov	r0, r7
 800db5c:	eb04 0803 	add.w	r8, r4, r3
 800db60:	f000 f9a4 	bl	800deac <_sbrk_r>
 800db64:	4580      	cmp	r8, r0
 800db66:	d13a      	bne.n	800dbde <_malloc_r+0xd2>
 800db68:	6821      	ldr	r1, [r4, #0]
 800db6a:	3503      	adds	r5, #3
 800db6c:	1a6d      	subs	r5, r5, r1
 800db6e:	f025 0503 	bic.w	r5, r5, #3
 800db72:	3508      	adds	r5, #8
 800db74:	2d0c      	cmp	r5, #12
 800db76:	bf38      	it	cc
 800db78:	250c      	movcc	r5, #12
 800db7a:	4629      	mov	r1, r5
 800db7c:	4638      	mov	r0, r7
 800db7e:	f7ff ffa5 	bl	800dacc <sbrk_aligned>
 800db82:	3001      	adds	r0, #1
 800db84:	d02b      	beq.n	800dbde <_malloc_r+0xd2>
 800db86:	6823      	ldr	r3, [r4, #0]
 800db88:	442b      	add	r3, r5
 800db8a:	6023      	str	r3, [r4, #0]
 800db8c:	e00e      	b.n	800dbac <_malloc_r+0xa0>
 800db8e:	6822      	ldr	r2, [r4, #0]
 800db90:	1b52      	subs	r2, r2, r5
 800db92:	d41e      	bmi.n	800dbd2 <_malloc_r+0xc6>
 800db94:	2a0b      	cmp	r2, #11
 800db96:	d916      	bls.n	800dbc6 <_malloc_r+0xba>
 800db98:	1961      	adds	r1, r4, r5
 800db9a:	42a3      	cmp	r3, r4
 800db9c:	6025      	str	r5, [r4, #0]
 800db9e:	bf18      	it	ne
 800dba0:	6059      	strne	r1, [r3, #4]
 800dba2:	6863      	ldr	r3, [r4, #4]
 800dba4:	bf08      	it	eq
 800dba6:	6031      	streq	r1, [r6, #0]
 800dba8:	5162      	str	r2, [r4, r5]
 800dbaa:	604b      	str	r3, [r1, #4]
 800dbac:	4638      	mov	r0, r7
 800dbae:	f104 060b 	add.w	r6, r4, #11
 800dbb2:	f000 f9ed 	bl	800df90 <__malloc_unlock>
 800dbb6:	f026 0607 	bic.w	r6, r6, #7
 800dbba:	1d23      	adds	r3, r4, #4
 800dbbc:	1af2      	subs	r2, r6, r3
 800dbbe:	d0b6      	beq.n	800db2e <_malloc_r+0x22>
 800dbc0:	1b9b      	subs	r3, r3, r6
 800dbc2:	50a3      	str	r3, [r4, r2]
 800dbc4:	e7b3      	b.n	800db2e <_malloc_r+0x22>
 800dbc6:	6862      	ldr	r2, [r4, #4]
 800dbc8:	42a3      	cmp	r3, r4
 800dbca:	bf0c      	ite	eq
 800dbcc:	6032      	streq	r2, [r6, #0]
 800dbce:	605a      	strne	r2, [r3, #4]
 800dbd0:	e7ec      	b.n	800dbac <_malloc_r+0xa0>
 800dbd2:	4623      	mov	r3, r4
 800dbd4:	6864      	ldr	r4, [r4, #4]
 800dbd6:	e7b2      	b.n	800db3e <_malloc_r+0x32>
 800dbd8:	4634      	mov	r4, r6
 800dbda:	6876      	ldr	r6, [r6, #4]
 800dbdc:	e7b9      	b.n	800db52 <_malloc_r+0x46>
 800dbde:	230c      	movs	r3, #12
 800dbe0:	603b      	str	r3, [r7, #0]
 800dbe2:	4638      	mov	r0, r7
 800dbe4:	f000 f9d4 	bl	800df90 <__malloc_unlock>
 800dbe8:	e7a1      	b.n	800db2e <_malloc_r+0x22>
 800dbea:	6025      	str	r5, [r4, #0]
 800dbec:	e7de      	b.n	800dbac <_malloc_r+0xa0>
 800dbee:	bf00      	nop
 800dbf0:	200029c4 	.word	0x200029c4

0800dbf4 <__ssputs_r>:
 800dbf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbf8:	688e      	ldr	r6, [r1, #8]
 800dbfa:	429e      	cmp	r6, r3
 800dbfc:	4682      	mov	sl, r0
 800dbfe:	460c      	mov	r4, r1
 800dc00:	4690      	mov	r8, r2
 800dc02:	461f      	mov	r7, r3
 800dc04:	d838      	bhi.n	800dc78 <__ssputs_r+0x84>
 800dc06:	898a      	ldrh	r2, [r1, #12]
 800dc08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dc0c:	d032      	beq.n	800dc74 <__ssputs_r+0x80>
 800dc0e:	6825      	ldr	r5, [r4, #0]
 800dc10:	6909      	ldr	r1, [r1, #16]
 800dc12:	eba5 0901 	sub.w	r9, r5, r1
 800dc16:	6965      	ldr	r5, [r4, #20]
 800dc18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dc1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dc20:	3301      	adds	r3, #1
 800dc22:	444b      	add	r3, r9
 800dc24:	106d      	asrs	r5, r5, #1
 800dc26:	429d      	cmp	r5, r3
 800dc28:	bf38      	it	cc
 800dc2a:	461d      	movcc	r5, r3
 800dc2c:	0553      	lsls	r3, r2, #21
 800dc2e:	d531      	bpl.n	800dc94 <__ssputs_r+0xa0>
 800dc30:	4629      	mov	r1, r5
 800dc32:	f7ff ff6b 	bl	800db0c <_malloc_r>
 800dc36:	4606      	mov	r6, r0
 800dc38:	b950      	cbnz	r0, 800dc50 <__ssputs_r+0x5c>
 800dc3a:	230c      	movs	r3, #12
 800dc3c:	f8ca 3000 	str.w	r3, [sl]
 800dc40:	89a3      	ldrh	r3, [r4, #12]
 800dc42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc46:	81a3      	strh	r3, [r4, #12]
 800dc48:	f04f 30ff 	mov.w	r0, #4294967295
 800dc4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc50:	6921      	ldr	r1, [r4, #16]
 800dc52:	464a      	mov	r2, r9
 800dc54:	f7ff fb46 	bl	800d2e4 <memcpy>
 800dc58:	89a3      	ldrh	r3, [r4, #12]
 800dc5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dc5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc62:	81a3      	strh	r3, [r4, #12]
 800dc64:	6126      	str	r6, [r4, #16]
 800dc66:	6165      	str	r5, [r4, #20]
 800dc68:	444e      	add	r6, r9
 800dc6a:	eba5 0509 	sub.w	r5, r5, r9
 800dc6e:	6026      	str	r6, [r4, #0]
 800dc70:	60a5      	str	r5, [r4, #8]
 800dc72:	463e      	mov	r6, r7
 800dc74:	42be      	cmp	r6, r7
 800dc76:	d900      	bls.n	800dc7a <__ssputs_r+0x86>
 800dc78:	463e      	mov	r6, r7
 800dc7a:	6820      	ldr	r0, [r4, #0]
 800dc7c:	4632      	mov	r2, r6
 800dc7e:	4641      	mov	r1, r8
 800dc80:	f000 f966 	bl	800df50 <memmove>
 800dc84:	68a3      	ldr	r3, [r4, #8]
 800dc86:	1b9b      	subs	r3, r3, r6
 800dc88:	60a3      	str	r3, [r4, #8]
 800dc8a:	6823      	ldr	r3, [r4, #0]
 800dc8c:	4433      	add	r3, r6
 800dc8e:	6023      	str	r3, [r4, #0]
 800dc90:	2000      	movs	r0, #0
 800dc92:	e7db      	b.n	800dc4c <__ssputs_r+0x58>
 800dc94:	462a      	mov	r2, r5
 800dc96:	f000 f981 	bl	800df9c <_realloc_r>
 800dc9a:	4606      	mov	r6, r0
 800dc9c:	2800      	cmp	r0, #0
 800dc9e:	d1e1      	bne.n	800dc64 <__ssputs_r+0x70>
 800dca0:	6921      	ldr	r1, [r4, #16]
 800dca2:	4650      	mov	r0, sl
 800dca4:	f7ff fec6 	bl	800da34 <_free_r>
 800dca8:	e7c7      	b.n	800dc3a <__ssputs_r+0x46>
	...

0800dcac <_svfiprintf_r>:
 800dcac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcb0:	4698      	mov	r8, r3
 800dcb2:	898b      	ldrh	r3, [r1, #12]
 800dcb4:	061b      	lsls	r3, r3, #24
 800dcb6:	b09d      	sub	sp, #116	; 0x74
 800dcb8:	4607      	mov	r7, r0
 800dcba:	460d      	mov	r5, r1
 800dcbc:	4614      	mov	r4, r2
 800dcbe:	d50e      	bpl.n	800dcde <_svfiprintf_r+0x32>
 800dcc0:	690b      	ldr	r3, [r1, #16]
 800dcc2:	b963      	cbnz	r3, 800dcde <_svfiprintf_r+0x32>
 800dcc4:	2140      	movs	r1, #64	; 0x40
 800dcc6:	f7ff ff21 	bl	800db0c <_malloc_r>
 800dcca:	6028      	str	r0, [r5, #0]
 800dccc:	6128      	str	r0, [r5, #16]
 800dcce:	b920      	cbnz	r0, 800dcda <_svfiprintf_r+0x2e>
 800dcd0:	230c      	movs	r3, #12
 800dcd2:	603b      	str	r3, [r7, #0]
 800dcd4:	f04f 30ff 	mov.w	r0, #4294967295
 800dcd8:	e0d1      	b.n	800de7e <_svfiprintf_r+0x1d2>
 800dcda:	2340      	movs	r3, #64	; 0x40
 800dcdc:	616b      	str	r3, [r5, #20]
 800dcde:	2300      	movs	r3, #0
 800dce0:	9309      	str	r3, [sp, #36]	; 0x24
 800dce2:	2320      	movs	r3, #32
 800dce4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dce8:	f8cd 800c 	str.w	r8, [sp, #12]
 800dcec:	2330      	movs	r3, #48	; 0x30
 800dcee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800de98 <_svfiprintf_r+0x1ec>
 800dcf2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dcf6:	f04f 0901 	mov.w	r9, #1
 800dcfa:	4623      	mov	r3, r4
 800dcfc:	469a      	mov	sl, r3
 800dcfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd02:	b10a      	cbz	r2, 800dd08 <_svfiprintf_r+0x5c>
 800dd04:	2a25      	cmp	r2, #37	; 0x25
 800dd06:	d1f9      	bne.n	800dcfc <_svfiprintf_r+0x50>
 800dd08:	ebba 0b04 	subs.w	fp, sl, r4
 800dd0c:	d00b      	beq.n	800dd26 <_svfiprintf_r+0x7a>
 800dd0e:	465b      	mov	r3, fp
 800dd10:	4622      	mov	r2, r4
 800dd12:	4629      	mov	r1, r5
 800dd14:	4638      	mov	r0, r7
 800dd16:	f7ff ff6d 	bl	800dbf4 <__ssputs_r>
 800dd1a:	3001      	adds	r0, #1
 800dd1c:	f000 80aa 	beq.w	800de74 <_svfiprintf_r+0x1c8>
 800dd20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd22:	445a      	add	r2, fp
 800dd24:	9209      	str	r2, [sp, #36]	; 0x24
 800dd26:	f89a 3000 	ldrb.w	r3, [sl]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	f000 80a2 	beq.w	800de74 <_svfiprintf_r+0x1c8>
 800dd30:	2300      	movs	r3, #0
 800dd32:	f04f 32ff 	mov.w	r2, #4294967295
 800dd36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd3a:	f10a 0a01 	add.w	sl, sl, #1
 800dd3e:	9304      	str	r3, [sp, #16]
 800dd40:	9307      	str	r3, [sp, #28]
 800dd42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd46:	931a      	str	r3, [sp, #104]	; 0x68
 800dd48:	4654      	mov	r4, sl
 800dd4a:	2205      	movs	r2, #5
 800dd4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd50:	4851      	ldr	r0, [pc, #324]	; (800de98 <_svfiprintf_r+0x1ec>)
 800dd52:	f7f2 fa4d 	bl	80001f0 <memchr>
 800dd56:	9a04      	ldr	r2, [sp, #16]
 800dd58:	b9d8      	cbnz	r0, 800dd92 <_svfiprintf_r+0xe6>
 800dd5a:	06d0      	lsls	r0, r2, #27
 800dd5c:	bf44      	itt	mi
 800dd5e:	2320      	movmi	r3, #32
 800dd60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd64:	0711      	lsls	r1, r2, #28
 800dd66:	bf44      	itt	mi
 800dd68:	232b      	movmi	r3, #43	; 0x2b
 800dd6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd6e:	f89a 3000 	ldrb.w	r3, [sl]
 800dd72:	2b2a      	cmp	r3, #42	; 0x2a
 800dd74:	d015      	beq.n	800dda2 <_svfiprintf_r+0xf6>
 800dd76:	9a07      	ldr	r2, [sp, #28]
 800dd78:	4654      	mov	r4, sl
 800dd7a:	2000      	movs	r0, #0
 800dd7c:	f04f 0c0a 	mov.w	ip, #10
 800dd80:	4621      	mov	r1, r4
 800dd82:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd86:	3b30      	subs	r3, #48	; 0x30
 800dd88:	2b09      	cmp	r3, #9
 800dd8a:	d94e      	bls.n	800de2a <_svfiprintf_r+0x17e>
 800dd8c:	b1b0      	cbz	r0, 800ddbc <_svfiprintf_r+0x110>
 800dd8e:	9207      	str	r2, [sp, #28]
 800dd90:	e014      	b.n	800ddbc <_svfiprintf_r+0x110>
 800dd92:	eba0 0308 	sub.w	r3, r0, r8
 800dd96:	fa09 f303 	lsl.w	r3, r9, r3
 800dd9a:	4313      	orrs	r3, r2
 800dd9c:	9304      	str	r3, [sp, #16]
 800dd9e:	46a2      	mov	sl, r4
 800dda0:	e7d2      	b.n	800dd48 <_svfiprintf_r+0x9c>
 800dda2:	9b03      	ldr	r3, [sp, #12]
 800dda4:	1d19      	adds	r1, r3, #4
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	9103      	str	r1, [sp, #12]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	bfbb      	ittet	lt
 800ddae:	425b      	neglt	r3, r3
 800ddb0:	f042 0202 	orrlt.w	r2, r2, #2
 800ddb4:	9307      	strge	r3, [sp, #28]
 800ddb6:	9307      	strlt	r3, [sp, #28]
 800ddb8:	bfb8      	it	lt
 800ddba:	9204      	strlt	r2, [sp, #16]
 800ddbc:	7823      	ldrb	r3, [r4, #0]
 800ddbe:	2b2e      	cmp	r3, #46	; 0x2e
 800ddc0:	d10c      	bne.n	800dddc <_svfiprintf_r+0x130>
 800ddc2:	7863      	ldrb	r3, [r4, #1]
 800ddc4:	2b2a      	cmp	r3, #42	; 0x2a
 800ddc6:	d135      	bne.n	800de34 <_svfiprintf_r+0x188>
 800ddc8:	9b03      	ldr	r3, [sp, #12]
 800ddca:	1d1a      	adds	r2, r3, #4
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	9203      	str	r2, [sp, #12]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	bfb8      	it	lt
 800ddd4:	f04f 33ff 	movlt.w	r3, #4294967295
 800ddd8:	3402      	adds	r4, #2
 800ddda:	9305      	str	r3, [sp, #20]
 800dddc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dea8 <_svfiprintf_r+0x1fc>
 800dde0:	7821      	ldrb	r1, [r4, #0]
 800dde2:	2203      	movs	r2, #3
 800dde4:	4650      	mov	r0, sl
 800dde6:	f7f2 fa03 	bl	80001f0 <memchr>
 800ddea:	b140      	cbz	r0, 800ddfe <_svfiprintf_r+0x152>
 800ddec:	2340      	movs	r3, #64	; 0x40
 800ddee:	eba0 000a 	sub.w	r0, r0, sl
 800ddf2:	fa03 f000 	lsl.w	r0, r3, r0
 800ddf6:	9b04      	ldr	r3, [sp, #16]
 800ddf8:	4303      	orrs	r3, r0
 800ddfa:	3401      	adds	r4, #1
 800ddfc:	9304      	str	r3, [sp, #16]
 800ddfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de02:	4826      	ldr	r0, [pc, #152]	; (800de9c <_svfiprintf_r+0x1f0>)
 800de04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de08:	2206      	movs	r2, #6
 800de0a:	f7f2 f9f1 	bl	80001f0 <memchr>
 800de0e:	2800      	cmp	r0, #0
 800de10:	d038      	beq.n	800de84 <_svfiprintf_r+0x1d8>
 800de12:	4b23      	ldr	r3, [pc, #140]	; (800dea0 <_svfiprintf_r+0x1f4>)
 800de14:	bb1b      	cbnz	r3, 800de5e <_svfiprintf_r+0x1b2>
 800de16:	9b03      	ldr	r3, [sp, #12]
 800de18:	3307      	adds	r3, #7
 800de1a:	f023 0307 	bic.w	r3, r3, #7
 800de1e:	3308      	adds	r3, #8
 800de20:	9303      	str	r3, [sp, #12]
 800de22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de24:	4433      	add	r3, r6
 800de26:	9309      	str	r3, [sp, #36]	; 0x24
 800de28:	e767      	b.n	800dcfa <_svfiprintf_r+0x4e>
 800de2a:	fb0c 3202 	mla	r2, ip, r2, r3
 800de2e:	460c      	mov	r4, r1
 800de30:	2001      	movs	r0, #1
 800de32:	e7a5      	b.n	800dd80 <_svfiprintf_r+0xd4>
 800de34:	2300      	movs	r3, #0
 800de36:	3401      	adds	r4, #1
 800de38:	9305      	str	r3, [sp, #20]
 800de3a:	4619      	mov	r1, r3
 800de3c:	f04f 0c0a 	mov.w	ip, #10
 800de40:	4620      	mov	r0, r4
 800de42:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de46:	3a30      	subs	r2, #48	; 0x30
 800de48:	2a09      	cmp	r2, #9
 800de4a:	d903      	bls.n	800de54 <_svfiprintf_r+0x1a8>
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d0c5      	beq.n	800dddc <_svfiprintf_r+0x130>
 800de50:	9105      	str	r1, [sp, #20]
 800de52:	e7c3      	b.n	800dddc <_svfiprintf_r+0x130>
 800de54:	fb0c 2101 	mla	r1, ip, r1, r2
 800de58:	4604      	mov	r4, r0
 800de5a:	2301      	movs	r3, #1
 800de5c:	e7f0      	b.n	800de40 <_svfiprintf_r+0x194>
 800de5e:	ab03      	add	r3, sp, #12
 800de60:	9300      	str	r3, [sp, #0]
 800de62:	462a      	mov	r2, r5
 800de64:	4b0f      	ldr	r3, [pc, #60]	; (800dea4 <_svfiprintf_r+0x1f8>)
 800de66:	a904      	add	r1, sp, #16
 800de68:	4638      	mov	r0, r7
 800de6a:	f7fd ffcb 	bl	800be04 <_printf_float>
 800de6e:	1c42      	adds	r2, r0, #1
 800de70:	4606      	mov	r6, r0
 800de72:	d1d6      	bne.n	800de22 <_svfiprintf_r+0x176>
 800de74:	89ab      	ldrh	r3, [r5, #12]
 800de76:	065b      	lsls	r3, r3, #25
 800de78:	f53f af2c 	bmi.w	800dcd4 <_svfiprintf_r+0x28>
 800de7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de7e:	b01d      	add	sp, #116	; 0x74
 800de80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de84:	ab03      	add	r3, sp, #12
 800de86:	9300      	str	r3, [sp, #0]
 800de88:	462a      	mov	r2, r5
 800de8a:	4b06      	ldr	r3, [pc, #24]	; (800dea4 <_svfiprintf_r+0x1f8>)
 800de8c:	a904      	add	r1, sp, #16
 800de8e:	4638      	mov	r0, r7
 800de90:	f7fe fa5c 	bl	800c34c <_printf_i>
 800de94:	e7eb      	b.n	800de6e <_svfiprintf_r+0x1c2>
 800de96:	bf00      	nop
 800de98:	0800ee2c 	.word	0x0800ee2c
 800de9c:	0800ee36 	.word	0x0800ee36
 800dea0:	0800be05 	.word	0x0800be05
 800dea4:	0800dbf5 	.word	0x0800dbf5
 800dea8:	0800ee32 	.word	0x0800ee32

0800deac <_sbrk_r>:
 800deac:	b538      	push	{r3, r4, r5, lr}
 800deae:	4d06      	ldr	r5, [pc, #24]	; (800dec8 <_sbrk_r+0x1c>)
 800deb0:	2300      	movs	r3, #0
 800deb2:	4604      	mov	r4, r0
 800deb4:	4608      	mov	r0, r1
 800deb6:	602b      	str	r3, [r5, #0]
 800deb8:	f7f4 f914 	bl	80020e4 <_sbrk>
 800debc:	1c43      	adds	r3, r0, #1
 800debe:	d102      	bne.n	800dec6 <_sbrk_r+0x1a>
 800dec0:	682b      	ldr	r3, [r5, #0]
 800dec2:	b103      	cbz	r3, 800dec6 <_sbrk_r+0x1a>
 800dec4:	6023      	str	r3, [r4, #0]
 800dec6:	bd38      	pop	{r3, r4, r5, pc}
 800dec8:	200029cc 	.word	0x200029cc

0800decc <__assert_func>:
 800decc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dece:	4614      	mov	r4, r2
 800ded0:	461a      	mov	r2, r3
 800ded2:	4b09      	ldr	r3, [pc, #36]	; (800def8 <__assert_func+0x2c>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	4605      	mov	r5, r0
 800ded8:	68d8      	ldr	r0, [r3, #12]
 800deda:	b14c      	cbz	r4, 800def0 <__assert_func+0x24>
 800dedc:	4b07      	ldr	r3, [pc, #28]	; (800defc <__assert_func+0x30>)
 800dede:	9100      	str	r1, [sp, #0]
 800dee0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dee4:	4906      	ldr	r1, [pc, #24]	; (800df00 <__assert_func+0x34>)
 800dee6:	462b      	mov	r3, r5
 800dee8:	f000 f80e 	bl	800df08 <fiprintf>
 800deec:	f000 faac 	bl	800e448 <abort>
 800def0:	4b04      	ldr	r3, [pc, #16]	; (800df04 <__assert_func+0x38>)
 800def2:	461c      	mov	r4, r3
 800def4:	e7f3      	b.n	800dede <__assert_func+0x12>
 800def6:	bf00      	nop
 800def8:	20000114 	.word	0x20000114
 800defc:	0800ee3d 	.word	0x0800ee3d
 800df00:	0800ee4a 	.word	0x0800ee4a
 800df04:	0800ee78 	.word	0x0800ee78

0800df08 <fiprintf>:
 800df08:	b40e      	push	{r1, r2, r3}
 800df0a:	b503      	push	{r0, r1, lr}
 800df0c:	4601      	mov	r1, r0
 800df0e:	ab03      	add	r3, sp, #12
 800df10:	4805      	ldr	r0, [pc, #20]	; (800df28 <fiprintf+0x20>)
 800df12:	f853 2b04 	ldr.w	r2, [r3], #4
 800df16:	6800      	ldr	r0, [r0, #0]
 800df18:	9301      	str	r3, [sp, #4]
 800df1a:	f000 f897 	bl	800e04c <_vfiprintf_r>
 800df1e:	b002      	add	sp, #8
 800df20:	f85d eb04 	ldr.w	lr, [sp], #4
 800df24:	b003      	add	sp, #12
 800df26:	4770      	bx	lr
 800df28:	20000114 	.word	0x20000114

0800df2c <__ascii_mbtowc>:
 800df2c:	b082      	sub	sp, #8
 800df2e:	b901      	cbnz	r1, 800df32 <__ascii_mbtowc+0x6>
 800df30:	a901      	add	r1, sp, #4
 800df32:	b142      	cbz	r2, 800df46 <__ascii_mbtowc+0x1a>
 800df34:	b14b      	cbz	r3, 800df4a <__ascii_mbtowc+0x1e>
 800df36:	7813      	ldrb	r3, [r2, #0]
 800df38:	600b      	str	r3, [r1, #0]
 800df3a:	7812      	ldrb	r2, [r2, #0]
 800df3c:	1e10      	subs	r0, r2, #0
 800df3e:	bf18      	it	ne
 800df40:	2001      	movne	r0, #1
 800df42:	b002      	add	sp, #8
 800df44:	4770      	bx	lr
 800df46:	4610      	mov	r0, r2
 800df48:	e7fb      	b.n	800df42 <__ascii_mbtowc+0x16>
 800df4a:	f06f 0001 	mvn.w	r0, #1
 800df4e:	e7f8      	b.n	800df42 <__ascii_mbtowc+0x16>

0800df50 <memmove>:
 800df50:	4288      	cmp	r0, r1
 800df52:	b510      	push	{r4, lr}
 800df54:	eb01 0402 	add.w	r4, r1, r2
 800df58:	d902      	bls.n	800df60 <memmove+0x10>
 800df5a:	4284      	cmp	r4, r0
 800df5c:	4623      	mov	r3, r4
 800df5e:	d807      	bhi.n	800df70 <memmove+0x20>
 800df60:	1e43      	subs	r3, r0, #1
 800df62:	42a1      	cmp	r1, r4
 800df64:	d008      	beq.n	800df78 <memmove+0x28>
 800df66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df6e:	e7f8      	b.n	800df62 <memmove+0x12>
 800df70:	4402      	add	r2, r0
 800df72:	4601      	mov	r1, r0
 800df74:	428a      	cmp	r2, r1
 800df76:	d100      	bne.n	800df7a <memmove+0x2a>
 800df78:	bd10      	pop	{r4, pc}
 800df7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800df82:	e7f7      	b.n	800df74 <memmove+0x24>

0800df84 <__malloc_lock>:
 800df84:	4801      	ldr	r0, [pc, #4]	; (800df8c <__malloc_lock+0x8>)
 800df86:	f000 bc1f 	b.w	800e7c8 <__retarget_lock_acquire_recursive>
 800df8a:	bf00      	nop
 800df8c:	200029d0 	.word	0x200029d0

0800df90 <__malloc_unlock>:
 800df90:	4801      	ldr	r0, [pc, #4]	; (800df98 <__malloc_unlock+0x8>)
 800df92:	f000 bc1a 	b.w	800e7ca <__retarget_lock_release_recursive>
 800df96:	bf00      	nop
 800df98:	200029d0 	.word	0x200029d0

0800df9c <_realloc_r>:
 800df9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfa0:	4680      	mov	r8, r0
 800dfa2:	4614      	mov	r4, r2
 800dfa4:	460e      	mov	r6, r1
 800dfa6:	b921      	cbnz	r1, 800dfb2 <_realloc_r+0x16>
 800dfa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dfac:	4611      	mov	r1, r2
 800dfae:	f7ff bdad 	b.w	800db0c <_malloc_r>
 800dfb2:	b92a      	cbnz	r2, 800dfc0 <_realloc_r+0x24>
 800dfb4:	f7ff fd3e 	bl	800da34 <_free_r>
 800dfb8:	4625      	mov	r5, r4
 800dfba:	4628      	mov	r0, r5
 800dfbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfc0:	f000 fc6a 	bl	800e898 <_malloc_usable_size_r>
 800dfc4:	4284      	cmp	r4, r0
 800dfc6:	4607      	mov	r7, r0
 800dfc8:	d802      	bhi.n	800dfd0 <_realloc_r+0x34>
 800dfca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dfce:	d812      	bhi.n	800dff6 <_realloc_r+0x5a>
 800dfd0:	4621      	mov	r1, r4
 800dfd2:	4640      	mov	r0, r8
 800dfd4:	f7ff fd9a 	bl	800db0c <_malloc_r>
 800dfd8:	4605      	mov	r5, r0
 800dfda:	2800      	cmp	r0, #0
 800dfdc:	d0ed      	beq.n	800dfba <_realloc_r+0x1e>
 800dfde:	42bc      	cmp	r4, r7
 800dfe0:	4622      	mov	r2, r4
 800dfe2:	4631      	mov	r1, r6
 800dfe4:	bf28      	it	cs
 800dfe6:	463a      	movcs	r2, r7
 800dfe8:	f7ff f97c 	bl	800d2e4 <memcpy>
 800dfec:	4631      	mov	r1, r6
 800dfee:	4640      	mov	r0, r8
 800dff0:	f7ff fd20 	bl	800da34 <_free_r>
 800dff4:	e7e1      	b.n	800dfba <_realloc_r+0x1e>
 800dff6:	4635      	mov	r5, r6
 800dff8:	e7df      	b.n	800dfba <_realloc_r+0x1e>

0800dffa <__sfputc_r>:
 800dffa:	6893      	ldr	r3, [r2, #8]
 800dffc:	3b01      	subs	r3, #1
 800dffe:	2b00      	cmp	r3, #0
 800e000:	b410      	push	{r4}
 800e002:	6093      	str	r3, [r2, #8]
 800e004:	da08      	bge.n	800e018 <__sfputc_r+0x1e>
 800e006:	6994      	ldr	r4, [r2, #24]
 800e008:	42a3      	cmp	r3, r4
 800e00a:	db01      	blt.n	800e010 <__sfputc_r+0x16>
 800e00c:	290a      	cmp	r1, #10
 800e00e:	d103      	bne.n	800e018 <__sfputc_r+0x1e>
 800e010:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e014:	f000 b94a 	b.w	800e2ac <__swbuf_r>
 800e018:	6813      	ldr	r3, [r2, #0]
 800e01a:	1c58      	adds	r0, r3, #1
 800e01c:	6010      	str	r0, [r2, #0]
 800e01e:	7019      	strb	r1, [r3, #0]
 800e020:	4608      	mov	r0, r1
 800e022:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e026:	4770      	bx	lr

0800e028 <__sfputs_r>:
 800e028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e02a:	4606      	mov	r6, r0
 800e02c:	460f      	mov	r7, r1
 800e02e:	4614      	mov	r4, r2
 800e030:	18d5      	adds	r5, r2, r3
 800e032:	42ac      	cmp	r4, r5
 800e034:	d101      	bne.n	800e03a <__sfputs_r+0x12>
 800e036:	2000      	movs	r0, #0
 800e038:	e007      	b.n	800e04a <__sfputs_r+0x22>
 800e03a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e03e:	463a      	mov	r2, r7
 800e040:	4630      	mov	r0, r6
 800e042:	f7ff ffda 	bl	800dffa <__sfputc_r>
 800e046:	1c43      	adds	r3, r0, #1
 800e048:	d1f3      	bne.n	800e032 <__sfputs_r+0xa>
 800e04a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e04c <_vfiprintf_r>:
 800e04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e050:	460d      	mov	r5, r1
 800e052:	b09d      	sub	sp, #116	; 0x74
 800e054:	4614      	mov	r4, r2
 800e056:	4698      	mov	r8, r3
 800e058:	4606      	mov	r6, r0
 800e05a:	b118      	cbz	r0, 800e064 <_vfiprintf_r+0x18>
 800e05c:	6983      	ldr	r3, [r0, #24]
 800e05e:	b90b      	cbnz	r3, 800e064 <_vfiprintf_r+0x18>
 800e060:	f000 fb14 	bl	800e68c <__sinit>
 800e064:	4b89      	ldr	r3, [pc, #548]	; (800e28c <_vfiprintf_r+0x240>)
 800e066:	429d      	cmp	r5, r3
 800e068:	d11b      	bne.n	800e0a2 <_vfiprintf_r+0x56>
 800e06a:	6875      	ldr	r5, [r6, #4]
 800e06c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e06e:	07d9      	lsls	r1, r3, #31
 800e070:	d405      	bmi.n	800e07e <_vfiprintf_r+0x32>
 800e072:	89ab      	ldrh	r3, [r5, #12]
 800e074:	059a      	lsls	r2, r3, #22
 800e076:	d402      	bmi.n	800e07e <_vfiprintf_r+0x32>
 800e078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e07a:	f000 fba5 	bl	800e7c8 <__retarget_lock_acquire_recursive>
 800e07e:	89ab      	ldrh	r3, [r5, #12]
 800e080:	071b      	lsls	r3, r3, #28
 800e082:	d501      	bpl.n	800e088 <_vfiprintf_r+0x3c>
 800e084:	692b      	ldr	r3, [r5, #16]
 800e086:	b9eb      	cbnz	r3, 800e0c4 <_vfiprintf_r+0x78>
 800e088:	4629      	mov	r1, r5
 800e08a:	4630      	mov	r0, r6
 800e08c:	f000 f96e 	bl	800e36c <__swsetup_r>
 800e090:	b1c0      	cbz	r0, 800e0c4 <_vfiprintf_r+0x78>
 800e092:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e094:	07dc      	lsls	r4, r3, #31
 800e096:	d50e      	bpl.n	800e0b6 <_vfiprintf_r+0x6a>
 800e098:	f04f 30ff 	mov.w	r0, #4294967295
 800e09c:	b01d      	add	sp, #116	; 0x74
 800e09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0a2:	4b7b      	ldr	r3, [pc, #492]	; (800e290 <_vfiprintf_r+0x244>)
 800e0a4:	429d      	cmp	r5, r3
 800e0a6:	d101      	bne.n	800e0ac <_vfiprintf_r+0x60>
 800e0a8:	68b5      	ldr	r5, [r6, #8]
 800e0aa:	e7df      	b.n	800e06c <_vfiprintf_r+0x20>
 800e0ac:	4b79      	ldr	r3, [pc, #484]	; (800e294 <_vfiprintf_r+0x248>)
 800e0ae:	429d      	cmp	r5, r3
 800e0b0:	bf08      	it	eq
 800e0b2:	68f5      	ldreq	r5, [r6, #12]
 800e0b4:	e7da      	b.n	800e06c <_vfiprintf_r+0x20>
 800e0b6:	89ab      	ldrh	r3, [r5, #12]
 800e0b8:	0598      	lsls	r0, r3, #22
 800e0ba:	d4ed      	bmi.n	800e098 <_vfiprintf_r+0x4c>
 800e0bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e0be:	f000 fb84 	bl	800e7ca <__retarget_lock_release_recursive>
 800e0c2:	e7e9      	b.n	800e098 <_vfiprintf_r+0x4c>
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	9309      	str	r3, [sp, #36]	; 0x24
 800e0c8:	2320      	movs	r3, #32
 800e0ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e0ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0d2:	2330      	movs	r3, #48	; 0x30
 800e0d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e298 <_vfiprintf_r+0x24c>
 800e0d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e0dc:	f04f 0901 	mov.w	r9, #1
 800e0e0:	4623      	mov	r3, r4
 800e0e2:	469a      	mov	sl, r3
 800e0e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0e8:	b10a      	cbz	r2, 800e0ee <_vfiprintf_r+0xa2>
 800e0ea:	2a25      	cmp	r2, #37	; 0x25
 800e0ec:	d1f9      	bne.n	800e0e2 <_vfiprintf_r+0x96>
 800e0ee:	ebba 0b04 	subs.w	fp, sl, r4
 800e0f2:	d00b      	beq.n	800e10c <_vfiprintf_r+0xc0>
 800e0f4:	465b      	mov	r3, fp
 800e0f6:	4622      	mov	r2, r4
 800e0f8:	4629      	mov	r1, r5
 800e0fa:	4630      	mov	r0, r6
 800e0fc:	f7ff ff94 	bl	800e028 <__sfputs_r>
 800e100:	3001      	adds	r0, #1
 800e102:	f000 80aa 	beq.w	800e25a <_vfiprintf_r+0x20e>
 800e106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e108:	445a      	add	r2, fp
 800e10a:	9209      	str	r2, [sp, #36]	; 0x24
 800e10c:	f89a 3000 	ldrb.w	r3, [sl]
 800e110:	2b00      	cmp	r3, #0
 800e112:	f000 80a2 	beq.w	800e25a <_vfiprintf_r+0x20e>
 800e116:	2300      	movs	r3, #0
 800e118:	f04f 32ff 	mov.w	r2, #4294967295
 800e11c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e120:	f10a 0a01 	add.w	sl, sl, #1
 800e124:	9304      	str	r3, [sp, #16]
 800e126:	9307      	str	r3, [sp, #28]
 800e128:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e12c:	931a      	str	r3, [sp, #104]	; 0x68
 800e12e:	4654      	mov	r4, sl
 800e130:	2205      	movs	r2, #5
 800e132:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e136:	4858      	ldr	r0, [pc, #352]	; (800e298 <_vfiprintf_r+0x24c>)
 800e138:	f7f2 f85a 	bl	80001f0 <memchr>
 800e13c:	9a04      	ldr	r2, [sp, #16]
 800e13e:	b9d8      	cbnz	r0, 800e178 <_vfiprintf_r+0x12c>
 800e140:	06d1      	lsls	r1, r2, #27
 800e142:	bf44      	itt	mi
 800e144:	2320      	movmi	r3, #32
 800e146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e14a:	0713      	lsls	r3, r2, #28
 800e14c:	bf44      	itt	mi
 800e14e:	232b      	movmi	r3, #43	; 0x2b
 800e150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e154:	f89a 3000 	ldrb.w	r3, [sl]
 800e158:	2b2a      	cmp	r3, #42	; 0x2a
 800e15a:	d015      	beq.n	800e188 <_vfiprintf_r+0x13c>
 800e15c:	9a07      	ldr	r2, [sp, #28]
 800e15e:	4654      	mov	r4, sl
 800e160:	2000      	movs	r0, #0
 800e162:	f04f 0c0a 	mov.w	ip, #10
 800e166:	4621      	mov	r1, r4
 800e168:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e16c:	3b30      	subs	r3, #48	; 0x30
 800e16e:	2b09      	cmp	r3, #9
 800e170:	d94e      	bls.n	800e210 <_vfiprintf_r+0x1c4>
 800e172:	b1b0      	cbz	r0, 800e1a2 <_vfiprintf_r+0x156>
 800e174:	9207      	str	r2, [sp, #28]
 800e176:	e014      	b.n	800e1a2 <_vfiprintf_r+0x156>
 800e178:	eba0 0308 	sub.w	r3, r0, r8
 800e17c:	fa09 f303 	lsl.w	r3, r9, r3
 800e180:	4313      	orrs	r3, r2
 800e182:	9304      	str	r3, [sp, #16]
 800e184:	46a2      	mov	sl, r4
 800e186:	e7d2      	b.n	800e12e <_vfiprintf_r+0xe2>
 800e188:	9b03      	ldr	r3, [sp, #12]
 800e18a:	1d19      	adds	r1, r3, #4
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	9103      	str	r1, [sp, #12]
 800e190:	2b00      	cmp	r3, #0
 800e192:	bfbb      	ittet	lt
 800e194:	425b      	neglt	r3, r3
 800e196:	f042 0202 	orrlt.w	r2, r2, #2
 800e19a:	9307      	strge	r3, [sp, #28]
 800e19c:	9307      	strlt	r3, [sp, #28]
 800e19e:	bfb8      	it	lt
 800e1a0:	9204      	strlt	r2, [sp, #16]
 800e1a2:	7823      	ldrb	r3, [r4, #0]
 800e1a4:	2b2e      	cmp	r3, #46	; 0x2e
 800e1a6:	d10c      	bne.n	800e1c2 <_vfiprintf_r+0x176>
 800e1a8:	7863      	ldrb	r3, [r4, #1]
 800e1aa:	2b2a      	cmp	r3, #42	; 0x2a
 800e1ac:	d135      	bne.n	800e21a <_vfiprintf_r+0x1ce>
 800e1ae:	9b03      	ldr	r3, [sp, #12]
 800e1b0:	1d1a      	adds	r2, r3, #4
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	9203      	str	r2, [sp, #12]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	bfb8      	it	lt
 800e1ba:	f04f 33ff 	movlt.w	r3, #4294967295
 800e1be:	3402      	adds	r4, #2
 800e1c0:	9305      	str	r3, [sp, #20]
 800e1c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e2a8 <_vfiprintf_r+0x25c>
 800e1c6:	7821      	ldrb	r1, [r4, #0]
 800e1c8:	2203      	movs	r2, #3
 800e1ca:	4650      	mov	r0, sl
 800e1cc:	f7f2 f810 	bl	80001f0 <memchr>
 800e1d0:	b140      	cbz	r0, 800e1e4 <_vfiprintf_r+0x198>
 800e1d2:	2340      	movs	r3, #64	; 0x40
 800e1d4:	eba0 000a 	sub.w	r0, r0, sl
 800e1d8:	fa03 f000 	lsl.w	r0, r3, r0
 800e1dc:	9b04      	ldr	r3, [sp, #16]
 800e1de:	4303      	orrs	r3, r0
 800e1e0:	3401      	adds	r4, #1
 800e1e2:	9304      	str	r3, [sp, #16]
 800e1e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1e8:	482c      	ldr	r0, [pc, #176]	; (800e29c <_vfiprintf_r+0x250>)
 800e1ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e1ee:	2206      	movs	r2, #6
 800e1f0:	f7f1 fffe 	bl	80001f0 <memchr>
 800e1f4:	2800      	cmp	r0, #0
 800e1f6:	d03f      	beq.n	800e278 <_vfiprintf_r+0x22c>
 800e1f8:	4b29      	ldr	r3, [pc, #164]	; (800e2a0 <_vfiprintf_r+0x254>)
 800e1fa:	bb1b      	cbnz	r3, 800e244 <_vfiprintf_r+0x1f8>
 800e1fc:	9b03      	ldr	r3, [sp, #12]
 800e1fe:	3307      	adds	r3, #7
 800e200:	f023 0307 	bic.w	r3, r3, #7
 800e204:	3308      	adds	r3, #8
 800e206:	9303      	str	r3, [sp, #12]
 800e208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e20a:	443b      	add	r3, r7
 800e20c:	9309      	str	r3, [sp, #36]	; 0x24
 800e20e:	e767      	b.n	800e0e0 <_vfiprintf_r+0x94>
 800e210:	fb0c 3202 	mla	r2, ip, r2, r3
 800e214:	460c      	mov	r4, r1
 800e216:	2001      	movs	r0, #1
 800e218:	e7a5      	b.n	800e166 <_vfiprintf_r+0x11a>
 800e21a:	2300      	movs	r3, #0
 800e21c:	3401      	adds	r4, #1
 800e21e:	9305      	str	r3, [sp, #20]
 800e220:	4619      	mov	r1, r3
 800e222:	f04f 0c0a 	mov.w	ip, #10
 800e226:	4620      	mov	r0, r4
 800e228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e22c:	3a30      	subs	r2, #48	; 0x30
 800e22e:	2a09      	cmp	r2, #9
 800e230:	d903      	bls.n	800e23a <_vfiprintf_r+0x1ee>
 800e232:	2b00      	cmp	r3, #0
 800e234:	d0c5      	beq.n	800e1c2 <_vfiprintf_r+0x176>
 800e236:	9105      	str	r1, [sp, #20]
 800e238:	e7c3      	b.n	800e1c2 <_vfiprintf_r+0x176>
 800e23a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e23e:	4604      	mov	r4, r0
 800e240:	2301      	movs	r3, #1
 800e242:	e7f0      	b.n	800e226 <_vfiprintf_r+0x1da>
 800e244:	ab03      	add	r3, sp, #12
 800e246:	9300      	str	r3, [sp, #0]
 800e248:	462a      	mov	r2, r5
 800e24a:	4b16      	ldr	r3, [pc, #88]	; (800e2a4 <_vfiprintf_r+0x258>)
 800e24c:	a904      	add	r1, sp, #16
 800e24e:	4630      	mov	r0, r6
 800e250:	f7fd fdd8 	bl	800be04 <_printf_float>
 800e254:	4607      	mov	r7, r0
 800e256:	1c78      	adds	r0, r7, #1
 800e258:	d1d6      	bne.n	800e208 <_vfiprintf_r+0x1bc>
 800e25a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e25c:	07d9      	lsls	r1, r3, #31
 800e25e:	d405      	bmi.n	800e26c <_vfiprintf_r+0x220>
 800e260:	89ab      	ldrh	r3, [r5, #12]
 800e262:	059a      	lsls	r2, r3, #22
 800e264:	d402      	bmi.n	800e26c <_vfiprintf_r+0x220>
 800e266:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e268:	f000 faaf 	bl	800e7ca <__retarget_lock_release_recursive>
 800e26c:	89ab      	ldrh	r3, [r5, #12]
 800e26e:	065b      	lsls	r3, r3, #25
 800e270:	f53f af12 	bmi.w	800e098 <_vfiprintf_r+0x4c>
 800e274:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e276:	e711      	b.n	800e09c <_vfiprintf_r+0x50>
 800e278:	ab03      	add	r3, sp, #12
 800e27a:	9300      	str	r3, [sp, #0]
 800e27c:	462a      	mov	r2, r5
 800e27e:	4b09      	ldr	r3, [pc, #36]	; (800e2a4 <_vfiprintf_r+0x258>)
 800e280:	a904      	add	r1, sp, #16
 800e282:	4630      	mov	r0, r6
 800e284:	f7fe f862 	bl	800c34c <_printf_i>
 800e288:	e7e4      	b.n	800e254 <_vfiprintf_r+0x208>
 800e28a:	bf00      	nop
 800e28c:	0800efa4 	.word	0x0800efa4
 800e290:	0800efc4 	.word	0x0800efc4
 800e294:	0800ef84 	.word	0x0800ef84
 800e298:	0800ee2c 	.word	0x0800ee2c
 800e29c:	0800ee36 	.word	0x0800ee36
 800e2a0:	0800be05 	.word	0x0800be05
 800e2a4:	0800e029 	.word	0x0800e029
 800e2a8:	0800ee32 	.word	0x0800ee32

0800e2ac <__swbuf_r>:
 800e2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ae:	460e      	mov	r6, r1
 800e2b0:	4614      	mov	r4, r2
 800e2b2:	4605      	mov	r5, r0
 800e2b4:	b118      	cbz	r0, 800e2be <__swbuf_r+0x12>
 800e2b6:	6983      	ldr	r3, [r0, #24]
 800e2b8:	b90b      	cbnz	r3, 800e2be <__swbuf_r+0x12>
 800e2ba:	f000 f9e7 	bl	800e68c <__sinit>
 800e2be:	4b21      	ldr	r3, [pc, #132]	; (800e344 <__swbuf_r+0x98>)
 800e2c0:	429c      	cmp	r4, r3
 800e2c2:	d12b      	bne.n	800e31c <__swbuf_r+0x70>
 800e2c4:	686c      	ldr	r4, [r5, #4]
 800e2c6:	69a3      	ldr	r3, [r4, #24]
 800e2c8:	60a3      	str	r3, [r4, #8]
 800e2ca:	89a3      	ldrh	r3, [r4, #12]
 800e2cc:	071a      	lsls	r2, r3, #28
 800e2ce:	d52f      	bpl.n	800e330 <__swbuf_r+0x84>
 800e2d0:	6923      	ldr	r3, [r4, #16]
 800e2d2:	b36b      	cbz	r3, 800e330 <__swbuf_r+0x84>
 800e2d4:	6923      	ldr	r3, [r4, #16]
 800e2d6:	6820      	ldr	r0, [r4, #0]
 800e2d8:	1ac0      	subs	r0, r0, r3
 800e2da:	6963      	ldr	r3, [r4, #20]
 800e2dc:	b2f6      	uxtb	r6, r6
 800e2de:	4283      	cmp	r3, r0
 800e2e0:	4637      	mov	r7, r6
 800e2e2:	dc04      	bgt.n	800e2ee <__swbuf_r+0x42>
 800e2e4:	4621      	mov	r1, r4
 800e2e6:	4628      	mov	r0, r5
 800e2e8:	f000 f93c 	bl	800e564 <_fflush_r>
 800e2ec:	bb30      	cbnz	r0, 800e33c <__swbuf_r+0x90>
 800e2ee:	68a3      	ldr	r3, [r4, #8]
 800e2f0:	3b01      	subs	r3, #1
 800e2f2:	60a3      	str	r3, [r4, #8]
 800e2f4:	6823      	ldr	r3, [r4, #0]
 800e2f6:	1c5a      	adds	r2, r3, #1
 800e2f8:	6022      	str	r2, [r4, #0]
 800e2fa:	701e      	strb	r6, [r3, #0]
 800e2fc:	6963      	ldr	r3, [r4, #20]
 800e2fe:	3001      	adds	r0, #1
 800e300:	4283      	cmp	r3, r0
 800e302:	d004      	beq.n	800e30e <__swbuf_r+0x62>
 800e304:	89a3      	ldrh	r3, [r4, #12]
 800e306:	07db      	lsls	r3, r3, #31
 800e308:	d506      	bpl.n	800e318 <__swbuf_r+0x6c>
 800e30a:	2e0a      	cmp	r6, #10
 800e30c:	d104      	bne.n	800e318 <__swbuf_r+0x6c>
 800e30e:	4621      	mov	r1, r4
 800e310:	4628      	mov	r0, r5
 800e312:	f000 f927 	bl	800e564 <_fflush_r>
 800e316:	b988      	cbnz	r0, 800e33c <__swbuf_r+0x90>
 800e318:	4638      	mov	r0, r7
 800e31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e31c:	4b0a      	ldr	r3, [pc, #40]	; (800e348 <__swbuf_r+0x9c>)
 800e31e:	429c      	cmp	r4, r3
 800e320:	d101      	bne.n	800e326 <__swbuf_r+0x7a>
 800e322:	68ac      	ldr	r4, [r5, #8]
 800e324:	e7cf      	b.n	800e2c6 <__swbuf_r+0x1a>
 800e326:	4b09      	ldr	r3, [pc, #36]	; (800e34c <__swbuf_r+0xa0>)
 800e328:	429c      	cmp	r4, r3
 800e32a:	bf08      	it	eq
 800e32c:	68ec      	ldreq	r4, [r5, #12]
 800e32e:	e7ca      	b.n	800e2c6 <__swbuf_r+0x1a>
 800e330:	4621      	mov	r1, r4
 800e332:	4628      	mov	r0, r5
 800e334:	f000 f81a 	bl	800e36c <__swsetup_r>
 800e338:	2800      	cmp	r0, #0
 800e33a:	d0cb      	beq.n	800e2d4 <__swbuf_r+0x28>
 800e33c:	f04f 37ff 	mov.w	r7, #4294967295
 800e340:	e7ea      	b.n	800e318 <__swbuf_r+0x6c>
 800e342:	bf00      	nop
 800e344:	0800efa4 	.word	0x0800efa4
 800e348:	0800efc4 	.word	0x0800efc4
 800e34c:	0800ef84 	.word	0x0800ef84

0800e350 <__ascii_wctomb>:
 800e350:	b149      	cbz	r1, 800e366 <__ascii_wctomb+0x16>
 800e352:	2aff      	cmp	r2, #255	; 0xff
 800e354:	bf85      	ittet	hi
 800e356:	238a      	movhi	r3, #138	; 0x8a
 800e358:	6003      	strhi	r3, [r0, #0]
 800e35a:	700a      	strbls	r2, [r1, #0]
 800e35c:	f04f 30ff 	movhi.w	r0, #4294967295
 800e360:	bf98      	it	ls
 800e362:	2001      	movls	r0, #1
 800e364:	4770      	bx	lr
 800e366:	4608      	mov	r0, r1
 800e368:	4770      	bx	lr
	...

0800e36c <__swsetup_r>:
 800e36c:	4b32      	ldr	r3, [pc, #200]	; (800e438 <__swsetup_r+0xcc>)
 800e36e:	b570      	push	{r4, r5, r6, lr}
 800e370:	681d      	ldr	r5, [r3, #0]
 800e372:	4606      	mov	r6, r0
 800e374:	460c      	mov	r4, r1
 800e376:	b125      	cbz	r5, 800e382 <__swsetup_r+0x16>
 800e378:	69ab      	ldr	r3, [r5, #24]
 800e37a:	b913      	cbnz	r3, 800e382 <__swsetup_r+0x16>
 800e37c:	4628      	mov	r0, r5
 800e37e:	f000 f985 	bl	800e68c <__sinit>
 800e382:	4b2e      	ldr	r3, [pc, #184]	; (800e43c <__swsetup_r+0xd0>)
 800e384:	429c      	cmp	r4, r3
 800e386:	d10f      	bne.n	800e3a8 <__swsetup_r+0x3c>
 800e388:	686c      	ldr	r4, [r5, #4]
 800e38a:	89a3      	ldrh	r3, [r4, #12]
 800e38c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e390:	0719      	lsls	r1, r3, #28
 800e392:	d42c      	bmi.n	800e3ee <__swsetup_r+0x82>
 800e394:	06dd      	lsls	r5, r3, #27
 800e396:	d411      	bmi.n	800e3bc <__swsetup_r+0x50>
 800e398:	2309      	movs	r3, #9
 800e39a:	6033      	str	r3, [r6, #0]
 800e39c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e3a0:	81a3      	strh	r3, [r4, #12]
 800e3a2:	f04f 30ff 	mov.w	r0, #4294967295
 800e3a6:	e03e      	b.n	800e426 <__swsetup_r+0xba>
 800e3a8:	4b25      	ldr	r3, [pc, #148]	; (800e440 <__swsetup_r+0xd4>)
 800e3aa:	429c      	cmp	r4, r3
 800e3ac:	d101      	bne.n	800e3b2 <__swsetup_r+0x46>
 800e3ae:	68ac      	ldr	r4, [r5, #8]
 800e3b0:	e7eb      	b.n	800e38a <__swsetup_r+0x1e>
 800e3b2:	4b24      	ldr	r3, [pc, #144]	; (800e444 <__swsetup_r+0xd8>)
 800e3b4:	429c      	cmp	r4, r3
 800e3b6:	bf08      	it	eq
 800e3b8:	68ec      	ldreq	r4, [r5, #12]
 800e3ba:	e7e6      	b.n	800e38a <__swsetup_r+0x1e>
 800e3bc:	0758      	lsls	r0, r3, #29
 800e3be:	d512      	bpl.n	800e3e6 <__swsetup_r+0x7a>
 800e3c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e3c2:	b141      	cbz	r1, 800e3d6 <__swsetup_r+0x6a>
 800e3c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e3c8:	4299      	cmp	r1, r3
 800e3ca:	d002      	beq.n	800e3d2 <__swsetup_r+0x66>
 800e3cc:	4630      	mov	r0, r6
 800e3ce:	f7ff fb31 	bl	800da34 <_free_r>
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	6363      	str	r3, [r4, #52]	; 0x34
 800e3d6:	89a3      	ldrh	r3, [r4, #12]
 800e3d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e3dc:	81a3      	strh	r3, [r4, #12]
 800e3de:	2300      	movs	r3, #0
 800e3e0:	6063      	str	r3, [r4, #4]
 800e3e2:	6923      	ldr	r3, [r4, #16]
 800e3e4:	6023      	str	r3, [r4, #0]
 800e3e6:	89a3      	ldrh	r3, [r4, #12]
 800e3e8:	f043 0308 	orr.w	r3, r3, #8
 800e3ec:	81a3      	strh	r3, [r4, #12]
 800e3ee:	6923      	ldr	r3, [r4, #16]
 800e3f0:	b94b      	cbnz	r3, 800e406 <__swsetup_r+0x9a>
 800e3f2:	89a3      	ldrh	r3, [r4, #12]
 800e3f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e3f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3fc:	d003      	beq.n	800e406 <__swsetup_r+0x9a>
 800e3fe:	4621      	mov	r1, r4
 800e400:	4630      	mov	r0, r6
 800e402:	f000 fa09 	bl	800e818 <__smakebuf_r>
 800e406:	89a0      	ldrh	r0, [r4, #12]
 800e408:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e40c:	f010 0301 	ands.w	r3, r0, #1
 800e410:	d00a      	beq.n	800e428 <__swsetup_r+0xbc>
 800e412:	2300      	movs	r3, #0
 800e414:	60a3      	str	r3, [r4, #8]
 800e416:	6963      	ldr	r3, [r4, #20]
 800e418:	425b      	negs	r3, r3
 800e41a:	61a3      	str	r3, [r4, #24]
 800e41c:	6923      	ldr	r3, [r4, #16]
 800e41e:	b943      	cbnz	r3, 800e432 <__swsetup_r+0xc6>
 800e420:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e424:	d1ba      	bne.n	800e39c <__swsetup_r+0x30>
 800e426:	bd70      	pop	{r4, r5, r6, pc}
 800e428:	0781      	lsls	r1, r0, #30
 800e42a:	bf58      	it	pl
 800e42c:	6963      	ldrpl	r3, [r4, #20]
 800e42e:	60a3      	str	r3, [r4, #8]
 800e430:	e7f4      	b.n	800e41c <__swsetup_r+0xb0>
 800e432:	2000      	movs	r0, #0
 800e434:	e7f7      	b.n	800e426 <__swsetup_r+0xba>
 800e436:	bf00      	nop
 800e438:	20000114 	.word	0x20000114
 800e43c:	0800efa4 	.word	0x0800efa4
 800e440:	0800efc4 	.word	0x0800efc4
 800e444:	0800ef84 	.word	0x0800ef84

0800e448 <abort>:
 800e448:	b508      	push	{r3, lr}
 800e44a:	2006      	movs	r0, #6
 800e44c:	f000 fa54 	bl	800e8f8 <raise>
 800e450:	2001      	movs	r0, #1
 800e452:	f7f3 fdcf 	bl	8001ff4 <_exit>
	...

0800e458 <__sflush_r>:
 800e458:	898a      	ldrh	r2, [r1, #12]
 800e45a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e45e:	4605      	mov	r5, r0
 800e460:	0710      	lsls	r0, r2, #28
 800e462:	460c      	mov	r4, r1
 800e464:	d458      	bmi.n	800e518 <__sflush_r+0xc0>
 800e466:	684b      	ldr	r3, [r1, #4]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	dc05      	bgt.n	800e478 <__sflush_r+0x20>
 800e46c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e46e:	2b00      	cmp	r3, #0
 800e470:	dc02      	bgt.n	800e478 <__sflush_r+0x20>
 800e472:	2000      	movs	r0, #0
 800e474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e478:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e47a:	2e00      	cmp	r6, #0
 800e47c:	d0f9      	beq.n	800e472 <__sflush_r+0x1a>
 800e47e:	2300      	movs	r3, #0
 800e480:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e484:	682f      	ldr	r7, [r5, #0]
 800e486:	602b      	str	r3, [r5, #0]
 800e488:	d032      	beq.n	800e4f0 <__sflush_r+0x98>
 800e48a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e48c:	89a3      	ldrh	r3, [r4, #12]
 800e48e:	075a      	lsls	r2, r3, #29
 800e490:	d505      	bpl.n	800e49e <__sflush_r+0x46>
 800e492:	6863      	ldr	r3, [r4, #4]
 800e494:	1ac0      	subs	r0, r0, r3
 800e496:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e498:	b10b      	cbz	r3, 800e49e <__sflush_r+0x46>
 800e49a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e49c:	1ac0      	subs	r0, r0, r3
 800e49e:	2300      	movs	r3, #0
 800e4a0:	4602      	mov	r2, r0
 800e4a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e4a4:	6a21      	ldr	r1, [r4, #32]
 800e4a6:	4628      	mov	r0, r5
 800e4a8:	47b0      	blx	r6
 800e4aa:	1c43      	adds	r3, r0, #1
 800e4ac:	89a3      	ldrh	r3, [r4, #12]
 800e4ae:	d106      	bne.n	800e4be <__sflush_r+0x66>
 800e4b0:	6829      	ldr	r1, [r5, #0]
 800e4b2:	291d      	cmp	r1, #29
 800e4b4:	d82c      	bhi.n	800e510 <__sflush_r+0xb8>
 800e4b6:	4a2a      	ldr	r2, [pc, #168]	; (800e560 <__sflush_r+0x108>)
 800e4b8:	40ca      	lsrs	r2, r1
 800e4ba:	07d6      	lsls	r6, r2, #31
 800e4bc:	d528      	bpl.n	800e510 <__sflush_r+0xb8>
 800e4be:	2200      	movs	r2, #0
 800e4c0:	6062      	str	r2, [r4, #4]
 800e4c2:	04d9      	lsls	r1, r3, #19
 800e4c4:	6922      	ldr	r2, [r4, #16]
 800e4c6:	6022      	str	r2, [r4, #0]
 800e4c8:	d504      	bpl.n	800e4d4 <__sflush_r+0x7c>
 800e4ca:	1c42      	adds	r2, r0, #1
 800e4cc:	d101      	bne.n	800e4d2 <__sflush_r+0x7a>
 800e4ce:	682b      	ldr	r3, [r5, #0]
 800e4d0:	b903      	cbnz	r3, 800e4d4 <__sflush_r+0x7c>
 800e4d2:	6560      	str	r0, [r4, #84]	; 0x54
 800e4d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e4d6:	602f      	str	r7, [r5, #0]
 800e4d8:	2900      	cmp	r1, #0
 800e4da:	d0ca      	beq.n	800e472 <__sflush_r+0x1a>
 800e4dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e4e0:	4299      	cmp	r1, r3
 800e4e2:	d002      	beq.n	800e4ea <__sflush_r+0x92>
 800e4e4:	4628      	mov	r0, r5
 800e4e6:	f7ff faa5 	bl	800da34 <_free_r>
 800e4ea:	2000      	movs	r0, #0
 800e4ec:	6360      	str	r0, [r4, #52]	; 0x34
 800e4ee:	e7c1      	b.n	800e474 <__sflush_r+0x1c>
 800e4f0:	6a21      	ldr	r1, [r4, #32]
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	4628      	mov	r0, r5
 800e4f6:	47b0      	blx	r6
 800e4f8:	1c41      	adds	r1, r0, #1
 800e4fa:	d1c7      	bne.n	800e48c <__sflush_r+0x34>
 800e4fc:	682b      	ldr	r3, [r5, #0]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d0c4      	beq.n	800e48c <__sflush_r+0x34>
 800e502:	2b1d      	cmp	r3, #29
 800e504:	d001      	beq.n	800e50a <__sflush_r+0xb2>
 800e506:	2b16      	cmp	r3, #22
 800e508:	d101      	bne.n	800e50e <__sflush_r+0xb6>
 800e50a:	602f      	str	r7, [r5, #0]
 800e50c:	e7b1      	b.n	800e472 <__sflush_r+0x1a>
 800e50e:	89a3      	ldrh	r3, [r4, #12]
 800e510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e514:	81a3      	strh	r3, [r4, #12]
 800e516:	e7ad      	b.n	800e474 <__sflush_r+0x1c>
 800e518:	690f      	ldr	r7, [r1, #16]
 800e51a:	2f00      	cmp	r7, #0
 800e51c:	d0a9      	beq.n	800e472 <__sflush_r+0x1a>
 800e51e:	0793      	lsls	r3, r2, #30
 800e520:	680e      	ldr	r6, [r1, #0]
 800e522:	bf08      	it	eq
 800e524:	694b      	ldreq	r3, [r1, #20]
 800e526:	600f      	str	r7, [r1, #0]
 800e528:	bf18      	it	ne
 800e52a:	2300      	movne	r3, #0
 800e52c:	eba6 0807 	sub.w	r8, r6, r7
 800e530:	608b      	str	r3, [r1, #8]
 800e532:	f1b8 0f00 	cmp.w	r8, #0
 800e536:	dd9c      	ble.n	800e472 <__sflush_r+0x1a>
 800e538:	6a21      	ldr	r1, [r4, #32]
 800e53a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e53c:	4643      	mov	r3, r8
 800e53e:	463a      	mov	r2, r7
 800e540:	4628      	mov	r0, r5
 800e542:	47b0      	blx	r6
 800e544:	2800      	cmp	r0, #0
 800e546:	dc06      	bgt.n	800e556 <__sflush_r+0xfe>
 800e548:	89a3      	ldrh	r3, [r4, #12]
 800e54a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e54e:	81a3      	strh	r3, [r4, #12]
 800e550:	f04f 30ff 	mov.w	r0, #4294967295
 800e554:	e78e      	b.n	800e474 <__sflush_r+0x1c>
 800e556:	4407      	add	r7, r0
 800e558:	eba8 0800 	sub.w	r8, r8, r0
 800e55c:	e7e9      	b.n	800e532 <__sflush_r+0xda>
 800e55e:	bf00      	nop
 800e560:	20400001 	.word	0x20400001

0800e564 <_fflush_r>:
 800e564:	b538      	push	{r3, r4, r5, lr}
 800e566:	690b      	ldr	r3, [r1, #16]
 800e568:	4605      	mov	r5, r0
 800e56a:	460c      	mov	r4, r1
 800e56c:	b913      	cbnz	r3, 800e574 <_fflush_r+0x10>
 800e56e:	2500      	movs	r5, #0
 800e570:	4628      	mov	r0, r5
 800e572:	bd38      	pop	{r3, r4, r5, pc}
 800e574:	b118      	cbz	r0, 800e57e <_fflush_r+0x1a>
 800e576:	6983      	ldr	r3, [r0, #24]
 800e578:	b90b      	cbnz	r3, 800e57e <_fflush_r+0x1a>
 800e57a:	f000 f887 	bl	800e68c <__sinit>
 800e57e:	4b14      	ldr	r3, [pc, #80]	; (800e5d0 <_fflush_r+0x6c>)
 800e580:	429c      	cmp	r4, r3
 800e582:	d11b      	bne.n	800e5bc <_fflush_r+0x58>
 800e584:	686c      	ldr	r4, [r5, #4]
 800e586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d0ef      	beq.n	800e56e <_fflush_r+0xa>
 800e58e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e590:	07d0      	lsls	r0, r2, #31
 800e592:	d404      	bmi.n	800e59e <_fflush_r+0x3a>
 800e594:	0599      	lsls	r1, r3, #22
 800e596:	d402      	bmi.n	800e59e <_fflush_r+0x3a>
 800e598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e59a:	f000 f915 	bl	800e7c8 <__retarget_lock_acquire_recursive>
 800e59e:	4628      	mov	r0, r5
 800e5a0:	4621      	mov	r1, r4
 800e5a2:	f7ff ff59 	bl	800e458 <__sflush_r>
 800e5a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e5a8:	07da      	lsls	r2, r3, #31
 800e5aa:	4605      	mov	r5, r0
 800e5ac:	d4e0      	bmi.n	800e570 <_fflush_r+0xc>
 800e5ae:	89a3      	ldrh	r3, [r4, #12]
 800e5b0:	059b      	lsls	r3, r3, #22
 800e5b2:	d4dd      	bmi.n	800e570 <_fflush_r+0xc>
 800e5b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5b6:	f000 f908 	bl	800e7ca <__retarget_lock_release_recursive>
 800e5ba:	e7d9      	b.n	800e570 <_fflush_r+0xc>
 800e5bc:	4b05      	ldr	r3, [pc, #20]	; (800e5d4 <_fflush_r+0x70>)
 800e5be:	429c      	cmp	r4, r3
 800e5c0:	d101      	bne.n	800e5c6 <_fflush_r+0x62>
 800e5c2:	68ac      	ldr	r4, [r5, #8]
 800e5c4:	e7df      	b.n	800e586 <_fflush_r+0x22>
 800e5c6:	4b04      	ldr	r3, [pc, #16]	; (800e5d8 <_fflush_r+0x74>)
 800e5c8:	429c      	cmp	r4, r3
 800e5ca:	bf08      	it	eq
 800e5cc:	68ec      	ldreq	r4, [r5, #12]
 800e5ce:	e7da      	b.n	800e586 <_fflush_r+0x22>
 800e5d0:	0800efa4 	.word	0x0800efa4
 800e5d4:	0800efc4 	.word	0x0800efc4
 800e5d8:	0800ef84 	.word	0x0800ef84

0800e5dc <std>:
 800e5dc:	2300      	movs	r3, #0
 800e5de:	b510      	push	{r4, lr}
 800e5e0:	4604      	mov	r4, r0
 800e5e2:	e9c0 3300 	strd	r3, r3, [r0]
 800e5e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e5ea:	6083      	str	r3, [r0, #8]
 800e5ec:	8181      	strh	r1, [r0, #12]
 800e5ee:	6643      	str	r3, [r0, #100]	; 0x64
 800e5f0:	81c2      	strh	r2, [r0, #14]
 800e5f2:	6183      	str	r3, [r0, #24]
 800e5f4:	4619      	mov	r1, r3
 800e5f6:	2208      	movs	r2, #8
 800e5f8:	305c      	adds	r0, #92	; 0x5c
 800e5fa:	f7fd fb5b 	bl	800bcb4 <memset>
 800e5fe:	4b05      	ldr	r3, [pc, #20]	; (800e614 <std+0x38>)
 800e600:	6263      	str	r3, [r4, #36]	; 0x24
 800e602:	4b05      	ldr	r3, [pc, #20]	; (800e618 <std+0x3c>)
 800e604:	62a3      	str	r3, [r4, #40]	; 0x28
 800e606:	4b05      	ldr	r3, [pc, #20]	; (800e61c <std+0x40>)
 800e608:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e60a:	4b05      	ldr	r3, [pc, #20]	; (800e620 <std+0x44>)
 800e60c:	6224      	str	r4, [r4, #32]
 800e60e:	6323      	str	r3, [r4, #48]	; 0x30
 800e610:	bd10      	pop	{r4, pc}
 800e612:	bf00      	nop
 800e614:	0800e931 	.word	0x0800e931
 800e618:	0800e953 	.word	0x0800e953
 800e61c:	0800e98b 	.word	0x0800e98b
 800e620:	0800e9af 	.word	0x0800e9af

0800e624 <_cleanup_r>:
 800e624:	4901      	ldr	r1, [pc, #4]	; (800e62c <_cleanup_r+0x8>)
 800e626:	f000 b8af 	b.w	800e788 <_fwalk_reent>
 800e62a:	bf00      	nop
 800e62c:	0800e565 	.word	0x0800e565

0800e630 <__sfmoreglue>:
 800e630:	b570      	push	{r4, r5, r6, lr}
 800e632:	2268      	movs	r2, #104	; 0x68
 800e634:	1e4d      	subs	r5, r1, #1
 800e636:	4355      	muls	r5, r2
 800e638:	460e      	mov	r6, r1
 800e63a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e63e:	f7ff fa65 	bl	800db0c <_malloc_r>
 800e642:	4604      	mov	r4, r0
 800e644:	b140      	cbz	r0, 800e658 <__sfmoreglue+0x28>
 800e646:	2100      	movs	r1, #0
 800e648:	e9c0 1600 	strd	r1, r6, [r0]
 800e64c:	300c      	adds	r0, #12
 800e64e:	60a0      	str	r0, [r4, #8]
 800e650:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e654:	f7fd fb2e 	bl	800bcb4 <memset>
 800e658:	4620      	mov	r0, r4
 800e65a:	bd70      	pop	{r4, r5, r6, pc}

0800e65c <__sfp_lock_acquire>:
 800e65c:	4801      	ldr	r0, [pc, #4]	; (800e664 <__sfp_lock_acquire+0x8>)
 800e65e:	f000 b8b3 	b.w	800e7c8 <__retarget_lock_acquire_recursive>
 800e662:	bf00      	nop
 800e664:	200029d1 	.word	0x200029d1

0800e668 <__sfp_lock_release>:
 800e668:	4801      	ldr	r0, [pc, #4]	; (800e670 <__sfp_lock_release+0x8>)
 800e66a:	f000 b8ae 	b.w	800e7ca <__retarget_lock_release_recursive>
 800e66e:	bf00      	nop
 800e670:	200029d1 	.word	0x200029d1

0800e674 <__sinit_lock_acquire>:
 800e674:	4801      	ldr	r0, [pc, #4]	; (800e67c <__sinit_lock_acquire+0x8>)
 800e676:	f000 b8a7 	b.w	800e7c8 <__retarget_lock_acquire_recursive>
 800e67a:	bf00      	nop
 800e67c:	200029d2 	.word	0x200029d2

0800e680 <__sinit_lock_release>:
 800e680:	4801      	ldr	r0, [pc, #4]	; (800e688 <__sinit_lock_release+0x8>)
 800e682:	f000 b8a2 	b.w	800e7ca <__retarget_lock_release_recursive>
 800e686:	bf00      	nop
 800e688:	200029d2 	.word	0x200029d2

0800e68c <__sinit>:
 800e68c:	b510      	push	{r4, lr}
 800e68e:	4604      	mov	r4, r0
 800e690:	f7ff fff0 	bl	800e674 <__sinit_lock_acquire>
 800e694:	69a3      	ldr	r3, [r4, #24]
 800e696:	b11b      	cbz	r3, 800e6a0 <__sinit+0x14>
 800e698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e69c:	f7ff bff0 	b.w	800e680 <__sinit_lock_release>
 800e6a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e6a4:	6523      	str	r3, [r4, #80]	; 0x50
 800e6a6:	4b13      	ldr	r3, [pc, #76]	; (800e6f4 <__sinit+0x68>)
 800e6a8:	4a13      	ldr	r2, [pc, #76]	; (800e6f8 <__sinit+0x6c>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	62a2      	str	r2, [r4, #40]	; 0x28
 800e6ae:	42a3      	cmp	r3, r4
 800e6b0:	bf04      	itt	eq
 800e6b2:	2301      	moveq	r3, #1
 800e6b4:	61a3      	streq	r3, [r4, #24]
 800e6b6:	4620      	mov	r0, r4
 800e6b8:	f000 f820 	bl	800e6fc <__sfp>
 800e6bc:	6060      	str	r0, [r4, #4]
 800e6be:	4620      	mov	r0, r4
 800e6c0:	f000 f81c 	bl	800e6fc <__sfp>
 800e6c4:	60a0      	str	r0, [r4, #8]
 800e6c6:	4620      	mov	r0, r4
 800e6c8:	f000 f818 	bl	800e6fc <__sfp>
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	60e0      	str	r0, [r4, #12]
 800e6d0:	2104      	movs	r1, #4
 800e6d2:	6860      	ldr	r0, [r4, #4]
 800e6d4:	f7ff ff82 	bl	800e5dc <std>
 800e6d8:	68a0      	ldr	r0, [r4, #8]
 800e6da:	2201      	movs	r2, #1
 800e6dc:	2109      	movs	r1, #9
 800e6de:	f7ff ff7d 	bl	800e5dc <std>
 800e6e2:	68e0      	ldr	r0, [r4, #12]
 800e6e4:	2202      	movs	r2, #2
 800e6e6:	2112      	movs	r1, #18
 800e6e8:	f7ff ff78 	bl	800e5dc <std>
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	61a3      	str	r3, [r4, #24]
 800e6f0:	e7d2      	b.n	800e698 <__sinit+0xc>
 800e6f2:	bf00      	nop
 800e6f4:	0800ec0c 	.word	0x0800ec0c
 800e6f8:	0800e625 	.word	0x0800e625

0800e6fc <__sfp>:
 800e6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6fe:	4607      	mov	r7, r0
 800e700:	f7ff ffac 	bl	800e65c <__sfp_lock_acquire>
 800e704:	4b1e      	ldr	r3, [pc, #120]	; (800e780 <__sfp+0x84>)
 800e706:	681e      	ldr	r6, [r3, #0]
 800e708:	69b3      	ldr	r3, [r6, #24]
 800e70a:	b913      	cbnz	r3, 800e712 <__sfp+0x16>
 800e70c:	4630      	mov	r0, r6
 800e70e:	f7ff ffbd 	bl	800e68c <__sinit>
 800e712:	3648      	adds	r6, #72	; 0x48
 800e714:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e718:	3b01      	subs	r3, #1
 800e71a:	d503      	bpl.n	800e724 <__sfp+0x28>
 800e71c:	6833      	ldr	r3, [r6, #0]
 800e71e:	b30b      	cbz	r3, 800e764 <__sfp+0x68>
 800e720:	6836      	ldr	r6, [r6, #0]
 800e722:	e7f7      	b.n	800e714 <__sfp+0x18>
 800e724:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e728:	b9d5      	cbnz	r5, 800e760 <__sfp+0x64>
 800e72a:	4b16      	ldr	r3, [pc, #88]	; (800e784 <__sfp+0x88>)
 800e72c:	60e3      	str	r3, [r4, #12]
 800e72e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e732:	6665      	str	r5, [r4, #100]	; 0x64
 800e734:	f000 f847 	bl	800e7c6 <__retarget_lock_init_recursive>
 800e738:	f7ff ff96 	bl	800e668 <__sfp_lock_release>
 800e73c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e740:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e744:	6025      	str	r5, [r4, #0]
 800e746:	61a5      	str	r5, [r4, #24]
 800e748:	2208      	movs	r2, #8
 800e74a:	4629      	mov	r1, r5
 800e74c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e750:	f7fd fab0 	bl	800bcb4 <memset>
 800e754:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e758:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e75c:	4620      	mov	r0, r4
 800e75e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e760:	3468      	adds	r4, #104	; 0x68
 800e762:	e7d9      	b.n	800e718 <__sfp+0x1c>
 800e764:	2104      	movs	r1, #4
 800e766:	4638      	mov	r0, r7
 800e768:	f7ff ff62 	bl	800e630 <__sfmoreglue>
 800e76c:	4604      	mov	r4, r0
 800e76e:	6030      	str	r0, [r6, #0]
 800e770:	2800      	cmp	r0, #0
 800e772:	d1d5      	bne.n	800e720 <__sfp+0x24>
 800e774:	f7ff ff78 	bl	800e668 <__sfp_lock_release>
 800e778:	230c      	movs	r3, #12
 800e77a:	603b      	str	r3, [r7, #0]
 800e77c:	e7ee      	b.n	800e75c <__sfp+0x60>
 800e77e:	bf00      	nop
 800e780:	0800ec0c 	.word	0x0800ec0c
 800e784:	ffff0001 	.word	0xffff0001

0800e788 <_fwalk_reent>:
 800e788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e78c:	4606      	mov	r6, r0
 800e78e:	4688      	mov	r8, r1
 800e790:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e794:	2700      	movs	r7, #0
 800e796:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e79a:	f1b9 0901 	subs.w	r9, r9, #1
 800e79e:	d505      	bpl.n	800e7ac <_fwalk_reent+0x24>
 800e7a0:	6824      	ldr	r4, [r4, #0]
 800e7a2:	2c00      	cmp	r4, #0
 800e7a4:	d1f7      	bne.n	800e796 <_fwalk_reent+0xe>
 800e7a6:	4638      	mov	r0, r7
 800e7a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7ac:	89ab      	ldrh	r3, [r5, #12]
 800e7ae:	2b01      	cmp	r3, #1
 800e7b0:	d907      	bls.n	800e7c2 <_fwalk_reent+0x3a>
 800e7b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e7b6:	3301      	adds	r3, #1
 800e7b8:	d003      	beq.n	800e7c2 <_fwalk_reent+0x3a>
 800e7ba:	4629      	mov	r1, r5
 800e7bc:	4630      	mov	r0, r6
 800e7be:	47c0      	blx	r8
 800e7c0:	4307      	orrs	r7, r0
 800e7c2:	3568      	adds	r5, #104	; 0x68
 800e7c4:	e7e9      	b.n	800e79a <_fwalk_reent+0x12>

0800e7c6 <__retarget_lock_init_recursive>:
 800e7c6:	4770      	bx	lr

0800e7c8 <__retarget_lock_acquire_recursive>:
 800e7c8:	4770      	bx	lr

0800e7ca <__retarget_lock_release_recursive>:
 800e7ca:	4770      	bx	lr

0800e7cc <__swhatbuf_r>:
 800e7cc:	b570      	push	{r4, r5, r6, lr}
 800e7ce:	460e      	mov	r6, r1
 800e7d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7d4:	2900      	cmp	r1, #0
 800e7d6:	b096      	sub	sp, #88	; 0x58
 800e7d8:	4614      	mov	r4, r2
 800e7da:	461d      	mov	r5, r3
 800e7dc:	da08      	bge.n	800e7f0 <__swhatbuf_r+0x24>
 800e7de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	602a      	str	r2, [r5, #0]
 800e7e6:	061a      	lsls	r2, r3, #24
 800e7e8:	d410      	bmi.n	800e80c <__swhatbuf_r+0x40>
 800e7ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7ee:	e00e      	b.n	800e80e <__swhatbuf_r+0x42>
 800e7f0:	466a      	mov	r2, sp
 800e7f2:	f000 f903 	bl	800e9fc <_fstat_r>
 800e7f6:	2800      	cmp	r0, #0
 800e7f8:	dbf1      	blt.n	800e7de <__swhatbuf_r+0x12>
 800e7fa:	9a01      	ldr	r2, [sp, #4]
 800e7fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e800:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e804:	425a      	negs	r2, r3
 800e806:	415a      	adcs	r2, r3
 800e808:	602a      	str	r2, [r5, #0]
 800e80a:	e7ee      	b.n	800e7ea <__swhatbuf_r+0x1e>
 800e80c:	2340      	movs	r3, #64	; 0x40
 800e80e:	2000      	movs	r0, #0
 800e810:	6023      	str	r3, [r4, #0]
 800e812:	b016      	add	sp, #88	; 0x58
 800e814:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e818 <__smakebuf_r>:
 800e818:	898b      	ldrh	r3, [r1, #12]
 800e81a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e81c:	079d      	lsls	r5, r3, #30
 800e81e:	4606      	mov	r6, r0
 800e820:	460c      	mov	r4, r1
 800e822:	d507      	bpl.n	800e834 <__smakebuf_r+0x1c>
 800e824:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e828:	6023      	str	r3, [r4, #0]
 800e82a:	6123      	str	r3, [r4, #16]
 800e82c:	2301      	movs	r3, #1
 800e82e:	6163      	str	r3, [r4, #20]
 800e830:	b002      	add	sp, #8
 800e832:	bd70      	pop	{r4, r5, r6, pc}
 800e834:	ab01      	add	r3, sp, #4
 800e836:	466a      	mov	r2, sp
 800e838:	f7ff ffc8 	bl	800e7cc <__swhatbuf_r>
 800e83c:	9900      	ldr	r1, [sp, #0]
 800e83e:	4605      	mov	r5, r0
 800e840:	4630      	mov	r0, r6
 800e842:	f7ff f963 	bl	800db0c <_malloc_r>
 800e846:	b948      	cbnz	r0, 800e85c <__smakebuf_r+0x44>
 800e848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e84c:	059a      	lsls	r2, r3, #22
 800e84e:	d4ef      	bmi.n	800e830 <__smakebuf_r+0x18>
 800e850:	f023 0303 	bic.w	r3, r3, #3
 800e854:	f043 0302 	orr.w	r3, r3, #2
 800e858:	81a3      	strh	r3, [r4, #12]
 800e85a:	e7e3      	b.n	800e824 <__smakebuf_r+0xc>
 800e85c:	4b0d      	ldr	r3, [pc, #52]	; (800e894 <__smakebuf_r+0x7c>)
 800e85e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e860:	89a3      	ldrh	r3, [r4, #12]
 800e862:	6020      	str	r0, [r4, #0]
 800e864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e868:	81a3      	strh	r3, [r4, #12]
 800e86a:	9b00      	ldr	r3, [sp, #0]
 800e86c:	6163      	str	r3, [r4, #20]
 800e86e:	9b01      	ldr	r3, [sp, #4]
 800e870:	6120      	str	r0, [r4, #16]
 800e872:	b15b      	cbz	r3, 800e88c <__smakebuf_r+0x74>
 800e874:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e878:	4630      	mov	r0, r6
 800e87a:	f000 f8d1 	bl	800ea20 <_isatty_r>
 800e87e:	b128      	cbz	r0, 800e88c <__smakebuf_r+0x74>
 800e880:	89a3      	ldrh	r3, [r4, #12]
 800e882:	f023 0303 	bic.w	r3, r3, #3
 800e886:	f043 0301 	orr.w	r3, r3, #1
 800e88a:	81a3      	strh	r3, [r4, #12]
 800e88c:	89a0      	ldrh	r0, [r4, #12]
 800e88e:	4305      	orrs	r5, r0
 800e890:	81a5      	strh	r5, [r4, #12]
 800e892:	e7cd      	b.n	800e830 <__smakebuf_r+0x18>
 800e894:	0800e625 	.word	0x0800e625

0800e898 <_malloc_usable_size_r>:
 800e898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e89c:	1f18      	subs	r0, r3, #4
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	bfbc      	itt	lt
 800e8a2:	580b      	ldrlt	r3, [r1, r0]
 800e8a4:	18c0      	addlt	r0, r0, r3
 800e8a6:	4770      	bx	lr

0800e8a8 <_raise_r>:
 800e8a8:	291f      	cmp	r1, #31
 800e8aa:	b538      	push	{r3, r4, r5, lr}
 800e8ac:	4604      	mov	r4, r0
 800e8ae:	460d      	mov	r5, r1
 800e8b0:	d904      	bls.n	800e8bc <_raise_r+0x14>
 800e8b2:	2316      	movs	r3, #22
 800e8b4:	6003      	str	r3, [r0, #0]
 800e8b6:	f04f 30ff 	mov.w	r0, #4294967295
 800e8ba:	bd38      	pop	{r3, r4, r5, pc}
 800e8bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e8be:	b112      	cbz	r2, 800e8c6 <_raise_r+0x1e>
 800e8c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e8c4:	b94b      	cbnz	r3, 800e8da <_raise_r+0x32>
 800e8c6:	4620      	mov	r0, r4
 800e8c8:	f000 f830 	bl	800e92c <_getpid_r>
 800e8cc:	462a      	mov	r2, r5
 800e8ce:	4601      	mov	r1, r0
 800e8d0:	4620      	mov	r0, r4
 800e8d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8d6:	f000 b817 	b.w	800e908 <_kill_r>
 800e8da:	2b01      	cmp	r3, #1
 800e8dc:	d00a      	beq.n	800e8f4 <_raise_r+0x4c>
 800e8de:	1c59      	adds	r1, r3, #1
 800e8e0:	d103      	bne.n	800e8ea <_raise_r+0x42>
 800e8e2:	2316      	movs	r3, #22
 800e8e4:	6003      	str	r3, [r0, #0]
 800e8e6:	2001      	movs	r0, #1
 800e8e8:	e7e7      	b.n	800e8ba <_raise_r+0x12>
 800e8ea:	2400      	movs	r4, #0
 800e8ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e8f0:	4628      	mov	r0, r5
 800e8f2:	4798      	blx	r3
 800e8f4:	2000      	movs	r0, #0
 800e8f6:	e7e0      	b.n	800e8ba <_raise_r+0x12>

0800e8f8 <raise>:
 800e8f8:	4b02      	ldr	r3, [pc, #8]	; (800e904 <raise+0xc>)
 800e8fa:	4601      	mov	r1, r0
 800e8fc:	6818      	ldr	r0, [r3, #0]
 800e8fe:	f7ff bfd3 	b.w	800e8a8 <_raise_r>
 800e902:	bf00      	nop
 800e904:	20000114 	.word	0x20000114

0800e908 <_kill_r>:
 800e908:	b538      	push	{r3, r4, r5, lr}
 800e90a:	4d07      	ldr	r5, [pc, #28]	; (800e928 <_kill_r+0x20>)
 800e90c:	2300      	movs	r3, #0
 800e90e:	4604      	mov	r4, r0
 800e910:	4608      	mov	r0, r1
 800e912:	4611      	mov	r1, r2
 800e914:	602b      	str	r3, [r5, #0]
 800e916:	f7f3 fb5d 	bl	8001fd4 <_kill>
 800e91a:	1c43      	adds	r3, r0, #1
 800e91c:	d102      	bne.n	800e924 <_kill_r+0x1c>
 800e91e:	682b      	ldr	r3, [r5, #0]
 800e920:	b103      	cbz	r3, 800e924 <_kill_r+0x1c>
 800e922:	6023      	str	r3, [r4, #0]
 800e924:	bd38      	pop	{r3, r4, r5, pc}
 800e926:	bf00      	nop
 800e928:	200029cc 	.word	0x200029cc

0800e92c <_getpid_r>:
 800e92c:	f7f3 bb4a 	b.w	8001fc4 <_getpid>

0800e930 <__sread>:
 800e930:	b510      	push	{r4, lr}
 800e932:	460c      	mov	r4, r1
 800e934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e938:	f000 f894 	bl	800ea64 <_read_r>
 800e93c:	2800      	cmp	r0, #0
 800e93e:	bfab      	itete	ge
 800e940:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e942:	89a3      	ldrhlt	r3, [r4, #12]
 800e944:	181b      	addge	r3, r3, r0
 800e946:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e94a:	bfac      	ite	ge
 800e94c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e94e:	81a3      	strhlt	r3, [r4, #12]
 800e950:	bd10      	pop	{r4, pc}

0800e952 <__swrite>:
 800e952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e956:	461f      	mov	r7, r3
 800e958:	898b      	ldrh	r3, [r1, #12]
 800e95a:	05db      	lsls	r3, r3, #23
 800e95c:	4605      	mov	r5, r0
 800e95e:	460c      	mov	r4, r1
 800e960:	4616      	mov	r6, r2
 800e962:	d505      	bpl.n	800e970 <__swrite+0x1e>
 800e964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e968:	2302      	movs	r3, #2
 800e96a:	2200      	movs	r2, #0
 800e96c:	f000 f868 	bl	800ea40 <_lseek_r>
 800e970:	89a3      	ldrh	r3, [r4, #12]
 800e972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e976:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e97a:	81a3      	strh	r3, [r4, #12]
 800e97c:	4632      	mov	r2, r6
 800e97e:	463b      	mov	r3, r7
 800e980:	4628      	mov	r0, r5
 800e982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e986:	f000 b817 	b.w	800e9b8 <_write_r>

0800e98a <__sseek>:
 800e98a:	b510      	push	{r4, lr}
 800e98c:	460c      	mov	r4, r1
 800e98e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e992:	f000 f855 	bl	800ea40 <_lseek_r>
 800e996:	1c43      	adds	r3, r0, #1
 800e998:	89a3      	ldrh	r3, [r4, #12]
 800e99a:	bf15      	itete	ne
 800e99c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e99e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e9a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e9a6:	81a3      	strheq	r3, [r4, #12]
 800e9a8:	bf18      	it	ne
 800e9aa:	81a3      	strhne	r3, [r4, #12]
 800e9ac:	bd10      	pop	{r4, pc}

0800e9ae <__sclose>:
 800e9ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9b2:	f000 b813 	b.w	800e9dc <_close_r>
	...

0800e9b8 <_write_r>:
 800e9b8:	b538      	push	{r3, r4, r5, lr}
 800e9ba:	4d07      	ldr	r5, [pc, #28]	; (800e9d8 <_write_r+0x20>)
 800e9bc:	4604      	mov	r4, r0
 800e9be:	4608      	mov	r0, r1
 800e9c0:	4611      	mov	r1, r2
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	602a      	str	r2, [r5, #0]
 800e9c6:	461a      	mov	r2, r3
 800e9c8:	f7f3 fb3b 	bl	8002042 <_write>
 800e9cc:	1c43      	adds	r3, r0, #1
 800e9ce:	d102      	bne.n	800e9d6 <_write_r+0x1e>
 800e9d0:	682b      	ldr	r3, [r5, #0]
 800e9d2:	b103      	cbz	r3, 800e9d6 <_write_r+0x1e>
 800e9d4:	6023      	str	r3, [r4, #0]
 800e9d6:	bd38      	pop	{r3, r4, r5, pc}
 800e9d8:	200029cc 	.word	0x200029cc

0800e9dc <_close_r>:
 800e9dc:	b538      	push	{r3, r4, r5, lr}
 800e9de:	4d06      	ldr	r5, [pc, #24]	; (800e9f8 <_close_r+0x1c>)
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	4604      	mov	r4, r0
 800e9e4:	4608      	mov	r0, r1
 800e9e6:	602b      	str	r3, [r5, #0]
 800e9e8:	f7f3 fb47 	bl	800207a <_close>
 800e9ec:	1c43      	adds	r3, r0, #1
 800e9ee:	d102      	bne.n	800e9f6 <_close_r+0x1a>
 800e9f0:	682b      	ldr	r3, [r5, #0]
 800e9f2:	b103      	cbz	r3, 800e9f6 <_close_r+0x1a>
 800e9f4:	6023      	str	r3, [r4, #0]
 800e9f6:	bd38      	pop	{r3, r4, r5, pc}
 800e9f8:	200029cc 	.word	0x200029cc

0800e9fc <_fstat_r>:
 800e9fc:	b538      	push	{r3, r4, r5, lr}
 800e9fe:	4d07      	ldr	r5, [pc, #28]	; (800ea1c <_fstat_r+0x20>)
 800ea00:	2300      	movs	r3, #0
 800ea02:	4604      	mov	r4, r0
 800ea04:	4608      	mov	r0, r1
 800ea06:	4611      	mov	r1, r2
 800ea08:	602b      	str	r3, [r5, #0]
 800ea0a:	f7f3 fb42 	bl	8002092 <_fstat>
 800ea0e:	1c43      	adds	r3, r0, #1
 800ea10:	d102      	bne.n	800ea18 <_fstat_r+0x1c>
 800ea12:	682b      	ldr	r3, [r5, #0]
 800ea14:	b103      	cbz	r3, 800ea18 <_fstat_r+0x1c>
 800ea16:	6023      	str	r3, [r4, #0]
 800ea18:	bd38      	pop	{r3, r4, r5, pc}
 800ea1a:	bf00      	nop
 800ea1c:	200029cc 	.word	0x200029cc

0800ea20 <_isatty_r>:
 800ea20:	b538      	push	{r3, r4, r5, lr}
 800ea22:	4d06      	ldr	r5, [pc, #24]	; (800ea3c <_isatty_r+0x1c>)
 800ea24:	2300      	movs	r3, #0
 800ea26:	4604      	mov	r4, r0
 800ea28:	4608      	mov	r0, r1
 800ea2a:	602b      	str	r3, [r5, #0]
 800ea2c:	f7f3 fb41 	bl	80020b2 <_isatty>
 800ea30:	1c43      	adds	r3, r0, #1
 800ea32:	d102      	bne.n	800ea3a <_isatty_r+0x1a>
 800ea34:	682b      	ldr	r3, [r5, #0]
 800ea36:	b103      	cbz	r3, 800ea3a <_isatty_r+0x1a>
 800ea38:	6023      	str	r3, [r4, #0]
 800ea3a:	bd38      	pop	{r3, r4, r5, pc}
 800ea3c:	200029cc 	.word	0x200029cc

0800ea40 <_lseek_r>:
 800ea40:	b538      	push	{r3, r4, r5, lr}
 800ea42:	4d07      	ldr	r5, [pc, #28]	; (800ea60 <_lseek_r+0x20>)
 800ea44:	4604      	mov	r4, r0
 800ea46:	4608      	mov	r0, r1
 800ea48:	4611      	mov	r1, r2
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	602a      	str	r2, [r5, #0]
 800ea4e:	461a      	mov	r2, r3
 800ea50:	f7f3 fb3a 	bl	80020c8 <_lseek>
 800ea54:	1c43      	adds	r3, r0, #1
 800ea56:	d102      	bne.n	800ea5e <_lseek_r+0x1e>
 800ea58:	682b      	ldr	r3, [r5, #0]
 800ea5a:	b103      	cbz	r3, 800ea5e <_lseek_r+0x1e>
 800ea5c:	6023      	str	r3, [r4, #0]
 800ea5e:	bd38      	pop	{r3, r4, r5, pc}
 800ea60:	200029cc 	.word	0x200029cc

0800ea64 <_read_r>:
 800ea64:	b538      	push	{r3, r4, r5, lr}
 800ea66:	4d07      	ldr	r5, [pc, #28]	; (800ea84 <_read_r+0x20>)
 800ea68:	4604      	mov	r4, r0
 800ea6a:	4608      	mov	r0, r1
 800ea6c:	4611      	mov	r1, r2
 800ea6e:	2200      	movs	r2, #0
 800ea70:	602a      	str	r2, [r5, #0]
 800ea72:	461a      	mov	r2, r3
 800ea74:	f7f3 fac8 	bl	8002008 <_read>
 800ea78:	1c43      	adds	r3, r0, #1
 800ea7a:	d102      	bne.n	800ea82 <_read_r+0x1e>
 800ea7c:	682b      	ldr	r3, [r5, #0]
 800ea7e:	b103      	cbz	r3, 800ea82 <_read_r+0x1e>
 800ea80:	6023      	str	r3, [r4, #0]
 800ea82:	bd38      	pop	{r3, r4, r5, pc}
 800ea84:	200029cc 	.word	0x200029cc

0800ea88 <_init>:
 800ea88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea8a:	bf00      	nop
 800ea8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea8e:	bc08      	pop	{r3}
 800ea90:	469e      	mov	lr, r3
 800ea92:	4770      	bx	lr

0800ea94 <_fini>:
 800ea94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea96:	bf00      	nop
 800ea98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea9a:	bc08      	pop	{r3}
 800ea9c:	469e      	mov	lr, r3
 800ea9e:	4770      	bx	lr
