
Test_Stand_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af38  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  0800b0d8  0800b0d8  0001b0d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b524  0800b524  00020330  2**0
                  CONTENTS
  4 .ARM          00000008  0800b524  0800b524  0001b524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b52c  0800b52c  00020330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b52c  0800b52c  0001b52c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b530  0800b530  0001b530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000330  20000000  0800b534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002170  20000330  0800b864  00020330  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200024a0  0800b864  000224a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020330  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012165  00000000  00000000  00020360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030e2  00000000  00000000  000324c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  000355a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  000364e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001972d  00000000  00000000  000372b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f6a  00000000  00000000  000509e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b0a6  00000000  00000000  0006494f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef9f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005030  00000000  00000000  000efa48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000330 	.word	0x20000330
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b0c0 	.word	0x0800b0c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000334 	.word	0x20000334
 80001dc:	0800b0c0 	.word	0x0800b0c0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_ldivmod>:
 8000bb8:	b97b      	cbnz	r3, 8000bda <__aeabi_ldivmod+0x22>
 8000bba:	b972      	cbnz	r2, 8000bda <__aeabi_ldivmod+0x22>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bfbe      	ittt	lt
 8000bc0:	2000      	movlt	r0, #0
 8000bc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bc6:	e006      	blt.n	8000bd6 <__aeabi_ldivmod+0x1e>
 8000bc8:	bf08      	it	eq
 8000bca:	2800      	cmpeq	r0, #0
 8000bcc:	bf1c      	itt	ne
 8000bce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd6:	f000 b9bf 	b.w	8000f58 <__aeabi_idiv0>
 8000bda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be2:	2900      	cmp	r1, #0
 8000be4:	db09      	blt.n	8000bfa <__aeabi_ldivmod+0x42>
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db1a      	blt.n	8000c20 <__aeabi_ldivmod+0x68>
 8000bea:	f000 f84d 	bl	8000c88 <__udivmoddi4>
 8000bee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf6:	b004      	add	sp, #16
 8000bf8:	4770      	bx	lr
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db1b      	blt.n	8000c3c <__aeabi_ldivmod+0x84>
 8000c04:	f000 f840 	bl	8000c88 <__udivmoddi4>
 8000c08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c10:	b004      	add	sp, #16
 8000c12:	4240      	negs	r0, r0
 8000c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c18:	4252      	negs	r2, r2
 8000c1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c1e:	4770      	bx	lr
 8000c20:	4252      	negs	r2, r2
 8000c22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c26:	f000 f82f 	bl	8000c88 <__udivmoddi4>
 8000c2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c32:	b004      	add	sp, #16
 8000c34:	4240      	negs	r0, r0
 8000c36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3a:	4770      	bx	lr
 8000c3c:	4252      	negs	r2, r2
 8000c3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c42:	f000 f821 	bl	8000c88 <__udivmoddi4>
 8000c46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4e:	b004      	add	sp, #16
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	b5b0      	push	{r4, r5, r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f62:	f000 fb4f 	bl	8001604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f66:	f000 f88b 	bl	8001080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f6a:	f000 f91f 	bl	80011ac <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000f6e:	f006 fc81 	bl	8007874 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000f72:	f000 f8ed 	bl	8001150 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  hx711_init(&loadcell, GPIOB, GPIO_PIN_0, GPIOB, GPIO_PIN_1);
 8000f76:	2302      	movs	r3, #2
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	4b34      	ldr	r3, [pc, #208]	; (800104c <main+0xf0>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	4933      	ldr	r1, [pc, #204]	; (800104c <main+0xf0>)
 8000f80:	4833      	ldr	r0, [pc, #204]	; (8001050 <main+0xf4>)
 8000f82:	f004 fb11 	bl	80055a8 <hx711_init>
//  value1 = hx711_value_ave(&loadcell, 10);	//No load 8326279 for 400kg stand
//  value2 = hx711_value_ave(&loadcell, 10);	//Load 10 kg 8291415 for 400kg stand
//  hx711_calibration(&loadcell, value1, value2, 800.0);


  value1 = hx711_value_ave(&loadcell, 10);	//No load 8251400
 8000f86:	210a      	movs	r1, #10
 8000f88:	4831      	ldr	r0, [pc, #196]	; (8001050 <main+0xf4>)
 8000f8a:	f004 fbd3 	bl	8005734 <hx711_value_ave>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	4a30      	ldr	r2, [pc, #192]	; (8001054 <main+0xf8>)
 8000f92:	6013      	str	r3, [r2, #0]
  value2 = hx711_value_ave(&loadcell, 10);	//Load 1.07 kg  8364345 for 20kg stand
 8000f94:	210a      	movs	r1, #10
 8000f96:	482e      	ldr	r0, [pc, #184]	; (8001050 <main+0xf4>)
 8000f98:	f004 fbcc 	bl	8005734 <hx711_value_ave>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4a2e      	ldr	r2, [pc, #184]	; (8001058 <main+0xfc>)
 8000fa0:	6013      	str	r3, [r2, #0]
  hx711_calibration(&loadcell, value1, value2, 1.07);
 8000fa2:	4b2c      	ldr	r3, [pc, #176]	; (8001054 <main+0xf8>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a2c      	ldr	r2, [pc, #176]	; (8001058 <main+0xfc>)
 8000fa8:	6812      	ldr	r2, [r2, #0]
 8000faa:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800105c <main+0x100>
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4827      	ldr	r0, [pc, #156]	; (8001050 <main+0xf4>)
 8000fb2:	f004 fc44 	bl	800583e <hx711_calibration>


  hx711_tare(&loadcell, 10);
 8000fb6:	210a      	movs	r1, #10
 8000fb8:	4825      	ldr	r0, [pc, #148]	; (8001050 <main+0xf4>)
 8000fba:	f004 fbfe 	bl	80057ba <hx711_tare>
//  hx711_coef_set(&loadcell, -63.5724983);	//This is for the perejil Test Stand 400kg
  hx711_coef_set(&loadcell, 105556.07);	//This is for the lil Test Stand 20kg
 8000fbe:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8001060 <main+0x104>
 8000fc2:	4823      	ldr	r0, [pc, #140]	; (8001050 <main+0xf4>)
 8000fc4:	f004 fc7f 	bl	80058c6 <hx711_coef_set>
  {
    /* USER CODE END WHILE */
	  //HAL_Delay(1);


		  tickstart = HAL_GetTick();
 8000fc8:	f000 fb82 	bl	80016d0 <HAL_GetTick>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	4a25      	ldr	r2, [pc, #148]	; (8001064 <main+0x108>)
 8000fd0:	6013      	str	r3, [r2, #0]
		  weight[0] = hx711_weight(&loadcell, 1);
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	481e      	ldr	r0, [pc, #120]	; (8001050 <main+0xf4>)
 8000fd6:	f004 fc55 	bl	8005884 <hx711_weight>
 8000fda:	eef0 7a40 	vmov.f32	s15, s0
 8000fde:	4b22      	ldr	r3, [pc, #136]	; (8001068 <main+0x10c>)
 8000fe0:	edc3 7a00 	vstr	s15, [r3]
		  //Perejil 400kg test stand
//		  if (weight[0]<-10000.0){
//			  weight[0] = weight[0] + 13140.0;	//This is for the perejil Test Stand 400kg
//		  }
		  tickend = HAL_GetTick();
 8000fe4:	f000 fb74 	bl	80016d0 <HAL_GetTick>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	4a20      	ldr	r2, [pc, #128]	; (800106c <main+0x110>)
 8000fec:	6013      	str	r3, [r2, #0]
//		  size = sprintf((char *)buffer,"/*%0.2f,%0.4f*/ \n\r", (float)tickend/1000.0,  weight[0]/100.0); //This is for the perejil test stand 400kg

		  size = sprintf((char *)buffer,"/*%0.2f,%0.4f*/ \n\r", (float)tickend/1000.0,  weight[0]);
 8000fee:	4b1f      	ldr	r3, [pc, #124]	; (800106c <main+0x110>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	ee07 3a90 	vmov	s15, r3
 8000ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ffa:	ee17 0a90 	vmov	r0, s15
 8000ffe:	f7ff faab 	bl	8000558 <__aeabi_f2d>
 8001002:	f04f 0200 	mov.w	r2, #0
 8001006:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <main+0x114>)
 8001008:	f7ff fc28 	bl	800085c <__aeabi_ddiv>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	4614      	mov	r4, r2
 8001012:	461d      	mov	r5, r3
 8001014:	4b14      	ldr	r3, [pc, #80]	; (8001068 <main+0x10c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fa9d 	bl	8000558 <__aeabi_f2d>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	e9cd 2300 	strd	r2, r3, [sp]
 8001026:	4622      	mov	r2, r4
 8001028:	462b      	mov	r3, r5
 800102a:	4912      	ldr	r1, [pc, #72]	; (8001074 <main+0x118>)
 800102c:	4812      	ldr	r0, [pc, #72]	; (8001078 <main+0x11c>)
 800102e:	f007 fdcd 	bl	8008bcc <siprintf>
 8001032:	4603      	mov	r3, r0
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <main+0x120>)
 8001038:	701a      	strb	r2, [r3, #0]
		  CDC_Transmit_FS(buffer,size);
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <main+0x120>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b29b      	uxth	r3, r3
 8001040:	4619      	mov	r1, r3
 8001042:	480d      	ldr	r0, [pc, #52]	; (8001078 <main+0x11c>)
 8001044:	f006 fcd4 	bl	80079f0 <CDC_Transmit_FS>
		  tickstart = HAL_GetTick();
 8001048:	e7be      	b.n	8000fc8 <main+0x6c>
 800104a:	bf00      	nop
 800104c:	40020400 	.word	0x40020400
 8001050:	200003a4 	.word	0x200003a4
 8001054:	2000086c 	.word	0x2000086c
 8001058:	20000870 	.word	0x20000870
 800105c:	3f88f5c3 	.word	0x3f88f5c3
 8001060:	47ce2a09 	.word	0x47ce2a09
 8001064:	20000874 	.word	0x20000874
 8001068:	200003bc 	.word	0x200003bc
 800106c:	20000878 	.word	0x20000878
 8001070:	408f4000 	.word	0x408f4000
 8001074:	0800b0d8 	.word	0x0800b0d8
 8001078:	20000000 	.word	0x20000000
 800107c:	200003a0 	.word	0x200003a0

08001080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b094      	sub	sp, #80	; 0x50
 8001084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001086:	f107 0320 	add.w	r3, r7, #32
 800108a:	2230      	movs	r2, #48	; 0x30
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f007 f92a 	bl	80082e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	4b27      	ldr	r3, [pc, #156]	; (8001148 <SystemClock_Config+0xc8>)
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	4a26      	ldr	r2, [pc, #152]	; (8001148 <SystemClock_Config+0xc8>)
 80010ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b2:	6413      	str	r3, [r2, #64]	; 0x40
 80010b4:	4b24      	ldr	r3, [pc, #144]	; (8001148 <SystemClock_Config+0xc8>)
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c0:	2300      	movs	r3, #0
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	4b21      	ldr	r3, [pc, #132]	; (800114c <SystemClock_Config+0xcc>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a20      	ldr	r2, [pc, #128]	; (800114c <SystemClock_Config+0xcc>)
 80010ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	4b1e      	ldr	r3, [pc, #120]	; (800114c <SystemClock_Config+0xcc>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010dc:	2301      	movs	r3, #1
 80010de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e6:	2302      	movs	r3, #2
 80010e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010f0:	2319      	movs	r3, #25
 80010f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80010f4:	23c0      	movs	r3, #192	; 0xc0
 80010f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010f8:	2302      	movs	r3, #2
 80010fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010fc:	2304      	movs	r3, #4
 80010fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001100:	f107 0320 	add.w	r3, r7, #32
 8001104:	4618      	mov	r0, r3
 8001106:	f002 f99d 	bl	8003444 <HAL_RCC_OscConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001110:	f000 f8cc 	bl	80012ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001114:	230f      	movs	r3, #15
 8001116:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001118:	2302      	movs	r3, #2
 800111a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001120:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001124:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	2103      	movs	r1, #3
 8001130:	4618      	mov	r0, r3
 8001132:	f002 fbff 	bl	8003934 <HAL_RCC_ClockConfig>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800113c:	f000 f8b6 	bl	80012ac <Error_Handler>
  }
}
 8001140:	bf00      	nop
 8001142:	3750      	adds	r7, #80	; 0x50
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	40007000 	.word	0x40007000

08001150 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001156:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <MX_I2C1_Init+0x54>)
 8001158:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_I2C1_Init+0x50>)
 800115c:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <MX_I2C1_Init+0x58>)
 800115e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_I2C1_Init+0x50>)
 800116e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001172:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001174:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001176:	2200      	movs	r2, #0
 8001178:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_I2C1_Init+0x50>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001188:	2200      	movs	r2, #0
 800118a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800118c:	4804      	ldr	r0, [pc, #16]	; (80011a0 <MX_I2C1_Init+0x50>)
 800118e:	f000 fd97 	bl	8001cc0 <HAL_I2C_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001198:	f000 f888 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	2000034c 	.word	0x2000034c
 80011a4:	40005400 	.word	0x40005400
 80011a8:	000186a0 	.word	0x000186a0

080011ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	4b36      	ldr	r3, [pc, #216]	; (80012a0 <MX_GPIO_Init+0xf4>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a35      	ldr	r2, [pc, #212]	; (80012a0 <MX_GPIO_Init+0xf4>)
 80011cc:	f043 0304 	orr.w	r3, r3, #4
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b33      	ldr	r3, [pc, #204]	; (80012a0 <MX_GPIO_Init+0xf4>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b2f      	ldr	r3, [pc, #188]	; (80012a0 <MX_GPIO_Init+0xf4>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a2e      	ldr	r2, [pc, #184]	; (80012a0 <MX_GPIO_Init+0xf4>)
 80011e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <MX_GPIO_Init+0xf4>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <MX_GPIO_Init+0xf4>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a27      	ldr	r2, [pc, #156]	; (80012a0 <MX_GPIO_Init+0xf4>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <MX_GPIO_Init+0xf4>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <MX_GPIO_Init+0xf4>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a20      	ldr	r2, [pc, #128]	; (80012a0 <MX_GPIO_Init+0xf4>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <MX_GPIO_Init+0xf4>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	2102      	movs	r1, #2
 8001236:	481b      	ldr	r0, [pc, #108]	; (80012a4 <MX_GPIO_Init+0xf8>)
 8001238:	f000 fd28 	bl	8001c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	2101      	movs	r1, #1
 8001240:	4819      	ldr	r0, [pc, #100]	; (80012a8 <MX_GPIO_Init+0xfc>)
 8001242:	f000 fd23 	bl	8001c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001246:	2302      	movs	r3, #2
 8001248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124a:	2301      	movs	r3, #1
 800124c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4619      	mov	r1, r3
 800125c:	4811      	ldr	r0, [pc, #68]	; (80012a4 <MX_GPIO_Init+0xf8>)
 800125e:	f000 fb79 	bl	8001954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001262:	2301      	movs	r3, #1
 8001264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001266:	2301      	movs	r3, #1
 8001268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	480b      	ldr	r0, [pc, #44]	; (80012a8 <MX_GPIO_Init+0xfc>)
 800127a:	f000 fb6b 	bl	8001954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800127e:	2302      	movs	r3, #2
 8001280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001282:	2300      	movs	r3, #0
 8001284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	4619      	mov	r1, r3
 8001290:	4805      	ldr	r0, [pc, #20]	; (80012a8 <MX_GPIO_Init+0xfc>)
 8001292:	f000 fb5f 	bl	8001954 <HAL_GPIO_Init>

}
 8001296:	bf00      	nop
 8001298:	3728      	adds	r7, #40	; 0x28
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40020000 	.word	0x40020000
 80012a8:	40020400 	.word	0x40020400

080012ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b0:	b672      	cpsid	i
}
 80012b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <Error_Handler+0x8>
	...

080012b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <HAL_MspInit+0x4c>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	4a0f      	ldr	r2, [pc, #60]	; (8001304 <HAL_MspInit+0x4c>)
 80012c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012cc:	6453      	str	r3, [r2, #68]	; 0x44
 80012ce:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <HAL_MspInit+0x4c>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HAL_MspInit+0x4c>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	4a08      	ldr	r2, [pc, #32]	; (8001304 <HAL_MspInit+0x4c>)
 80012e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_MspInit+0x4c>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800

08001308 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a19      	ldr	r2, [pc, #100]	; (800138c <HAL_I2C_MspInit+0x84>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d12b      	bne.n	8001382 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4b18      	ldr	r3, [pc, #96]	; (8001390 <HAL_I2C_MspInit+0x88>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a17      	ldr	r2, [pc, #92]	; (8001390 <HAL_I2C_MspInit+0x88>)
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <HAL_I2C_MspInit+0x88>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001346:	23c0      	movs	r3, #192	; 0xc0
 8001348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800134a:	2312      	movs	r3, #18
 800134c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001356:	2304      	movs	r3, #4
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	480c      	ldr	r0, [pc, #48]	; (8001394 <HAL_I2C_MspInit+0x8c>)
 8001362:	f000 faf7 	bl	8001954 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <HAL_I2C_MspInit+0x88>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a08      	ldr	r2, [pc, #32]	; (8001390 <HAL_I2C_MspInit+0x88>)
 8001370:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_I2C_MspInit+0x88>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001382:	bf00      	nop
 8001384:	3728      	adds	r7, #40	; 0x28
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40005400 	.word	0x40005400
 8001390:	40023800 	.word	0x40023800
 8001394:	40020400 	.word	0x40020400

08001398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800139c:	e7fe      	b.n	800139c <NMI_Handler+0x4>

0800139e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <HardFault_Handler+0x4>

080013a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <MemManage_Handler+0x4>

080013aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <BusFault_Handler+0x4>

080013b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <UsageFault_Handler+0x4>

080013b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e4:	f000 f960 	bl	80016a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}

080013ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80013f0:	4802      	ldr	r0, [pc, #8]	; (80013fc <OTG_FS_IRQHandler+0x10>)
 80013f2:	f000 fef9 	bl	80021e8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20001d64 	.word	0x20001d64

08001400 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
	return 1;
 8001404:	2301      	movs	r3, #1
}
 8001406:	4618      	mov	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <_kill>:

int _kill(int pid, int sig)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800141a:	f006 ff3b 	bl	8008294 <__errno>
 800141e:	4603      	mov	r3, r0
 8001420:	2216      	movs	r2, #22
 8001422:	601a      	str	r2, [r3, #0]
	return -1;
 8001424:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001428:	4618      	mov	r0, r3
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <_exit>:

void _exit (int status)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001438:	f04f 31ff 	mov.w	r1, #4294967295
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ffe7 	bl	8001410 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001442:	e7fe      	b.n	8001442 <_exit+0x12>

08001444 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	e00a      	b.n	800146c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001456:	f3af 8000 	nop.w
 800145a:	4601      	mov	r1, r0
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	60ba      	str	r2, [r7, #8]
 8001462:	b2ca      	uxtb	r2, r1
 8001464:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	3301      	adds	r3, #1
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	697a      	ldr	r2, [r7, #20]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	429a      	cmp	r2, r3
 8001472:	dbf0      	blt.n	8001456 <_read+0x12>
	}

return len;
 8001474:	687b      	ldr	r3, [r7, #4]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b086      	sub	sp, #24
 8001482:	af00      	add	r7, sp, #0
 8001484:	60f8      	str	r0, [r7, #12]
 8001486:	60b9      	str	r1, [r7, #8]
 8001488:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	e009      	b.n	80014a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	1c5a      	adds	r2, r3, #1
 8001494:	60ba      	str	r2, [r7, #8]
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	3301      	adds	r3, #1
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	dbf1      	blt.n	8001490 <_write+0x12>
	}
	return len;
 80014ac:	687b      	ldr	r3, [r7, #4]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <_close>:

int _close(int file)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
	return -1;
 80014be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014de:	605a      	str	r2, [r3, #4]
	return 0;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <_isatty>:

int _isatty(int file)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
	return 1;
 80014f6:	2301      	movs	r3, #1
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
	return 0;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001528:	4a14      	ldr	r2, [pc, #80]	; (800157c <_sbrk+0x5c>)
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <_sbrk+0x60>)
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001534:	4b13      	ldr	r3, [pc, #76]	; (8001584 <_sbrk+0x64>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d102      	bne.n	8001542 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <_sbrk+0x64>)
 800153e:	4a12      	ldr	r2, [pc, #72]	; (8001588 <_sbrk+0x68>)
 8001540:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <_sbrk+0x64>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	429a      	cmp	r2, r3
 800154e:	d207      	bcs.n	8001560 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001550:	f006 fea0 	bl	8008294 <__errno>
 8001554:	4603      	mov	r3, r0
 8001556:	220c      	movs	r2, #12
 8001558:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	e009      	b.n	8001574 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <_sbrk+0x64>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001566:	4b07      	ldr	r3, [pc, #28]	; (8001584 <_sbrk+0x64>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <_sbrk+0x64>)
 8001570:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001572:	68fb      	ldr	r3, [r7, #12]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20020000 	.word	0x20020000
 8001580:	00000400 	.word	0x00000400
 8001584:	2000087c 	.word	0x2000087c
 8001588:	200024a0 	.word	0x200024a0

0800158c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <SystemInit+0x20>)
 8001592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001596:	4a05      	ldr	r2, [pc, #20]	; (80015ac <SystemInit+0x20>)
 8001598:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800159c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015b4:	480d      	ldr	r0, [pc, #52]	; (80015ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015b6:	490e      	ldr	r1, [pc, #56]	; (80015f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015b8:	4a0e      	ldr	r2, [pc, #56]	; (80015f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015bc:	e002      	b.n	80015c4 <LoopCopyDataInit>

080015be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015c2:	3304      	adds	r3, #4

080015c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c8:	d3f9      	bcc.n	80015be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ca:	4a0b      	ldr	r2, [pc, #44]	; (80015f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015cc:	4c0b      	ldr	r4, [pc, #44]	; (80015fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d0:	e001      	b.n	80015d6 <LoopFillZerobss>

080015d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d4:	3204      	adds	r2, #4

080015d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d8:	d3fb      	bcc.n	80015d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015da:	f7ff ffd7 	bl	800158c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015de:	f006 fe5f 	bl	80082a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015e2:	f7ff fcbb 	bl	8000f5c <main>
  bx  lr    
 80015e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f0:	20000330 	.word	0x20000330
  ldr r2, =_sidata
 80015f4:	0800b534 	.word	0x0800b534
  ldr r2, =_sbss
 80015f8:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 80015fc:	200024a0 	.word	0x200024a0

08001600 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001600:	e7fe      	b.n	8001600 <ADC_IRQHandler>
	...

08001604 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001608:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <HAL_Init+0x40>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a0d      	ldr	r2, [pc, #52]	; (8001644 <HAL_Init+0x40>)
 800160e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001612:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001614:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <HAL_Init+0x40>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <HAL_Init+0x40>)
 800161a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800161e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001620:	4b08      	ldr	r3, [pc, #32]	; (8001644 <HAL_Init+0x40>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a07      	ldr	r2, [pc, #28]	; (8001644 <HAL_Init+0x40>)
 8001626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800162c:	2003      	movs	r0, #3
 800162e:	f000 f94f 	bl	80018d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001632:	200f      	movs	r0, #15
 8001634:	f000 f808 	bl	8001648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001638:	f7ff fe3e 	bl	80012b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40023c00 	.word	0x40023c00

08001648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <HAL_InitTick+0x54>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_InitTick+0x58>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	4619      	mov	r1, r3
 800165a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001662:	fbb2 f3f3 	udiv	r3, r2, r3
 8001666:	4618      	mov	r0, r3
 8001668:	f000 f967 	bl	800193a <HAL_SYSTICK_Config>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e00e      	b.n	8001694 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b0f      	cmp	r3, #15
 800167a:	d80a      	bhi.n	8001692 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800167c:	2200      	movs	r2, #0
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	f04f 30ff 	mov.w	r0, #4294967295
 8001684:	f000 f92f 	bl	80018e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001688:	4a06      	ldr	r2, [pc, #24]	; (80016a4 <HAL_InitTick+0x5c>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	e000      	b.n	8001694 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
}
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000064 	.word	0x20000064
 80016a0:	2000006c 	.word	0x2000006c
 80016a4:	20000068 	.word	0x20000068

080016a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_IncTick+0x20>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_IncTick+0x24>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	4a04      	ldr	r2, [pc, #16]	; (80016cc <HAL_IncTick+0x24>)
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	2000006c 	.word	0x2000006c
 80016cc:	20000880 	.word	0x20000880

080016d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return uwTick;
 80016d4:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <HAL_GetTick+0x14>)
 80016d6:	681b      	ldr	r3, [r3, #0]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000880 	.word	0x20000880

080016e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f0:	f7ff ffee 	bl	80016d0 <HAL_GetTick>
 80016f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001700:	d005      	beq.n	800170e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <HAL_Delay+0x44>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4413      	add	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800170e:	bf00      	nop
 8001710:	f7ff ffde 	bl	80016d0 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	429a      	cmp	r2, r3
 800171e:	d8f7      	bhi.n	8001710 <HAL_Delay+0x28>
  {
  }
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	2000006c 	.word	0x2000006c

08001730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <__NVIC_SetPriorityGrouping+0x44>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800174c:	4013      	ands	r3, r2
 800174e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001758:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800175c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001762:	4a04      	ldr	r2, [pc, #16]	; (8001774 <__NVIC_SetPriorityGrouping+0x44>)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	60d3      	str	r3, [r2, #12]
}
 8001768:	bf00      	nop
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <__NVIC_GetPriorityGrouping+0x18>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	f003 0307 	and.w	r3, r3, #7
}
 8001786:	4618      	mov	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	db0b      	blt.n	80017be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	f003 021f 	and.w	r2, r3, #31
 80017ac:	4907      	ldr	r1, [pc, #28]	; (80017cc <__NVIC_EnableIRQ+0x38>)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	095b      	lsrs	r3, r3, #5
 80017b4:	2001      	movs	r0, #1
 80017b6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000e100 	.word	0xe000e100

080017d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	6039      	str	r1, [r7, #0]
 80017da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	db0a      	blt.n	80017fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	490c      	ldr	r1, [pc, #48]	; (800181c <__NVIC_SetPriority+0x4c>)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	0112      	lsls	r2, r2, #4
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	440b      	add	r3, r1
 80017f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f8:	e00a      	b.n	8001810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4908      	ldr	r1, [pc, #32]	; (8001820 <__NVIC_SetPriority+0x50>)
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	3b04      	subs	r3, #4
 8001808:	0112      	lsls	r2, r2, #4
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	440b      	add	r3, r1
 800180e:	761a      	strb	r2, [r3, #24]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000e100 	.word	0xe000e100
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001824:	b480      	push	{r7}
 8001826:	b089      	sub	sp, #36	; 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f1c3 0307 	rsb	r3, r3, #7
 800183e:	2b04      	cmp	r3, #4
 8001840:	bf28      	it	cs
 8001842:	2304      	movcs	r3, #4
 8001844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3304      	adds	r3, #4
 800184a:	2b06      	cmp	r3, #6
 800184c:	d902      	bls.n	8001854 <NVIC_EncodePriority+0x30>
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3b03      	subs	r3, #3
 8001852:	e000      	b.n	8001856 <NVIC_EncodePriority+0x32>
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	f04f 32ff 	mov.w	r2, #4294967295
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43da      	mvns	r2, r3
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	401a      	ands	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800186c:	f04f 31ff 	mov.w	r1, #4294967295
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
 8001876:	43d9      	mvns	r1, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	4313      	orrs	r3, r2
         );
}
 800187e:	4618      	mov	r0, r3
 8001880:	3724      	adds	r7, #36	; 0x24
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3b01      	subs	r3, #1
 8001898:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800189c:	d301      	bcc.n	80018a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800189e:	2301      	movs	r3, #1
 80018a0:	e00f      	b.n	80018c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a2:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <SysTick_Config+0x40>)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018aa:	210f      	movs	r1, #15
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295
 80018b0:	f7ff ff8e 	bl	80017d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <SysTick_Config+0x40>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ba:	4b04      	ldr	r3, [pc, #16]	; (80018cc <SysTick_Config+0x40>)
 80018bc:	2207      	movs	r2, #7
 80018be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	e000e010 	.word	0xe000e010

080018d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff ff29 	bl	8001730 <__NVIC_SetPriorityGrouping>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4603      	mov	r3, r0
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
 80018f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018f8:	f7ff ff3e 	bl	8001778 <__NVIC_GetPriorityGrouping>
 80018fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	68b9      	ldr	r1, [r7, #8]
 8001902:	6978      	ldr	r0, [r7, #20]
 8001904:	f7ff ff8e 	bl	8001824 <NVIC_EncodePriority>
 8001908:	4602      	mov	r2, r0
 800190a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190e:	4611      	mov	r1, r2
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff5d 	bl	80017d0 <__NVIC_SetPriority>
}
 8001916:	bf00      	nop
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	4603      	mov	r3, r0
 8001926:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff31 	bl	8001794 <__NVIC_EnableIRQ>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff ffa2 	bl	800188c <SysTick_Config>
 8001948:	4603      	mov	r3, r0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001954:	b480      	push	{r7}
 8001956:	b089      	sub	sp, #36	; 0x24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001966:	2300      	movs	r3, #0
 8001968:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
 800196e:	e159      	b.n	8001c24 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001970:	2201      	movs	r2, #1
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	429a      	cmp	r2, r3
 800198a:	f040 8148 	bne.w	8001c1e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	2b01      	cmp	r3, #1
 8001998:	d005      	beq.n	80019a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d130      	bne.n	8001a08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	2203      	movs	r2, #3
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4013      	ands	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	68da      	ldr	r2, [r3, #12]
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019dc:	2201      	movs	r2, #1
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	091b      	lsrs	r3, r3, #4
 80019f2:	f003 0201 	and.w	r2, r3, #1
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d017      	beq.n	8001a44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	2203      	movs	r2, #3
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d123      	bne.n	8001a98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	08da      	lsrs	r2, r3, #3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3208      	adds	r2, #8
 8001a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	220f      	movs	r2, #15
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	691a      	ldr	r2, [r3, #16]
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	08da      	lsrs	r2, r3, #3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3208      	adds	r2, #8
 8001a92:	69b9      	ldr	r1, [r7, #24]
 8001a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 0203 	and.w	r2, r3, #3
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 80a2 	beq.w	8001c1e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	4b57      	ldr	r3, [pc, #348]	; (8001c3c <HAL_GPIO_Init+0x2e8>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	4a56      	ldr	r2, [pc, #344]	; (8001c3c <HAL_GPIO_Init+0x2e8>)
 8001ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aea:	4b54      	ldr	r3, [pc, #336]	; (8001c3c <HAL_GPIO_Init+0x2e8>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001af6:	4a52      	ldr	r2, [pc, #328]	; (8001c40 <HAL_GPIO_Init+0x2ec>)
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	089b      	lsrs	r3, r3, #2
 8001afc:	3302      	adds	r3, #2
 8001afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	220f      	movs	r2, #15
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a49      	ldr	r2, [pc, #292]	; (8001c44 <HAL_GPIO_Init+0x2f0>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d019      	beq.n	8001b56 <HAL_GPIO_Init+0x202>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a48      	ldr	r2, [pc, #288]	; (8001c48 <HAL_GPIO_Init+0x2f4>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d013      	beq.n	8001b52 <HAL_GPIO_Init+0x1fe>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a47      	ldr	r2, [pc, #284]	; (8001c4c <HAL_GPIO_Init+0x2f8>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d00d      	beq.n	8001b4e <HAL_GPIO_Init+0x1fa>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a46      	ldr	r2, [pc, #280]	; (8001c50 <HAL_GPIO_Init+0x2fc>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d007      	beq.n	8001b4a <HAL_GPIO_Init+0x1f6>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a45      	ldr	r2, [pc, #276]	; (8001c54 <HAL_GPIO_Init+0x300>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d101      	bne.n	8001b46 <HAL_GPIO_Init+0x1f2>
 8001b42:	2304      	movs	r3, #4
 8001b44:	e008      	b.n	8001b58 <HAL_GPIO_Init+0x204>
 8001b46:	2307      	movs	r3, #7
 8001b48:	e006      	b.n	8001b58 <HAL_GPIO_Init+0x204>
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e004      	b.n	8001b58 <HAL_GPIO_Init+0x204>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e002      	b.n	8001b58 <HAL_GPIO_Init+0x204>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <HAL_GPIO_Init+0x204>
 8001b56:	2300      	movs	r3, #0
 8001b58:	69fa      	ldr	r2, [r7, #28]
 8001b5a:	f002 0203 	and.w	r2, r2, #3
 8001b5e:	0092      	lsls	r2, r2, #2
 8001b60:	4093      	lsls	r3, r2
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b68:	4935      	ldr	r1, [pc, #212]	; (8001c40 <HAL_GPIO_Init+0x2ec>)
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	089b      	lsrs	r3, r3, #2
 8001b6e:	3302      	adds	r3, #2
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b76:	4b38      	ldr	r3, [pc, #224]	; (8001c58 <HAL_GPIO_Init+0x304>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b9a:	4a2f      	ldr	r2, [pc, #188]	; (8001c58 <HAL_GPIO_Init+0x304>)
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ba0:	4b2d      	ldr	r3, [pc, #180]	; (8001c58 <HAL_GPIO_Init+0x304>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bc4:	4a24      	ldr	r2, [pc, #144]	; (8001c58 <HAL_GPIO_Init+0x304>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bca:	4b23      	ldr	r3, [pc, #140]	; (8001c58 <HAL_GPIO_Init+0x304>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bee:	4a1a      	ldr	r2, [pc, #104]	; (8001c58 <HAL_GPIO_Init+0x304>)
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bf4:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <HAL_GPIO_Init+0x304>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c18:	4a0f      	ldr	r2, [pc, #60]	; (8001c58 <HAL_GPIO_Init+0x304>)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3301      	adds	r3, #1
 8001c22:	61fb      	str	r3, [r7, #28]
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	2b0f      	cmp	r3, #15
 8001c28:	f67f aea2 	bls.w	8001970 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3724      	adds	r7, #36	; 0x24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40013800 	.word	0x40013800
 8001c44:	40020000 	.word	0x40020000
 8001c48:	40020400 	.word	0x40020400
 8001c4c:	40020800 	.word	0x40020800
 8001c50:	40020c00 	.word	0x40020c00
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40013c00 	.word	0x40013c00

08001c5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	887b      	ldrh	r3, [r7, #2]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d002      	beq.n	8001c7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c74:	2301      	movs	r3, #1
 8001c76:	73fb      	strb	r3, [r7, #15]
 8001c78:	e001      	b.n	8001c7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	807b      	strh	r3, [r7, #2]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c9c:	787b      	ldrb	r3, [r7, #1]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ca2:	887a      	ldrh	r2, [r7, #2]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ca8:	e003      	b.n	8001cb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001caa:	887b      	ldrh	r3, [r7, #2]
 8001cac:	041a      	lsls	r2, r3, #16
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	619a      	str	r2, [r3, #24]
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e12b      	b.n	8001f2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d106      	bne.n	8001cec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff fb0e 	bl	8001308 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2224      	movs	r2, #36	; 0x24
 8001cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0201 	bic.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d24:	f001 ffbe 	bl	8003ca4 <HAL_RCC_GetPCLK1Freq>
 8001d28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	4a81      	ldr	r2, [pc, #516]	; (8001f34 <HAL_I2C_Init+0x274>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d807      	bhi.n	8001d44 <HAL_I2C_Init+0x84>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4a80      	ldr	r2, [pc, #512]	; (8001f38 <HAL_I2C_Init+0x278>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	bf94      	ite	ls
 8001d3c:	2301      	movls	r3, #1
 8001d3e:	2300      	movhi	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	e006      	b.n	8001d52 <HAL_I2C_Init+0x92>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4a7d      	ldr	r2, [pc, #500]	; (8001f3c <HAL_I2C_Init+0x27c>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	bf94      	ite	ls
 8001d4c:	2301      	movls	r3, #1
 8001d4e:	2300      	movhi	r3, #0
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e0e7      	b.n	8001f2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4a78      	ldr	r2, [pc, #480]	; (8001f40 <HAL_I2C_Init+0x280>)
 8001d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d62:	0c9b      	lsrs	r3, r3, #18
 8001d64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68ba      	ldr	r2, [r7, #8]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	4a6a      	ldr	r2, [pc, #424]	; (8001f34 <HAL_I2C_Init+0x274>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d802      	bhi.n	8001d94 <HAL_I2C_Init+0xd4>
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	3301      	adds	r3, #1
 8001d92:	e009      	b.n	8001da8 <HAL_I2C_Init+0xe8>
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d9a:	fb02 f303 	mul.w	r3, r2, r3
 8001d9e:	4a69      	ldr	r2, [pc, #420]	; (8001f44 <HAL_I2C_Init+0x284>)
 8001da0:	fba2 2303 	umull	r2, r3, r2, r3
 8001da4:	099b      	lsrs	r3, r3, #6
 8001da6:	3301      	adds	r3, #1
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	430b      	orrs	r3, r1
 8001dae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001dba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	495c      	ldr	r1, [pc, #368]	; (8001f34 <HAL_I2C_Init+0x274>)
 8001dc4:	428b      	cmp	r3, r1
 8001dc6:	d819      	bhi.n	8001dfc <HAL_I2C_Init+0x13c>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	1e59      	subs	r1, r3, #1
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dd6:	1c59      	adds	r1, r3, #1
 8001dd8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ddc:	400b      	ands	r3, r1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00a      	beq.n	8001df8 <HAL_I2C_Init+0x138>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	1e59      	subs	r1, r3, #1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	fbb1 f3f3 	udiv	r3, r1, r3
 8001df0:	3301      	adds	r3, #1
 8001df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df6:	e051      	b.n	8001e9c <HAL_I2C_Init+0x1dc>
 8001df8:	2304      	movs	r3, #4
 8001dfa:	e04f      	b.n	8001e9c <HAL_I2C_Init+0x1dc>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d111      	bne.n	8001e28 <HAL_I2C_Init+0x168>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	1e58      	subs	r0, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6859      	ldr	r1, [r3, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	440b      	add	r3, r1
 8001e12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e16:	3301      	adds	r3, #1
 8001e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	bf0c      	ite	eq
 8001e20:	2301      	moveq	r3, #1
 8001e22:	2300      	movne	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	e012      	b.n	8001e4e <HAL_I2C_Init+0x18e>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	1e58      	subs	r0, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6859      	ldr	r1, [r3, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	0099      	lsls	r1, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e3e:	3301      	adds	r3, #1
 8001e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	bf0c      	ite	eq
 8001e48:	2301      	moveq	r3, #1
 8001e4a:	2300      	movne	r3, #0
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_I2C_Init+0x196>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e022      	b.n	8001e9c <HAL_I2C_Init+0x1dc>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10e      	bne.n	8001e7c <HAL_I2C_Init+0x1bc>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	1e58      	subs	r0, r3, #1
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6859      	ldr	r1, [r3, #4]
 8001e66:	460b      	mov	r3, r1
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	440b      	add	r3, r1
 8001e6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e70:	3301      	adds	r3, #1
 8001e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e7a:	e00f      	b.n	8001e9c <HAL_I2C_Init+0x1dc>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1e58      	subs	r0, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6859      	ldr	r1, [r3, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	0099      	lsls	r1, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e92:	3301      	adds	r3, #1
 8001e94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	6809      	ldr	r1, [r1, #0]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69da      	ldr	r2, [r3, #28]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001eca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	6911      	ldr	r1, [r2, #16]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	68d2      	ldr	r2, [r2, #12]
 8001ed6:	4311      	orrs	r1, r2
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	430b      	orrs	r3, r1
 8001ede:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695a      	ldr	r2, [r3, #20]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0201 	orr.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2220      	movs	r2, #32
 8001f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	000186a0 	.word	0x000186a0
 8001f38:	001e847f 	.word	0x001e847f
 8001f3c:	003d08ff 	.word	0x003d08ff
 8001f40:	431bde83 	.word	0x431bde83
 8001f44:	10624dd3 	.word	0x10624dd3

08001f48 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f4a:	b08f      	sub	sp, #60	; 0x3c
 8001f4c:	af0a      	add	r7, sp, #40	; 0x28
 8001f4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e10f      	b.n	800217a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d106      	bne.n	8001f7a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f005 fe83 	bl	8007c80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d102      	bne.n	8001f94 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f001 ffac 	bl	8003ef6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	603b      	str	r3, [r7, #0]
 8001fa4:	687e      	ldr	r6, [r7, #4]
 8001fa6:	466d      	mov	r5, sp
 8001fa8:	f106 0410 	add.w	r4, r6, #16
 8001fac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fb8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fbc:	1d33      	adds	r3, r6, #4
 8001fbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fc0:	6838      	ldr	r0, [r7, #0]
 8001fc2:	f001 fe83 	bl	8003ccc <USB_CoreInit>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0d0      	b.n	800217a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f001 ff9a 	bl	8003f18 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	73fb      	strb	r3, [r7, #15]
 8001fe8:	e04a      	b.n	8002080 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fea:	7bfa      	ldrb	r2, [r7, #15]
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	333d      	adds	r3, #61	; 0x3d
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ffe:	7bfa      	ldrb	r2, [r7, #15]
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	333c      	adds	r3, #60	; 0x3c
 800200e:	7bfa      	ldrb	r2, [r7, #15]
 8002010:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002012:	7bfa      	ldrb	r2, [r7, #15]
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	b298      	uxth	r0, r3
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4413      	add	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	440b      	add	r3, r1
 8002024:	3344      	adds	r3, #68	; 0x44
 8002026:	4602      	mov	r2, r0
 8002028:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800202a:	7bfa      	ldrb	r2, [r7, #15]
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	440b      	add	r3, r1
 8002038:	3340      	adds	r3, #64	; 0x40
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800203e:	7bfa      	ldrb	r2, [r7, #15]
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	4613      	mov	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4413      	add	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	440b      	add	r3, r1
 800204c:	3348      	adds	r3, #72	; 0x48
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002052:	7bfa      	ldrb	r2, [r7, #15]
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4413      	add	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	440b      	add	r3, r1
 8002060:	334c      	adds	r3, #76	; 0x4c
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002066:	7bfa      	ldrb	r2, [r7, #15]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	4413      	add	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	3354      	adds	r3, #84	; 0x54
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800207a:	7bfb      	ldrb	r3, [r7, #15]
 800207c:	3301      	adds	r3, #1
 800207e:	73fb      	strb	r3, [r7, #15]
 8002080:	7bfa      	ldrb	r2, [r7, #15]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	429a      	cmp	r2, r3
 8002088:	d3af      	bcc.n	8001fea <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800208a:	2300      	movs	r3, #0
 800208c:	73fb      	strb	r3, [r7, #15]
 800208e:	e044      	b.n	800211a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002090:	7bfa      	ldrb	r2, [r7, #15]
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4413      	add	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80020a2:	2200      	movs	r2, #0
 80020a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020a6:	7bfa      	ldrb	r2, [r7, #15]
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4413      	add	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80020b8:	7bfa      	ldrb	r2, [r7, #15]
 80020ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020bc:	7bfa      	ldrb	r2, [r7, #15]
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80020ce:	2200      	movs	r2, #0
 80020d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020d2:	7bfa      	ldrb	r2, [r7, #15]
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4413      	add	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020e8:	7bfa      	ldrb	r2, [r7, #15]
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	440b      	add	r3, r1
 80020f6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020fe:	7bfa      	ldrb	r2, [r7, #15]
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	4413      	add	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	440b      	add	r3, r1
 800210c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	3301      	adds	r3, #1
 8002118:	73fb      	strb	r3, [r7, #15]
 800211a:	7bfa      	ldrb	r2, [r7, #15]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	429a      	cmp	r2, r3
 8002122:	d3b5      	bcc.n	8002090 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	603b      	str	r3, [r7, #0]
 800212a:	687e      	ldr	r6, [r7, #4]
 800212c:	466d      	mov	r5, sp
 800212e:	f106 0410 	add.w	r4, r6, #16
 8002132:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002134:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002136:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002138:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800213a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800213e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002142:	1d33      	adds	r3, r6, #4
 8002144:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002146:	6838      	ldr	r0, [r7, #0]
 8002148:	f001 ff32 	bl	8003fb0 <USB_DevInit>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d005      	beq.n	800215e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2202      	movs	r2, #2
 8002156:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e00d      	b.n	800217a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f003 f881 	bl	800527a <USB_DevDisconnect>

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002182 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b084      	sub	sp, #16
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002196:	2b01      	cmp	r3, #1
 8002198:	d101      	bne.n	800219e <HAL_PCD_Start+0x1c>
 800219a:	2302      	movs	r3, #2
 800219c:	e020      	b.n	80021e0 <HAL_PCD_Start+0x5e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d109      	bne.n	80021c2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d005      	beq.n	80021c2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f001 fe84 	bl	8003ed4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f003 f831 	bl	8005238 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80021e8:	b590      	push	{r4, r7, lr}
 80021ea:	b08d      	sub	sp, #52	; 0x34
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021f6:	6a3b      	ldr	r3, [r7, #32]
 80021f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f003 f8ef 	bl	80053e2 <USB_GetMode>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	f040 848a 	bne.w	8002b20 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f003 f853 	bl	80052bc <USB_ReadInterrupts>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 8480 	beq.w	8002b1e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	0a1b      	lsrs	r3, r3, #8
 8002228:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f003 f840 	bl	80052bc <USB_ReadInterrupts>
 800223c:	4603      	mov	r3, r0
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b02      	cmp	r3, #2
 8002244:	d107      	bne.n	8002256 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	695a      	ldr	r2, [r3, #20]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f002 0202 	and.w	r2, r2, #2
 8002254:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f003 f82e 	bl	80052bc <USB_ReadInterrupts>
 8002260:	4603      	mov	r3, r0
 8002262:	f003 0310 	and.w	r3, r3, #16
 8002266:	2b10      	cmp	r3, #16
 8002268:	d161      	bne.n	800232e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	699a      	ldr	r2, [r3, #24]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0210 	bic.w	r2, r2, #16
 8002278:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800227a:	6a3b      	ldr	r3, [r7, #32]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	f003 020f 	and.w	r2, r3, #15
 8002286:	4613      	mov	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	4413      	add	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	4413      	add	r3, r2
 8002296:	3304      	adds	r3, #4
 8002298:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	0c5b      	lsrs	r3, r3, #17
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d124      	bne.n	80022f0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80022ac:	4013      	ands	r3, r2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d035      	beq.n	800231e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	091b      	lsrs	r3, r3, #4
 80022ba:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	461a      	mov	r2, r3
 80022c4:	6a38      	ldr	r0, [r7, #32]
 80022c6:	f002 fe65 	bl	8004f94 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	691a      	ldr	r2, [r3, #16]
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022d6:	441a      	add	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	6a1a      	ldr	r2, [r3, #32]
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	091b      	lsrs	r3, r3, #4
 80022e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022e8:	441a      	add	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	621a      	str	r2, [r3, #32]
 80022ee:	e016      	b.n	800231e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	0c5b      	lsrs	r3, r3, #17
 80022f4:	f003 030f 	and.w	r3, r3, #15
 80022f8:	2b06      	cmp	r3, #6
 80022fa:	d110      	bne.n	800231e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002302:	2208      	movs	r2, #8
 8002304:	4619      	mov	r1, r3
 8002306:	6a38      	ldr	r0, [r7, #32]
 8002308:	f002 fe44 	bl	8004f94 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	6a1a      	ldr	r2, [r3, #32]
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	091b      	lsrs	r3, r3, #4
 8002314:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002318:	441a      	add	r2, r3
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	699a      	ldr	r2, [r3, #24]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f042 0210 	orr.w	r2, r2, #16
 800232c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f002 ffc2 	bl	80052bc <USB_ReadInterrupts>
 8002338:	4603      	mov	r3, r0
 800233a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800233e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002342:	f040 80a7 	bne.w	8002494 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f002 ffc7 	bl	80052e2 <USB_ReadDevAllOutEpInterrupt>
 8002354:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002356:	e099      	b.n	800248c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 808e 	beq.w	8002480 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	4611      	mov	r1, r2
 800236e:	4618      	mov	r0, r3
 8002370:	f002 ffeb 	bl	800534a <USB_ReadDevOutEPInterrupt>
 8002374:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00c      	beq.n	800239a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	015a      	lsls	r2, r3, #5
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	4413      	add	r3, r2
 8002388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800238c:	461a      	mov	r2, r3
 800238e:	2301      	movs	r3, #1
 8002390:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002392:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 fec3 	bl	8003120 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00c      	beq.n	80023be <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	015a      	lsls	r2, r3, #5
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b0:	461a      	mov	r2, r3
 80023b2:	2308      	movs	r3, #8
 80023b4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80023b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 ff99 	bl	80032f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	f003 0310 	and.w	r3, r3, #16
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d008      	beq.n	80023da <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	015a      	lsls	r2, r3, #5
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	4413      	add	r3, r2
 80023d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d4:	461a      	mov	r2, r3
 80023d6:	2310      	movs	r3, #16
 80023d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d030      	beq.n	8002446 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80023e4:	6a3b      	ldr	r3, [r7, #32]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ec:	2b80      	cmp	r3, #128	; 0x80
 80023ee:	d109      	bne.n	8002404 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	69fa      	ldr	r2, [r7, #28]
 80023fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002402:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002406:	4613      	mov	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	4413      	add	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	3304      	adds	r3, #4
 8002418:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	78db      	ldrb	r3, [r3, #3]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d108      	bne.n	8002434 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	2200      	movs	r2, #0
 8002426:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	b2db      	uxtb	r3, r3
 800242c:	4619      	mov	r1, r3
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f005 fd22 	bl	8007e78 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	015a      	lsls	r2, r3, #5
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	4413      	add	r3, r2
 800243c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002440:	461a      	mov	r2, r3
 8002442:	2302      	movs	r3, #2
 8002444:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	f003 0320 	and.w	r3, r3, #32
 800244c:	2b00      	cmp	r3, #0
 800244e:	d008      	beq.n	8002462 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	015a      	lsls	r2, r3, #5
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	4413      	add	r3, r2
 8002458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800245c:	461a      	mov	r2, r3
 800245e:	2320      	movs	r3, #32
 8002460:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d009      	beq.n	8002480 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	015a      	lsls	r2, r3, #5
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	4413      	add	r3, r2
 8002474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002478:	461a      	mov	r2, r3
 800247a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800247e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	3301      	adds	r3, #1
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002488:	085b      	lsrs	r3, r3, #1
 800248a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800248c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248e:	2b00      	cmp	r3, #0
 8002490:	f47f af62 	bne.w	8002358 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f002 ff0f 	bl	80052bc <USB_ReadInterrupts>
 800249e:	4603      	mov	r3, r0
 80024a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024a8:	f040 80db 	bne.w	8002662 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f002 ff30 	bl	8005316 <USB_ReadDevAllInEpInterrupt>
 80024b6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80024bc:	e0cd      	b.n	800265a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80024be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 80c2 	beq.w	800264e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	4611      	mov	r1, r2
 80024d4:	4618      	mov	r0, r3
 80024d6:	f002 ff56 	bl	8005386 <USB_ReadDevInEPInterrupt>
 80024da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d057      	beq.n	8002596 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	f003 030f 	and.w	r3, r3, #15
 80024ec:	2201      	movs	r2, #1
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	43db      	mvns	r3, r3
 8002500:	69f9      	ldr	r1, [r7, #28]
 8002502:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002506:	4013      	ands	r3, r2
 8002508:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	015a      	lsls	r2, r3, #5
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	4413      	add	r3, r2
 8002512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002516:	461a      	mov	r2, r3
 8002518:	2301      	movs	r3, #1
 800251a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d132      	bne.n	800258a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002528:	4613      	mov	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	4413      	add	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	334c      	adds	r3, #76	; 0x4c
 8002534:	6819      	ldr	r1, [r3, #0]
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253a:	4613      	mov	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	4413      	add	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4403      	add	r3, r0
 8002544:	3348      	adds	r3, #72	; 0x48
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4419      	add	r1, r3
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800254e:	4613      	mov	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	4413      	add	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4403      	add	r3, r0
 8002558:	334c      	adds	r3, #76	; 0x4c
 800255a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	2b00      	cmp	r3, #0
 8002560:	d113      	bne.n	800258a <HAL_PCD_IRQHandler+0x3a2>
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002566:	4613      	mov	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	4413      	add	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	440b      	add	r3, r1
 8002570:	3354      	adds	r3, #84	; 0x54
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d108      	bne.n	800258a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002582:	461a      	mov	r2, r3
 8002584:	2101      	movs	r1, #1
 8002586:	f002 ff5d 	bl	8005444 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	b2db      	uxtb	r3, r3
 800258e:	4619      	mov	r1, r3
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f005 fbf6 	bl	8007d82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025ac:	461a      	mov	r2, r3
 80025ae:	2308      	movs	r3, #8
 80025b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	f003 0310 	and.w	r3, r3, #16
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d008      	beq.n	80025ce <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	015a      	lsls	r2, r3, #5
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	4413      	add	r3, r2
 80025c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025c8:	461a      	mov	r2, r3
 80025ca:	2310      	movs	r3, #16
 80025cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d008      	beq.n	80025ea <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	015a      	lsls	r2, r3, #5
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	4413      	add	r3, r2
 80025e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025e4:	461a      	mov	r2, r3
 80025e6:	2340      	movs	r3, #64	; 0x40
 80025e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d023      	beq.n	800263c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80025f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025f6:	6a38      	ldr	r0, [r7, #32]
 80025f8:	f001 fe3e 	bl	8004278 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80025fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025fe:	4613      	mov	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	4413      	add	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	3338      	adds	r3, #56	; 0x38
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	4413      	add	r3, r2
 800260c:	3304      	adds	r3, #4
 800260e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	78db      	ldrb	r3, [r3, #3]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d108      	bne.n	800262a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	2200      	movs	r2, #0
 800261c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	b2db      	uxtb	r3, r3
 8002622:	4619      	mov	r1, r3
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f005 fc39 	bl	8007e9c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	4413      	add	r3, r2
 8002632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002636:	461a      	mov	r2, r3
 8002638:	2302      	movs	r3, #2
 800263a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002646:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 fcdb 	bl	8003004 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	3301      	adds	r3, #1
 8002652:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002656:	085b      	lsrs	r3, r3, #1
 8002658:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800265a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265c:	2b00      	cmp	r3, #0
 800265e:	f47f af2e 	bne.w	80024be <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f002 fe28 	bl	80052bc <USB_ReadInterrupts>
 800266c:	4603      	mov	r3, r0
 800266e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002672:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002676:	d122      	bne.n	80026be <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	69fa      	ldr	r2, [r7, #28]
 8002682:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002686:	f023 0301 	bic.w	r3, r3, #1
 800268a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002692:	2b01      	cmp	r3, #1
 8002694:	d108      	bne.n	80026a8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800269e:	2100      	movs	r1, #0
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 fec3 	bl	800342c <HAL_PCDEx_LPM_Callback>
 80026a6:	e002      	b.n	80026ae <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f005 fbd7 	bl	8007e5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	695a      	ldr	r2, [r3, #20]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80026bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f002 fdfa 	bl	80052bc <USB_ReadInterrupts>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026d2:	d112      	bne.n	80026fa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d102      	bne.n	80026ea <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f005 fb93 	bl	8007e10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	695a      	ldr	r2, [r3, #20]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80026f8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f002 fddc 	bl	80052bc <USB_ReadInterrupts>
 8002704:	4603      	mov	r3, r0
 8002706:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800270a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800270e:	f040 80b7 	bne.w	8002880 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	69fa      	ldr	r2, [r7, #28]
 800271c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002720:	f023 0301 	bic.w	r3, r3, #1
 8002724:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2110      	movs	r1, #16
 800272c:	4618      	mov	r0, r3
 800272e:	f001 fda3 	bl	8004278 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002732:	2300      	movs	r3, #0
 8002734:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002736:	e046      	b.n	80027c6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	4413      	add	r3, r2
 8002740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002744:	461a      	mov	r2, r3
 8002746:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800274a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800274c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274e:	015a      	lsls	r2, r3, #5
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	4413      	add	r3, r2
 8002754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800275c:	0151      	lsls	r1, r2, #5
 800275e:	69fa      	ldr	r2, [r7, #28]
 8002760:	440a      	add	r2, r1
 8002762:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002766:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800276a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800276c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	4413      	add	r3, r2
 8002774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002778:	461a      	mov	r2, r3
 800277a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800277e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	4413      	add	r3, r2
 8002788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002790:	0151      	lsls	r1, r2, #5
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	440a      	add	r2, r1
 8002796:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800279a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800279e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a2:	015a      	lsls	r2, r3, #5
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027b0:	0151      	lsls	r1, r2, #5
 80027b2:	69fa      	ldr	r2, [r7, #28]
 80027b4:	440a      	add	r2, r1
 80027b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80027be:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c2:	3301      	adds	r3, #1
 80027c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d3b3      	bcc.n	8002738 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	69fa      	ldr	r2, [r7, #28]
 80027da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027de:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80027e2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d016      	beq.n	800281a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027f6:	69fa      	ldr	r2, [r7, #28]
 80027f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027fc:	f043 030b 	orr.w	r3, r3, #11
 8002800:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800280a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280c:	69fa      	ldr	r2, [r7, #28]
 800280e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002812:	f043 030b 	orr.w	r3, r3, #11
 8002816:	6453      	str	r3, [r2, #68]	; 0x44
 8002818:	e015      	b.n	8002846 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	69fa      	ldr	r2, [r7, #28]
 8002824:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002828:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800282c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002830:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	69fa      	ldr	r2, [r7, #28]
 800283c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002840:	f043 030b 	orr.w	r3, r3, #11
 8002844:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	69fa      	ldr	r2, [r7, #28]
 8002850:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002854:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002858:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6818      	ldr	r0, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800286a:	461a      	mov	r2, r3
 800286c:	f002 fdea 	bl	8005444 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695a      	ldr	r2, [r3, #20]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800287e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f002 fd19 	bl	80052bc <USB_ReadInterrupts>
 800288a:	4603      	mov	r3, r0
 800288c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002890:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002894:	d124      	bne.n	80028e0 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f002 fdaf 	bl	80053fe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f001 fd64 	bl	8004372 <USB_GetDevSpeed>
 80028aa:	4603      	mov	r3, r0
 80028ac:	461a      	mov	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681c      	ldr	r4, [r3, #0]
 80028b6:	f001 f9e9 	bl	8003c8c <HAL_RCC_GetHCLKFreq>
 80028ba:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	461a      	mov	r2, r3
 80028c4:	4620      	mov	r0, r4
 80028c6:	f001 fa63 	bl	8003d90 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f005 fa81 	bl	8007dd2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695a      	ldr	r2, [r3, #20]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80028de:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f002 fce9 	bl	80052bc <USB_ReadInterrupts>
 80028ea:	4603      	mov	r3, r0
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d10a      	bne.n	800290a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f005 fa5e 	bl	8007db6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695a      	ldr	r2, [r3, #20]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f002 0208 	and.w	r2, r2, #8
 8002908:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f002 fcd4 	bl	80052bc <USB_ReadInterrupts>
 8002914:	4603      	mov	r3, r0
 8002916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291a:	2b80      	cmp	r3, #128	; 0x80
 800291c:	d122      	bne.n	8002964 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800292a:	2301      	movs	r3, #1
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
 800292e:	e014      	b.n	800295a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002934:	4613      	mov	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	4413      	add	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d105      	bne.n	8002954 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	b2db      	uxtb	r3, r3
 800294c:	4619      	mov	r1, r3
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 fb27 	bl	8002fa2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	3301      	adds	r3, #1
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002960:	429a      	cmp	r2, r3
 8002962:	d3e5      	bcc.n	8002930 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f002 fca7 	bl	80052bc <USB_ReadInterrupts>
 800296e:	4603      	mov	r3, r0
 8002970:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002974:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002978:	d13b      	bne.n	80029f2 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800297a:	2301      	movs	r3, #1
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
 800297e:	e02b      	b.n	80029d8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	4413      	add	r3, r2
 8002988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002994:	4613      	mov	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	3340      	adds	r3, #64	; 0x40
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d115      	bne.n	80029d2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80029a6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	da12      	bge.n	80029d2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b0:	4613      	mov	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	4413      	add	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	333f      	adds	r3, #63	; 0x3f
 80029bc:	2201      	movs	r2, #1
 80029be:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	4619      	mov	r1, r3
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 fae8 	bl	8002fa2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	3301      	adds	r3, #1
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029de:	429a      	cmp	r2, r3
 80029e0:	d3ce      	bcc.n	8002980 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695a      	ldr	r2, [r3, #20]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80029f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f002 fc60 	bl	80052bc <USB_ReadInterrupts>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a06:	d155      	bne.n	8002ab4 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a08:	2301      	movs	r3, #1
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0c:	e045      	b.n	8002a9a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a22:	4613      	mov	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d12e      	bne.n	8002a94 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a36:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	da2b      	bge.n	8002a94 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002a48:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d121      	bne.n	8002a94 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a54:	4613      	mov	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a62:	2201      	movs	r2, #1
 8002a64:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002a66:	6a3b      	ldr	r3, [r7, #32]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10a      	bne.n	8002a94 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	69fa      	ldr	r2, [r7, #28]
 8002a88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a90:	6053      	str	r3, [r2, #4]
            break;
 8002a92:	e007      	b.n	8002aa4 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	3301      	adds	r3, #1
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d3b4      	bcc.n	8002a0e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695a      	ldr	r2, [r3, #20]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ab2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f002 fbff 	bl	80052bc <USB_ReadInterrupts>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac8:	d10a      	bne.n	8002ae0 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f005 f9f8 	bl	8007ec0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695a      	ldr	r2, [r3, #20]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002ade:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f002 fbe9 	bl	80052bc <USB_ReadInterrupts>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d115      	bne.n	8002b20 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d002      	beq.n	8002b0c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f005 f9e8 	bl	8007edc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6859      	ldr	r1, [r3, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	605a      	str	r2, [r3, #4]
 8002b1c:	e000      	b.n	8002b20 <HAL_PCD_IRQHandler+0x938>
      return;
 8002b1e:	bf00      	nop
    }
  }
}
 8002b20:	3734      	adds	r7, #52	; 0x34
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd90      	pop	{r4, r7, pc}

08002b26 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <HAL_PCD_SetAddress+0x1a>
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e013      	b.n	8002b68 <HAL_PCD_SetAddress+0x42>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	78fa      	ldrb	r2, [r7, #3]
 8002b4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	78fa      	ldrb	r2, [r7, #3]
 8002b56:	4611      	mov	r1, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f002 fb47 	bl	80051ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	4608      	mov	r0, r1
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4603      	mov	r3, r0
 8002b80:	70fb      	strb	r3, [r7, #3]
 8002b82:	460b      	mov	r3, r1
 8002b84:	803b      	strh	r3, [r7, #0]
 8002b86:	4613      	mov	r3, r2
 8002b88:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	da0f      	bge.n	8002bb6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b96:	78fb      	ldrb	r3, [r7, #3]
 8002b98:	f003 020f 	and.w	r2, r3, #15
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	3338      	adds	r3, #56	; 0x38
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	4413      	add	r3, r2
 8002baa:	3304      	adds	r3, #4
 8002bac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	705a      	strb	r2, [r3, #1]
 8002bb4:	e00f      	b.n	8002bd6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bb6:	78fb      	ldrb	r3, [r7, #3]
 8002bb8:	f003 020f 	and.w	r2, r3, #15
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	4413      	add	r3, r2
 8002bcc:	3304      	adds	r3, #4
 8002bce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002bd6:	78fb      	ldrb	r3, [r7, #3]
 8002bd8:	f003 030f 	and.w	r3, r3, #15
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002be2:	883a      	ldrh	r2, [r7, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	78ba      	ldrb	r2, [r7, #2]
 8002bec:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	785b      	ldrb	r3, [r3, #1]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d004      	beq.n	8002c00 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c00:	78bb      	ldrb	r3, [r7, #2]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d102      	bne.n	8002c0c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d101      	bne.n	8002c1a <HAL_PCD_EP_Open+0xaa>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e00e      	b.n	8002c38 <HAL_PCD_EP_Open+0xc8>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68f9      	ldr	r1, [r7, #12]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f001 fbc7 	bl	80043bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002c36:	7afb      	ldrb	r3, [r7, #11]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	da0f      	bge.n	8002c74 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c54:	78fb      	ldrb	r3, [r7, #3]
 8002c56:	f003 020f 	and.w	r2, r3, #15
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	3338      	adds	r3, #56	; 0x38
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	4413      	add	r3, r2
 8002c68:	3304      	adds	r3, #4
 8002c6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	705a      	strb	r2, [r3, #1]
 8002c72:	e00f      	b.n	8002c94 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	f003 020f 	and.w	r2, r3, #15
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4413      	add	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	4413      	add	r3, r2
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c94:	78fb      	ldrb	r3, [r7, #3]
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <HAL_PCD_EP_Close+0x6e>
 8002caa:	2302      	movs	r3, #2
 8002cac:	e00e      	b.n	8002ccc <HAL_PCD_EP_Close+0x8c>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68f9      	ldr	r1, [r7, #12]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f001 fc05 	bl	80044cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	607a      	str	r2, [r7, #4]
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ce4:	7afb      	ldrb	r3, [r7, #11]
 8002ce6:	f003 020f 	and.w	r2, r3, #15
 8002cea:	4613      	mov	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	4413      	add	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2200      	movs	r2, #0
 8002d14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d16:	7afb      	ldrb	r3, [r7, #11]
 8002d18:	f003 030f 	and.w	r3, r3, #15
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d102      	bne.n	8002d30 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d30:	7afb      	ldrb	r3, [r7, #11]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d109      	bne.n	8002d4e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6818      	ldr	r0, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	461a      	mov	r2, r3
 8002d46:	6979      	ldr	r1, [r7, #20]
 8002d48:	f001 fee4 	bl	8004b14 <USB_EP0StartXfer>
 8002d4c:	e008      	b.n	8002d60 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6818      	ldr	r0, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	6979      	ldr	r1, [r7, #20]
 8002d5c:	f001 fc92 	bl	8004684 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	460b      	mov	r3, r1
 8002d74:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d76:	78fb      	ldrb	r3, [r7, #3]
 8002d78:	f003 020f 	and.w	r2, r3, #15
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	4413      	add	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	440b      	add	r3, r1
 8002d88:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002d8c:	681b      	ldr	r3, [r3, #0]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b086      	sub	sp, #24
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	60f8      	str	r0, [r7, #12]
 8002da2:	607a      	str	r2, [r7, #4]
 8002da4:	603b      	str	r3, [r7, #0]
 8002da6:	460b      	mov	r3, r1
 8002da8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002daa:	7afb      	ldrb	r3, [r7, #11]
 8002dac:	f003 020f 	and.w	r2, r3, #15
 8002db0:	4613      	mov	r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	4413      	add	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	3338      	adds	r3, #56	; 0x38
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3304      	adds	r3, #4
 8002dc0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dda:	7afb      	ldrb	r3, [r7, #11]
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d102      	bne.n	8002df4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002df4:	7afb      	ldrb	r3, [r7, #11]
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d109      	bne.n	8002e12 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6818      	ldr	r0, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	6979      	ldr	r1, [r7, #20]
 8002e0c:	f001 fe82 	bl	8004b14 <USB_EP0StartXfer>
 8002e10:	e008      	b.n	8002e24 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6818      	ldr	r0, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	6979      	ldr	r1, [r7, #20]
 8002e20:	f001 fc30 	bl	8004684 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b084      	sub	sp, #16
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
 8002e36:	460b      	mov	r3, r1
 8002e38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e3a:	78fb      	ldrb	r3, [r7, #3]
 8002e3c:	f003 020f 	and.w	r2, r3, #15
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d901      	bls.n	8002e4c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e050      	b.n	8002eee <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	da0f      	bge.n	8002e74 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e54:	78fb      	ldrb	r3, [r7, #3]
 8002e56:	f003 020f 	and.w	r2, r3, #15
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	4413      	add	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	3338      	adds	r3, #56	; 0x38
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	4413      	add	r3, r2
 8002e68:	3304      	adds	r3, #4
 8002e6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	705a      	strb	r2, [r3, #1]
 8002e72:	e00d      	b.n	8002e90 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e74:	78fa      	ldrb	r2, [r7, #3]
 8002e76:	4613      	mov	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	4413      	add	r3, r2
 8002e86:	3304      	adds	r3, #4
 8002e88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2201      	movs	r2, #1
 8002e94:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e96:	78fb      	ldrb	r3, [r7, #3]
 8002e98:	f003 030f 	and.w	r3, r3, #15
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d101      	bne.n	8002eb0 <HAL_PCD_EP_SetStall+0x82>
 8002eac:	2302      	movs	r3, #2
 8002eae:	e01e      	b.n	8002eee <HAL_PCD_EP_SetStall+0xc0>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68f9      	ldr	r1, [r7, #12]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f002 f8c0 	bl	8005044 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ec4:	78fb      	ldrb	r3, [r7, #3]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10a      	bne.n	8002ee4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	b2d9      	uxtb	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ede:	461a      	mov	r2, r3
 8002ee0:	f002 fab0 	bl	8005444 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	460b      	mov	r3, r1
 8002f00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f02:	78fb      	ldrb	r3, [r7, #3]
 8002f04:	f003 020f 	and.w	r2, r3, #15
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d901      	bls.n	8002f14 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e042      	b.n	8002f9a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	da0f      	bge.n	8002f3c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f1c:	78fb      	ldrb	r3, [r7, #3]
 8002f1e:	f003 020f 	and.w	r2, r3, #15
 8002f22:	4613      	mov	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4413      	add	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	3338      	adds	r3, #56	; 0x38
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	4413      	add	r3, r2
 8002f30:	3304      	adds	r3, #4
 8002f32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2201      	movs	r2, #1
 8002f38:	705a      	strb	r2, [r3, #1]
 8002f3a:	e00f      	b.n	8002f5c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	f003 020f 	and.w	r2, r3, #15
 8002f42:	4613      	mov	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	4413      	add	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	4413      	add	r3, r2
 8002f52:	3304      	adds	r3, #4
 8002f54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f62:	78fb      	ldrb	r3, [r7, #3]
 8002f64:	f003 030f 	and.w	r3, r3, #15
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_PCD_EP_ClrStall+0x86>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e00e      	b.n	8002f9a <HAL_PCD_EP_ClrStall+0xa4>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68f9      	ldr	r1, [r7, #12]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f002 f8c8 	bl	8005120 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b084      	sub	sp, #16
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	460b      	mov	r3, r1
 8002fac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002fae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	da0c      	bge.n	8002fd0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fb6:	78fb      	ldrb	r3, [r7, #3]
 8002fb8:	f003 020f 	and.w	r2, r3, #15
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	3338      	adds	r3, #56	; 0x38
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	4413      	add	r3, r2
 8002fca:	3304      	adds	r3, #4
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	e00c      	b.n	8002fea <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	f003 020f 	and.w	r2, r3, #15
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	4413      	add	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68f9      	ldr	r1, [r7, #12]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f001 fee7 	bl	8004dc4 <USB_EPStopXfer>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002ffa:	7afb      	ldrb	r3, [r7, #11]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08a      	sub	sp, #40	; 0x28
 8003008:	af02      	add	r7, sp, #8
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	4613      	mov	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	4413      	add	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	3338      	adds	r3, #56	; 0x38
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	4413      	add	r3, r2
 8003028:	3304      	adds	r3, #4
 800302a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a1a      	ldr	r2, [r3, #32]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	429a      	cmp	r2, r3
 8003036:	d901      	bls.n	800303c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e06c      	b.n	8003116 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	699a      	ldr	r2, [r3, #24]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	69fa      	ldr	r2, [r7, #28]
 800304e:	429a      	cmp	r2, r3
 8003050:	d902      	bls.n	8003058 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	3303      	adds	r3, #3
 800305c:	089b      	lsrs	r3, r3, #2
 800305e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003060:	e02b      	b.n	80030ba <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	699a      	ldr	r2, [r3, #24]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	69fa      	ldr	r2, [r7, #28]
 8003074:	429a      	cmp	r2, r3
 8003076:	d902      	bls.n	800307e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	3303      	adds	r3, #3
 8003082:	089b      	lsrs	r3, r3, #2
 8003084:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6919      	ldr	r1, [r3, #16]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	b2da      	uxtb	r2, r3
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003096:	b2db      	uxtb	r3, r3
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	4603      	mov	r3, r0
 800309c:	6978      	ldr	r0, [r7, #20]
 800309e:	f001 ff3b 	bl	8004f18 <USB_WritePacket>

    ep->xfer_buff  += len;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	691a      	ldr	r2, [r3, #16]
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	441a      	add	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a1a      	ldr	r2, [r3, #32]
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	441a      	add	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	015a      	lsls	r2, r3, #5
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	4413      	add	r3, r2
 80030c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d809      	bhi.n	80030e4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a1a      	ldr	r2, [r3, #32]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030d8:	429a      	cmp	r2, r3
 80030da:	d203      	bcs.n	80030e4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1be      	bne.n	8003062 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	699a      	ldr	r2, [r3, #24]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d811      	bhi.n	8003114 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	2201      	movs	r2, #1
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003104:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	43db      	mvns	r3, r3
 800310a:	6939      	ldr	r1, [r7, #16]
 800310c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003110:	4013      	ands	r3, r2
 8003112:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3720      	adds	r7, #32
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	333c      	adds	r3, #60	; 0x3c
 8003138:	3304      	adds	r3, #4
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	015a      	lsls	r2, r3, #5
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	4413      	add	r3, r2
 8003146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d17b      	bne.n	800324e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	2b00      	cmp	r3, #0
 800315e:	d015      	beq.n	800318c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	4a61      	ldr	r2, [pc, #388]	; (80032e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003164:	4293      	cmp	r3, r2
 8003166:	f240 80b9 	bls.w	80032dc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 80b3 	beq.w	80032dc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	015a      	lsls	r2, r3, #5
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	4413      	add	r3, r2
 800317e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003182:	461a      	mov	r2, r3
 8003184:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003188:	6093      	str	r3, [r2, #8]
 800318a:	e0a7      	b.n	80032dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	f003 0320 	and.w	r3, r3, #32
 8003192:	2b00      	cmp	r3, #0
 8003194:	d009      	beq.n	80031aa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	015a      	lsls	r2, r3, #5
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	4413      	add	r3, r2
 800319e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a2:	461a      	mov	r2, r3
 80031a4:	2320      	movs	r3, #32
 80031a6:	6093      	str	r3, [r2, #8]
 80031a8:	e098      	b.n	80032dc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f040 8093 	bne.w	80032dc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	4a4b      	ldr	r2, [pc, #300]	; (80032e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d90f      	bls.n	80031de <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00a      	beq.n	80031de <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	015a      	lsls	r2, r3, #5
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	4413      	add	r3, r2
 80031d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d4:	461a      	mov	r2, r3
 80031d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031da:	6093      	str	r3, [r2, #8]
 80031dc:	e07e      	b.n	80032dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	4613      	mov	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4413      	add	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	4413      	add	r3, r2
 80031f0:	3304      	adds	r3, #4
 80031f2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	69da      	ldr	r2, [r3, #28]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	0159      	lsls	r1, r3, #5
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	440b      	add	r3, r1
 8003200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800320a:	1ad2      	subs	r2, r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d114      	bne.n	8003240 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d109      	bne.n	8003232 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003228:	461a      	mov	r2, r3
 800322a:	2101      	movs	r1, #1
 800322c:	f002 f90a 	bl	8005444 <USB_EP0_OutStart>
 8003230:	e006      	b.n	8003240 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	691a      	ldr	r2, [r3, #16]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	441a      	add	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	b2db      	uxtb	r3, r3
 8003244:	4619      	mov	r1, r3
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f004 fd80 	bl	8007d4c <HAL_PCD_DataOutStageCallback>
 800324c:	e046      	b.n	80032dc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	4a26      	ldr	r2, [pc, #152]	; (80032ec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d124      	bne.n	80032a0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	4413      	add	r3, r2
 8003268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800326c:	461a      	mov	r2, r3
 800326e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003272:	6093      	str	r3, [r2, #8]
 8003274:	e032      	b.n	80032dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f003 0320 	and.w	r3, r3, #32
 800327c:	2b00      	cmp	r3, #0
 800327e:	d008      	beq.n	8003292 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	015a      	lsls	r2, r3, #5
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	4413      	add	r3, r2
 8003288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800328c:	461a      	mov	r2, r3
 800328e:	2320      	movs	r3, #32
 8003290:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	b2db      	uxtb	r3, r3
 8003296:	4619      	mov	r1, r3
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f004 fd57 	bl	8007d4c <HAL_PCD_DataOutStageCallback>
 800329e:	e01d      	b.n	80032dc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d114      	bne.n	80032d0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	4613      	mov	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d108      	bne.n	80032d0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032c8:	461a      	mov	r2, r3
 80032ca:	2100      	movs	r1, #0
 80032cc:	f002 f8ba 	bl	8005444 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	4619      	mov	r1, r3
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f004 fd38 	bl	8007d4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3720      	adds	r7, #32
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	4f54300a 	.word	0x4f54300a
 80032ec:	4f54310a 	.word	0x4f54310a

080032f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	333c      	adds	r3, #60	; 0x3c
 8003308:	3304      	adds	r3, #4
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	015a      	lsls	r2, r3, #5
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	4413      	add	r3, r2
 8003316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4a15      	ldr	r2, [pc, #84]	; (8003378 <PCD_EP_OutSetupPacket_int+0x88>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d90e      	bls.n	8003344 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800332c:	2b00      	cmp	r3, #0
 800332e:	d009      	beq.n	8003344 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4413      	add	r3, r2
 8003338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800333c:	461a      	mov	r2, r3
 800333e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003342:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f004 fcef 	bl	8007d28 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4a0a      	ldr	r2, [pc, #40]	; (8003378 <PCD_EP_OutSetupPacket_int+0x88>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d90c      	bls.n	800336c <PCD_EP_OutSetupPacket_int+0x7c>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d108      	bne.n	800336c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6818      	ldr	r0, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003364:	461a      	mov	r2, r3
 8003366:	2101      	movs	r1, #1
 8003368:	f002 f86c 	bl	8005444 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3718      	adds	r7, #24
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	4f54300a 	.word	0x4f54300a

0800337c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	460b      	mov	r3, r1
 8003386:	70fb      	strb	r3, [r7, #3]
 8003388:	4613      	mov	r3, r2
 800338a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003394:	78fb      	ldrb	r3, [r7, #3]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d107      	bne.n	80033aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800339a:	883b      	ldrh	r3, [r7, #0]
 800339c:	0419      	lsls	r1, r3, #16
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	629a      	str	r2, [r3, #40]	; 0x28
 80033a8:	e028      	b.n	80033fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b0:	0c1b      	lsrs	r3, r3, #16
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	4413      	add	r3, r2
 80033b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033b8:	2300      	movs	r3, #0
 80033ba:	73fb      	strb	r3, [r7, #15]
 80033bc:	e00d      	b.n	80033da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	3340      	adds	r3, #64	; 0x40
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	0c1b      	lsrs	r3, r3, #16
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	4413      	add	r3, r2
 80033d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	3301      	adds	r3, #1
 80033d8:	73fb      	strb	r3, [r7, #15]
 80033da:	7bfa      	ldrb	r2, [r7, #15]
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	3b01      	subs	r3, #1
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d3ec      	bcc.n	80033be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80033e4:	883b      	ldrh	r3, [r7, #0]
 80033e6:	0418      	lsls	r0, r3, #16
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6819      	ldr	r1, [r3, #0]
 80033ec:	78fb      	ldrb	r3, [r7, #3]
 80033ee:	3b01      	subs	r3, #1
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	4302      	orrs	r2, r0
 80033f4:	3340      	adds	r3, #64	; 0x40
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	460b      	mov	r3, r1
 8003414:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	887a      	ldrh	r2, [r7, #2]
 800341c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	460b      	mov	r3, r1
 8003436:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e267      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d075      	beq.n	800354e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003462:	4b88      	ldr	r3, [pc, #544]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	2b04      	cmp	r3, #4
 800346c:	d00c      	beq.n	8003488 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800346e:	4b85      	ldr	r3, [pc, #532]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003476:	2b08      	cmp	r3, #8
 8003478:	d112      	bne.n	80034a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800347a:	4b82      	ldr	r3, [pc, #520]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003482:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003486:	d10b      	bne.n	80034a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003488:	4b7e      	ldr	r3, [pc, #504]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d05b      	beq.n	800354c <HAL_RCC_OscConfig+0x108>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d157      	bne.n	800354c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e242      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a8:	d106      	bne.n	80034b8 <HAL_RCC_OscConfig+0x74>
 80034aa:	4b76      	ldr	r3, [pc, #472]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a75      	ldr	r2, [pc, #468]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80034b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	e01d      	b.n	80034f4 <HAL_RCC_OscConfig+0xb0>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034c0:	d10c      	bne.n	80034dc <HAL_RCC_OscConfig+0x98>
 80034c2:	4b70      	ldr	r3, [pc, #448]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a6f      	ldr	r2, [pc, #444]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80034c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	4b6d      	ldr	r3, [pc, #436]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a6c      	ldr	r2, [pc, #432]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80034d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	e00b      	b.n	80034f4 <HAL_RCC_OscConfig+0xb0>
 80034dc:	4b69      	ldr	r3, [pc, #420]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a68      	ldr	r2, [pc, #416]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80034e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	4b66      	ldr	r3, [pc, #408]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a65      	ldr	r2, [pc, #404]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80034ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d013      	beq.n	8003524 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fc:	f7fe f8e8 	bl	80016d0 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003504:	f7fe f8e4 	bl	80016d0 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b64      	cmp	r3, #100	; 0x64
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e207      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003516:	4b5b      	ldr	r3, [pc, #364]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0f0      	beq.n	8003504 <HAL_RCC_OscConfig+0xc0>
 8003522:	e014      	b.n	800354e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003524:	f7fe f8d4 	bl	80016d0 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800352c:	f7fe f8d0 	bl	80016d0 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b64      	cmp	r3, #100	; 0x64
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e1f3      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800353e:	4b51      	ldr	r3, [pc, #324]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1f0      	bne.n	800352c <HAL_RCC_OscConfig+0xe8>
 800354a:	e000      	b.n	800354e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800354c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d063      	beq.n	8003622 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800355a:	4b4a      	ldr	r3, [pc, #296]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 030c 	and.w	r3, r3, #12
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00b      	beq.n	800357e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003566:	4b47      	ldr	r3, [pc, #284]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800356e:	2b08      	cmp	r3, #8
 8003570:	d11c      	bne.n	80035ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003572:	4b44      	ldr	r3, [pc, #272]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d116      	bne.n	80035ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800357e:	4b41      	ldr	r3, [pc, #260]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d005      	beq.n	8003596 <HAL_RCC_OscConfig+0x152>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d001      	beq.n	8003596 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e1c7      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003596:	4b3b      	ldr	r3, [pc, #236]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	4937      	ldr	r1, [pc, #220]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035aa:	e03a      	b.n	8003622 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d020      	beq.n	80035f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035b4:	4b34      	ldr	r3, [pc, #208]	; (8003688 <HAL_RCC_OscConfig+0x244>)
 80035b6:	2201      	movs	r2, #1
 80035b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ba:	f7fe f889 	bl	80016d0 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035c2:	f7fe f885 	bl	80016d0 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e1a8      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d4:	4b2b      	ldr	r3, [pc, #172]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0f0      	beq.n	80035c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e0:	4b28      	ldr	r3, [pc, #160]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	4925      	ldr	r1, [pc, #148]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	600b      	str	r3, [r1, #0]
 80035f4:	e015      	b.n	8003622 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035f6:	4b24      	ldr	r3, [pc, #144]	; (8003688 <HAL_RCC_OscConfig+0x244>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fc:	f7fe f868 	bl	80016d0 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003604:	f7fe f864 	bl	80016d0 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e187      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003616:	4b1b      	ldr	r3, [pc, #108]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1f0      	bne.n	8003604 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	2b00      	cmp	r3, #0
 800362c:	d036      	beq.n	800369c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d016      	beq.n	8003664 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003636:	4b15      	ldr	r3, [pc, #84]	; (800368c <HAL_RCC_OscConfig+0x248>)
 8003638:	2201      	movs	r2, #1
 800363a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363c:	f7fe f848 	bl	80016d0 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003644:	f7fe f844 	bl	80016d0 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e167      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003656:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 8003658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCC_OscConfig+0x200>
 8003662:	e01b      	b.n	800369c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003664:	4b09      	ldr	r3, [pc, #36]	; (800368c <HAL_RCC_OscConfig+0x248>)
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800366a:	f7fe f831 	bl	80016d0 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003670:	e00e      	b.n	8003690 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003672:	f7fe f82d 	bl	80016d0 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d907      	bls.n	8003690 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e150      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
 8003684:	40023800 	.word	0x40023800
 8003688:	42470000 	.word	0x42470000
 800368c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003690:	4b88      	ldr	r3, [pc, #544]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1ea      	bne.n	8003672 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 8097 	beq.w	80037d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036aa:	2300      	movs	r3, #0
 80036ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ae:	4b81      	ldr	r3, [pc, #516]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10f      	bne.n	80036da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ba:	2300      	movs	r3, #0
 80036bc:	60bb      	str	r3, [r7, #8]
 80036be:	4b7d      	ldr	r3, [pc, #500]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	4a7c      	ldr	r2, [pc, #496]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 80036c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036c8:	6413      	str	r3, [r2, #64]	; 0x40
 80036ca:	4b7a      	ldr	r3, [pc, #488]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d2:	60bb      	str	r3, [r7, #8]
 80036d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036d6:	2301      	movs	r3, #1
 80036d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036da:	4b77      	ldr	r3, [pc, #476]	; (80038b8 <HAL_RCC_OscConfig+0x474>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d118      	bne.n	8003718 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036e6:	4b74      	ldr	r3, [pc, #464]	; (80038b8 <HAL_RCC_OscConfig+0x474>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a73      	ldr	r2, [pc, #460]	; (80038b8 <HAL_RCC_OscConfig+0x474>)
 80036ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036f2:	f7fd ffed 	bl	80016d0 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036fa:	f7fd ffe9 	bl	80016d0 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e10c      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370c:	4b6a      	ldr	r3, [pc, #424]	; (80038b8 <HAL_RCC_OscConfig+0x474>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f0      	beq.n	80036fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d106      	bne.n	800372e <HAL_RCC_OscConfig+0x2ea>
 8003720:	4b64      	ldr	r3, [pc, #400]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003724:	4a63      	ldr	r2, [pc, #396]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	6713      	str	r3, [r2, #112]	; 0x70
 800372c:	e01c      	b.n	8003768 <HAL_RCC_OscConfig+0x324>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	2b05      	cmp	r3, #5
 8003734:	d10c      	bne.n	8003750 <HAL_RCC_OscConfig+0x30c>
 8003736:	4b5f      	ldr	r3, [pc, #380]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373a:	4a5e      	ldr	r2, [pc, #376]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 800373c:	f043 0304 	orr.w	r3, r3, #4
 8003740:	6713      	str	r3, [r2, #112]	; 0x70
 8003742:	4b5c      	ldr	r3, [pc, #368]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	4a5b      	ldr	r2, [pc, #364]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	6713      	str	r3, [r2, #112]	; 0x70
 800374e:	e00b      	b.n	8003768 <HAL_RCC_OscConfig+0x324>
 8003750:	4b58      	ldr	r3, [pc, #352]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003754:	4a57      	ldr	r2, [pc, #348]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003756:	f023 0301 	bic.w	r3, r3, #1
 800375a:	6713      	str	r3, [r2, #112]	; 0x70
 800375c:	4b55      	ldr	r3, [pc, #340]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 800375e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003760:	4a54      	ldr	r2, [pc, #336]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003762:	f023 0304 	bic.w	r3, r3, #4
 8003766:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d015      	beq.n	800379c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003770:	f7fd ffae 	bl	80016d0 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003776:	e00a      	b.n	800378e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003778:	f7fd ffaa 	bl	80016d0 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	f241 3288 	movw	r2, #5000	; 0x1388
 8003786:	4293      	cmp	r3, r2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e0cb      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800378e:	4b49      	ldr	r3, [pc, #292]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0ee      	beq.n	8003778 <HAL_RCC_OscConfig+0x334>
 800379a:	e014      	b.n	80037c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800379c:	f7fd ff98 	bl	80016d0 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a2:	e00a      	b.n	80037ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037a4:	f7fd ff94 	bl	80016d0 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e0b5      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ba:	4b3e      	ldr	r3, [pc, #248]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 80037bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1ee      	bne.n	80037a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037c6:	7dfb      	ldrb	r3, [r7, #23]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d105      	bne.n	80037d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037cc:	4b39      	ldr	r3, [pc, #228]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	4a38      	ldr	r2, [pc, #224]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 80037d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 80a1 	beq.w	8003924 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037e2:	4b34      	ldr	r3, [pc, #208]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 030c 	and.w	r3, r3, #12
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d05c      	beq.n	80038a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d141      	bne.n	800387a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f6:	4b31      	ldr	r3, [pc, #196]	; (80038bc <HAL_RCC_OscConfig+0x478>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fc:	f7fd ff68 	bl	80016d0 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003804:	f7fd ff64 	bl	80016d0 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e087      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003816:	4b27      	ldr	r3, [pc, #156]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69da      	ldr	r2, [r3, #28]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	019b      	lsls	r3, r3, #6
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003838:	085b      	lsrs	r3, r3, #1
 800383a:	3b01      	subs	r3, #1
 800383c:	041b      	lsls	r3, r3, #16
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	061b      	lsls	r3, r3, #24
 8003846:	491b      	ldr	r1, [pc, #108]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003848:	4313      	orrs	r3, r2
 800384a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800384c:	4b1b      	ldr	r3, [pc, #108]	; (80038bc <HAL_RCC_OscConfig+0x478>)
 800384e:	2201      	movs	r2, #1
 8003850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003852:	f7fd ff3d 	bl	80016d0 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800385a:	f7fd ff39 	bl	80016d0 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e05c      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386c:	4b11      	ldr	r3, [pc, #68]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0f0      	beq.n	800385a <HAL_RCC_OscConfig+0x416>
 8003878:	e054      	b.n	8003924 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387a:	4b10      	ldr	r3, [pc, #64]	; (80038bc <HAL_RCC_OscConfig+0x478>)
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003880:	f7fd ff26 	bl	80016d0 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003888:	f7fd ff22 	bl	80016d0 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e045      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389a:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1f0      	bne.n	8003888 <HAL_RCC_OscConfig+0x444>
 80038a6:	e03d      	b.n	8003924 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d107      	bne.n	80038c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e038      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
 80038b4:	40023800 	.word	0x40023800
 80038b8:	40007000 	.word	0x40007000
 80038bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038c0:	4b1b      	ldr	r3, [pc, #108]	; (8003930 <HAL_RCC_OscConfig+0x4ec>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d028      	beq.n	8003920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038d8:	429a      	cmp	r2, r3
 80038da:	d121      	bne.n	8003920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d11a      	bne.n	8003920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038f0:	4013      	ands	r3, r2
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d111      	bne.n	8003920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	085b      	lsrs	r3, r3, #1
 8003908:	3b01      	subs	r3, #1
 800390a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800390c:	429a      	cmp	r2, r3
 800390e:	d107      	bne.n	8003920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800391c:	429a      	cmp	r2, r3
 800391e:	d001      	beq.n	8003924 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e000      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40023800 	.word	0x40023800

08003934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0cc      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003948:	4b68      	ldr	r3, [pc, #416]	; (8003aec <HAL_RCC_ClockConfig+0x1b8>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d90c      	bls.n	8003970 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003956:	4b65      	ldr	r3, [pc, #404]	; (8003aec <HAL_RCC_ClockConfig+0x1b8>)
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	b2d2      	uxtb	r2, r2
 800395c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800395e:	4b63      	ldr	r3, [pc, #396]	; (8003aec <HAL_RCC_ClockConfig+0x1b8>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d001      	beq.n	8003970 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e0b8      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d020      	beq.n	80039be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	d005      	beq.n	8003994 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003988:	4b59      	ldr	r3, [pc, #356]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	4a58      	ldr	r2, [pc, #352]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003992:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b00      	cmp	r3, #0
 800399e:	d005      	beq.n	80039ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039a0:	4b53      	ldr	r3, [pc, #332]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	4a52      	ldr	r2, [pc, #328]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 80039a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039ac:	4b50      	ldr	r3, [pc, #320]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	494d      	ldr	r1, [pc, #308]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d044      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d107      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d2:	4b47      	ldr	r3, [pc, #284]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d119      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e07f      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d003      	beq.n	80039f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ee:	2b03      	cmp	r3, #3
 80039f0:	d107      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039f2:	4b3f      	ldr	r3, [pc, #252]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d109      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e06f      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a02:	4b3b      	ldr	r3, [pc, #236]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e067      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a12:	4b37      	ldr	r3, [pc, #220]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f023 0203 	bic.w	r2, r3, #3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	4934      	ldr	r1, [pc, #208]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a24:	f7fd fe54 	bl	80016d0 <HAL_GetTick>
 8003a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a2a:	e00a      	b.n	8003a42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a2c:	f7fd fe50 	bl	80016d0 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e04f      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a42:	4b2b      	ldr	r3, [pc, #172]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 020c 	and.w	r2, r3, #12
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d1eb      	bne.n	8003a2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a54:	4b25      	ldr	r3, [pc, #148]	; (8003aec <HAL_RCC_ClockConfig+0x1b8>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d20c      	bcs.n	8003a7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a62:	4b22      	ldr	r3, [pc, #136]	; (8003aec <HAL_RCC_ClockConfig+0x1b8>)
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6a:	4b20      	ldr	r3, [pc, #128]	; (8003aec <HAL_RCC_ClockConfig+0x1b8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d001      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e032      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a88:	4b19      	ldr	r3, [pc, #100]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	4916      	ldr	r1, [pc, #88]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d009      	beq.n	8003aba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aa6:	4b12      	ldr	r3, [pc, #72]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	490e      	ldr	r1, [pc, #56]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003aba:	f000 f821 	bl	8003b00 <HAL_RCC_GetSysClockFreq>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	4b0b      	ldr	r3, [pc, #44]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	091b      	lsrs	r3, r3, #4
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	490a      	ldr	r1, [pc, #40]	; (8003af4 <HAL_RCC_ClockConfig+0x1c0>)
 8003acc:	5ccb      	ldrb	r3, [r1, r3]
 8003ace:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad2:	4a09      	ldr	r2, [pc, #36]	; (8003af8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ad6:	4b09      	ldr	r3, [pc, #36]	; (8003afc <HAL_RCC_ClockConfig+0x1c8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fd fdb4 	bl	8001648 <HAL_InitTick>

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	40023c00 	.word	0x40023c00
 8003af0:	40023800 	.word	0x40023800
 8003af4:	0800b134 	.word	0x0800b134
 8003af8:	20000064 	.word	0x20000064
 8003afc:	20000068 	.word	0x20000068

08003b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b04:	b090      	sub	sp, #64	; 0x40
 8003b06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b10:	2300      	movs	r3, #0
 8003b12:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b18:	4b59      	ldr	r3, [pc, #356]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 030c 	and.w	r3, r3, #12
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d00d      	beq.n	8003b40 <HAL_RCC_GetSysClockFreq+0x40>
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	f200 80a1 	bhi.w	8003c6c <HAL_RCC_GetSysClockFreq+0x16c>
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d002      	beq.n	8003b34 <HAL_RCC_GetSysClockFreq+0x34>
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d003      	beq.n	8003b3a <HAL_RCC_GetSysClockFreq+0x3a>
 8003b32:	e09b      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b34:	4b53      	ldr	r3, [pc, #332]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b36:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003b38:	e09b      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b3a:	4b53      	ldr	r3, [pc, #332]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b3e:	e098      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b40:	4b4f      	ldr	r3, [pc, #316]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b48:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b4a:	4b4d      	ldr	r3, [pc, #308]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d028      	beq.n	8003ba8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b56:	4b4a      	ldr	r3, [pc, #296]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	099b      	lsrs	r3, r3, #6
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	623b      	str	r3, [r7, #32]
 8003b60:	627a      	str	r2, [r7, #36]	; 0x24
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b68:	2100      	movs	r1, #0
 8003b6a:	4b47      	ldr	r3, [pc, #284]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b6c:	fb03 f201 	mul.w	r2, r3, r1
 8003b70:	2300      	movs	r3, #0
 8003b72:	fb00 f303 	mul.w	r3, r0, r3
 8003b76:	4413      	add	r3, r2
 8003b78:	4a43      	ldr	r2, [pc, #268]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b7a:	fba0 1202 	umull	r1, r2, r0, r2
 8003b7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b80:	460a      	mov	r2, r1
 8003b82:	62ba      	str	r2, [r7, #40]	; 0x28
 8003b84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b86:	4413      	add	r3, r2
 8003b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	61bb      	str	r3, [r7, #24]
 8003b90:	61fa      	str	r2, [r7, #28]
 8003b92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b9a:	f7fd f85d 	bl	8000c58 <__aeabi_uldivmod>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ba6:	e053      	b.n	8003c50 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ba8:	4b35      	ldr	r3, [pc, #212]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	099b      	lsrs	r3, r3, #6
 8003bae:	2200      	movs	r2, #0
 8003bb0:	613b      	str	r3, [r7, #16]
 8003bb2:	617a      	str	r2, [r7, #20]
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003bba:	f04f 0b00 	mov.w	fp, #0
 8003bbe:	4652      	mov	r2, sl
 8003bc0:	465b      	mov	r3, fp
 8003bc2:	f04f 0000 	mov.w	r0, #0
 8003bc6:	f04f 0100 	mov.w	r1, #0
 8003bca:	0159      	lsls	r1, r3, #5
 8003bcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bd0:	0150      	lsls	r0, r2, #5
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	ebb2 080a 	subs.w	r8, r2, sl
 8003bda:	eb63 090b 	sbc.w	r9, r3, fp
 8003bde:	f04f 0200 	mov.w	r2, #0
 8003be2:	f04f 0300 	mov.w	r3, #0
 8003be6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003bea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003bee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003bf2:	ebb2 0408 	subs.w	r4, r2, r8
 8003bf6:	eb63 0509 	sbc.w	r5, r3, r9
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	00eb      	lsls	r3, r5, #3
 8003c04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c08:	00e2      	lsls	r2, r4, #3
 8003c0a:	4614      	mov	r4, r2
 8003c0c:	461d      	mov	r5, r3
 8003c0e:	eb14 030a 	adds.w	r3, r4, sl
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	eb45 030b 	adc.w	r3, r5, fp
 8003c18:	607b      	str	r3, [r7, #4]
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	f04f 0300 	mov.w	r3, #0
 8003c22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c26:	4629      	mov	r1, r5
 8003c28:	028b      	lsls	r3, r1, #10
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c30:	4621      	mov	r1, r4
 8003c32:	028a      	lsls	r2, r1, #10
 8003c34:	4610      	mov	r0, r2
 8003c36:	4619      	mov	r1, r3
 8003c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	60bb      	str	r3, [r7, #8]
 8003c3e:	60fa      	str	r2, [r7, #12]
 8003c40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c44:	f7fd f808 	bl	8000c58 <__aeabi_uldivmod>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	0c1b      	lsrs	r3, r3, #16
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003c60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c6a:	e002      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c6c:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c6e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3740      	adds	r7, #64	; 0x40
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c7e:	bf00      	nop
 8003c80:	40023800 	.word	0x40023800
 8003c84:	00f42400 	.word	0x00f42400
 8003c88:	017d7840 	.word	0x017d7840

08003c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c90:	4b03      	ldr	r3, [pc, #12]	; (8003ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c92:	681b      	ldr	r3, [r3, #0]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	20000064 	.word	0x20000064

08003ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ca8:	f7ff fff0 	bl	8003c8c <HAL_RCC_GetHCLKFreq>
 8003cac:	4602      	mov	r2, r0
 8003cae:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	0a9b      	lsrs	r3, r3, #10
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	4903      	ldr	r1, [pc, #12]	; (8003cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cba:	5ccb      	ldrb	r3, [r1, r3]
 8003cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	0800b144 	.word	0x0800b144

08003ccc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ccc:	b084      	sub	sp, #16
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b084      	sub	sp, #16
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
 8003cd6:	f107 001c 	add.w	r0, r7, #28
 8003cda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d122      	bne.n	8003d2a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003cf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d105      	bne.n	8003d1e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f001 fbee 	bl	8005500 <USB_CoreReset>
 8003d24:	4603      	mov	r3, r0
 8003d26:	73fb      	strb	r3, [r7, #15]
 8003d28:	e01a      	b.n	8003d60 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f001 fbe2 	bl	8005500 <USB_CoreReset>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d106      	bne.n	8003d54 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	639a      	str	r2, [r3, #56]	; 0x38
 8003d52:	e005      	b.n	8003d60 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d10b      	bne.n	8003d7e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f043 0206 	orr.w	r2, r3, #6
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f043 0220 	orr.w	r2, r3, #32
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d8a:	b004      	add	sp, #16
 8003d8c:	4770      	bx	lr
	...

08003d90 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003d9e:	79fb      	ldrb	r3, [r7, #7]
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d165      	bne.n	8003e70 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	4a41      	ldr	r2, [pc, #260]	; (8003eac <USB_SetTurnaroundTime+0x11c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d906      	bls.n	8003dba <USB_SetTurnaroundTime+0x2a>
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	4a40      	ldr	r2, [pc, #256]	; (8003eb0 <USB_SetTurnaroundTime+0x120>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d202      	bcs.n	8003dba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003db4:	230f      	movs	r3, #15
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	e062      	b.n	8003e80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	4a3c      	ldr	r2, [pc, #240]	; (8003eb0 <USB_SetTurnaroundTime+0x120>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d306      	bcc.n	8003dd0 <USB_SetTurnaroundTime+0x40>
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	4a3b      	ldr	r2, [pc, #236]	; (8003eb4 <USB_SetTurnaroundTime+0x124>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d202      	bcs.n	8003dd0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003dca:	230e      	movs	r3, #14
 8003dcc:	617b      	str	r3, [r7, #20]
 8003dce:	e057      	b.n	8003e80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	4a38      	ldr	r2, [pc, #224]	; (8003eb4 <USB_SetTurnaroundTime+0x124>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d306      	bcc.n	8003de6 <USB_SetTurnaroundTime+0x56>
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4a37      	ldr	r2, [pc, #220]	; (8003eb8 <USB_SetTurnaroundTime+0x128>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d202      	bcs.n	8003de6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003de0:	230d      	movs	r3, #13
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	e04c      	b.n	8003e80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	4a33      	ldr	r2, [pc, #204]	; (8003eb8 <USB_SetTurnaroundTime+0x128>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d306      	bcc.n	8003dfc <USB_SetTurnaroundTime+0x6c>
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	4a32      	ldr	r2, [pc, #200]	; (8003ebc <USB_SetTurnaroundTime+0x12c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d802      	bhi.n	8003dfc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003df6:	230c      	movs	r3, #12
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	e041      	b.n	8003e80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	4a2f      	ldr	r2, [pc, #188]	; (8003ebc <USB_SetTurnaroundTime+0x12c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d906      	bls.n	8003e12 <USB_SetTurnaroundTime+0x82>
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	4a2e      	ldr	r2, [pc, #184]	; (8003ec0 <USB_SetTurnaroundTime+0x130>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d802      	bhi.n	8003e12 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003e0c:	230b      	movs	r3, #11
 8003e0e:	617b      	str	r3, [r7, #20]
 8003e10:	e036      	b.n	8003e80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	4a2a      	ldr	r2, [pc, #168]	; (8003ec0 <USB_SetTurnaroundTime+0x130>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d906      	bls.n	8003e28 <USB_SetTurnaroundTime+0x98>
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	4a29      	ldr	r2, [pc, #164]	; (8003ec4 <USB_SetTurnaroundTime+0x134>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d802      	bhi.n	8003e28 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003e22:	230a      	movs	r3, #10
 8003e24:	617b      	str	r3, [r7, #20]
 8003e26:	e02b      	b.n	8003e80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4a26      	ldr	r2, [pc, #152]	; (8003ec4 <USB_SetTurnaroundTime+0x134>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d906      	bls.n	8003e3e <USB_SetTurnaroundTime+0xae>
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	4a25      	ldr	r2, [pc, #148]	; (8003ec8 <USB_SetTurnaroundTime+0x138>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d202      	bcs.n	8003e3e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003e38:	2309      	movs	r3, #9
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	e020      	b.n	8003e80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	4a21      	ldr	r2, [pc, #132]	; (8003ec8 <USB_SetTurnaroundTime+0x138>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d306      	bcc.n	8003e54 <USB_SetTurnaroundTime+0xc4>
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	4a20      	ldr	r2, [pc, #128]	; (8003ecc <USB_SetTurnaroundTime+0x13c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d802      	bhi.n	8003e54 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003e4e:	2308      	movs	r3, #8
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	e015      	b.n	8003e80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	4a1d      	ldr	r2, [pc, #116]	; (8003ecc <USB_SetTurnaroundTime+0x13c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d906      	bls.n	8003e6a <USB_SetTurnaroundTime+0xda>
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	4a1c      	ldr	r2, [pc, #112]	; (8003ed0 <USB_SetTurnaroundTime+0x140>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d202      	bcs.n	8003e6a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003e64:	2307      	movs	r3, #7
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	e00a      	b.n	8003e80 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003e6a:	2306      	movs	r3, #6
 8003e6c:	617b      	str	r3, [r7, #20]
 8003e6e:	e007      	b.n	8003e80 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003e70:	79fb      	ldrb	r3, [r7, #7]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d102      	bne.n	8003e7c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003e76:	2309      	movs	r3, #9
 8003e78:	617b      	str	r3, [r7, #20]
 8003e7a:	e001      	b.n	8003e80 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003e7c:	2309      	movs	r3, #9
 8003e7e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	029b      	lsls	r3, r3, #10
 8003e94:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	371c      	adds	r7, #28
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	00d8acbf 	.word	0x00d8acbf
 8003eb0:	00e4e1c0 	.word	0x00e4e1c0
 8003eb4:	00f42400 	.word	0x00f42400
 8003eb8:	01067380 	.word	0x01067380
 8003ebc:	011a499f 	.word	0x011a499f
 8003ec0:	01312cff 	.word	0x01312cff
 8003ec4:	014ca43f 	.word	0x014ca43f
 8003ec8:	016e3600 	.word	0x016e3600
 8003ecc:	01a6ab1f 	.word	0x01a6ab1f
 8003ed0:	01e84800 	.word	0x01e84800

08003ed4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f043 0201 	orr.w	r2, r3, #1
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f023 0201 	bic.w	r2, r3, #1
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	460b      	mov	r3, r1
 8003f22:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003f34:	78fb      	ldrb	r3, [r7, #3]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d115      	bne.n	8003f66 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f46:	2001      	movs	r0, #1
 8003f48:	f7fd fbce 	bl	80016e8 <HAL_Delay>
      ms++;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f001 fa45 	bl	80053e2 <USB_GetMode>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d01e      	beq.n	8003f9c <USB_SetCurrentMode+0x84>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2b31      	cmp	r3, #49	; 0x31
 8003f62:	d9f0      	bls.n	8003f46 <USB_SetCurrentMode+0x2e>
 8003f64:	e01a      	b.n	8003f9c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003f66:	78fb      	ldrb	r3, [r7, #3]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d115      	bne.n	8003f98 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f78:	2001      	movs	r0, #1
 8003f7a:	f7fd fbb5 	bl	80016e8 <HAL_Delay>
      ms++;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	3301      	adds	r3, #1
 8003f82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f001 fa2c 	bl	80053e2 <USB_GetMode>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d005      	beq.n	8003f9c <USB_SetCurrentMode+0x84>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b31      	cmp	r3, #49	; 0x31
 8003f94:	d9f0      	bls.n	8003f78 <USB_SetCurrentMode+0x60>
 8003f96:	e001      	b.n	8003f9c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e005      	b.n	8003fa8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b32      	cmp	r3, #50	; 0x32
 8003fa0:	d101      	bne.n	8003fa6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e000      	b.n	8003fa8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fb0:	b084      	sub	sp, #16
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b086      	sub	sp, #24
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003fbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003fca:	2300      	movs	r3, #0
 8003fcc:	613b      	str	r3, [r7, #16]
 8003fce:	e009      	b.n	8003fe4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	3340      	adds	r3, #64	; 0x40
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	2200      	movs	r2, #0
 8003fdc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	613b      	str	r3, [r7, #16]
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	2b0e      	cmp	r3, #14
 8003fe8:	d9f2      	bls.n	8003fd0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d11c      	bne.n	800402a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ffe:	f043 0302 	orr.w	r3, r3, #2
 8004002:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004008:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004014:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004020:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	639a      	str	r2, [r3, #56]	; 0x38
 8004028:	e00b      	b.n	8004042 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004048:	461a      	mov	r2, r3
 800404a:	2300      	movs	r3, #0
 800404c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004054:	4619      	mov	r1, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800405c:	461a      	mov	r2, r3
 800405e:	680b      	ldr	r3, [r1, #0]
 8004060:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004064:	2b01      	cmp	r3, #1
 8004066:	d10c      	bne.n	8004082 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406a:	2b00      	cmp	r3, #0
 800406c:	d104      	bne.n	8004078 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800406e:	2100      	movs	r1, #0
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f965 	bl	8004340 <USB_SetDevSpeed>
 8004076:	e008      	b.n	800408a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004078:	2101      	movs	r1, #1
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f960 	bl	8004340 <USB_SetDevSpeed>
 8004080:	e003      	b.n	800408a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004082:	2103      	movs	r1, #3
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f95b 	bl	8004340 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800408a:	2110      	movs	r1, #16
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f8f3 	bl	8004278 <USB_FlushTxFifo>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f91f 	bl	80042e0 <USB_FlushRxFifo>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040b2:	461a      	mov	r2, r3
 80040b4:	2300      	movs	r3, #0
 80040b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040be:	461a      	mov	r2, r3
 80040c0:	2300      	movs	r3, #0
 80040c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ca:	461a      	mov	r2, r3
 80040cc:	2300      	movs	r3, #0
 80040ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040d0:	2300      	movs	r3, #0
 80040d2:	613b      	str	r3, [r7, #16]
 80040d4:	e043      	b.n	800415e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040ec:	d118      	bne.n	8004120 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10a      	bne.n	800410a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004100:	461a      	mov	r2, r3
 8004102:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004106:	6013      	str	r3, [r2, #0]
 8004108:	e013      	b.n	8004132 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	4413      	add	r3, r2
 8004112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004116:	461a      	mov	r2, r3
 8004118:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	e008      	b.n	8004132 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4413      	add	r3, r2
 8004128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412c:	461a      	mov	r2, r3
 800412e:	2300      	movs	r3, #0
 8004130:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4413      	add	r3, r2
 800413a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800413e:	461a      	mov	r2, r3
 8004140:	2300      	movs	r3, #0
 8004142:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4413      	add	r3, r2
 800414c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004150:	461a      	mov	r2, r3
 8004152:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004156:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	3301      	adds	r3, #1
 800415c:	613b      	str	r3, [r7, #16]
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	429a      	cmp	r2, r3
 8004164:	d3b7      	bcc.n	80040d6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004166:	2300      	movs	r3, #0
 8004168:	613b      	str	r3, [r7, #16]
 800416a:	e043      	b.n	80041f4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4413      	add	r3, r2
 8004174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800417e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004182:	d118      	bne.n	80041b6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10a      	bne.n	80041a0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004196:	461a      	mov	r2, r3
 8004198:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	e013      	b.n	80041c8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	015a      	lsls	r2, r3, #5
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ac:	461a      	mov	r2, r3
 80041ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	e008      	b.n	80041c8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c2:	461a      	mov	r2, r3
 80041c4:	2300      	movs	r3, #0
 80041c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d4:	461a      	mov	r2, r3
 80041d6:	2300      	movs	r3, #0
 80041d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	4413      	add	r3, r2
 80041e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e6:	461a      	mov	r2, r3
 80041e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	3301      	adds	r3, #1
 80041f2:	613b      	str	r3, [r7, #16]
 80041f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d3b7      	bcc.n	800416c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800420a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800420e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800421c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800421e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004220:	2b00      	cmp	r3, #0
 8004222:	d105      	bne.n	8004230 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	f043 0210 	orr.w	r2, r3, #16
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	699a      	ldr	r2, [r3, #24]
 8004234:	4b0f      	ldr	r3, [pc, #60]	; (8004274 <USB_DevInit+0x2c4>)
 8004236:	4313      	orrs	r3, r2
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800423c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800423e:	2b00      	cmp	r3, #0
 8004240:	d005      	beq.n	800424e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	f043 0208 	orr.w	r2, r3, #8
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800424e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004250:	2b01      	cmp	r3, #1
 8004252:	d107      	bne.n	8004264 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800425c:	f043 0304 	orr.w	r3, r3, #4
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004264:	7dfb      	ldrb	r3, [r7, #23]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3718      	adds	r7, #24
 800426a:	46bd      	mov	sp, r7
 800426c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004270:	b004      	add	sp, #16
 8004272:	4770      	bx	lr
 8004274:	803c3800 	.word	0x803c3800

08004278 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004282:	2300      	movs	r3, #0
 8004284:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	3301      	adds	r3, #1
 800428a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4a13      	ldr	r2, [pc, #76]	; (80042dc <USB_FlushTxFifo+0x64>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d901      	bls.n	8004298 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e01b      	b.n	80042d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	2b00      	cmp	r3, #0
 800429e:	daf2      	bge.n	8004286 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	019b      	lsls	r3, r3, #6
 80042a8:	f043 0220 	orr.w	r2, r3, #32
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	3301      	adds	r3, #1
 80042b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4a08      	ldr	r2, [pc, #32]	; (80042dc <USB_FlushTxFifo+0x64>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d901      	bls.n	80042c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e006      	b.n	80042d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	f003 0320 	and.w	r3, r3, #32
 80042ca:	2b20      	cmp	r3, #32
 80042cc:	d0f0      	beq.n	80042b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	00030d40 	.word	0x00030d40

080042e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	3301      	adds	r3, #1
 80042f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	4a11      	ldr	r2, [pc, #68]	; (800433c <USB_FlushRxFifo+0x5c>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d901      	bls.n	80042fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e018      	b.n	8004330 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	2b00      	cmp	r3, #0
 8004304:	daf2      	bge.n	80042ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004306:	2300      	movs	r3, #0
 8004308:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2210      	movs	r2, #16
 800430e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	3301      	adds	r3, #1
 8004314:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4a08      	ldr	r2, [pc, #32]	; (800433c <USB_FlushRxFifo+0x5c>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d901      	bls.n	8004322 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e006      	b.n	8004330 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f003 0310 	and.w	r3, r3, #16
 800432a:	2b10      	cmp	r3, #16
 800432c:	d0f0      	beq.n	8004310 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	00030d40 	.word	0x00030d40

08004340 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	460b      	mov	r3, r1
 800434a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	78fb      	ldrb	r3, [r7, #3]
 800435a:	68f9      	ldr	r1, [r7, #12]
 800435c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004360:	4313      	orrs	r3, r2
 8004362:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004372:	b480      	push	{r7}
 8004374:	b087      	sub	sp, #28
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 0306 	and.w	r3, r3, #6
 800438a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d102      	bne.n	8004398 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004392:	2300      	movs	r3, #0
 8004394:	75fb      	strb	r3, [r7, #23]
 8004396:	e00a      	b.n	80043ae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2b02      	cmp	r3, #2
 800439c:	d002      	beq.n	80043a4 <USB_GetDevSpeed+0x32>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2b06      	cmp	r3, #6
 80043a2:	d102      	bne.n	80043aa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80043a4:	2302      	movs	r3, #2
 80043a6:	75fb      	strb	r3, [r7, #23]
 80043a8:	e001      	b.n	80043ae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80043aa:	230f      	movs	r3, #15
 80043ac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80043ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	371c      	adds	r7, #28
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	785b      	ldrb	r3, [r3, #1]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d13a      	bne.n	800444e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043de:	69da      	ldr	r2, [r3, #28]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	f003 030f 	and.w	r3, r3, #15
 80043e8:	2101      	movs	r1, #1
 80043ea:	fa01 f303 	lsl.w	r3, r1, r3
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	68f9      	ldr	r1, [r7, #12]
 80043f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043f6:	4313      	orrs	r3, r2
 80043f8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4413      	add	r3, r2
 8004402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d155      	bne.n	80044bc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	791b      	ldrb	r3, [r3, #4]
 800442a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800442c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	059b      	lsls	r3, r3, #22
 8004432:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004434:	4313      	orrs	r3, r2
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	0151      	lsls	r1, r2, #5
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	440a      	add	r2, r1
 800443e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	e036      	b.n	80044bc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004454:	69da      	ldr	r2, [r3, #28]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	f003 030f 	and.w	r3, r3, #15
 800445e:	2101      	movs	r1, #1
 8004460:	fa01 f303 	lsl.w	r3, r1, r3
 8004464:	041b      	lsls	r3, r3, #16
 8004466:	68f9      	ldr	r1, [r7, #12]
 8004468:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800446c:	4313      	orrs	r3, r2
 800446e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4413      	add	r3, r2
 8004478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d11a      	bne.n	80044bc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	015a      	lsls	r2, r3, #5
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4413      	add	r3, r2
 800448e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	791b      	ldrb	r3, [r3, #4]
 80044a0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80044a2:	430b      	orrs	r3, r1
 80044a4:	4313      	orrs	r3, r2
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	0151      	lsls	r1, r2, #5
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	440a      	add	r2, r1
 80044ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ba:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
	...

080044cc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	785b      	ldrb	r3, [r3, #1]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d161      	bne.n	80045ac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044fe:	d11f      	bne.n	8004540 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4413      	add	r3, r2
 8004508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	0151      	lsls	r1, r2, #5
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	440a      	add	r2, r1
 8004516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800451a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800451e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	4413      	add	r3, r2
 8004528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	0151      	lsls	r1, r2, #5
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	440a      	add	r2, r1
 8004536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800453a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800453e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004546:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	f003 030f 	and.w	r3, r3, #15
 8004550:	2101      	movs	r1, #1
 8004552:	fa01 f303 	lsl.w	r3, r1, r3
 8004556:	b29b      	uxth	r3, r3
 8004558:	43db      	mvns	r3, r3
 800455a:	68f9      	ldr	r1, [r7, #12]
 800455c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004560:	4013      	ands	r3, r2
 8004562:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800456a:	69da      	ldr	r2, [r3, #28]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	f003 030f 	and.w	r3, r3, #15
 8004574:	2101      	movs	r1, #1
 8004576:	fa01 f303 	lsl.w	r3, r1, r3
 800457a:	b29b      	uxth	r3, r3
 800457c:	43db      	mvns	r3, r3
 800457e:	68f9      	ldr	r1, [r7, #12]
 8004580:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004584:	4013      	ands	r3, r2
 8004586:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	015a      	lsls	r2, r3, #5
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4413      	add	r3, r2
 8004590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	0159      	lsls	r1, r3, #5
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	440b      	add	r3, r1
 800459e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a2:	4619      	mov	r1, r3
 80045a4:	4b35      	ldr	r3, [pc, #212]	; (800467c <USB_DeactivateEndpoint+0x1b0>)
 80045a6:	4013      	ands	r3, r2
 80045a8:	600b      	str	r3, [r1, #0]
 80045aa:	e060      	b.n	800466e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045c2:	d11f      	bne.n	8004604 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	015a      	lsls	r2, r3, #5
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4413      	add	r3, r2
 80045cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	0151      	lsls	r1, r2, #5
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	440a      	add	r2, r1
 80045da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045e2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	0151      	lsls	r1, r2, #5
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	440a      	add	r2, r1
 80045fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004602:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800460a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	f003 030f 	and.w	r3, r3, #15
 8004614:	2101      	movs	r1, #1
 8004616:	fa01 f303 	lsl.w	r3, r1, r3
 800461a:	041b      	lsls	r3, r3, #16
 800461c:	43db      	mvns	r3, r3
 800461e:	68f9      	ldr	r1, [r7, #12]
 8004620:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004624:	4013      	ands	r3, r2
 8004626:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800462e:	69da      	ldr	r2, [r3, #28]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	f003 030f 	and.w	r3, r3, #15
 8004638:	2101      	movs	r1, #1
 800463a:	fa01 f303 	lsl.w	r3, r1, r3
 800463e:	041b      	lsls	r3, r3, #16
 8004640:	43db      	mvns	r3, r3
 8004642:	68f9      	ldr	r1, [r7, #12]
 8004644:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004648:	4013      	ands	r3, r2
 800464a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	015a      	lsls	r2, r3, #5
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4413      	add	r3, r2
 8004654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	0159      	lsls	r1, r3, #5
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	440b      	add	r3, r1
 8004662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004666:	4619      	mov	r1, r3
 8004668:	4b05      	ldr	r3, [pc, #20]	; (8004680 <USB_DeactivateEndpoint+0x1b4>)
 800466a:	4013      	ands	r3, r2
 800466c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	ec337800 	.word	0xec337800
 8004680:	eff37800 	.word	0xeff37800

08004684 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08a      	sub	sp, #40	; 0x28
 8004688:	af02      	add	r7, sp, #8
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	4613      	mov	r3, r2
 8004690:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	785b      	ldrb	r3, [r3, #1]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	f040 815c 	bne.w	800495e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d132      	bne.n	8004714 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	0151      	lsls	r1, r2, #5
 80046c0:	69fa      	ldr	r2, [r7, #28]
 80046c2:	440a      	add	r2, r1
 80046c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	015a      	lsls	r2, r3, #5
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	4413      	add	r3, r2
 80046da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	0151      	lsls	r1, r2, #5
 80046e4:	69fa      	ldr	r2, [r7, #28]
 80046e6:	440a      	add	r2, r1
 80046e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	0151      	lsls	r1, r2, #5
 8004704:	69fa      	ldr	r2, [r7, #28]
 8004706:	440a      	add	r2, r1
 8004708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800470c:	0cdb      	lsrs	r3, r3, #19
 800470e:	04db      	lsls	r3, r3, #19
 8004710:	6113      	str	r3, [r2, #16]
 8004712:	e074      	b.n	80047fe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	4413      	add	r3, r2
 800471c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	0151      	lsls	r1, r2, #5
 8004726:	69fa      	ldr	r2, [r7, #28]
 8004728:	440a      	add	r2, r1
 800472a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800472e:	0cdb      	lsrs	r3, r3, #19
 8004730:	04db      	lsls	r3, r3, #19
 8004732:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	0151      	lsls	r1, r2, #5
 8004746:	69fa      	ldr	r2, [r7, #28]
 8004748:	440a      	add	r2, r1
 800474a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800474e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004752:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004756:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	015a      	lsls	r2, r3, #5
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	4413      	add	r3, r2
 8004760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004764:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	6999      	ldr	r1, [r3, #24]
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	440b      	add	r3, r1
 8004770:	1e59      	subs	r1, r3, #1
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	fbb1 f3f3 	udiv	r3, r1, r3
 800477a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800477c:	4b9d      	ldr	r3, [pc, #628]	; (80049f4 <USB_EPStartXfer+0x370>)
 800477e:	400b      	ands	r3, r1
 8004780:	69b9      	ldr	r1, [r7, #24]
 8004782:	0148      	lsls	r0, r1, #5
 8004784:	69f9      	ldr	r1, [r7, #28]
 8004786:	4401      	add	r1, r0
 8004788:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800478c:	4313      	orrs	r3, r2
 800478e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	4413      	add	r3, r2
 8004798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800479c:	691a      	ldr	r2, [r3, #16]
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047a6:	69b9      	ldr	r1, [r7, #24]
 80047a8:	0148      	lsls	r0, r1, #5
 80047aa:	69f9      	ldr	r1, [r7, #28]
 80047ac:	4401      	add	r1, r0
 80047ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80047b2:	4313      	orrs	r3, r2
 80047b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	791b      	ldrb	r3, [r3, #4]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d11f      	bne.n	80047fe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	0151      	lsls	r1, r2, #5
 80047d0:	69fa      	ldr	r2, [r7, #28]
 80047d2:	440a      	add	r2, r1
 80047d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80047dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	0151      	lsls	r1, r2, #5
 80047f0:	69fa      	ldr	r2, [r7, #28]
 80047f2:	440a      	add	r2, r1
 80047f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80047fe:	79fb      	ldrb	r3, [r7, #7]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d14b      	bne.n	800489c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d009      	beq.n	8004820 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	4413      	add	r3, r2
 8004814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004818:	461a      	mov	r2, r3
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	791b      	ldrb	r3, [r3, #4]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d128      	bne.n	800487a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004834:	2b00      	cmp	r3, #0
 8004836:	d110      	bne.n	800485a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	015a      	lsls	r2, r3, #5
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	4413      	add	r3, r2
 8004840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	0151      	lsls	r1, r2, #5
 800484a:	69fa      	ldr	r2, [r7, #28]
 800484c:	440a      	add	r2, r1
 800484e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004852:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004856:	6013      	str	r3, [r2, #0]
 8004858:	e00f      	b.n	800487a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	015a      	lsls	r2, r3, #5
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	4413      	add	r3, r2
 8004862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	0151      	lsls	r1, r2, #5
 800486c:	69fa      	ldr	r2, [r7, #28]
 800486e:	440a      	add	r2, r1
 8004870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004878:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	015a      	lsls	r2, r3, #5
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	4413      	add	r3, r2
 8004882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	0151      	lsls	r1, r2, #5
 800488c:	69fa      	ldr	r2, [r7, #28]
 800488e:	440a      	add	r2, r1
 8004890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004894:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004898:	6013      	str	r3, [r2, #0]
 800489a:	e133      	b.n	8004b04 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	0151      	lsls	r1, r2, #5
 80048ae:	69fa      	ldr	r2, [r7, #28]
 80048b0:	440a      	add	r2, r1
 80048b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048ba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	791b      	ldrb	r3, [r3, #4]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d015      	beq.n	80048f0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 811b 	beq.w	8004b04 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	2101      	movs	r1, #1
 80048e0:	fa01 f303 	lsl.w	r3, r1, r3
 80048e4:	69f9      	ldr	r1, [r7, #28]
 80048e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048ea:	4313      	orrs	r3, r2
 80048ec:	634b      	str	r3, [r1, #52]	; 0x34
 80048ee:	e109      	b.n	8004b04 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d110      	bne.n	8004922 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	0151      	lsls	r1, r2, #5
 8004912:	69fa      	ldr	r2, [r7, #28]
 8004914:	440a      	add	r2, r1
 8004916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800491a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	e00f      	b.n	8004942 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	0151      	lsls	r1, r2, #5
 8004934:	69fa      	ldr	r2, [r7, #28]
 8004936:	440a      	add	r2, r1
 8004938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800493c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004940:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	6919      	ldr	r1, [r3, #16]
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	781a      	ldrb	r2, [r3, #0]
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	b298      	uxth	r0, r3
 8004950:	79fb      	ldrb	r3, [r7, #7]
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	4603      	mov	r3, r0
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f000 fade 	bl	8004f18 <USB_WritePacket>
 800495c:	e0d2      	b.n	8004b04 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	4413      	add	r3, r2
 8004966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	0151      	lsls	r1, r2, #5
 8004970:	69fa      	ldr	r2, [r7, #28]
 8004972:	440a      	add	r2, r1
 8004974:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004978:	0cdb      	lsrs	r3, r3, #19
 800497a:	04db      	lsls	r3, r3, #19
 800497c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	015a      	lsls	r2, r3, #5
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	4413      	add	r3, r2
 8004986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	0151      	lsls	r1, r2, #5
 8004990:	69fa      	ldr	r2, [r7, #28]
 8004992:	440a      	add	r2, r1
 8004994:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004998:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800499c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049a0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d126      	bne.n	80049f8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	015a      	lsls	r2, r3, #5
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b6:	691a      	ldr	r2, [r3, #16]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049c0:	69b9      	ldr	r1, [r7, #24]
 80049c2:	0148      	lsls	r0, r1, #5
 80049c4:	69f9      	ldr	r1, [r7, #28]
 80049c6:	4401      	add	r1, r0
 80049c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049cc:	4313      	orrs	r3, r2
 80049ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	0151      	lsls	r1, r2, #5
 80049e2:	69fa      	ldr	r2, [r7, #28]
 80049e4:	440a      	add	r2, r1
 80049e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049ee:	6113      	str	r3, [r2, #16]
 80049f0:	e03a      	b.n	8004a68 <USB_EPStartXfer+0x3e4>
 80049f2:	bf00      	nop
 80049f4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	699a      	ldr	r2, [r3, #24]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	4413      	add	r3, r2
 8004a02:	1e5a      	subs	r2, r3, #1
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	8afa      	ldrh	r2, [r7, #22]
 8004a14:	fb03 f202 	mul.w	r2, r3, r2
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a28:	691a      	ldr	r2, [r3, #16]
 8004a2a:	8afb      	ldrh	r3, [r7, #22]
 8004a2c:	04d9      	lsls	r1, r3, #19
 8004a2e:	4b38      	ldr	r3, [pc, #224]	; (8004b10 <USB_EPStartXfer+0x48c>)
 8004a30:	400b      	ands	r3, r1
 8004a32:	69b9      	ldr	r1, [r7, #24]
 8004a34:	0148      	lsls	r0, r1, #5
 8004a36:	69f9      	ldr	r1, [r7, #28]
 8004a38:	4401      	add	r1, r0
 8004a3a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	015a      	lsls	r2, r3, #5
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	4413      	add	r3, r2
 8004a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a4e:	691a      	ldr	r2, [r3, #16]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	69db      	ldr	r3, [r3, #28]
 8004a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a58:	69b9      	ldr	r1, [r7, #24]
 8004a5a:	0148      	lsls	r0, r1, #5
 8004a5c:	69f9      	ldr	r1, [r7, #28]
 8004a5e:	4401      	add	r1, r0
 8004a60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a64:	4313      	orrs	r3, r2
 8004a66:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004a68:	79fb      	ldrb	r3, [r7, #7]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d10d      	bne.n	8004a8a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d009      	beq.n	8004a8a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	6919      	ldr	r1, [r3, #16]
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a86:	460a      	mov	r2, r1
 8004a88:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	791b      	ldrb	r3, [r3, #4]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d128      	bne.n	8004ae4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d110      	bne.n	8004ac4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	0151      	lsls	r1, r2, #5
 8004ab4:	69fa      	ldr	r2, [r7, #28]
 8004ab6:	440a      	add	r2, r1
 8004ab8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004abc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	e00f      	b.n	8004ae4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	0151      	lsls	r1, r2, #5
 8004ad6:	69fa      	ldr	r2, [r7, #28]
 8004ad8:	440a      	add	r2, r1
 8004ada:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ae2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	0151      	lsls	r1, r2, #5
 8004af6:	69fa      	ldr	r2, [r7, #28]
 8004af8:	440a      	add	r2, r1
 8004afa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004afe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3720      	adds	r7, #32
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	1ff80000 	.word	0x1ff80000

08004b14 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	785b      	ldrb	r3, [r3, #1]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	f040 80ce 	bne.w	8004cd2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d132      	bne.n	8004ba4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	0151      	lsls	r1, r2, #5
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	440a      	add	r2, r1
 8004b54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	015a      	lsls	r2, r3, #5
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	4413      	add	r3, r2
 8004b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	0151      	lsls	r1, r2, #5
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	440a      	add	r2, r1
 8004b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	0151      	lsls	r1, r2, #5
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	440a      	add	r2, r1
 8004b98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b9c:	0cdb      	lsrs	r3, r3, #19
 8004b9e:	04db      	lsls	r3, r3, #19
 8004ba0:	6113      	str	r3, [r2, #16]
 8004ba2:	e04e      	b.n	8004c42 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	0151      	lsls	r1, r2, #5
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	440a      	add	r2, r1
 8004bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bbe:	0cdb      	lsrs	r3, r3, #19
 8004bc0:	04db      	lsls	r3, r3, #19
 8004bc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	0151      	lsls	r1, r2, #5
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	440a      	add	r2, r1
 8004bda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bde:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004be2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004be6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	699a      	ldr	r2, [r3, #24]
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d903      	bls.n	8004bfc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	68da      	ldr	r2, [r3, #12]
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	0151      	lsls	r1, r2, #5
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	440a      	add	r2, r1
 8004c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c28:	691a      	ldr	r2, [r3, #16]
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c32:	6939      	ldr	r1, [r7, #16]
 8004c34:	0148      	lsls	r0, r1, #5
 8004c36:	6979      	ldr	r1, [r7, #20]
 8004c38:	4401      	add	r1, r0
 8004c3a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004c42:	79fb      	ldrb	r3, [r7, #7]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d11e      	bne.n	8004c86 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d009      	beq.n	8004c64 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	015a      	lsls	r2, r3, #5
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	0151      	lsls	r1, r2, #5
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	440a      	add	r2, r1
 8004c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	e097      	b.n	8004db6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	015a      	lsls	r2, r3, #5
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	0151      	lsls	r1, r2, #5
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	440a      	add	r2, r1
 8004c9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ca0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ca4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f000 8083 	beq.w	8004db6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	f003 030f 	and.w	r3, r3, #15
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc6:	6979      	ldr	r1, [r7, #20]
 8004cc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	634b      	str	r3, [r1, #52]	; 0x34
 8004cd0:	e071      	b.n	8004db6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	0151      	lsls	r1, r2, #5
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	440a      	add	r2, r1
 8004ce8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cec:	0cdb      	lsrs	r3, r3, #19
 8004cee:	04db      	lsls	r3, r3, #19
 8004cf0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	0151      	lsls	r1, r2, #5
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	440a      	add	r2, r1
 8004d08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d14:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	68da      	ldr	r2, [r3, #12]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	015a      	lsls	r2, r3, #5
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	4413      	add	r3, r2
 8004d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	0151      	lsls	r1, r2, #5
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	440a      	add	r2, r1
 8004d44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d64:	6939      	ldr	r1, [r7, #16]
 8004d66:	0148      	lsls	r0, r1, #5
 8004d68:	6979      	ldr	r1, [r7, #20]
 8004d6a:	4401      	add	r1, r0
 8004d6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d70:	4313      	orrs	r3, r2
 8004d72:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004d74:	79fb      	ldrb	r3, [r7, #7]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d10d      	bne.n	8004d96 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d009      	beq.n	8004d96 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	6919      	ldr	r1, [r3, #16]
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d92:	460a      	mov	r2, r1
 8004d94:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	0151      	lsls	r1, r2, #5
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	440a      	add	r2, r1
 8004dac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004db0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004db4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	371c      	adds	r7, #28
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b087      	sub	sp, #28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	785b      	ldrb	r3, [r3, #1]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d14a      	bne.n	8004e78 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004df6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dfa:	f040 8086 	bne.w	8004f0a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	7812      	ldrb	r2, [r2, #0]
 8004e12:	0151      	lsls	r1, r2, #5
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	440a      	add	r2, r1
 8004e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e20:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	7812      	ldrb	r2, [r2, #0]
 8004e36:	0151      	lsls	r1, r2, #5
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	440a      	add	r2, r1
 8004e3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e44:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d902      	bls.n	8004e5c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	75fb      	strb	r3, [r7, #23]
          break;
 8004e5a:	e056      	b.n	8004f0a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e74:	d0e7      	beq.n	8004e46 <USB_EPStopXfer+0x82>
 8004e76:	e048      	b.n	8004f0a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e90:	d13b      	bne.n	8004f0a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	7812      	ldrb	r2, [r2, #0]
 8004ea6:	0151      	lsls	r1, r2, #5
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	440a      	add	r2, r1
 8004eac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eb0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004eb4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	7812      	ldrb	r2, [r2, #0]
 8004eca:	0151      	lsls	r1, r2, #5
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	440a      	add	r2, r1
 8004ed0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ed4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ed8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	3301      	adds	r3, #1
 8004ede:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f242 7210 	movw	r2, #10000	; 0x2710
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d902      	bls.n	8004ef0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	75fb      	strb	r3, [r7, #23]
          break;
 8004eee:	e00c      	b.n	8004f0a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	015a      	lsls	r2, r3, #5
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f08:	d0e7      	beq.n	8004eda <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	371c      	adds	r7, #28
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b089      	sub	sp, #36	; 0x24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	4611      	mov	r1, r2
 8004f24:	461a      	mov	r2, r3
 8004f26:	460b      	mov	r3, r1
 8004f28:	71fb      	strb	r3, [r7, #7]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004f36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d123      	bne.n	8004f86 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004f3e:	88bb      	ldrh	r3, [r7, #4]
 8004f40:	3303      	adds	r3, #3
 8004f42:	089b      	lsrs	r3, r3, #2
 8004f44:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004f46:	2300      	movs	r3, #0
 8004f48:	61bb      	str	r3, [r7, #24]
 8004f4a:	e018      	b.n	8004f7e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004f4c:	79fb      	ldrb	r3, [r7, #7]
 8004f4e:	031a      	lsls	r2, r3, #12
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f58:	461a      	mov	r2, r3
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	3301      	adds	r3, #1
 8004f64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	3301      	adds	r3, #1
 8004f76:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	61bb      	str	r3, [r7, #24]
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d3e2      	bcc.n	8004f4c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3724      	adds	r7, #36	; 0x24
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b08b      	sub	sp, #44	; 0x2c
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004faa:	88fb      	ldrh	r3, [r7, #6]
 8004fac:	089b      	lsrs	r3, r3, #2
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004fb2:	88fb      	ldrh	r3, [r7, #6]
 8004fb4:	f003 0303 	and.w	r3, r3, #3
 8004fb8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004fba:	2300      	movs	r3, #0
 8004fbc:	623b      	str	r3, [r7, #32]
 8004fbe:	e014      	b.n	8004fea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	601a      	str	r2, [r3, #0]
    pDest++;
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	3301      	adds	r3, #1
 8004fd0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	3301      	adds	r3, #1
 8004fdc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	623b      	str	r3, [r7, #32]
 8004fea:	6a3a      	ldr	r2, [r7, #32]
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d3e6      	bcc.n	8004fc0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004ff2:	8bfb      	ldrh	r3, [r7, #30]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d01e      	beq.n	8005036 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005002:	461a      	mov	r2, r3
 8005004:	f107 0310 	add.w	r3, r7, #16
 8005008:	6812      	ldr	r2, [r2, #0]
 800500a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	6a3b      	ldr	r3, [r7, #32]
 8005010:	b2db      	uxtb	r3, r3
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	fa22 f303 	lsr.w	r3, r2, r3
 8005018:	b2da      	uxtb	r2, r3
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	701a      	strb	r2, [r3, #0]
      i++;
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	3301      	adds	r3, #1
 8005022:	623b      	str	r3, [r7, #32]
      pDest++;
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	3301      	adds	r3, #1
 8005028:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800502a:	8bfb      	ldrh	r3, [r7, #30]
 800502c:	3b01      	subs	r3, #1
 800502e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005030:	8bfb      	ldrh	r3, [r7, #30]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1ea      	bne.n	800500c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005038:	4618      	mov	r0, r3
 800503a:	372c      	adds	r7, #44	; 0x2c
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	785b      	ldrb	r3, [r3, #1]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d12c      	bne.n	80050ba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	db12      	blt.n	8005098 <USB_EPSetStall+0x54>
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00f      	beq.n	8005098 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	0151      	lsls	r1, r2, #5
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	440a      	add	r2, r1
 800508e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005092:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005096:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	0151      	lsls	r1, r2, #5
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	440a      	add	r2, r1
 80050ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050b6:	6013      	str	r3, [r2, #0]
 80050b8:	e02b      	b.n	8005112 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	db12      	blt.n	80050f2 <USB_EPSetStall+0xae>
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00f      	beq.n	80050f2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	0151      	lsls	r1, r2, #5
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	440a      	add	r2, r1
 80050e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050f0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	0151      	lsls	r1, r2, #5
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	440a      	add	r2, r1
 8005108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800510c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005110:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	785b      	ldrb	r3, [r3, #1]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d128      	bne.n	800518e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	0151      	lsls	r1, r2, #5
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	440a      	add	r2, r1
 8005152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005156:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800515a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	791b      	ldrb	r3, [r3, #4]
 8005160:	2b03      	cmp	r3, #3
 8005162:	d003      	beq.n	800516c <USB_EPClearStall+0x4c>
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	791b      	ldrb	r3, [r3, #4]
 8005168:	2b02      	cmp	r3, #2
 800516a:	d138      	bne.n	80051de <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4413      	add	r3, r2
 8005174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	0151      	lsls	r1, r2, #5
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	440a      	add	r2, r1
 8005182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800518a:	6013      	str	r3, [r2, #0]
 800518c:	e027      	b.n	80051de <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	4413      	add	r3, r2
 8005196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	0151      	lsls	r1, r2, #5
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	440a      	add	r2, r1
 80051a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051ac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	791b      	ldrb	r3, [r3, #4]
 80051b2:	2b03      	cmp	r3, #3
 80051b4:	d003      	beq.n	80051be <USB_EPClearStall+0x9e>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	791b      	ldrb	r3, [r3, #4]
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d10f      	bne.n	80051de <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	0151      	lsls	r1, r2, #5
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	440a      	add	r2, r1
 80051d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051dc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	460b      	mov	r3, r1
 80051f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800520a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800520e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	78fb      	ldrb	r3, [r7, #3]
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005220:	68f9      	ldr	r1, [r7, #12]
 8005222:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005226:	4313      	orrs	r3, r2
 8005228:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005252:	f023 0303 	bic.w	r3, r3, #3
 8005256:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005266:	f023 0302 	bic.w	r3, r3, #2
 800526a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800527a:	b480      	push	{r7}
 800527c:	b085      	sub	sp, #20
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005294:	f023 0303 	bic.w	r3, r3, #3
 8005298:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052a8:	f043 0302 	orr.w	r3, r3, #2
 80052ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3714      	adds	r7, #20
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	4013      	ands	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80052d4:	68fb      	ldr	r3, [r7, #12]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b085      	sub	sp, #20
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052fe:	69db      	ldr	r3, [r3, #28]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	4013      	ands	r3, r2
 8005304:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	0c1b      	lsrs	r3, r3, #16
}
 800530a:	4618      	mov	r0, r3
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005316:	b480      	push	{r7}
 8005318:	b085      	sub	sp, #20
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005332:	69db      	ldr	r3, [r3, #28]
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	4013      	ands	r3, r2
 8005338:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	b29b      	uxth	r3, r3
}
 800533e:	4618      	mov	r0, r3
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800534a:	b480      	push	{r7}
 800534c:	b085      	sub	sp, #20
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
 8005352:	460b      	mov	r3, r1
 8005354:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800535a:	78fb      	ldrb	r3, [r7, #3]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	4413      	add	r3, r2
 8005362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	4013      	ands	r3, r2
 8005376:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005378:	68bb      	ldr	r3, [r7, #8]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005386:	b480      	push	{r7}
 8005388:	b087      	sub	sp, #28
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	460b      	mov	r3, r1
 8005390:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80053aa:	78fb      	ldrb	r3, [r7, #3]
 80053ac:	f003 030f 	and.w	r3, r3, #15
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	fa22 f303 	lsr.w	r3, r2, r3
 80053b6:	01db      	lsls	r3, r3, #7
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	4313      	orrs	r3, r2
 80053be:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80053c0:	78fb      	ldrb	r3, [r7, #3]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	4013      	ands	r3, r2
 80053d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80053d4:	68bb      	ldr	r3, [r7, #8]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	371c      	adds	r7, #28
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b083      	sub	sp, #12
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	f003 0301 	and.w	r3, r3, #1
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80053fe:	b480      	push	{r7}
 8005400:	b085      	sub	sp, #20
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005418:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800541c:	f023 0307 	bic.w	r3, r3, #7
 8005420:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005434:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005444:	b480      	push	{r7}
 8005446:	b087      	sub	sp, #28
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	460b      	mov	r3, r1
 800544e:	607a      	str	r2, [r7, #4]
 8005450:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	333c      	adds	r3, #60	; 0x3c
 800545a:	3304      	adds	r3, #4
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	4a26      	ldr	r2, [pc, #152]	; (80054fc <USB_EP0_OutStart+0xb8>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d90a      	bls.n	800547e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005474:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005478:	d101      	bne.n	800547e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800547a:	2300      	movs	r3, #0
 800547c:	e037      	b.n	80054ee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005484:	461a      	mov	r2, r3
 8005486:	2300      	movs	r3, #0
 8005488:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005498:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800549c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054ac:	f043 0318 	orr.w	r3, r3, #24
 80054b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054c0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80054c4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80054c6:	7afb      	ldrb	r3, [r7, #11]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d10f      	bne.n	80054ec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d2:	461a      	mov	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054e6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80054ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	371c      	adds	r7, #28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	4f54300a 	.word	0x4f54300a

08005500 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005508:	2300      	movs	r3, #0
 800550a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	3301      	adds	r3, #1
 8005510:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	4a13      	ldr	r2, [pc, #76]	; (8005564 <USB_CoreReset+0x64>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d901      	bls.n	800551e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e01b      	b.n	8005556 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	2b00      	cmp	r3, #0
 8005524:	daf2      	bge.n	800550c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f043 0201 	orr.w	r2, r3, #1
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	3301      	adds	r3, #1
 800553a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4a09      	ldr	r2, [pc, #36]	; (8005564 <USB_CoreReset+0x64>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d901      	bls.n	8005548 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e006      	b.n	8005556 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b01      	cmp	r3, #1
 8005552:	d0f0      	beq.n	8005536 <USB_CoreReset+0x36>

  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	00030d40 	.word	0x00030d40

08005568 <hx711_lock>:
    __NOP(); __NOP(); __NOP(); __NOP();
  }
}
//#############################################################################################
void hx711_lock(hx711_t *hx711)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  while (hx711->lock)
 8005570:	e002      	b.n	8005578 <hx711_lock+0x10>
    hx711_delay(1);
 8005572:	2001      	movs	r0, #1
 8005574:	f7fc f8b8 	bl	80016e8 <HAL_Delay>
  while (hx711->lock)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	7d1b      	ldrb	r3, [r3, #20]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1f8      	bne.n	8005572 <hx711_lock+0xa>
  hx711->lock = 1;      
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	751a      	strb	r2, [r3, #20]
}
 8005586:	bf00      	nop
 8005588:	3708      	adds	r7, #8
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <hx711_unlock>:
//#############################################################################################
void hx711_unlock(hx711_t *hx711)
{
 800558e:	b480      	push	{r7}
 8005590:	b083      	sub	sp, #12
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  hx711->lock = 0;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	751a      	strb	r2, [r3, #20]
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <hx711_init>:
//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b08a      	sub	sp, #40	; 0x28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	603b      	str	r3, [r7, #0]
 80055b4:	4613      	mov	r3, r2
 80055b6:	80fb      	strh	r3, [r7, #6]
  hx711_lock(hx711);
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f7ff ffd5 	bl	8005568 <hx711_lock>
  hx711->clk_gpio = clk_gpio;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	88fa      	ldrh	r2, [r7, #6]
 80055c8:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80055d4:	815a      	strh	r2, [r3, #10]
  
  GPIO_InitTypeDef  gpio = {0};
 80055d6:	f107 0314 	add.w	r3, r7, #20
 80055da:	2200      	movs	r2, #0
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	605a      	str	r2, [r3, #4]
 80055e0:	609a      	str	r2, [r3, #8]
 80055e2:	60da      	str	r2, [r3, #12]
 80055e4:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80055e6:	2301      	movs	r3, #1
 80055e8:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_NOPULL;
 80055ea:	2300      	movs	r3, #0
 80055ec:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 80055ee:	2302      	movs	r3, #2
 80055f0:	623b      	str	r3, [r7, #32]
  gpio.Pin = clk_pin;
 80055f2:	88fb      	ldrh	r3, [r7, #6]
 80055f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(clk_gpio, &gpio);
 80055f6:	f107 0314 	add.w	r3, r7, #20
 80055fa:	4619      	mov	r1, r3
 80055fc:	68b8      	ldr	r0, [r7, #8]
 80055fe:	f7fc f9a9 	bl	8001954 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8005602:	2300      	movs	r3, #0
 8005604:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_PULLUP;
 8005606:	2301      	movs	r3, #1
 8005608:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 800560a:	2302      	movs	r3, #2
 800560c:	623b      	str	r3, [r7, #32]
  gpio.Pin = dat_pin;
 800560e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005610:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8005612:	f107 0314 	add.w	r3, r7, #20
 8005616:	4619      	mov	r1, r3
 8005618:	6838      	ldr	r0, [r7, #0]
 800561a:	f7fc f99b 	bl	8001954 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6818      	ldr	r0, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	891b      	ldrh	r3, [r3, #8]
 8005626:	2201      	movs	r2, #1
 8005628:	4619      	mov	r1, r3
 800562a:	f7fc fb2f 	bl	8001c8c <HAL_GPIO_WritePin>
  hx711_delay(10);
 800562e:	200a      	movs	r0, #10
 8005630:	f7fc f85a 	bl	80016e8 <HAL_Delay>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6818      	ldr	r0, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	891b      	ldrh	r3, [r3, #8]
 800563c:	2200      	movs	r2, #0
 800563e:	4619      	mov	r1, r3
 8005640:	f7fc fb24 	bl	8001c8c <HAL_GPIO_WritePin>
  hx711_delay(10);  
 8005644:	200a      	movs	r0, #10
 8005646:	f7fc f84f 	bl	80016e8 <HAL_Delay>
  hx711_value(hx711);
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f000 f80a 	bl	8005664 <hx711_value>
  hx711_value(hx711);
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f000 f807 	bl	8005664 <hx711_value>
  hx711_unlock(hx711); 
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f7ff ff99 	bl	800558e <hx711_unlock>
}
 800565c:	bf00      	nop
 800565e:	3728      	adds	r7, #40	; 0x28
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <hx711_value>:
//#############################################################################################
int32_t hx711_value(hx711_t *hx711)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint32_t data = 0;
 800566c:	2300      	movs	r3, #0
 800566e:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 8005670:	f7fc f82e 	bl	80016d0 <HAL_GetTick>
 8005674:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8005676:	e00b      	b.n	8005690 <hx711_value+0x2c>
  {
    hx711_delay(1);
 8005678:	2001      	movs	r0, #1
 800567a:	f7fc f835 	bl	80016e8 <HAL_Delay>
    if(HAL_GetTick() - startTime > 150)
 800567e:	f7fc f827 	bl	80016d0 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2b96      	cmp	r3, #150	; 0x96
 800568a:	d901      	bls.n	8005690 <hx711_value+0x2c>
      return 0;
 800568c:	2300      	movs	r3, #0
 800568e:	e04d      	b.n	800572c <hx711_value+0xc8>
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	895b      	ldrh	r3, [r3, #10]
 8005698:	4619      	mov	r1, r3
 800569a:	4610      	mov	r0, r2
 800569c:	f7fc fade 	bl	8001c5c <HAL_GPIO_ReadPin>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d0e8      	beq.n	8005678 <hx711_value+0x14>
  }
  for(int8_t i=0; i<24 ; i++)
 80056a6:	2300      	movs	r3, #0
 80056a8:	74fb      	strb	r3, [r7, #19]
 80056aa:	e026      	b.n	80056fa <hx711_value+0x96>
  {
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6818      	ldr	r0, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	891b      	ldrh	r3, [r3, #8]
 80056b4:	2201      	movs	r2, #1
 80056b6:	4619      	mov	r1, r3
 80056b8:	f7fc fae8 	bl	8001c8c <HAL_GPIO_WritePin>
    //hx711_delay_us();
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6818      	ldr	r0, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	891b      	ldrh	r3, [r3, #8]
 80056c4:	2200      	movs	r2, #0
 80056c6:	4619      	mov	r1, r3
 80056c8:	f7fc fae0 	bl	8001c8c <HAL_GPIO_WritePin>
    //hx711_delay_us();
    data = data << 1;    
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	617b      	str	r3, [r7, #20]
    if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	895b      	ldrh	r3, [r3, #10]
 80056da:	4619      	mov	r1, r3
 80056dc:	4610      	mov	r0, r2
 80056de:	f7fc fabd 	bl	8001c5c <HAL_GPIO_ReadPin>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d102      	bne.n	80056ee <hx711_value+0x8a>
      data ++;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	3301      	adds	r3, #1
 80056ec:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i<24 ; i++)
 80056ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	3301      	adds	r3, #1
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	74fb      	strb	r3, [r7, #19]
 80056fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80056fe:	2b17      	cmp	r3, #23
 8005700:	ddd4      	ble.n	80056ac <hx711_value+0x48>
  }
  data = data ^ 0x800000; 
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8005708:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6818      	ldr	r0, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	891b      	ldrh	r3, [r3, #8]
 8005712:	2201      	movs	r2, #1
 8005714:	4619      	mov	r1, r3
 8005716:	f7fc fab9 	bl	8001c8c <HAL_GPIO_WritePin>
  //hx711_delay_us();
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6818      	ldr	r0, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	891b      	ldrh	r3, [r3, #8]
 8005722:	2200      	movs	r2, #0
 8005724:	4619      	mov	r1, r3
 8005726:	f7fc fab1 	bl	8001c8c <HAL_GPIO_WritePin>
  //hx711_delay_us();
  return data;    
 800572a:	697b      	ldr	r3, [r7, #20]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3718      	adds	r7, #24
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <hx711_value_ave>:
//#############################################################################################
int32_t hx711_value_ave(hx711_t *hx711, uint16_t sample)
{
 8005734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005738:	b086      	sub	sp, #24
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
 800573e:	460b      	mov	r3, r1
 8005740:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7ff ff10 	bl	8005568 <hx711_lock>
  int64_t  ave = 0;
 8005748:	f04f 0200 	mov.w	r2, #0
 800574c:	f04f 0300 	mov.w	r3, #0
 8005750:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for(uint16_t i=0 ; i<sample ; i++)
 8005754:	2300      	movs	r3, #0
 8005756:	81fb      	strh	r3, [r7, #14]
 8005758:	e014      	b.n	8005784 <hx711_value_ave+0x50>
  {
    ave += hx711_value(hx711);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7ff ff82 	bl	8005664 <hx711_value>
 8005760:	4603      	mov	r3, r0
 8005762:	17da      	asrs	r2, r3, #31
 8005764:	461c      	mov	r4, r3
 8005766:	4615      	mov	r5, r2
 8005768:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800576c:	eb12 0804 	adds.w	r8, r2, r4
 8005770:	eb43 0905 	adc.w	r9, r3, r5
 8005774:	e9c7 8904 	strd	r8, r9, [r7, #16]
    hx711_delay(5);
 8005778:	2005      	movs	r0, #5
 800577a:	f7fb ffb5 	bl	80016e8 <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 800577e:	89fb      	ldrh	r3, [r7, #14]
 8005780:	3301      	adds	r3, #1
 8005782:	81fb      	strh	r3, [r7, #14]
 8005784:	89fa      	ldrh	r2, [r7, #14]
 8005786:	887b      	ldrh	r3, [r7, #2]
 8005788:	429a      	cmp	r2, r3
 800578a:	d3e6      	bcc.n	800575a <hx711_value_ave+0x26>
  }
  int32_t answer = (int32_t)(ave / sample);
 800578c:	887b      	ldrh	r3, [r7, #2]
 800578e:	2200      	movs	r2, #0
 8005790:	469a      	mov	sl, r3
 8005792:	4693      	mov	fp, r2
 8005794:	4652      	mov	r2, sl
 8005796:	465b      	mov	r3, fp
 8005798:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800579c:	f7fb fa0c 	bl	8000bb8 <__aeabi_ldivmod>
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4613      	mov	r3, r2
 80057a6:	60bb      	str	r3, [r7, #8]
  hx711_unlock(hx711);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7ff fef0 	bl	800558e <hx711_unlock>
  return answer;
 80057ae:	68bb      	ldr	r3, [r7, #8]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3718      	adds	r7, #24
 80057b4:	46bd      	mov	sp, r7
 80057b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080057ba <hx711_tare>:
//#############################################################################################
void hx711_tare(hx711_t *hx711, uint16_t sample)
{
 80057ba:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	460b      	mov	r3, r1
 80057c6:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f7ff fecd 	bl	8005568 <hx711_lock>
  int64_t  ave = 0;
 80057ce:	f04f 0200 	mov.w	r2, #0
 80057d2:	f04f 0300 	mov.w	r3, #0
 80057d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for(uint16_t i=0 ; i<sample ; i++)
 80057da:	2300      	movs	r3, #0
 80057dc:	81fb      	strh	r3, [r7, #14]
 80057de:	e014      	b.n	800580a <hx711_tare+0x50>
  {
    ave += hx711_value(hx711);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f7ff ff3f 	bl	8005664 <hx711_value>
 80057e6:	4603      	mov	r3, r0
 80057e8:	17da      	asrs	r2, r3, #31
 80057ea:	461c      	mov	r4, r3
 80057ec:	4615      	mov	r5, r2
 80057ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80057f2:	eb12 0804 	adds.w	r8, r2, r4
 80057f6:	eb43 0905 	adc.w	r9, r3, r5
 80057fa:	e9c7 8904 	strd	r8, r9, [r7, #16]
    hx711_delay(5);
 80057fe:	2005      	movs	r0, #5
 8005800:	f7fb ff72 	bl	80016e8 <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 8005804:	89fb      	ldrh	r3, [r7, #14]
 8005806:	3301      	adds	r3, #1
 8005808:	81fb      	strh	r3, [r7, #14]
 800580a:	89fa      	ldrh	r2, [r7, #14]
 800580c:	887b      	ldrh	r3, [r7, #2]
 800580e:	429a      	cmp	r2, r3
 8005810:	d3e6      	bcc.n	80057e0 <hx711_tare+0x26>
  }
  hx711->offset = (int32_t)(ave / sample);
 8005812:	887b      	ldrh	r3, [r7, #2]
 8005814:	2200      	movs	r2, #0
 8005816:	469a      	mov	sl, r3
 8005818:	4693      	mov	fp, r2
 800581a:	4652      	mov	r2, sl
 800581c:	465b      	mov	r3, fp
 800581e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005822:	f7fb f9c9 	bl	8000bb8 <__aeabi_ldivmod>
 8005826:	4602      	mov	r2, r0
 8005828:	460b      	mov	r3, r1
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	60da      	str	r2, [r3, #12]
  hx711_unlock(hx711);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff fead 	bl	800558e <hx711_unlock>
}
 8005834:	bf00      	nop
 8005836:	3718      	adds	r7, #24
 8005838:	46bd      	mov	sp, r7
 800583a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800583e <hx711_calibration>:
//#############################################################################################
void hx711_calibration(hx711_t *hx711, int32_t noload_raw, int32_t load_raw, float scale)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b084      	sub	sp, #16
 8005842:	af00      	add	r7, sp, #0
 8005844:	60f8      	str	r0, [r7, #12]
 8005846:	60b9      	str	r1, [r7, #8]
 8005848:	607a      	str	r2, [r7, #4]
 800584a:	ed87 0a00 	vstr	s0, [r7]
  hx711_lock(hx711);
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f7ff fe8a 	bl	8005568 <hx711_lock>
  hx711->offset = noload_raw;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	60da      	str	r2, [r3, #12]
  hx711->coef = (load_raw - noload_raw) / scale;  
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	ee07 3a90 	vmov	s15, r3
 8005864:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005868:	ed97 7a00 	vldr	s14, [r7]
 800586c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	edc3 7a04 	vstr	s15, [r3, #16]
  hx711_unlock(hx711);
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f7ff fe89 	bl	800558e <hx711_unlock>
}
 800587c:	bf00      	nop
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <hx711_weight>:
//#############################################################################################
float hx711_weight(hx711_t *hx711, uint16_t sample)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	807b      	strh	r3, [r7, #2]
    ave += hx711_value(hx711);
    hx711_delay(5);
  }
  int32_t data = (int32_t)(ave / sample);
  */
  int32_t data = hx711_value(hx711);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f7ff fee7 	bl	8005664 <hx711_value>
 8005896:	60f8      	str	r0, [r7, #12]
  float answer =  (data - hx711->offset) / hx711->coef;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	ee07 3a90 	vmov	s15, r3
 80058a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	ed93 7a04 	vldr	s14, [r3, #16]
 80058ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058b2:	edc7 7a02 	vstr	s15, [r7, #8]
  //hx711_unlock(hx711);
  return answer;
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	ee07 3a90 	vmov	s15, r3
}
 80058bc:	eeb0 0a67 	vmov.f32	s0, s15
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <hx711_coef_set>:
//#############################################################################################
void hx711_coef_set(hx711_t *hx711, float coef)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b083      	sub	sp, #12
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
 80058ce:	ed87 0a00 	vstr	s0, [r7]
  hx711->coef = coef;  
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	611a      	str	r2, [r3, #16]
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	460b      	mov	r3, r1
 80058ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80058f0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80058f4:	f002 fc8a 	bl	800820c <USBD_static_malloc>
 80058f8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d109      	bne.n	8005914 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	32b0      	adds	r2, #176	; 0xb0
 800590a:	2100      	movs	r1, #0
 800590c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005910:	2302      	movs	r3, #2
 8005912:	e0d4      	b.n	8005abe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005914:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005918:	2100      	movs	r1, #0
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f002 fce4 	bl	80082e8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	32b0      	adds	r2, #176	; 0xb0
 800592a:	68f9      	ldr	r1, [r7, #12]
 800592c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	32b0      	adds	r2, #176	; 0xb0
 800593a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	7c1b      	ldrb	r3, [r3, #16]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d138      	bne.n	80059be <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800594c:	4b5e      	ldr	r3, [pc, #376]	; (8005ac8 <USBD_CDC_Init+0x1e4>)
 800594e:	7819      	ldrb	r1, [r3, #0]
 8005950:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005954:	2202      	movs	r2, #2
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f002 fb35 	bl	8007fc6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800595c:	4b5a      	ldr	r3, [pc, #360]	; (8005ac8 <USBD_CDC_Init+0x1e4>)
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	f003 020f 	and.w	r2, r3, #15
 8005964:	6879      	ldr	r1, [r7, #4]
 8005966:	4613      	mov	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	440b      	add	r3, r1
 8005970:	3324      	adds	r3, #36	; 0x24
 8005972:	2201      	movs	r2, #1
 8005974:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005976:	4b55      	ldr	r3, [pc, #340]	; (8005acc <USBD_CDC_Init+0x1e8>)
 8005978:	7819      	ldrb	r1, [r3, #0]
 800597a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800597e:	2202      	movs	r2, #2
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f002 fb20 	bl	8007fc6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005986:	4b51      	ldr	r3, [pc, #324]	; (8005acc <USBD_CDC_Init+0x1e8>)
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	f003 020f 	and.w	r2, r3, #15
 800598e:	6879      	ldr	r1, [r7, #4]
 8005990:	4613      	mov	r3, r2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	440b      	add	r3, r1
 800599a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800599e:	2201      	movs	r2, #1
 80059a0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80059a2:	4b4b      	ldr	r3, [pc, #300]	; (8005ad0 <USBD_CDC_Init+0x1ec>)
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	f003 020f 	and.w	r2, r3, #15
 80059aa:	6879      	ldr	r1, [r7, #4]
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	440b      	add	r3, r1
 80059b6:	3326      	adds	r3, #38	; 0x26
 80059b8:	2210      	movs	r2, #16
 80059ba:	801a      	strh	r2, [r3, #0]
 80059bc:	e035      	b.n	8005a2a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80059be:	4b42      	ldr	r3, [pc, #264]	; (8005ac8 <USBD_CDC_Init+0x1e4>)
 80059c0:	7819      	ldrb	r1, [r3, #0]
 80059c2:	2340      	movs	r3, #64	; 0x40
 80059c4:	2202      	movs	r2, #2
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f002 fafd 	bl	8007fc6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80059cc:	4b3e      	ldr	r3, [pc, #248]	; (8005ac8 <USBD_CDC_Init+0x1e4>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	f003 020f 	and.w	r2, r3, #15
 80059d4:	6879      	ldr	r1, [r7, #4]
 80059d6:	4613      	mov	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4413      	add	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	440b      	add	r3, r1
 80059e0:	3324      	adds	r3, #36	; 0x24
 80059e2:	2201      	movs	r2, #1
 80059e4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80059e6:	4b39      	ldr	r3, [pc, #228]	; (8005acc <USBD_CDC_Init+0x1e8>)
 80059e8:	7819      	ldrb	r1, [r3, #0]
 80059ea:	2340      	movs	r3, #64	; 0x40
 80059ec:	2202      	movs	r2, #2
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f002 fae9 	bl	8007fc6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80059f4:	4b35      	ldr	r3, [pc, #212]	; (8005acc <USBD_CDC_Init+0x1e8>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	f003 020f 	and.w	r2, r3, #15
 80059fc:	6879      	ldr	r1, [r7, #4]
 80059fe:	4613      	mov	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4413      	add	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	440b      	add	r3, r1
 8005a08:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005a10:	4b2f      	ldr	r3, [pc, #188]	; (8005ad0 <USBD_CDC_Init+0x1ec>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	f003 020f 	and.w	r2, r3, #15
 8005a18:	6879      	ldr	r1, [r7, #4]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	440b      	add	r3, r1
 8005a24:	3326      	adds	r3, #38	; 0x26
 8005a26:	2210      	movs	r2, #16
 8005a28:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a2a:	4b29      	ldr	r3, [pc, #164]	; (8005ad0 <USBD_CDC_Init+0x1ec>)
 8005a2c:	7819      	ldrb	r1, [r3, #0]
 8005a2e:	2308      	movs	r3, #8
 8005a30:	2203      	movs	r2, #3
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f002 fac7 	bl	8007fc6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005a38:	4b25      	ldr	r3, [pc, #148]	; (8005ad0 <USBD_CDC_Init+0x1ec>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	f003 020f 	and.w	r2, r3, #15
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	4613      	mov	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4413      	add	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	440b      	add	r3, r1
 8005a4c:	3324      	adds	r3, #36	; 0x24
 8005a4e:	2201      	movs	r2, #1
 8005a50:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	33b0      	adds	r3, #176	; 0xb0
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4413      	add	r3, r2
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d101      	bne.n	8005a8c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005a88:	2302      	movs	r3, #2
 8005a8a:	e018      	b.n	8005abe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	7c1b      	ldrb	r3, [r3, #16]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10a      	bne.n	8005aaa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a94:	4b0d      	ldr	r3, [pc, #52]	; (8005acc <USBD_CDC_Init+0x1e8>)
 8005a96:	7819      	ldrb	r1, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f002 fb7e 	bl	80081a4 <USBD_LL_PrepareReceive>
 8005aa8:	e008      	b.n	8005abc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005aaa:	4b08      	ldr	r3, [pc, #32]	; (8005acc <USBD_CDC_Init+0x1e8>)
 8005aac:	7819      	ldrb	r1, [r3, #0]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ab4:	2340      	movs	r3, #64	; 0x40
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f002 fb74 	bl	80081a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	200000f7 	.word	0x200000f7
 8005acc:	200000f8 	.word	0x200000f8
 8005ad0:	200000f9 	.word	0x200000f9

08005ad4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	460b      	mov	r3, r1
 8005ade:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005ae0:	4b3a      	ldr	r3, [pc, #232]	; (8005bcc <USBD_CDC_DeInit+0xf8>)
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f002 fa93 	bl	8008012 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005aec:	4b37      	ldr	r3, [pc, #220]	; (8005bcc <USBD_CDC_DeInit+0xf8>)
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	f003 020f 	and.w	r2, r3, #15
 8005af4:	6879      	ldr	r1, [r7, #4]
 8005af6:	4613      	mov	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	440b      	add	r3, r1
 8005b00:	3324      	adds	r3, #36	; 0x24
 8005b02:	2200      	movs	r2, #0
 8005b04:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005b06:	4b32      	ldr	r3, [pc, #200]	; (8005bd0 <USBD_CDC_DeInit+0xfc>)
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f002 fa80 	bl	8008012 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005b12:	4b2f      	ldr	r3, [pc, #188]	; (8005bd0 <USBD_CDC_DeInit+0xfc>)
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	f003 020f 	and.w	r2, r3, #15
 8005b1a:	6879      	ldr	r1, [r7, #4]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	440b      	add	r3, r1
 8005b26:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005b2e:	4b29      	ldr	r3, [pc, #164]	; (8005bd4 <USBD_CDC_DeInit+0x100>)
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	4619      	mov	r1, r3
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f002 fa6c 	bl	8008012 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005b3a:	4b26      	ldr	r3, [pc, #152]	; (8005bd4 <USBD_CDC_DeInit+0x100>)
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	f003 020f 	and.w	r2, r3, #15
 8005b42:	6879      	ldr	r1, [r7, #4]
 8005b44:	4613      	mov	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	440b      	add	r3, r1
 8005b4e:	3324      	adds	r3, #36	; 0x24
 8005b50:	2200      	movs	r2, #0
 8005b52:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005b54:	4b1f      	ldr	r3, [pc, #124]	; (8005bd4 <USBD_CDC_DeInit+0x100>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	f003 020f 	and.w	r2, r3, #15
 8005b5c:	6879      	ldr	r1, [r7, #4]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4413      	add	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	440b      	add	r3, r1
 8005b68:	3326      	adds	r3, #38	; 0x26
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	32b0      	adds	r2, #176	; 0xb0
 8005b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d01f      	beq.n	8005bc0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	33b0      	adds	r3, #176	; 0xb0
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	32b0      	adds	r2, #176	; 0xb0
 8005b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f002 fb40 	bl	8008228 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	32b0      	adds	r2, #176	; 0xb0
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3708      	adds	r7, #8
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	200000f7 	.word	0x200000f7
 8005bd0:	200000f8 	.word	0x200000f8
 8005bd4:	200000f9 	.word	0x200000f9

08005bd8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	32b0      	adds	r2, #176	; 0xb0
 8005bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bf0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e0bf      	b.n	8005d88 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d050      	beq.n	8005cb6 <USBD_CDC_Setup+0xde>
 8005c14:	2b20      	cmp	r3, #32
 8005c16:	f040 80af 	bne.w	8005d78 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	88db      	ldrh	r3, [r3, #6]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d03a      	beq.n	8005c98 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	b25b      	sxtb	r3, r3
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	da1b      	bge.n	8005c64 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	33b0      	adds	r3, #176	; 0xb0
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005c42:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	88d2      	ldrh	r2, [r2, #6]
 8005c48:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	88db      	ldrh	r3, [r3, #6]
 8005c4e:	2b07      	cmp	r3, #7
 8005c50:	bf28      	it	cs
 8005c52:	2307      	movcs	r3, #7
 8005c54:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	89fa      	ldrh	r2, [r7, #14]
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f001 fd89 	bl	8007774 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005c62:	e090      	b.n	8005d86 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	785a      	ldrb	r2, [r3, #1]
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	88db      	ldrh	r3, [r3, #6]
 8005c72:	2b3f      	cmp	r3, #63	; 0x3f
 8005c74:	d803      	bhi.n	8005c7e <USBD_CDC_Setup+0xa6>
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	88db      	ldrh	r3, [r3, #6]
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	e000      	b.n	8005c80 <USBD_CDC_Setup+0xa8>
 8005c7e:	2240      	movs	r2, #64	; 0x40
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005c86:	6939      	ldr	r1, [r7, #16]
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005c8e:	461a      	mov	r2, r3
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f001 fd9b 	bl	80077cc <USBD_CtlPrepareRx>
      break;
 8005c96:	e076      	b.n	8005d86 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	33b0      	adds	r3, #176	; 0xb0
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	7850      	ldrb	r0, [r2, #1]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	6839      	ldr	r1, [r7, #0]
 8005cb2:	4798      	blx	r3
      break;
 8005cb4:	e067      	b.n	8005d86 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	785b      	ldrb	r3, [r3, #1]
 8005cba:	2b0b      	cmp	r3, #11
 8005cbc:	d851      	bhi.n	8005d62 <USBD_CDC_Setup+0x18a>
 8005cbe:	a201      	add	r2, pc, #4	; (adr r2, 8005cc4 <USBD_CDC_Setup+0xec>)
 8005cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc4:	08005cf5 	.word	0x08005cf5
 8005cc8:	08005d71 	.word	0x08005d71
 8005ccc:	08005d63 	.word	0x08005d63
 8005cd0:	08005d63 	.word	0x08005d63
 8005cd4:	08005d63 	.word	0x08005d63
 8005cd8:	08005d63 	.word	0x08005d63
 8005cdc:	08005d63 	.word	0x08005d63
 8005ce0:	08005d63 	.word	0x08005d63
 8005ce4:	08005d63 	.word	0x08005d63
 8005ce8:	08005d63 	.word	0x08005d63
 8005cec:	08005d1f 	.word	0x08005d1f
 8005cf0:	08005d49 	.word	0x08005d49
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b03      	cmp	r3, #3
 8005cfe:	d107      	bne.n	8005d10 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005d00:	f107 030a 	add.w	r3, r7, #10
 8005d04:	2202      	movs	r2, #2
 8005d06:	4619      	mov	r1, r3
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f001 fd33 	bl	8007774 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d0e:	e032      	b.n	8005d76 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005d10:	6839      	ldr	r1, [r7, #0]
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f001 fcbd 	bl	8007692 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	75fb      	strb	r3, [r7, #23]
          break;
 8005d1c:	e02b      	b.n	8005d76 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b03      	cmp	r3, #3
 8005d28:	d107      	bne.n	8005d3a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005d2a:	f107 030d 	add.w	r3, r7, #13
 8005d2e:	2201      	movs	r2, #1
 8005d30:	4619      	mov	r1, r3
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f001 fd1e 	bl	8007774 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d38:	e01d      	b.n	8005d76 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005d3a:	6839      	ldr	r1, [r7, #0]
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f001 fca8 	bl	8007692 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d42:	2303      	movs	r3, #3
 8005d44:	75fb      	strb	r3, [r7, #23]
          break;
 8005d46:	e016      	b.n	8005d76 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b03      	cmp	r3, #3
 8005d52:	d00f      	beq.n	8005d74 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005d54:	6839      	ldr	r1, [r7, #0]
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f001 fc9b 	bl	8007692 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005d60:	e008      	b.n	8005d74 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005d62:	6839      	ldr	r1, [r7, #0]
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f001 fc94 	bl	8007692 <USBD_CtlError>
          ret = USBD_FAIL;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	75fb      	strb	r3, [r7, #23]
          break;
 8005d6e:	e002      	b.n	8005d76 <USBD_CDC_Setup+0x19e>
          break;
 8005d70:	bf00      	nop
 8005d72:	e008      	b.n	8005d86 <USBD_CDC_Setup+0x1ae>
          break;
 8005d74:	bf00      	nop
      }
      break;
 8005d76:	e006      	b.n	8005d86 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005d78:	6839      	ldr	r1, [r7, #0]
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f001 fc89 	bl	8007692 <USBD_CtlError>
      ret = USBD_FAIL;
 8005d80:	2303      	movs	r3, #3
 8005d82:	75fb      	strb	r3, [r7, #23]
      break;
 8005d84:	bf00      	nop
  }

  return (uint8_t)ret;
 8005d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3718      	adds	r7, #24
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	460b      	mov	r3, r1
 8005d9a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005da2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	32b0      	adds	r2, #176	; 0xb0
 8005dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e065      	b.n	8005e86 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	32b0      	adds	r2, #176	; 0xb0
 8005dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dc8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005dca:	78fb      	ldrb	r3, [r7, #3]
 8005dcc:	f003 020f 	and.w	r2, r3, #15
 8005dd0:	6879      	ldr	r1, [r7, #4]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	440b      	add	r3, r1
 8005ddc:	3318      	adds	r3, #24
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d02f      	beq.n	8005e44 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005de4:	78fb      	ldrb	r3, [r7, #3]
 8005de6:	f003 020f 	and.w	r2, r3, #15
 8005dea:	6879      	ldr	r1, [r7, #4]
 8005dec:	4613      	mov	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	440b      	add	r3, r1
 8005df6:	3318      	adds	r3, #24
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	78fb      	ldrb	r3, [r7, #3]
 8005dfc:	f003 010f 	and.w	r1, r3, #15
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	460b      	mov	r3, r1
 8005e04:	00db      	lsls	r3, r3, #3
 8005e06:	440b      	add	r3, r1
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4403      	add	r3, r0
 8005e0c:	3348      	adds	r3, #72	; 0x48
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	fbb2 f1f3 	udiv	r1, r2, r3
 8005e14:	fb01 f303 	mul.w	r3, r1, r3
 8005e18:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d112      	bne.n	8005e44 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005e1e:	78fb      	ldrb	r3, [r7, #3]
 8005e20:	f003 020f 	and.w	r2, r3, #15
 8005e24:	6879      	ldr	r1, [r7, #4]
 8005e26:	4613      	mov	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	440b      	add	r3, r1
 8005e30:	3318      	adds	r3, #24
 8005e32:	2200      	movs	r2, #0
 8005e34:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005e36:	78f9      	ldrb	r1, [r7, #3]
 8005e38:	2300      	movs	r3, #0
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f002 f990 	bl	8008162 <USBD_LL_Transmit>
 8005e42:	e01f      	b.n	8005e84 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	33b0      	adds	r3, #176	; 0xb0
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d010      	beq.n	8005e84 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	33b0      	adds	r3, #176	; 0xb0
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005e80:	78fa      	ldrb	r2, [r7, #3]
 8005e82:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b084      	sub	sp, #16
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
 8005e96:	460b      	mov	r3, r1
 8005e98:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	32b0      	adds	r2, #176	; 0xb0
 8005ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	32b0      	adds	r2, #176	; 0xb0
 8005eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e01a      	b.n	8005ef6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005ec0:	78fb      	ldrb	r3, [r7, #3]
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f002 f98e 	bl	80081e6 <USBD_LL_GetRxDataSize>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	33b0      	adds	r3, #176	; 0xb0
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	4413      	add	r3, r2
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005ef0:	4611      	mov	r1, r2
 8005ef2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b084      	sub	sp, #16
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	32b0      	adds	r2, #176	; 0xb0
 8005f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f14:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d101      	bne.n	8005f20 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e025      	b.n	8005f6c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	33b0      	adds	r3, #176	; 0xb0
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4413      	add	r3, r2
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d01a      	beq.n	8005f6a <USBD_CDC_EP0_RxReady+0x6c>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005f3a:	2bff      	cmp	r3, #255	; 0xff
 8005f3c:	d015      	beq.n	8005f6a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	33b0      	adds	r3, #176	; 0xb0
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005f56:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005f5e:	b292      	uxth	r2, r2
 8005f60:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	22ff      	movs	r2, #255	; 0xff
 8005f66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005f7c:	2182      	movs	r1, #130	; 0x82
 8005f7e:	4818      	ldr	r0, [pc, #96]	; (8005fe0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f80:	f000 fd4f 	bl	8006a22 <USBD_GetEpDesc>
 8005f84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005f86:	2101      	movs	r1, #1
 8005f88:	4815      	ldr	r0, [pc, #84]	; (8005fe0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f8a:	f000 fd4a 	bl	8006a22 <USBD_GetEpDesc>
 8005f8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005f90:	2181      	movs	r1, #129	; 0x81
 8005f92:	4813      	ldr	r0, [pc, #76]	; (8005fe0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f94:	f000 fd45 	bl	8006a22 <USBD_GetEpDesc>
 8005f98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d002      	beq.n	8005fa6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	2210      	movs	r2, #16
 8005fa4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d006      	beq.n	8005fba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fb4:	711a      	strb	r2, [r3, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d006      	beq.n	8005fce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fc8:	711a      	strb	r2, [r3, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2243      	movs	r2, #67	; 0x43
 8005fd2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005fd4:	4b02      	ldr	r3, [pc, #8]	; (8005fe0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3718      	adds	r7, #24
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	200000b4 	.word	0x200000b4

08005fe4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005fec:	2182      	movs	r1, #130	; 0x82
 8005fee:	4818      	ldr	r0, [pc, #96]	; (8006050 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005ff0:	f000 fd17 	bl	8006a22 <USBD_GetEpDesc>
 8005ff4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	4815      	ldr	r0, [pc, #84]	; (8006050 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005ffa:	f000 fd12 	bl	8006a22 <USBD_GetEpDesc>
 8005ffe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006000:	2181      	movs	r1, #129	; 0x81
 8006002:	4813      	ldr	r0, [pc, #76]	; (8006050 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006004:	f000 fd0d 	bl	8006a22 <USBD_GetEpDesc>
 8006008:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	2210      	movs	r2, #16
 8006014:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d006      	beq.n	800602a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	2200      	movs	r2, #0
 8006020:	711a      	strb	r2, [r3, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	f042 0202 	orr.w	r2, r2, #2
 8006028:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d006      	beq.n	800603e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	711a      	strb	r2, [r3, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f042 0202 	orr.w	r2, r2, #2
 800603c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2243      	movs	r2, #67	; 0x43
 8006042:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006044:	4b02      	ldr	r3, [pc, #8]	; (8006050 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006046:	4618      	mov	r0, r3
 8006048:	3718      	adds	r7, #24
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	200000b4 	.word	0x200000b4

08006054 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800605c:	2182      	movs	r1, #130	; 0x82
 800605e:	4818      	ldr	r0, [pc, #96]	; (80060c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006060:	f000 fcdf 	bl	8006a22 <USBD_GetEpDesc>
 8006064:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006066:	2101      	movs	r1, #1
 8006068:	4815      	ldr	r0, [pc, #84]	; (80060c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800606a:	f000 fcda 	bl	8006a22 <USBD_GetEpDesc>
 800606e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006070:	2181      	movs	r1, #129	; 0x81
 8006072:	4813      	ldr	r0, [pc, #76]	; (80060c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006074:	f000 fcd5 	bl	8006a22 <USBD_GetEpDesc>
 8006078:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d002      	beq.n	8006086 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	2210      	movs	r2, #16
 8006084:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d006      	beq.n	800609a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	2200      	movs	r2, #0
 8006090:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006094:	711a      	strb	r2, [r3, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d006      	beq.n	80060ae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060a8:	711a      	strb	r2, [r3, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2243      	movs	r2, #67	; 0x43
 80060b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80060b4:	4b02      	ldr	r3, [pc, #8]	; (80060c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3718      	adds	r7, #24
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	200000b4 	.word	0x200000b4

080060c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	220a      	movs	r2, #10
 80060d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80060d2:	4b03      	ldr	r3, [pc, #12]	; (80060e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	20000070 	.word	0x20000070

080060e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e009      	b.n	800610c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	33b0      	adds	r3, #176	; 0xb0
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	32b0      	adds	r2, #176	; 0xb0
 800612e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006132:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800613a:	2303      	movs	r3, #3
 800613c:	e008      	b.n	8006150 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	371c      	adds	r7, #28
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	32b0      	adds	r2, #176	; 0xb0
 8006170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006174:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800617c:	2303      	movs	r3, #3
 800617e:	e004      	b.n	800618a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3714      	adds	r7, #20
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
	...

08006198 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	32b0      	adds	r2, #176	; 0xb0
 80061aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ae:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80061b0:	2301      	movs	r3, #1
 80061b2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	32b0      	adds	r2, #176	; 0xb0
 80061be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d101      	bne.n	80061ca <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e025      	b.n	8006216 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d11f      	bne.n	8006214 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80061dc:	4b10      	ldr	r3, [pc, #64]	; (8006220 <USBD_CDC_TransmitPacket+0x88>)
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	f003 020f 	and.w	r2, r3, #15
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	4613      	mov	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4403      	add	r3, r0
 80061f6:	3318      	adds	r3, #24
 80061f8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80061fa:	4b09      	ldr	r3, [pc, #36]	; (8006220 <USBD_CDC_TransmitPacket+0x88>)
 80061fc:	7819      	ldrb	r1, [r3, #0]
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f001 ffa9 	bl	8008162 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006210:	2300      	movs	r3, #0
 8006212:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006214:	7bfb      	ldrb	r3, [r7, #15]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	200000f7 	.word	0x200000f7

08006224 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	32b0      	adds	r2, #176	; 0xb0
 8006236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800623a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	32b0      	adds	r2, #176	; 0xb0
 8006246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800624e:	2303      	movs	r3, #3
 8006250:	e018      	b.n	8006284 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	7c1b      	ldrb	r3, [r3, #16]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10a      	bne.n	8006270 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800625a:	4b0c      	ldr	r3, [pc, #48]	; (800628c <USBD_CDC_ReceivePacket+0x68>)
 800625c:	7819      	ldrb	r1, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006264:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f001 ff9b 	bl	80081a4 <USBD_LL_PrepareReceive>
 800626e:	e008      	b.n	8006282 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006270:	4b06      	ldr	r3, [pc, #24]	; (800628c <USBD_CDC_ReceivePacket+0x68>)
 8006272:	7819      	ldrb	r1, [r3, #0]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800627a:	2340      	movs	r3, #64	; 0x40
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f001 ff91 	bl	80081a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	200000f8 	.word	0x200000f8

08006290 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	4613      	mov	r3, r2
 800629c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e01f      	b.n	80062e8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d003      	beq.n	80062ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	79fa      	ldrb	r2, [r7, #7]
 80062da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f001 fe0b 	bl	8007ef8 <USBD_LL_Init>
 80062e2:	4603      	mov	r3, r0
 80062e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80062e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3718      	adds	r7, #24
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006304:	2303      	movs	r3, #3
 8006306:	e025      	b.n	8006354 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	32ae      	adds	r2, #174	; 0xae
 800631a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800631e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00f      	beq.n	8006344 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	32ae      	adds	r2, #174	; 0xae
 800632e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006334:	f107 020e 	add.w	r2, r7, #14
 8006338:	4610      	mov	r0, r2
 800633a:	4798      	blx	r3
 800633c:	4602      	mov	r2, r0
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800634a:	1c5a      	adds	r2, r3, #1
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f001 fe13 	bl	8007f90 <USBD_LL_Start>
 800636a:	4603      	mov	r3, r0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3708      	adds	r7, #8
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800637c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800637e:	4618      	mov	r0, r3
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b084      	sub	sp, #16
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	460b      	mov	r3, r1
 8006394:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006396:	2300      	movs	r3, #0
 8006398:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d009      	beq.n	80063b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	78fa      	ldrb	r2, [r7, #3]
 80063ae:	4611      	mov	r1, r2
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	4798      	blx	r3
 80063b4:	4603      	mov	r3, r0
 80063b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b084      	sub	sp, #16
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	460b      	mov	r3, r1
 80063cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80063ce:	2300      	movs	r3, #0
 80063d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	78fa      	ldrb	r2, [r7, #3]
 80063dc:	4611      	mov	r1, r2
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	4798      	blx	r3
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d001      	beq.n	80063ec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80063e8:	2303      	movs	r3, #3
 80063ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80063ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b084      	sub	sp, #16
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006406:	6839      	ldr	r1, [r7, #0]
 8006408:	4618      	mov	r0, r3
 800640a:	f001 f908 	bl	800761e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800641c:	461a      	mov	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800642a:	f003 031f 	and.w	r3, r3, #31
 800642e:	2b02      	cmp	r3, #2
 8006430:	d01a      	beq.n	8006468 <USBD_LL_SetupStage+0x72>
 8006432:	2b02      	cmp	r3, #2
 8006434:	d822      	bhi.n	800647c <USBD_LL_SetupStage+0x86>
 8006436:	2b00      	cmp	r3, #0
 8006438:	d002      	beq.n	8006440 <USBD_LL_SetupStage+0x4a>
 800643a:	2b01      	cmp	r3, #1
 800643c:	d00a      	beq.n	8006454 <USBD_LL_SetupStage+0x5e>
 800643e:	e01d      	b.n	800647c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006446:	4619      	mov	r1, r3
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 fb5f 	bl	8006b0c <USBD_StdDevReq>
 800644e:	4603      	mov	r3, r0
 8006450:	73fb      	strb	r3, [r7, #15]
      break;
 8006452:	e020      	b.n	8006496 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800645a:	4619      	mov	r1, r3
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fbc7 	bl	8006bf0 <USBD_StdItfReq>
 8006462:	4603      	mov	r3, r0
 8006464:	73fb      	strb	r3, [r7, #15]
      break;
 8006466:	e016      	b.n	8006496 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800646e:	4619      	mov	r1, r3
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fc29 	bl	8006cc8 <USBD_StdEPReq>
 8006476:	4603      	mov	r3, r0
 8006478:	73fb      	strb	r3, [r7, #15]
      break;
 800647a:	e00c      	b.n	8006496 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006482:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006486:	b2db      	uxtb	r3, r3
 8006488:	4619      	mov	r1, r3
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f001 fde0 	bl	8008050 <USBD_LL_StallEP>
 8006490:	4603      	mov	r3, r0
 8006492:	73fb      	strb	r3, [r7, #15]
      break;
 8006494:	bf00      	nop
  }

  return ret;
 8006496:	7bfb      	ldrb	r3, [r7, #15]
}
 8006498:	4618      	mov	r0, r3
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b086      	sub	sp, #24
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	460b      	mov	r3, r1
 80064aa:	607a      	str	r2, [r7, #4]
 80064ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80064ae:	2300      	movs	r3, #0
 80064b0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80064b2:	7afb      	ldrb	r3, [r7, #11]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d16e      	bne.n	8006596 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80064be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	f040 8098 	bne.w	80065fc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	689a      	ldr	r2, [r3, #8]
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d913      	bls.n	8006500 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	689a      	ldr	r2, [r3, #8]
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	1ad2      	subs	r2, r2, r3
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	68da      	ldr	r2, [r3, #12]
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	4293      	cmp	r3, r2
 80064f0:	bf28      	it	cs
 80064f2:	4613      	movcs	r3, r2
 80064f4:	461a      	mov	r2, r3
 80064f6:	6879      	ldr	r1, [r7, #4]
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f001 f984 	bl	8007806 <USBD_CtlContinueRx>
 80064fe:	e07d      	b.n	80065fc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006506:	f003 031f 	and.w	r3, r3, #31
 800650a:	2b02      	cmp	r3, #2
 800650c:	d014      	beq.n	8006538 <USBD_LL_DataOutStage+0x98>
 800650e:	2b02      	cmp	r3, #2
 8006510:	d81d      	bhi.n	800654e <USBD_LL_DataOutStage+0xae>
 8006512:	2b00      	cmp	r3, #0
 8006514:	d002      	beq.n	800651c <USBD_LL_DataOutStage+0x7c>
 8006516:	2b01      	cmp	r3, #1
 8006518:	d003      	beq.n	8006522 <USBD_LL_DataOutStage+0x82>
 800651a:	e018      	b.n	800654e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800651c:	2300      	movs	r3, #0
 800651e:	75bb      	strb	r3, [r7, #22]
            break;
 8006520:	e018      	b.n	8006554 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006528:	b2db      	uxtb	r3, r3
 800652a:	4619      	mov	r1, r3
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f000 fa5e 	bl	80069ee <USBD_CoreFindIF>
 8006532:	4603      	mov	r3, r0
 8006534:	75bb      	strb	r3, [r7, #22]
            break;
 8006536:	e00d      	b.n	8006554 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800653e:	b2db      	uxtb	r3, r3
 8006540:	4619      	mov	r1, r3
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f000 fa60 	bl	8006a08 <USBD_CoreFindEP>
 8006548:	4603      	mov	r3, r0
 800654a:	75bb      	strb	r3, [r7, #22]
            break;
 800654c:	e002      	b.n	8006554 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800654e:	2300      	movs	r3, #0
 8006550:	75bb      	strb	r3, [r7, #22]
            break;
 8006552:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006554:	7dbb      	ldrb	r3, [r7, #22]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d119      	bne.n	800658e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b03      	cmp	r3, #3
 8006564:	d113      	bne.n	800658e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006566:	7dba      	ldrb	r2, [r7, #22]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	32ae      	adds	r2, #174	; 0xae
 800656c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00b      	beq.n	800658e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006576:	7dba      	ldrb	r2, [r7, #22]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800657e:	7dba      	ldrb	r2, [r7, #22]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	32ae      	adds	r2, #174	; 0xae
 8006584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f001 f94a 	bl	8007828 <USBD_CtlSendStatus>
 8006594:	e032      	b.n	80065fc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006596:	7afb      	ldrb	r3, [r7, #11]
 8006598:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800659c:	b2db      	uxtb	r3, r3
 800659e:	4619      	mov	r1, r3
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 fa31 	bl	8006a08 <USBD_CoreFindEP>
 80065a6:	4603      	mov	r3, r0
 80065a8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065aa:	7dbb      	ldrb	r3, [r7, #22]
 80065ac:	2bff      	cmp	r3, #255	; 0xff
 80065ae:	d025      	beq.n	80065fc <USBD_LL_DataOutStage+0x15c>
 80065b0:	7dbb      	ldrb	r3, [r7, #22]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d122      	bne.n	80065fc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b03      	cmp	r3, #3
 80065c0:	d117      	bne.n	80065f2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80065c2:	7dba      	ldrb	r2, [r7, #22]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	32ae      	adds	r2, #174	; 0xae
 80065c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00f      	beq.n	80065f2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80065d2:	7dba      	ldrb	r2, [r7, #22]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80065da:	7dba      	ldrb	r2, [r7, #22]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	32ae      	adds	r2, #174	; 0xae
 80065e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	7afa      	ldrb	r2, [r7, #11]
 80065e8:	4611      	mov	r1, r2
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	4798      	blx	r3
 80065ee:	4603      	mov	r3, r0
 80065f0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80065f2:	7dfb      	ldrb	r3, [r7, #23]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d001      	beq.n	80065fc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80065f8:	7dfb      	ldrb	r3, [r7, #23]
 80065fa:	e000      	b.n	80065fe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3718      	adds	r7, #24
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b086      	sub	sp, #24
 800660a:	af00      	add	r7, sp, #0
 800660c:	60f8      	str	r0, [r7, #12]
 800660e:	460b      	mov	r3, r1
 8006610:	607a      	str	r2, [r7, #4]
 8006612:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006614:	7afb      	ldrb	r3, [r7, #11]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d16f      	bne.n	80066fa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	3314      	adds	r3, #20
 800661e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006626:	2b02      	cmp	r3, #2
 8006628:	d15a      	bne.n	80066e0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	689a      	ldr	r2, [r3, #8]
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	429a      	cmp	r2, r3
 8006634:	d914      	bls.n	8006660 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	689a      	ldr	r2, [r3, #8]
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	1ad2      	subs	r2, r2, r3
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	461a      	mov	r2, r3
 800664a:	6879      	ldr	r1, [r7, #4]
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f001 f8ac 	bl	80077aa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006652:	2300      	movs	r3, #0
 8006654:	2200      	movs	r2, #0
 8006656:	2100      	movs	r1, #0
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f001 fda3 	bl	80081a4 <USBD_LL_PrepareReceive>
 800665e:	e03f      	b.n	80066e0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	68da      	ldr	r2, [r3, #12]
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	429a      	cmp	r2, r3
 800666a:	d11c      	bne.n	80066a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006674:	429a      	cmp	r2, r3
 8006676:	d316      	bcc.n	80066a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006682:	429a      	cmp	r2, r3
 8006684:	d20f      	bcs.n	80066a6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006686:	2200      	movs	r2, #0
 8006688:	2100      	movs	r1, #0
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f001 f88d 	bl	80077aa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006698:	2300      	movs	r3, #0
 800669a:	2200      	movs	r2, #0
 800669c:	2100      	movs	r1, #0
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f001 fd80 	bl	80081a4 <USBD_LL_PrepareReceive>
 80066a4:	e01c      	b.n	80066e0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b03      	cmp	r3, #3
 80066b0:	d10f      	bne.n	80066d2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d009      	beq.n	80066d2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80066d2:	2180      	movs	r1, #128	; 0x80
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f001 fcbb 	bl	8008050 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f001 f8b7 	bl	800784e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d03a      	beq.n	8006760 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f7ff fe42 	bl	8006374 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80066f8:	e032      	b.n	8006760 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80066fa:	7afb      	ldrb	r3, [r7, #11]
 80066fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006700:	b2db      	uxtb	r3, r3
 8006702:	4619      	mov	r1, r3
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 f97f 	bl	8006a08 <USBD_CoreFindEP>
 800670a:	4603      	mov	r3, r0
 800670c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800670e:	7dfb      	ldrb	r3, [r7, #23]
 8006710:	2bff      	cmp	r3, #255	; 0xff
 8006712:	d025      	beq.n	8006760 <USBD_LL_DataInStage+0x15a>
 8006714:	7dfb      	ldrb	r3, [r7, #23]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d122      	bne.n	8006760 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b03      	cmp	r3, #3
 8006724:	d11c      	bne.n	8006760 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006726:	7dfa      	ldrb	r2, [r7, #23]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	32ae      	adds	r2, #174	; 0xae
 800672c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d014      	beq.n	8006760 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006736:	7dfa      	ldrb	r2, [r7, #23]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800673e:	7dfa      	ldrb	r2, [r7, #23]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	32ae      	adds	r2, #174	; 0xae
 8006744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	7afa      	ldrb	r2, [r7, #11]
 800674c:	4611      	mov	r1, r2
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	4798      	blx	r3
 8006752:	4603      	mov	r3, r0
 8006754:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006756:	7dbb      	ldrb	r3, [r7, #22]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d001      	beq.n	8006760 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800675c:	7dbb      	ldrb	r3, [r7, #22]
 800675e:	e000      	b.n	8006762 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3718      	adds	r7, #24
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b084      	sub	sp, #16
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006772:	2300      	movs	r3, #0
 8006774:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d014      	beq.n	80067d0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00e      	beq.n	80067d0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	6852      	ldr	r2, [r2, #4]
 80067be:	b2d2      	uxtb	r2, r2
 80067c0:	4611      	mov	r1, r2
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	4798      	blx	r3
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80067cc:	2303      	movs	r3, #3
 80067ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067d0:	2340      	movs	r3, #64	; 0x40
 80067d2:	2200      	movs	r2, #0
 80067d4:	2100      	movs	r1, #0
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f001 fbf5 	bl	8007fc6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2240      	movs	r2, #64	; 0x40
 80067e8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067ec:	2340      	movs	r3, #64	; 0x40
 80067ee:	2200      	movs	r2, #0
 80067f0:	2180      	movs	r1, #128	; 0x80
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f001 fbe7 	bl	8007fc6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2240      	movs	r2, #64	; 0x40
 8006802:	621a      	str	r2, [r3, #32]

  return ret;
 8006804:	7bfb      	ldrb	r3, [r7, #15]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800680e:	b480      	push	{r7}
 8006810:	b083      	sub	sp, #12
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	460b      	mov	r3, r1
 8006818:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	78fa      	ldrb	r2, [r7, #3]
 800681e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800682e:	b480      	push	{r7}
 8006830:	b083      	sub	sp, #12
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800683c:	b2da      	uxtb	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2204      	movs	r2, #4
 8006848:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800685a:	b480      	push	{r7}
 800685c:	b083      	sub	sp, #12
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006868:	b2db      	uxtb	r3, r3
 800686a:	2b04      	cmp	r3, #4
 800686c:	d106      	bne.n	800687c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006874:	b2da      	uxtb	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b082      	sub	sp, #8
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b03      	cmp	r3, #3
 800689c:	d110      	bne.n	80068c0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00b      	beq.n	80068c0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ae:	69db      	ldr	r3, [r3, #28]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d005      	beq.n	80068c0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ba:	69db      	ldr	r3, [r3, #28]
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3708      	adds	r7, #8
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b082      	sub	sp, #8
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
 80068d2:	460b      	mov	r3, r1
 80068d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	32ae      	adds	r2, #174	; 0xae
 80068e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d101      	bne.n	80068ec <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e01c      	b.n	8006926 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b03      	cmp	r3, #3
 80068f6:	d115      	bne.n	8006924 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	32ae      	adds	r2, #174	; 0xae
 8006902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00b      	beq.n	8006924 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	32ae      	adds	r2, #174	; 0xae
 8006916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	78fa      	ldrb	r2, [r7, #3]
 800691e:	4611      	mov	r1, r2
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3708      	adds	r7, #8
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b082      	sub	sp, #8
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
 8006936:	460b      	mov	r3, r1
 8006938:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	32ae      	adds	r2, #174	; 0xae
 8006944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d101      	bne.n	8006950 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800694c:	2303      	movs	r3, #3
 800694e:	e01c      	b.n	800698a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006956:	b2db      	uxtb	r3, r3
 8006958:	2b03      	cmp	r3, #3
 800695a:	d115      	bne.n	8006988 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	32ae      	adds	r2, #174	; 0xae
 8006966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800696a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00b      	beq.n	8006988 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	32ae      	adds	r2, #174	; 0xae
 800697a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006980:	78fa      	ldrb	r2, [r7, #3]
 8006982:	4611      	mov	r1, r2
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3708      	adds	r7, #8
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006992:	b480      	push	{r7}
 8006994:	b083      	sub	sp, #12
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80069b0:	2300      	movs	r3, #0
 80069b2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00e      	beq.n	80069e4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	6852      	ldr	r2, [r2, #4]
 80069d2:	b2d2      	uxtb	r2, r2
 80069d4:	4611      	mov	r1, r2
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	4798      	blx	r3
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d001      	beq.n	80069e4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80069e0:	2303      	movs	r3, #3
 80069e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b083      	sub	sp, #12
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
 80069f6:	460b      	mov	r3, r1
 80069f8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80069fa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	460b      	mov	r3, r1
 8006a12:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006a14:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b086      	sub	sp, #24
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006a36:	2300      	movs	r3, #0
 8006a38:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	885b      	ldrh	r3, [r3, #2]
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d920      	bls.n	8006a8c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006a52:	e013      	b.n	8006a7c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006a54:	f107 030a 	add.w	r3, r7, #10
 8006a58:	4619      	mov	r1, r3
 8006a5a:	6978      	ldr	r0, [r7, #20]
 8006a5c:	f000 f81b 	bl	8006a96 <USBD_GetNextDesc>
 8006a60:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	785b      	ldrb	r3, [r3, #1]
 8006a66:	2b05      	cmp	r3, #5
 8006a68:	d108      	bne.n	8006a7c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	789b      	ldrb	r3, [r3, #2]
 8006a72:	78fa      	ldrb	r2, [r7, #3]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d008      	beq.n	8006a8a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	885b      	ldrh	r3, [r3, #2]
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	897b      	ldrh	r3, [r7, #10]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d8e5      	bhi.n	8006a54 <USBD_GetEpDesc+0x32>
 8006a88:	e000      	b.n	8006a8c <USBD_GetEpDesc+0x6a>
          break;
 8006a8a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006a8c:	693b      	ldr	r3, [r7, #16]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3718      	adds	r7, #24
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006a96:	b480      	push	{r7}
 8006a98:	b085      	sub	sp, #20
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	881a      	ldrh	r2, [r3, #0]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	4413      	add	r3, r2
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	461a      	mov	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4413      	add	r3, r2
 8006ac0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3714      	adds	r7, #20
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b087      	sub	sp, #28
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006aee:	8a3b      	ldrh	r3, [r7, #16]
 8006af0:	021b      	lsls	r3, r3, #8
 8006af2:	b21a      	sxth	r2, r3
 8006af4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	b21b      	sxth	r3, r3
 8006afc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006afe:	89fb      	ldrh	r3, [r7, #14]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	371c      	adds	r7, #28
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b22:	2b40      	cmp	r3, #64	; 0x40
 8006b24:	d005      	beq.n	8006b32 <USBD_StdDevReq+0x26>
 8006b26:	2b40      	cmp	r3, #64	; 0x40
 8006b28:	d857      	bhi.n	8006bda <USBD_StdDevReq+0xce>
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00f      	beq.n	8006b4e <USBD_StdDevReq+0x42>
 8006b2e:	2b20      	cmp	r3, #32
 8006b30:	d153      	bne.n	8006bda <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	32ae      	adds	r2, #174	; 0xae
 8006b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	6839      	ldr	r1, [r7, #0]
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	4798      	blx	r3
 8006b48:	4603      	mov	r3, r0
 8006b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b4c:	e04a      	b.n	8006be4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	785b      	ldrb	r3, [r3, #1]
 8006b52:	2b09      	cmp	r3, #9
 8006b54:	d83b      	bhi.n	8006bce <USBD_StdDevReq+0xc2>
 8006b56:	a201      	add	r2, pc, #4	; (adr r2, 8006b5c <USBD_StdDevReq+0x50>)
 8006b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5c:	08006bb1 	.word	0x08006bb1
 8006b60:	08006bc5 	.word	0x08006bc5
 8006b64:	08006bcf 	.word	0x08006bcf
 8006b68:	08006bbb 	.word	0x08006bbb
 8006b6c:	08006bcf 	.word	0x08006bcf
 8006b70:	08006b8f 	.word	0x08006b8f
 8006b74:	08006b85 	.word	0x08006b85
 8006b78:	08006bcf 	.word	0x08006bcf
 8006b7c:	08006ba7 	.word	0x08006ba7
 8006b80:	08006b99 	.word	0x08006b99
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006b84:	6839      	ldr	r1, [r7, #0]
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fa3c 	bl	8007004 <USBD_GetDescriptor>
          break;
 8006b8c:	e024      	b.n	8006bd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006b8e:	6839      	ldr	r1, [r7, #0]
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fba1 	bl	80072d8 <USBD_SetAddress>
          break;
 8006b96:	e01f      	b.n	8006bd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006b98:	6839      	ldr	r1, [r7, #0]
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fbe0 	bl	8007360 <USBD_SetConfig>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	73fb      	strb	r3, [r7, #15]
          break;
 8006ba4:	e018      	b.n	8006bd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006ba6:	6839      	ldr	r1, [r7, #0]
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 fc83 	bl	80074b4 <USBD_GetConfig>
          break;
 8006bae:	e013      	b.n	8006bd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006bb0:	6839      	ldr	r1, [r7, #0]
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fcb4 	bl	8007520 <USBD_GetStatus>
          break;
 8006bb8:	e00e      	b.n	8006bd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006bba:	6839      	ldr	r1, [r7, #0]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 fce3 	bl	8007588 <USBD_SetFeature>
          break;
 8006bc2:	e009      	b.n	8006bd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006bc4:	6839      	ldr	r1, [r7, #0]
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 fd07 	bl	80075da <USBD_ClrFeature>
          break;
 8006bcc:	e004      	b.n	8006bd8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006bce:	6839      	ldr	r1, [r7, #0]
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fd5e 	bl	8007692 <USBD_CtlError>
          break;
 8006bd6:	bf00      	nop
      }
      break;
 8006bd8:	e004      	b.n	8006be4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006bda:	6839      	ldr	r1, [r7, #0]
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 fd58 	bl	8007692 <USBD_CtlError>
      break;
 8006be2:	bf00      	nop
  }

  return ret;
 8006be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop

08006bf0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c06:	2b40      	cmp	r3, #64	; 0x40
 8006c08:	d005      	beq.n	8006c16 <USBD_StdItfReq+0x26>
 8006c0a:	2b40      	cmp	r3, #64	; 0x40
 8006c0c:	d852      	bhi.n	8006cb4 <USBD_StdItfReq+0xc4>
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <USBD_StdItfReq+0x26>
 8006c12:	2b20      	cmp	r3, #32
 8006c14:	d14e      	bne.n	8006cb4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d840      	bhi.n	8006ca6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	889b      	ldrh	r3, [r3, #4]
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d836      	bhi.n	8006c9c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	889b      	ldrh	r3, [r3, #4]
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	4619      	mov	r1, r3
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f7ff fed9 	bl	80069ee <USBD_CoreFindIF>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c40:	7bbb      	ldrb	r3, [r7, #14]
 8006c42:	2bff      	cmp	r3, #255	; 0xff
 8006c44:	d01d      	beq.n	8006c82 <USBD_StdItfReq+0x92>
 8006c46:	7bbb      	ldrb	r3, [r7, #14]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d11a      	bne.n	8006c82 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006c4c:	7bba      	ldrb	r2, [r7, #14]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	32ae      	adds	r2, #174	; 0xae
 8006c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00f      	beq.n	8006c7c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006c5c:	7bba      	ldrb	r2, [r7, #14]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006c64:	7bba      	ldrb	r2, [r7, #14]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	32ae      	adds	r2, #174	; 0xae
 8006c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	6839      	ldr	r1, [r7, #0]
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	4798      	blx	r3
 8006c76:	4603      	mov	r3, r0
 8006c78:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c7a:	e004      	b.n	8006c86 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c80:	e001      	b.n	8006c86 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006c82:	2303      	movs	r3, #3
 8006c84:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	88db      	ldrh	r3, [r3, #6]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d110      	bne.n	8006cb0 <USBD_StdItfReq+0xc0>
 8006c8e:	7bfb      	ldrb	r3, [r7, #15]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10d      	bne.n	8006cb0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 fdc7 	bl	8007828 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006c9a:	e009      	b.n	8006cb0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006c9c:	6839      	ldr	r1, [r7, #0]
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 fcf7 	bl	8007692 <USBD_CtlError>
          break;
 8006ca4:	e004      	b.n	8006cb0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006ca6:	6839      	ldr	r1, [r7, #0]
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fcf2 	bl	8007692 <USBD_CtlError>
          break;
 8006cae:	e000      	b.n	8006cb2 <USBD_StdItfReq+0xc2>
          break;
 8006cb0:	bf00      	nop
      }
      break;
 8006cb2:	e004      	b.n	8006cbe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006cb4:	6839      	ldr	r1, [r7, #0]
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 fceb 	bl	8007692 <USBD_CtlError>
      break;
 8006cbc:	bf00      	nop
  }

  return ret;
 8006cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	889b      	ldrh	r3, [r3, #4]
 8006cda:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ce4:	2b40      	cmp	r3, #64	; 0x40
 8006ce6:	d007      	beq.n	8006cf8 <USBD_StdEPReq+0x30>
 8006ce8:	2b40      	cmp	r3, #64	; 0x40
 8006cea:	f200 817f 	bhi.w	8006fec <USBD_StdEPReq+0x324>
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d02a      	beq.n	8006d48 <USBD_StdEPReq+0x80>
 8006cf2:	2b20      	cmp	r3, #32
 8006cf4:	f040 817a 	bne.w	8006fec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006cf8:	7bbb      	ldrb	r3, [r7, #14]
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f7ff fe83 	bl	8006a08 <USBD_CoreFindEP>
 8006d02:	4603      	mov	r3, r0
 8006d04:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d06:	7b7b      	ldrb	r3, [r7, #13]
 8006d08:	2bff      	cmp	r3, #255	; 0xff
 8006d0a:	f000 8174 	beq.w	8006ff6 <USBD_StdEPReq+0x32e>
 8006d0e:	7b7b      	ldrb	r3, [r7, #13]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f040 8170 	bne.w	8006ff6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006d16:	7b7a      	ldrb	r2, [r7, #13]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006d1e:	7b7a      	ldrb	r2, [r7, #13]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	32ae      	adds	r2, #174	; 0xae
 8006d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f000 8163 	beq.w	8006ff6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006d30:	7b7a      	ldrb	r2, [r7, #13]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	32ae      	adds	r2, #174	; 0xae
 8006d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	6839      	ldr	r1, [r7, #0]
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	4798      	blx	r3
 8006d42:	4603      	mov	r3, r0
 8006d44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d46:	e156      	b.n	8006ff6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	785b      	ldrb	r3, [r3, #1]
 8006d4c:	2b03      	cmp	r3, #3
 8006d4e:	d008      	beq.n	8006d62 <USBD_StdEPReq+0x9a>
 8006d50:	2b03      	cmp	r3, #3
 8006d52:	f300 8145 	bgt.w	8006fe0 <USBD_StdEPReq+0x318>
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	f000 809b 	beq.w	8006e92 <USBD_StdEPReq+0x1ca>
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d03c      	beq.n	8006dda <USBD_StdEPReq+0x112>
 8006d60:	e13e      	b.n	8006fe0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d002      	beq.n	8006d74 <USBD_StdEPReq+0xac>
 8006d6e:	2b03      	cmp	r3, #3
 8006d70:	d016      	beq.n	8006da0 <USBD_StdEPReq+0xd8>
 8006d72:	e02c      	b.n	8006dce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d74:	7bbb      	ldrb	r3, [r7, #14]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00d      	beq.n	8006d96 <USBD_StdEPReq+0xce>
 8006d7a:	7bbb      	ldrb	r3, [r7, #14]
 8006d7c:	2b80      	cmp	r3, #128	; 0x80
 8006d7e:	d00a      	beq.n	8006d96 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d80:	7bbb      	ldrb	r3, [r7, #14]
 8006d82:	4619      	mov	r1, r3
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f001 f963 	bl	8008050 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d8a:	2180      	movs	r1, #128	; 0x80
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f001 f95f 	bl	8008050 <USBD_LL_StallEP>
 8006d92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d94:	e020      	b.n	8006dd8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006d96:	6839      	ldr	r1, [r7, #0]
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 fc7a 	bl	8007692 <USBD_CtlError>
              break;
 8006d9e:	e01b      	b.n	8006dd8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	885b      	ldrh	r3, [r3, #2]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10e      	bne.n	8006dc6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006da8:	7bbb      	ldrb	r3, [r7, #14]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00b      	beq.n	8006dc6 <USBD_StdEPReq+0xfe>
 8006dae:	7bbb      	ldrb	r3, [r7, #14]
 8006db0:	2b80      	cmp	r3, #128	; 0x80
 8006db2:	d008      	beq.n	8006dc6 <USBD_StdEPReq+0xfe>
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	88db      	ldrh	r3, [r3, #6]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d104      	bne.n	8006dc6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006dbc:	7bbb      	ldrb	r3, [r7, #14]
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f001 f945 	bl	8008050 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fd2e 	bl	8007828 <USBD_CtlSendStatus>

              break;
 8006dcc:	e004      	b.n	8006dd8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006dce:	6839      	ldr	r1, [r7, #0]
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fc5e 	bl	8007692 <USBD_CtlError>
              break;
 8006dd6:	bf00      	nop
          }
          break;
 8006dd8:	e107      	b.n	8006fea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d002      	beq.n	8006dec <USBD_StdEPReq+0x124>
 8006de6:	2b03      	cmp	r3, #3
 8006de8:	d016      	beq.n	8006e18 <USBD_StdEPReq+0x150>
 8006dea:	e04b      	b.n	8006e84 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006dec:	7bbb      	ldrb	r3, [r7, #14]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00d      	beq.n	8006e0e <USBD_StdEPReq+0x146>
 8006df2:	7bbb      	ldrb	r3, [r7, #14]
 8006df4:	2b80      	cmp	r3, #128	; 0x80
 8006df6:	d00a      	beq.n	8006e0e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006df8:	7bbb      	ldrb	r3, [r7, #14]
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 f927 	bl	8008050 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e02:	2180      	movs	r1, #128	; 0x80
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f001 f923 	bl	8008050 <USBD_LL_StallEP>
 8006e0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e0c:	e040      	b.n	8006e90 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006e0e:	6839      	ldr	r1, [r7, #0]
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 fc3e 	bl	8007692 <USBD_CtlError>
              break;
 8006e16:	e03b      	b.n	8006e90 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	885b      	ldrh	r3, [r3, #2]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d136      	bne.n	8006e8e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006e20:	7bbb      	ldrb	r3, [r7, #14]
 8006e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d004      	beq.n	8006e34 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e2a:	7bbb      	ldrb	r3, [r7, #14]
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f001 f92d 	bl	800808e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 fcf7 	bl	8007828 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006e3a:	7bbb      	ldrb	r3, [r7, #14]
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7ff fde2 	bl	8006a08 <USBD_CoreFindEP>
 8006e44:	4603      	mov	r3, r0
 8006e46:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e48:	7b7b      	ldrb	r3, [r7, #13]
 8006e4a:	2bff      	cmp	r3, #255	; 0xff
 8006e4c:	d01f      	beq.n	8006e8e <USBD_StdEPReq+0x1c6>
 8006e4e:	7b7b      	ldrb	r3, [r7, #13]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d11c      	bne.n	8006e8e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006e54:	7b7a      	ldrb	r2, [r7, #13]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006e5c:	7b7a      	ldrb	r2, [r7, #13]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	32ae      	adds	r2, #174	; 0xae
 8006e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d010      	beq.n	8006e8e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006e6c:	7b7a      	ldrb	r2, [r7, #13]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	32ae      	adds	r2, #174	; 0xae
 8006e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	6839      	ldr	r1, [r7, #0]
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	4798      	blx	r3
 8006e7e:	4603      	mov	r3, r0
 8006e80:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006e82:	e004      	b.n	8006e8e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006e84:	6839      	ldr	r1, [r7, #0]
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fc03 	bl	8007692 <USBD_CtlError>
              break;
 8006e8c:	e000      	b.n	8006e90 <USBD_StdEPReq+0x1c8>
              break;
 8006e8e:	bf00      	nop
          }
          break;
 8006e90:	e0ab      	b.n	8006fea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d002      	beq.n	8006ea4 <USBD_StdEPReq+0x1dc>
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d032      	beq.n	8006f08 <USBD_StdEPReq+0x240>
 8006ea2:	e097      	b.n	8006fd4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ea4:	7bbb      	ldrb	r3, [r7, #14]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d007      	beq.n	8006eba <USBD_StdEPReq+0x1f2>
 8006eaa:	7bbb      	ldrb	r3, [r7, #14]
 8006eac:	2b80      	cmp	r3, #128	; 0x80
 8006eae:	d004      	beq.n	8006eba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fbed 	bl	8007692 <USBD_CtlError>
                break;
 8006eb8:	e091      	b.n	8006fde <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006eba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	da0b      	bge.n	8006eda <USBD_StdEPReq+0x212>
 8006ec2:	7bbb      	ldrb	r3, [r7, #14]
 8006ec4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ec8:	4613      	mov	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	3310      	adds	r3, #16
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	3304      	adds	r3, #4
 8006ed8:	e00b      	b.n	8006ef2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006eda:	7bbb      	ldrb	r3, [r7, #14]
 8006edc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	4413      	add	r3, r2
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	4413      	add	r3, r2
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	2202      	movs	r2, #2
 8006efe:	4619      	mov	r1, r3
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 fc37 	bl	8007774 <USBD_CtlSendData>
              break;
 8006f06:	e06a      	b.n	8006fde <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006f08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	da11      	bge.n	8006f34 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f10:	7bbb      	ldrb	r3, [r7, #14]
 8006f12:	f003 020f 	and.w	r2, r3, #15
 8006f16:	6879      	ldr	r1, [r7, #4]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4413      	add	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	440b      	add	r3, r1
 8006f22:	3324      	adds	r3, #36	; 0x24
 8006f24:	881b      	ldrh	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d117      	bne.n	8006f5a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006f2a:	6839      	ldr	r1, [r7, #0]
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 fbb0 	bl	8007692 <USBD_CtlError>
                  break;
 8006f32:	e054      	b.n	8006fde <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f34:	7bbb      	ldrb	r3, [r7, #14]
 8006f36:	f003 020f 	and.w	r2, r3, #15
 8006f3a:	6879      	ldr	r1, [r7, #4]
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4413      	add	r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	440b      	add	r3, r1
 8006f46:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f4a:	881b      	ldrh	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d104      	bne.n	8006f5a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006f50:	6839      	ldr	r1, [r7, #0]
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fb9d 	bl	8007692 <USBD_CtlError>
                  break;
 8006f58:	e041      	b.n	8006fde <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	da0b      	bge.n	8006f7a <USBD_StdEPReq+0x2b2>
 8006f62:	7bbb      	ldrb	r3, [r7, #14]
 8006f64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f68:	4613      	mov	r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	3310      	adds	r3, #16
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	4413      	add	r3, r2
 8006f76:	3304      	adds	r3, #4
 8006f78:	e00b      	b.n	8006f92 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f7a:	7bbb      	ldrb	r3, [r7, #14]
 8006f7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f80:	4613      	mov	r3, r2
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	4413      	add	r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	4413      	add	r3, r2
 8006f90:	3304      	adds	r3, #4
 8006f92:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f94:	7bbb      	ldrb	r3, [r7, #14]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d002      	beq.n	8006fa0 <USBD_StdEPReq+0x2d8>
 8006f9a:	7bbb      	ldrb	r3, [r7, #14]
 8006f9c:	2b80      	cmp	r3, #128	; 0x80
 8006f9e:	d103      	bne.n	8006fa8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	601a      	str	r2, [r3, #0]
 8006fa6:	e00e      	b.n	8006fc6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006fa8:	7bbb      	ldrb	r3, [r7, #14]
 8006faa:	4619      	mov	r1, r3
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f001 f88d 	bl	80080cc <USBD_LL_IsStallEP>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d003      	beq.n	8006fc0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	601a      	str	r2, [r3, #0]
 8006fbe:	e002      	b.n	8006fc6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	2202      	movs	r2, #2
 8006fca:	4619      	mov	r1, r3
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fbd1 	bl	8007774 <USBD_CtlSendData>
              break;
 8006fd2:	e004      	b.n	8006fde <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006fd4:	6839      	ldr	r1, [r7, #0]
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fb5b 	bl	8007692 <USBD_CtlError>
              break;
 8006fdc:	bf00      	nop
          }
          break;
 8006fde:	e004      	b.n	8006fea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fb55 	bl	8007692 <USBD_CtlError>
          break;
 8006fe8:	bf00      	nop
      }
      break;
 8006fea:	e005      	b.n	8006ff8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006fec:	6839      	ldr	r1, [r7, #0]
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fb4f 	bl	8007692 <USBD_CtlError>
      break;
 8006ff4:	e000      	b.n	8006ff8 <USBD_StdEPReq+0x330>
      break;
 8006ff6:	bf00      	nop
  }

  return ret;
 8006ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
	...

08007004 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800700e:	2300      	movs	r3, #0
 8007010:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007012:	2300      	movs	r3, #0
 8007014:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007016:	2300      	movs	r3, #0
 8007018:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	885b      	ldrh	r3, [r3, #2]
 800701e:	0a1b      	lsrs	r3, r3, #8
 8007020:	b29b      	uxth	r3, r3
 8007022:	3b01      	subs	r3, #1
 8007024:	2b06      	cmp	r3, #6
 8007026:	f200 8128 	bhi.w	800727a <USBD_GetDescriptor+0x276>
 800702a:	a201      	add	r2, pc, #4	; (adr r2, 8007030 <USBD_GetDescriptor+0x2c>)
 800702c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007030:	0800704d 	.word	0x0800704d
 8007034:	08007065 	.word	0x08007065
 8007038:	080070a5 	.word	0x080070a5
 800703c:	0800727b 	.word	0x0800727b
 8007040:	0800727b 	.word	0x0800727b
 8007044:	0800721b 	.word	0x0800721b
 8007048:	08007247 	.word	0x08007247
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	7c12      	ldrb	r2, [r2, #16]
 8007058:	f107 0108 	add.w	r1, r7, #8
 800705c:	4610      	mov	r0, r2
 800705e:	4798      	blx	r3
 8007060:	60f8      	str	r0, [r7, #12]
      break;
 8007062:	e112      	b.n	800728a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	7c1b      	ldrb	r3, [r3, #16]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d10d      	bne.n	8007088 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007074:	f107 0208 	add.w	r2, r7, #8
 8007078:	4610      	mov	r0, r2
 800707a:	4798      	blx	r3
 800707c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	3301      	adds	r3, #1
 8007082:	2202      	movs	r2, #2
 8007084:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007086:	e100      	b.n	800728a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800708e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007090:	f107 0208 	add.w	r2, r7, #8
 8007094:	4610      	mov	r0, r2
 8007096:	4798      	blx	r3
 8007098:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	3301      	adds	r3, #1
 800709e:	2202      	movs	r2, #2
 80070a0:	701a      	strb	r2, [r3, #0]
      break;
 80070a2:	e0f2      	b.n	800728a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	885b      	ldrh	r3, [r3, #2]
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b05      	cmp	r3, #5
 80070ac:	f200 80ac 	bhi.w	8007208 <USBD_GetDescriptor+0x204>
 80070b0:	a201      	add	r2, pc, #4	; (adr r2, 80070b8 <USBD_GetDescriptor+0xb4>)
 80070b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b6:	bf00      	nop
 80070b8:	080070d1 	.word	0x080070d1
 80070bc:	08007105 	.word	0x08007105
 80070c0:	08007139 	.word	0x08007139
 80070c4:	0800716d 	.word	0x0800716d
 80070c8:	080071a1 	.word	0x080071a1
 80070cc:	080071d5 	.word	0x080071d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00b      	beq.n	80070f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	7c12      	ldrb	r2, [r2, #16]
 80070e8:	f107 0108 	add.w	r1, r7, #8
 80070ec:	4610      	mov	r0, r2
 80070ee:	4798      	blx	r3
 80070f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070f2:	e091      	b.n	8007218 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070f4:	6839      	ldr	r1, [r7, #0]
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 facb 	bl	8007692 <USBD_CtlError>
            err++;
 80070fc:	7afb      	ldrb	r3, [r7, #11]
 80070fe:	3301      	adds	r3, #1
 8007100:	72fb      	strb	r3, [r7, #11]
          break;
 8007102:	e089      	b.n	8007218 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00b      	beq.n	8007128 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	7c12      	ldrb	r2, [r2, #16]
 800711c:	f107 0108 	add.w	r1, r7, #8
 8007120:	4610      	mov	r0, r2
 8007122:	4798      	blx	r3
 8007124:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007126:	e077      	b.n	8007218 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 fab1 	bl	8007692 <USBD_CtlError>
            err++;
 8007130:	7afb      	ldrb	r3, [r7, #11]
 8007132:	3301      	adds	r3, #1
 8007134:	72fb      	strb	r3, [r7, #11]
          break;
 8007136:	e06f      	b.n	8007218 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00b      	beq.n	800715c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	7c12      	ldrb	r2, [r2, #16]
 8007150:	f107 0108 	add.w	r1, r7, #8
 8007154:	4610      	mov	r0, r2
 8007156:	4798      	blx	r3
 8007158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800715a:	e05d      	b.n	8007218 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800715c:	6839      	ldr	r1, [r7, #0]
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fa97 	bl	8007692 <USBD_CtlError>
            err++;
 8007164:	7afb      	ldrb	r3, [r7, #11]
 8007166:	3301      	adds	r3, #1
 8007168:	72fb      	strb	r3, [r7, #11]
          break;
 800716a:	e055      	b.n	8007218 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00b      	beq.n	8007190 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	7c12      	ldrb	r2, [r2, #16]
 8007184:	f107 0108 	add.w	r1, r7, #8
 8007188:	4610      	mov	r0, r2
 800718a:	4798      	blx	r3
 800718c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800718e:	e043      	b.n	8007218 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fa7d 	bl	8007692 <USBD_CtlError>
            err++;
 8007198:	7afb      	ldrb	r3, [r7, #11]
 800719a:	3301      	adds	r3, #1
 800719c:	72fb      	strb	r3, [r7, #11]
          break;
 800719e:	e03b      	b.n	8007218 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071a6:	695b      	ldr	r3, [r3, #20]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00b      	beq.n	80071c4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071b2:	695b      	ldr	r3, [r3, #20]
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	7c12      	ldrb	r2, [r2, #16]
 80071b8:	f107 0108 	add.w	r1, r7, #8
 80071bc:	4610      	mov	r0, r2
 80071be:	4798      	blx	r3
 80071c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071c2:	e029      	b.n	8007218 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071c4:	6839      	ldr	r1, [r7, #0]
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 fa63 	bl	8007692 <USBD_CtlError>
            err++;
 80071cc:	7afb      	ldrb	r3, [r7, #11]
 80071ce:	3301      	adds	r3, #1
 80071d0:	72fb      	strb	r3, [r7, #11]
          break;
 80071d2:	e021      	b.n	8007218 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00b      	beq.n	80071f8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	7c12      	ldrb	r2, [r2, #16]
 80071ec:	f107 0108 	add.w	r1, r7, #8
 80071f0:	4610      	mov	r0, r2
 80071f2:	4798      	blx	r3
 80071f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071f6:	e00f      	b.n	8007218 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071f8:	6839      	ldr	r1, [r7, #0]
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fa49 	bl	8007692 <USBD_CtlError>
            err++;
 8007200:	7afb      	ldrb	r3, [r7, #11]
 8007202:	3301      	adds	r3, #1
 8007204:	72fb      	strb	r3, [r7, #11]
          break;
 8007206:	e007      	b.n	8007218 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007208:	6839      	ldr	r1, [r7, #0]
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fa41 	bl	8007692 <USBD_CtlError>
          err++;
 8007210:	7afb      	ldrb	r3, [r7, #11]
 8007212:	3301      	adds	r3, #1
 8007214:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007216:	bf00      	nop
      }
      break;
 8007218:	e037      	b.n	800728a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	7c1b      	ldrb	r3, [r3, #16]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d109      	bne.n	8007236 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800722a:	f107 0208 	add.w	r2, r7, #8
 800722e:	4610      	mov	r0, r2
 8007230:	4798      	blx	r3
 8007232:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007234:	e029      	b.n	800728a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 fa2a 	bl	8007692 <USBD_CtlError>
        err++;
 800723e:	7afb      	ldrb	r3, [r7, #11]
 8007240:	3301      	adds	r3, #1
 8007242:	72fb      	strb	r3, [r7, #11]
      break;
 8007244:	e021      	b.n	800728a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	7c1b      	ldrb	r3, [r3, #16]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d10d      	bne.n	800726a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007256:	f107 0208 	add.w	r2, r7, #8
 800725a:	4610      	mov	r0, r2
 800725c:	4798      	blx	r3
 800725e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	3301      	adds	r3, #1
 8007264:	2207      	movs	r2, #7
 8007266:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007268:	e00f      	b.n	800728a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fa10 	bl	8007692 <USBD_CtlError>
        err++;
 8007272:	7afb      	ldrb	r3, [r7, #11]
 8007274:	3301      	adds	r3, #1
 8007276:	72fb      	strb	r3, [r7, #11]
      break;
 8007278:	e007      	b.n	800728a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800727a:	6839      	ldr	r1, [r7, #0]
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 fa08 	bl	8007692 <USBD_CtlError>
      err++;
 8007282:	7afb      	ldrb	r3, [r7, #11]
 8007284:	3301      	adds	r3, #1
 8007286:	72fb      	strb	r3, [r7, #11]
      break;
 8007288:	bf00      	nop
  }

  if (err != 0U)
 800728a:	7afb      	ldrb	r3, [r7, #11]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d11e      	bne.n	80072ce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	88db      	ldrh	r3, [r3, #6]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d016      	beq.n	80072c6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007298:	893b      	ldrh	r3, [r7, #8]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00e      	beq.n	80072bc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	88da      	ldrh	r2, [r3, #6]
 80072a2:	893b      	ldrh	r3, [r7, #8]
 80072a4:	4293      	cmp	r3, r2
 80072a6:	bf28      	it	cs
 80072a8:	4613      	movcs	r3, r2
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80072ae:	893b      	ldrh	r3, [r7, #8]
 80072b0:	461a      	mov	r2, r3
 80072b2:	68f9      	ldr	r1, [r7, #12]
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fa5d 	bl	8007774 <USBD_CtlSendData>
 80072ba:	e009      	b.n	80072d0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80072bc:	6839      	ldr	r1, [r7, #0]
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f9e7 	bl	8007692 <USBD_CtlError>
 80072c4:	e004      	b.n	80072d0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 faae 	bl	8007828 <USBD_CtlSendStatus>
 80072cc:	e000      	b.n	80072d0 <USBD_GetDescriptor+0x2cc>
    return;
 80072ce:	bf00      	nop
  }
}
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop

080072d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	889b      	ldrh	r3, [r3, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d131      	bne.n	800734e <USBD_SetAddress+0x76>
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	88db      	ldrh	r3, [r3, #6]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d12d      	bne.n	800734e <USBD_SetAddress+0x76>
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	885b      	ldrh	r3, [r3, #2]
 80072f6:	2b7f      	cmp	r3, #127	; 0x7f
 80072f8:	d829      	bhi.n	800734e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	885b      	ldrh	r3, [r3, #2]
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007304:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800730c:	b2db      	uxtb	r3, r3
 800730e:	2b03      	cmp	r3, #3
 8007310:	d104      	bne.n	800731c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007312:	6839      	ldr	r1, [r7, #0]
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f9bc 	bl	8007692 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800731a:	e01d      	b.n	8007358 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	7bfa      	ldrb	r2, [r7, #15]
 8007320:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007324:	7bfb      	ldrb	r3, [r7, #15]
 8007326:	4619      	mov	r1, r3
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 fefb 	bl	8008124 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 fa7a 	bl	8007828 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007334:	7bfb      	ldrb	r3, [r7, #15]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d004      	beq.n	8007344 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2202      	movs	r2, #2
 800733e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007342:	e009      	b.n	8007358 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800734c:	e004      	b.n	8007358 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800734e:	6839      	ldr	r1, [r7, #0]
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 f99e 	bl	8007692 <USBD_CtlError>
  }
}
 8007356:	bf00      	nop
 8007358:	bf00      	nop
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800736a:	2300      	movs	r3, #0
 800736c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	885b      	ldrh	r3, [r3, #2]
 8007372:	b2da      	uxtb	r2, r3
 8007374:	4b4e      	ldr	r3, [pc, #312]	; (80074b0 <USBD_SetConfig+0x150>)
 8007376:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007378:	4b4d      	ldr	r3, [pc, #308]	; (80074b0 <USBD_SetConfig+0x150>)
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d905      	bls.n	800738c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007380:	6839      	ldr	r1, [r7, #0]
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f985 	bl	8007692 <USBD_CtlError>
    return USBD_FAIL;
 8007388:	2303      	movs	r3, #3
 800738a:	e08c      	b.n	80074a6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007392:	b2db      	uxtb	r3, r3
 8007394:	2b02      	cmp	r3, #2
 8007396:	d002      	beq.n	800739e <USBD_SetConfig+0x3e>
 8007398:	2b03      	cmp	r3, #3
 800739a:	d029      	beq.n	80073f0 <USBD_SetConfig+0x90>
 800739c:	e075      	b.n	800748a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800739e:	4b44      	ldr	r3, [pc, #272]	; (80074b0 <USBD_SetConfig+0x150>)
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d020      	beq.n	80073e8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80073a6:	4b42      	ldr	r3, [pc, #264]	; (80074b0 <USBD_SetConfig+0x150>)
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	461a      	mov	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80073b0:	4b3f      	ldr	r3, [pc, #252]	; (80074b0 <USBD_SetConfig+0x150>)
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	4619      	mov	r1, r3
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7fe ffe7 	bl	800638a <USBD_SetClassConfig>
 80073bc:	4603      	mov	r3, r0
 80073be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d008      	beq.n	80073d8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80073c6:	6839      	ldr	r1, [r7, #0]
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f962 	bl	8007692 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2202      	movs	r2, #2
 80073d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80073d6:	e065      	b.n	80074a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 fa25 	bl	8007828 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2203      	movs	r2, #3
 80073e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80073e6:	e05d      	b.n	80074a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fa1d 	bl	8007828 <USBD_CtlSendStatus>
      break;
 80073ee:	e059      	b.n	80074a4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80073f0:	4b2f      	ldr	r3, [pc, #188]	; (80074b0 <USBD_SetConfig+0x150>)
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d112      	bne.n	800741e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2202      	movs	r2, #2
 80073fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007400:	4b2b      	ldr	r3, [pc, #172]	; (80074b0 <USBD_SetConfig+0x150>)
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	461a      	mov	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800740a:	4b29      	ldr	r3, [pc, #164]	; (80074b0 <USBD_SetConfig+0x150>)
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	4619      	mov	r1, r3
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f7fe ffd6 	bl	80063c2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fa06 	bl	8007828 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800741c:	e042      	b.n	80074a4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800741e:	4b24      	ldr	r3, [pc, #144]	; (80074b0 <USBD_SetConfig+0x150>)
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	461a      	mov	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	429a      	cmp	r2, r3
 800742a:	d02a      	beq.n	8007482 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	b2db      	uxtb	r3, r3
 8007432:	4619      	mov	r1, r3
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f7fe ffc4 	bl	80063c2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800743a:	4b1d      	ldr	r3, [pc, #116]	; (80074b0 <USBD_SetConfig+0x150>)
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	461a      	mov	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007444:	4b1a      	ldr	r3, [pc, #104]	; (80074b0 <USBD_SetConfig+0x150>)
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	4619      	mov	r1, r3
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f7fe ff9d 	bl	800638a <USBD_SetClassConfig>
 8007450:	4603      	mov	r3, r0
 8007452:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007454:	7bfb      	ldrb	r3, [r7, #15]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00f      	beq.n	800747a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800745a:	6839      	ldr	r1, [r7, #0]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f918 	bl	8007692 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	b2db      	uxtb	r3, r3
 8007468:	4619      	mov	r1, r3
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7fe ffa9 	bl	80063c2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2202      	movs	r2, #2
 8007474:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007478:	e014      	b.n	80074a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f9d4 	bl	8007828 <USBD_CtlSendStatus>
      break;
 8007480:	e010      	b.n	80074a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f9d0 	bl	8007828 <USBD_CtlSendStatus>
      break;
 8007488:	e00c      	b.n	80074a4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800748a:	6839      	ldr	r1, [r7, #0]
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 f900 	bl	8007692 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007492:	4b07      	ldr	r3, [pc, #28]	; (80074b0 <USBD_SetConfig+0x150>)
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	4619      	mov	r1, r3
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f7fe ff92 	bl	80063c2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800749e:	2303      	movs	r3, #3
 80074a0:	73fb      	strb	r3, [r7, #15]
      break;
 80074a2:	bf00      	nop
  }

  return ret;
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	20000884 	.word	0x20000884

080074b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	88db      	ldrh	r3, [r3, #6]
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d004      	beq.n	80074d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80074c6:	6839      	ldr	r1, [r7, #0]
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f8e2 	bl	8007692 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80074ce:	e023      	b.n	8007518 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b02      	cmp	r3, #2
 80074da:	dc02      	bgt.n	80074e2 <USBD_GetConfig+0x2e>
 80074dc:	2b00      	cmp	r3, #0
 80074de:	dc03      	bgt.n	80074e8 <USBD_GetConfig+0x34>
 80074e0:	e015      	b.n	800750e <USBD_GetConfig+0x5a>
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	d00b      	beq.n	80074fe <USBD_GetConfig+0x4a>
 80074e6:	e012      	b.n	800750e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	3308      	adds	r3, #8
 80074f2:	2201      	movs	r2, #1
 80074f4:	4619      	mov	r1, r3
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f93c 	bl	8007774 <USBD_CtlSendData>
        break;
 80074fc:	e00c      	b.n	8007518 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	3304      	adds	r3, #4
 8007502:	2201      	movs	r2, #1
 8007504:	4619      	mov	r1, r3
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f934 	bl	8007774 <USBD_CtlSendData>
        break;
 800750c:	e004      	b.n	8007518 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800750e:	6839      	ldr	r1, [r7, #0]
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 f8be 	bl	8007692 <USBD_CtlError>
        break;
 8007516:	bf00      	nop
}
 8007518:	bf00      	nop
 800751a:	3708      	adds	r7, #8
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007530:	b2db      	uxtb	r3, r3
 8007532:	3b01      	subs	r3, #1
 8007534:	2b02      	cmp	r3, #2
 8007536:	d81e      	bhi.n	8007576 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	88db      	ldrh	r3, [r3, #6]
 800753c:	2b02      	cmp	r3, #2
 800753e:	d004      	beq.n	800754a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007540:	6839      	ldr	r1, [r7, #0]
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f8a5 	bl	8007692 <USBD_CtlError>
        break;
 8007548:	e01a      	b.n	8007580 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007556:	2b00      	cmp	r3, #0
 8007558:	d005      	beq.n	8007566 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	f043 0202 	orr.w	r2, r3, #2
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	330c      	adds	r3, #12
 800756a:	2202      	movs	r2, #2
 800756c:	4619      	mov	r1, r3
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f900 	bl	8007774 <USBD_CtlSendData>
      break;
 8007574:	e004      	b.n	8007580 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007576:	6839      	ldr	r1, [r7, #0]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f88a 	bl	8007692 <USBD_CtlError>
      break;
 800757e:	bf00      	nop
  }
}
 8007580:	bf00      	nop
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	885b      	ldrh	r3, [r3, #2]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d107      	bne.n	80075aa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f940 	bl	8007828 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80075a8:	e013      	b.n	80075d2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	885b      	ldrh	r3, [r3, #2]
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d10b      	bne.n	80075ca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	889b      	ldrh	r3, [r3, #4]
 80075b6:	0a1b      	lsrs	r3, r3, #8
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f930 	bl	8007828 <USBD_CtlSendStatus>
}
 80075c8:	e003      	b.n	80075d2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f860 	bl	8007692 <USBD_CtlError>
}
 80075d2:	bf00      	nop
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b082      	sub	sp, #8
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	3b01      	subs	r3, #1
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d80b      	bhi.n	800760a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	885b      	ldrh	r3, [r3, #2]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d10c      	bne.n	8007614 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f910 	bl	8007828 <USBD_CtlSendStatus>
      }
      break;
 8007608:	e004      	b.n	8007614 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800760a:	6839      	ldr	r1, [r7, #0]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f840 	bl	8007692 <USBD_CtlError>
      break;
 8007612:	e000      	b.n	8007616 <USBD_ClrFeature+0x3c>
      break;
 8007614:	bf00      	nop
  }
}
 8007616:	bf00      	nop
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b084      	sub	sp, #16
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	781a      	ldrb	r2, [r3, #0]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	3301      	adds	r3, #1
 8007638:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	781a      	ldrb	r2, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	3301      	adds	r3, #1
 8007646:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f7ff fa41 	bl	8006ad0 <SWAPBYTE>
 800764e:	4603      	mov	r3, r0
 8007650:	461a      	mov	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	3301      	adds	r3, #1
 800765a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	3301      	adds	r3, #1
 8007660:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f7ff fa34 	bl	8006ad0 <SWAPBYTE>
 8007668:	4603      	mov	r3, r0
 800766a:	461a      	mov	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	3301      	adds	r3, #1
 8007674:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	3301      	adds	r3, #1
 800767a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f7ff fa27 	bl	8006ad0 <SWAPBYTE>
 8007682:	4603      	mov	r3, r0
 8007684:	461a      	mov	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	80da      	strh	r2, [r3, #6]
}
 800768a:	bf00      	nop
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b082      	sub	sp, #8
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
 800769a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800769c:	2180      	movs	r1, #128	; 0x80
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 fcd6 	bl	8008050 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80076a4:	2100      	movs	r1, #0
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 fcd2 	bl	8008050 <USBD_LL_StallEP>
}
 80076ac:	bf00      	nop
 80076ae:	3708      	adds	r7, #8
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80076c0:	2300      	movs	r3, #0
 80076c2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d036      	beq.n	8007738 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80076ce:	6938      	ldr	r0, [r7, #16]
 80076d0:	f000 f836 	bl	8007740 <USBD_GetLen>
 80076d4:	4603      	mov	r3, r0
 80076d6:	3301      	adds	r3, #1
 80076d8:	b29b      	uxth	r3, r3
 80076da:	005b      	lsls	r3, r3, #1
 80076dc:	b29a      	uxth	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80076e2:	7dfb      	ldrb	r3, [r7, #23]
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	4413      	add	r3, r2
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	7812      	ldrb	r2, [r2, #0]
 80076ec:	701a      	strb	r2, [r3, #0]
  idx++;
 80076ee:	7dfb      	ldrb	r3, [r7, #23]
 80076f0:	3301      	adds	r3, #1
 80076f2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80076f4:	7dfb      	ldrb	r3, [r7, #23]
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	4413      	add	r3, r2
 80076fa:	2203      	movs	r2, #3
 80076fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80076fe:	7dfb      	ldrb	r3, [r7, #23]
 8007700:	3301      	adds	r3, #1
 8007702:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007704:	e013      	b.n	800772e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007706:	7dfb      	ldrb	r3, [r7, #23]
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	4413      	add	r3, r2
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	7812      	ldrb	r2, [r2, #0]
 8007710:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	3301      	adds	r3, #1
 8007716:	613b      	str	r3, [r7, #16]
    idx++;
 8007718:	7dfb      	ldrb	r3, [r7, #23]
 800771a:	3301      	adds	r3, #1
 800771c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800771e:	7dfb      	ldrb	r3, [r7, #23]
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	4413      	add	r3, r2
 8007724:	2200      	movs	r2, #0
 8007726:	701a      	strb	r2, [r3, #0]
    idx++;
 8007728:	7dfb      	ldrb	r3, [r7, #23]
 800772a:	3301      	adds	r3, #1
 800772c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1e7      	bne.n	8007706 <USBD_GetString+0x52>
 8007736:	e000      	b.n	800773a <USBD_GetString+0x86>
    return;
 8007738:	bf00      	nop
  }
}
 800773a:	3718      	adds	r7, #24
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007748:	2300      	movs	r3, #0
 800774a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007750:	e005      	b.n	800775e <USBD_GetLen+0x1e>
  {
    len++;
 8007752:	7bfb      	ldrb	r3, [r7, #15]
 8007754:	3301      	adds	r3, #1
 8007756:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	3301      	adds	r3, #1
 800775c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1f5      	bne.n	8007752 <USBD_GetLen+0x12>
  }

  return len;
 8007766:	7bfb      	ldrb	r3, [r7, #15]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3714      	adds	r7, #20
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2202      	movs	r2, #2
 8007784:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	2100      	movs	r1, #0
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f000 fce1 	bl	8008162 <USBD_LL_Transmit>

  return USBD_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b084      	sub	sp, #16
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	60f8      	str	r0, [r7, #12]
 80077b2:	60b9      	str	r1, [r7, #8]
 80077b4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68ba      	ldr	r2, [r7, #8]
 80077ba:	2100      	movs	r1, #0
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f000 fcd0 	bl	8008162 <USBD_LL_Transmit>

  return USBD_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2203      	movs	r2, #3
 80077dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	2100      	movs	r1, #0
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f000 fcd4 	bl	80081a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b084      	sub	sp, #16
 800780a:	af00      	add	r7, sp, #0
 800780c:	60f8      	str	r0, [r7, #12]
 800780e:	60b9      	str	r1, [r7, #8]
 8007810:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	2100      	movs	r1, #0
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f000 fcc3 	bl	80081a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2204      	movs	r2, #4
 8007834:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007838:	2300      	movs	r3, #0
 800783a:	2200      	movs	r2, #0
 800783c:	2100      	movs	r1, #0
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fc8f 	bl	8008162 <USBD_LL_Transmit>

  return USBD_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3708      	adds	r7, #8
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800784e:	b580      	push	{r7, lr}
 8007850:	b082      	sub	sp, #8
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2205      	movs	r2, #5
 800785a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800785e:	2300      	movs	r3, #0
 8007860:	2200      	movs	r2, #0
 8007862:	2100      	movs	r1, #0
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fc9d 	bl	80081a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3708      	adds	r7, #8
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007878:	2200      	movs	r2, #0
 800787a:	4912      	ldr	r1, [pc, #72]	; (80078c4 <MX_USB_DEVICE_Init+0x50>)
 800787c:	4812      	ldr	r0, [pc, #72]	; (80078c8 <MX_USB_DEVICE_Init+0x54>)
 800787e:	f7fe fd07 	bl	8006290 <USBD_Init>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d001      	beq.n	800788c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007888:	f7f9 fd10 	bl	80012ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800788c:	490f      	ldr	r1, [pc, #60]	; (80078cc <MX_USB_DEVICE_Init+0x58>)
 800788e:	480e      	ldr	r0, [pc, #56]	; (80078c8 <MX_USB_DEVICE_Init+0x54>)
 8007890:	f7fe fd2e 	bl	80062f0 <USBD_RegisterClass>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d001      	beq.n	800789e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800789a:	f7f9 fd07 	bl	80012ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800789e:	490c      	ldr	r1, [pc, #48]	; (80078d0 <MX_USB_DEVICE_Init+0x5c>)
 80078a0:	4809      	ldr	r0, [pc, #36]	; (80078c8 <MX_USB_DEVICE_Init+0x54>)
 80078a2:	f7fe fc1f 	bl	80060e4 <USBD_CDC_RegisterInterface>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d001      	beq.n	80078b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80078ac:	f7f9 fcfe 	bl	80012ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80078b0:	4805      	ldr	r0, [pc, #20]	; (80078c8 <MX_USB_DEVICE_Init+0x54>)
 80078b2:	f7fe fd53 	bl	800635c <USBD_Start>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80078bc:	f7f9 fcf6 	bl	80012ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80078c0:	bf00      	nop
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	20000110 	.word	0x20000110
 80078c8:	20000888 	.word	0x20000888
 80078cc:	2000007c 	.word	0x2000007c
 80078d0:	200000fc 	.word	0x200000fc

080078d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80078d8:	2200      	movs	r2, #0
 80078da:	4905      	ldr	r1, [pc, #20]	; (80078f0 <CDC_Init_FS+0x1c>)
 80078dc:	4805      	ldr	r0, [pc, #20]	; (80078f4 <CDC_Init_FS+0x20>)
 80078de:	f7fe fc1b 	bl	8006118 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80078e2:	4905      	ldr	r1, [pc, #20]	; (80078f8 <CDC_Init_FS+0x24>)
 80078e4:	4803      	ldr	r0, [pc, #12]	; (80078f4 <CDC_Init_FS+0x20>)
 80078e6:	f7fe fc39 	bl	800615c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80078ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	20001364 	.word	0x20001364
 80078f4:	20000888 	.word	0x20000888
 80078f8:	20000b64 	.word	0x20000b64

080078fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80078fc:	b480      	push	{r7}
 80078fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007900:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007902:	4618      	mov	r0, r3
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	4603      	mov	r3, r0
 8007914:	6039      	str	r1, [r7, #0]
 8007916:	71fb      	strb	r3, [r7, #7]
 8007918:	4613      	mov	r3, r2
 800791a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800791c:	79fb      	ldrb	r3, [r7, #7]
 800791e:	2b23      	cmp	r3, #35	; 0x23
 8007920:	d84a      	bhi.n	80079b8 <CDC_Control_FS+0xac>
 8007922:	a201      	add	r2, pc, #4	; (adr r2, 8007928 <CDC_Control_FS+0x1c>)
 8007924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007928:	080079b9 	.word	0x080079b9
 800792c:	080079b9 	.word	0x080079b9
 8007930:	080079b9 	.word	0x080079b9
 8007934:	080079b9 	.word	0x080079b9
 8007938:	080079b9 	.word	0x080079b9
 800793c:	080079b9 	.word	0x080079b9
 8007940:	080079b9 	.word	0x080079b9
 8007944:	080079b9 	.word	0x080079b9
 8007948:	080079b9 	.word	0x080079b9
 800794c:	080079b9 	.word	0x080079b9
 8007950:	080079b9 	.word	0x080079b9
 8007954:	080079b9 	.word	0x080079b9
 8007958:	080079b9 	.word	0x080079b9
 800795c:	080079b9 	.word	0x080079b9
 8007960:	080079b9 	.word	0x080079b9
 8007964:	080079b9 	.word	0x080079b9
 8007968:	080079b9 	.word	0x080079b9
 800796c:	080079b9 	.word	0x080079b9
 8007970:	080079b9 	.word	0x080079b9
 8007974:	080079b9 	.word	0x080079b9
 8007978:	080079b9 	.word	0x080079b9
 800797c:	080079b9 	.word	0x080079b9
 8007980:	080079b9 	.word	0x080079b9
 8007984:	080079b9 	.word	0x080079b9
 8007988:	080079b9 	.word	0x080079b9
 800798c:	080079b9 	.word	0x080079b9
 8007990:	080079b9 	.word	0x080079b9
 8007994:	080079b9 	.word	0x080079b9
 8007998:	080079b9 	.word	0x080079b9
 800799c:	080079b9 	.word	0x080079b9
 80079a0:	080079b9 	.word	0x080079b9
 80079a4:	080079b9 	.word	0x080079b9
 80079a8:	080079b9 	.word	0x080079b9
 80079ac:	080079b9 	.word	0x080079b9
 80079b0:	080079b9 	.word	0x080079b9
 80079b4:	080079b9 	.word	0x080079b9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80079b8:	bf00      	nop
  }

  return (USBD_OK);
 80079ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80079bc:	4618      	mov	r0, r3
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80079d2:	6879      	ldr	r1, [r7, #4]
 80079d4:	4805      	ldr	r0, [pc, #20]	; (80079ec <CDC_Receive_FS+0x24>)
 80079d6:	f7fe fbc1 	bl	800615c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80079da:	4804      	ldr	r0, [pc, #16]	; (80079ec <CDC_Receive_FS+0x24>)
 80079dc:	f7fe fc22 	bl	8006224 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80079e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3708      	adds	r7, #8
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	20000888 	.word	0x20000888

080079f0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	460b      	mov	r3, r1
 80079fa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80079fc:	2300      	movs	r3, #0
 80079fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007a00:	4b0d      	ldr	r3, [pc, #52]	; (8007a38 <CDC_Transmit_FS+0x48>)
 8007a02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a06:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d001      	beq.n	8007a16 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e00b      	b.n	8007a2e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007a16:	887b      	ldrh	r3, [r7, #2]
 8007a18:	461a      	mov	r2, r3
 8007a1a:	6879      	ldr	r1, [r7, #4]
 8007a1c:	4806      	ldr	r0, [pc, #24]	; (8007a38 <CDC_Transmit_FS+0x48>)
 8007a1e:	f7fe fb7b 	bl	8006118 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007a22:	4805      	ldr	r0, [pc, #20]	; (8007a38 <CDC_Transmit_FS+0x48>)
 8007a24:	f7fe fbb8 	bl	8006198 <USBD_CDC_TransmitPacket>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20000888 	.word	0x20000888

08007a3c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b087      	sub	sp, #28
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	4613      	mov	r3, r2
 8007a48:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007a4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	371c      	adds	r7, #28
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr
	...

08007a60 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	4603      	mov	r3, r0
 8007a68:	6039      	str	r1, [r7, #0]
 8007a6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	2212      	movs	r2, #18
 8007a70:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a72:	4b03      	ldr	r3, [pc, #12]	; (8007a80 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr
 8007a80:	2000012c 	.word	0x2000012c

08007a84 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	6039      	str	r1, [r7, #0]
 8007a8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	2204      	movs	r2, #4
 8007a94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a96:	4b03      	ldr	r3, [pc, #12]	; (8007aa4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr
 8007aa4:	20000140 	.word	0x20000140

08007aa8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	4603      	mov	r3, r0
 8007ab0:	6039      	str	r1, [r7, #0]
 8007ab2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ab4:	79fb      	ldrb	r3, [r7, #7]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d105      	bne.n	8007ac6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007aba:	683a      	ldr	r2, [r7, #0]
 8007abc:	4907      	ldr	r1, [pc, #28]	; (8007adc <USBD_FS_ProductStrDescriptor+0x34>)
 8007abe:	4808      	ldr	r0, [pc, #32]	; (8007ae0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ac0:	f7ff fdf8 	bl	80076b4 <USBD_GetString>
 8007ac4:	e004      	b.n	8007ad0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ac6:	683a      	ldr	r2, [r7, #0]
 8007ac8:	4904      	ldr	r1, [pc, #16]	; (8007adc <USBD_FS_ProductStrDescriptor+0x34>)
 8007aca:	4805      	ldr	r0, [pc, #20]	; (8007ae0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007acc:	f7ff fdf2 	bl	80076b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ad0:	4b02      	ldr	r3, [pc, #8]	; (8007adc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3708      	adds	r7, #8
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	20001b64 	.word	0x20001b64
 8007ae0:	0800b0ec 	.word	0x0800b0ec

08007ae4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	4603      	mov	r3, r0
 8007aec:	6039      	str	r1, [r7, #0]
 8007aee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007af0:	683a      	ldr	r2, [r7, #0]
 8007af2:	4904      	ldr	r1, [pc, #16]	; (8007b04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007af4:	4804      	ldr	r0, [pc, #16]	; (8007b08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007af6:	f7ff fddd 	bl	80076b4 <USBD_GetString>
  return USBD_StrDesc;
 8007afa:	4b02      	ldr	r3, [pc, #8]	; (8007b04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	20001b64 	.word	0x20001b64
 8007b08:	0800b104 	.word	0x0800b104

08007b0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	4603      	mov	r3, r0
 8007b14:	6039      	str	r1, [r7, #0]
 8007b16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	221a      	movs	r2, #26
 8007b1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b1e:	f000 f843 	bl	8007ba8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b22:	4b02      	ldr	r3, [pc, #8]	; (8007b2c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	20000144 	.word	0x20000144

08007b30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	4603      	mov	r3, r0
 8007b38:	6039      	str	r1, [r7, #0]
 8007b3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007b3c:	79fb      	ldrb	r3, [r7, #7]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d105      	bne.n	8007b4e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b42:	683a      	ldr	r2, [r7, #0]
 8007b44:	4907      	ldr	r1, [pc, #28]	; (8007b64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b46:	4808      	ldr	r0, [pc, #32]	; (8007b68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b48:	f7ff fdb4 	bl	80076b4 <USBD_GetString>
 8007b4c:	e004      	b.n	8007b58 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b4e:	683a      	ldr	r2, [r7, #0]
 8007b50:	4904      	ldr	r1, [pc, #16]	; (8007b64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b52:	4805      	ldr	r0, [pc, #20]	; (8007b68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b54:	f7ff fdae 	bl	80076b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b58:	4b02      	ldr	r3, [pc, #8]	; (8007b64 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	20001b64 	.word	0x20001b64
 8007b68:	0800b118 	.word	0x0800b118

08007b6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	4603      	mov	r3, r0
 8007b74:	6039      	str	r1, [r7, #0]
 8007b76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b78:	79fb      	ldrb	r3, [r7, #7]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d105      	bne.n	8007b8a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b7e:	683a      	ldr	r2, [r7, #0]
 8007b80:	4907      	ldr	r1, [pc, #28]	; (8007ba0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b82:	4808      	ldr	r0, [pc, #32]	; (8007ba4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b84:	f7ff fd96 	bl	80076b4 <USBD_GetString>
 8007b88:	e004      	b.n	8007b94 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b8a:	683a      	ldr	r2, [r7, #0]
 8007b8c:	4904      	ldr	r1, [pc, #16]	; (8007ba0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b8e:	4805      	ldr	r0, [pc, #20]	; (8007ba4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b90:	f7ff fd90 	bl	80076b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b94:	4b02      	ldr	r3, [pc, #8]	; (8007ba0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	20001b64 	.word	0x20001b64
 8007ba4:	0800b124 	.word	0x0800b124

08007ba8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007bae:	4b0f      	ldr	r3, [pc, #60]	; (8007bec <Get_SerialNum+0x44>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007bb4:	4b0e      	ldr	r3, [pc, #56]	; (8007bf0 <Get_SerialNum+0x48>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007bba:	4b0e      	ldr	r3, [pc, #56]	; (8007bf4 <Get_SerialNum+0x4c>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d009      	beq.n	8007be2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007bce:	2208      	movs	r2, #8
 8007bd0:	4909      	ldr	r1, [pc, #36]	; (8007bf8 <Get_SerialNum+0x50>)
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f000 f814 	bl	8007c00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007bd8:	2204      	movs	r2, #4
 8007bda:	4908      	ldr	r1, [pc, #32]	; (8007bfc <Get_SerialNum+0x54>)
 8007bdc:	68b8      	ldr	r0, [r7, #8]
 8007bde:	f000 f80f 	bl	8007c00 <IntToUnicode>
  }
}
 8007be2:	bf00      	nop
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	1fff7a10 	.word	0x1fff7a10
 8007bf0:	1fff7a14 	.word	0x1fff7a14
 8007bf4:	1fff7a18 	.word	0x1fff7a18
 8007bf8:	20000146 	.word	0x20000146
 8007bfc:	20000156 	.word	0x20000156

08007c00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b087      	sub	sp, #28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c12:	2300      	movs	r3, #0
 8007c14:	75fb      	strb	r3, [r7, #23]
 8007c16:	e027      	b.n	8007c68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	0f1b      	lsrs	r3, r3, #28
 8007c1c:	2b09      	cmp	r3, #9
 8007c1e:	d80b      	bhi.n	8007c38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	0f1b      	lsrs	r3, r3, #28
 8007c24:	b2da      	uxtb	r2, r3
 8007c26:	7dfb      	ldrb	r3, [r7, #23]
 8007c28:	005b      	lsls	r3, r3, #1
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	440b      	add	r3, r1
 8007c30:	3230      	adds	r2, #48	; 0x30
 8007c32:	b2d2      	uxtb	r2, r2
 8007c34:	701a      	strb	r2, [r3, #0]
 8007c36:	e00a      	b.n	8007c4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	0f1b      	lsrs	r3, r3, #28
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	7dfb      	ldrb	r3, [r7, #23]
 8007c40:	005b      	lsls	r3, r3, #1
 8007c42:	4619      	mov	r1, r3
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	440b      	add	r3, r1
 8007c48:	3237      	adds	r2, #55	; 0x37
 8007c4a:	b2d2      	uxtb	r2, r2
 8007c4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	011b      	lsls	r3, r3, #4
 8007c52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c54:	7dfb      	ldrb	r3, [r7, #23]
 8007c56:	005b      	lsls	r3, r3, #1
 8007c58:	3301      	adds	r3, #1
 8007c5a:	68ba      	ldr	r2, [r7, #8]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	2200      	movs	r2, #0
 8007c60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c62:	7dfb      	ldrb	r3, [r7, #23]
 8007c64:	3301      	adds	r3, #1
 8007c66:	75fb      	strb	r3, [r7, #23]
 8007c68:	7dfa      	ldrb	r2, [r7, #23]
 8007c6a:	79fb      	ldrb	r3, [r7, #7]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d3d3      	bcc.n	8007c18 <IntToUnicode+0x18>
  }
}
 8007c70:	bf00      	nop
 8007c72:	bf00      	nop
 8007c74:	371c      	adds	r7, #28
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
	...

08007c80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b08a      	sub	sp, #40	; 0x28
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c88:	f107 0314 	add.w	r3, r7, #20
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	601a      	str	r2, [r3, #0]
 8007c90:	605a      	str	r2, [r3, #4]
 8007c92:	609a      	str	r2, [r3, #8]
 8007c94:	60da      	str	r2, [r3, #12]
 8007c96:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ca0:	d13a      	bne.n	8007d18 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	613b      	str	r3, [r7, #16]
 8007ca6:	4b1e      	ldr	r3, [pc, #120]	; (8007d20 <HAL_PCD_MspInit+0xa0>)
 8007ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007caa:	4a1d      	ldr	r2, [pc, #116]	; (8007d20 <HAL_PCD_MspInit+0xa0>)
 8007cac:	f043 0301 	orr.w	r3, r3, #1
 8007cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8007cb2:	4b1b      	ldr	r3, [pc, #108]	; (8007d20 <HAL_PCD_MspInit+0xa0>)
 8007cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb6:	f003 0301 	and.w	r3, r3, #1
 8007cba:	613b      	str	r3, [r7, #16]
 8007cbc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007cbe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ccc:	2303      	movs	r3, #3
 8007cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007cd0:	230a      	movs	r3, #10
 8007cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cd4:	f107 0314 	add.w	r3, r7, #20
 8007cd8:	4619      	mov	r1, r3
 8007cda:	4812      	ldr	r0, [pc, #72]	; (8007d24 <HAL_PCD_MspInit+0xa4>)
 8007cdc:	f7f9 fe3a 	bl	8001954 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007ce0:	4b0f      	ldr	r3, [pc, #60]	; (8007d20 <HAL_PCD_MspInit+0xa0>)
 8007ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ce4:	4a0e      	ldr	r2, [pc, #56]	; (8007d20 <HAL_PCD_MspInit+0xa0>)
 8007ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cea:	6353      	str	r3, [r2, #52]	; 0x34
 8007cec:	2300      	movs	r3, #0
 8007cee:	60fb      	str	r3, [r7, #12]
 8007cf0:	4b0b      	ldr	r3, [pc, #44]	; (8007d20 <HAL_PCD_MspInit+0xa0>)
 8007cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf4:	4a0a      	ldr	r2, [pc, #40]	; (8007d20 <HAL_PCD_MspInit+0xa0>)
 8007cf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007cfa:	6453      	str	r3, [r2, #68]	; 0x44
 8007cfc:	4b08      	ldr	r3, [pc, #32]	; (8007d20 <HAL_PCD_MspInit+0xa0>)
 8007cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d04:	60fb      	str	r3, [r7, #12]
 8007d06:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007d08:	2200      	movs	r2, #0
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	2043      	movs	r0, #67	; 0x43
 8007d0e:	f7f9 fdea 	bl	80018e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007d12:	2043      	movs	r0, #67	; 0x43
 8007d14:	f7f9 fe03 	bl	800191e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007d18:	bf00      	nop
 8007d1a:	3728      	adds	r7, #40	; 0x28
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	40023800 	.word	0x40023800
 8007d24:	40020000 	.word	0x40020000

08007d28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	4610      	mov	r0, r2
 8007d40:	f7fe fb59 	bl	80063f6 <USBD_LL_SetupStage>
}
 8007d44:	bf00      	nop
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	460b      	mov	r3, r1
 8007d56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007d5e:	78fa      	ldrb	r2, [r7, #3]
 8007d60:	6879      	ldr	r1, [r7, #4]
 8007d62:	4613      	mov	r3, r2
 8007d64:	00db      	lsls	r3, r3, #3
 8007d66:	4413      	add	r3, r2
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	440b      	add	r3, r1
 8007d6c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	78fb      	ldrb	r3, [r7, #3]
 8007d74:	4619      	mov	r1, r3
 8007d76:	f7fe fb93 	bl	80064a0 <USBD_LL_DataOutStage>
}
 8007d7a:	bf00      	nop
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b082      	sub	sp, #8
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007d94:	78fa      	ldrb	r2, [r7, #3]
 8007d96:	6879      	ldr	r1, [r7, #4]
 8007d98:	4613      	mov	r3, r2
 8007d9a:	00db      	lsls	r3, r3, #3
 8007d9c:	4413      	add	r3, r2
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	440b      	add	r3, r1
 8007da2:	334c      	adds	r3, #76	; 0x4c
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	78fb      	ldrb	r3, [r7, #3]
 8007da8:	4619      	mov	r1, r3
 8007daa:	f7fe fc2c 	bl	8006606 <USBD_LL_DataInStage>
}
 8007dae:	bf00      	nop
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b082      	sub	sp, #8
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7fe fd60 	bl	800688a <USBD_LL_SOF>
}
 8007dca:	bf00      	nop
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b084      	sub	sp, #16
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d001      	beq.n	8007dea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007de6:	f7f9 fa61 	bl	80012ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007df0:	7bfa      	ldrb	r2, [r7, #15]
 8007df2:	4611      	mov	r1, r2
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7fe fd0a 	bl	800680e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7fe fcb2 	bl	800676a <USBD_LL_Reset>
}
 8007e06:	bf00      	nop
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
	...

08007e10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fe fd05 	bl	800682e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	6812      	ldr	r2, [r2, #0]
 8007e32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e36:	f043 0301 	orr.w	r3, r3, #1
 8007e3a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a1b      	ldr	r3, [r3, #32]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d005      	beq.n	8007e50 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e44:	4b04      	ldr	r3, [pc, #16]	; (8007e58 <HAL_PCD_SuspendCallback+0x48>)
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	4a03      	ldr	r2, [pc, #12]	; (8007e58 <HAL_PCD_SuspendCallback+0x48>)
 8007e4a:	f043 0306 	orr.w	r3, r3, #6
 8007e4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e50:	bf00      	nop
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	e000ed00 	.word	0xe000ed00

08007e5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fe fcf5 	bl	800685a <USBD_LL_Resume>
}
 8007e70:	bf00      	nop
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	460b      	mov	r3, r1
 8007e82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e8a:	78fa      	ldrb	r2, [r7, #3]
 8007e8c:	4611      	mov	r1, r2
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7fe fd4d 	bl	800692e <USBD_LL_IsoOUTIncomplete>
}
 8007e94:	bf00      	nop
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007eae:	78fa      	ldrb	r2, [r7, #3]
 8007eb0:	4611      	mov	r1, r2
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fe fd09 	bl	80068ca <USBD_LL_IsoINIncomplete>
}
 8007eb8:	bf00      	nop
 8007eba:	3708      	adds	r7, #8
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fe fd5f 	bl	8006992 <USBD_LL_DevConnected>
}
 8007ed4:	bf00      	nop
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fe fd5c 	bl	80069a8 <USBD_LL_DevDisconnected>
}
 8007ef0:	bf00      	nop
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d13c      	bne.n	8007f82 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007f08:	4a20      	ldr	r2, [pc, #128]	; (8007f8c <USBD_LL_Init+0x94>)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a1e      	ldr	r2, [pc, #120]	; (8007f8c <USBD_LL_Init+0x94>)
 8007f14:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007f18:	4b1c      	ldr	r3, [pc, #112]	; (8007f8c <USBD_LL_Init+0x94>)
 8007f1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007f1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007f20:	4b1a      	ldr	r3, [pc, #104]	; (8007f8c <USBD_LL_Init+0x94>)
 8007f22:	2204      	movs	r2, #4
 8007f24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007f26:	4b19      	ldr	r3, [pc, #100]	; (8007f8c <USBD_LL_Init+0x94>)
 8007f28:	2202      	movs	r2, #2
 8007f2a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007f2c:	4b17      	ldr	r3, [pc, #92]	; (8007f8c <USBD_LL_Init+0x94>)
 8007f2e:	2200      	movs	r2, #0
 8007f30:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007f32:	4b16      	ldr	r3, [pc, #88]	; (8007f8c <USBD_LL_Init+0x94>)
 8007f34:	2202      	movs	r2, #2
 8007f36:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007f38:	4b14      	ldr	r3, [pc, #80]	; (8007f8c <USBD_LL_Init+0x94>)
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007f3e:	4b13      	ldr	r3, [pc, #76]	; (8007f8c <USBD_LL_Init+0x94>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007f44:	4b11      	ldr	r3, [pc, #68]	; (8007f8c <USBD_LL_Init+0x94>)
 8007f46:	2200      	movs	r2, #0
 8007f48:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007f4a:	4b10      	ldr	r3, [pc, #64]	; (8007f8c <USBD_LL_Init+0x94>)
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007f50:	4b0e      	ldr	r3, [pc, #56]	; (8007f8c <USBD_LL_Init+0x94>)
 8007f52:	2200      	movs	r2, #0
 8007f54:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007f56:	480d      	ldr	r0, [pc, #52]	; (8007f8c <USBD_LL_Init+0x94>)
 8007f58:	f7f9 fff6 	bl	8001f48 <HAL_PCD_Init>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d001      	beq.n	8007f66 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007f62:	f7f9 f9a3 	bl	80012ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007f66:	2180      	movs	r1, #128	; 0x80
 8007f68:	4808      	ldr	r0, [pc, #32]	; (8007f8c <USBD_LL_Init+0x94>)
 8007f6a:	f7fb fa4e 	bl	800340a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007f6e:	2240      	movs	r2, #64	; 0x40
 8007f70:	2100      	movs	r1, #0
 8007f72:	4806      	ldr	r0, [pc, #24]	; (8007f8c <USBD_LL_Init+0x94>)
 8007f74:	f7fb fa02 	bl	800337c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007f78:	2280      	movs	r2, #128	; 0x80
 8007f7a:	2101      	movs	r1, #1
 8007f7c:	4803      	ldr	r0, [pc, #12]	; (8007f8c <USBD_LL_Init+0x94>)
 8007f7e:	f7fb f9fd 	bl	800337c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3708      	adds	r7, #8
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	20001d64 	.word	0x20001d64

08007f90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fa f8eb 	bl	8002182 <HAL_PCD_Start>
 8007fac:	4603      	mov	r3, r0
 8007fae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 f942 	bl	800823c <USBD_Get_USB_Status>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b084      	sub	sp, #16
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
 8007fce:	4608      	mov	r0, r1
 8007fd0:	4611      	mov	r1, r2
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	70fb      	strb	r3, [r7, #3]
 8007fd8:	460b      	mov	r3, r1
 8007fda:	70bb      	strb	r3, [r7, #2]
 8007fdc:	4613      	mov	r3, r2
 8007fde:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007fee:	78bb      	ldrb	r3, [r7, #2]
 8007ff0:	883a      	ldrh	r2, [r7, #0]
 8007ff2:	78f9      	ldrb	r1, [r7, #3]
 8007ff4:	f7fa fdbc 	bl	8002b70 <HAL_PCD_EP_Open>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ffc:	7bfb      	ldrb	r3, [r7, #15]
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 f91c 	bl	800823c <USBD_Get_USB_Status>
 8008004:	4603      	mov	r3, r0
 8008006:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008008:	7bbb      	ldrb	r3, [r7, #14]
}
 800800a:	4618      	mov	r0, r3
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b084      	sub	sp, #16
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
 800801a:	460b      	mov	r3, r1
 800801c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800801e:	2300      	movs	r3, #0
 8008020:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008022:	2300      	movs	r3, #0
 8008024:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800802c:	78fa      	ldrb	r2, [r7, #3]
 800802e:	4611      	mov	r1, r2
 8008030:	4618      	mov	r0, r3
 8008032:	f7fa fe05 	bl	8002c40 <HAL_PCD_EP_Close>
 8008036:	4603      	mov	r3, r0
 8008038:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800803a:	7bfb      	ldrb	r3, [r7, #15]
 800803c:	4618      	mov	r0, r3
 800803e:	f000 f8fd 	bl	800823c <USBD_Get_USB_Status>
 8008042:	4603      	mov	r3, r0
 8008044:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008046:	7bbb      	ldrb	r3, [r7, #14]
}
 8008048:	4618      	mov	r0, r3
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	460b      	mov	r3, r1
 800805a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800805c:	2300      	movs	r3, #0
 800805e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008060:	2300      	movs	r3, #0
 8008062:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800806a:	78fa      	ldrb	r2, [r7, #3]
 800806c:	4611      	mov	r1, r2
 800806e:	4618      	mov	r0, r3
 8008070:	f7fa fedd 	bl	8002e2e <HAL_PCD_EP_SetStall>
 8008074:	4603      	mov	r3, r0
 8008076:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008078:	7bfb      	ldrb	r3, [r7, #15]
 800807a:	4618      	mov	r0, r3
 800807c:	f000 f8de 	bl	800823c <USBD_Get_USB_Status>
 8008080:	4603      	mov	r3, r0
 8008082:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008084:	7bbb      	ldrb	r3, [r7, #14]
}
 8008086:	4618      	mov	r0, r3
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b084      	sub	sp, #16
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
 8008096:	460b      	mov	r3, r1
 8008098:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800809e:	2300      	movs	r3, #0
 80080a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080a8:	78fa      	ldrb	r2, [r7, #3]
 80080aa:	4611      	mov	r1, r2
 80080ac:	4618      	mov	r0, r3
 80080ae:	f7fa ff22 	bl	8002ef6 <HAL_PCD_EP_ClrStall>
 80080b2:	4603      	mov	r3, r0
 80080b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080b6:	7bfb      	ldrb	r3, [r7, #15]
 80080b8:	4618      	mov	r0, r3
 80080ba:	f000 f8bf 	bl	800823c <USBD_Get_USB_Status>
 80080be:	4603      	mov	r3, r0
 80080c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	460b      	mov	r3, r1
 80080d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80080e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	da0b      	bge.n	8008100 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80080e8:	78fb      	ldrb	r3, [r7, #3]
 80080ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080ee:	68f9      	ldr	r1, [r7, #12]
 80080f0:	4613      	mov	r3, r2
 80080f2:	00db      	lsls	r3, r3, #3
 80080f4:	4413      	add	r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	440b      	add	r3, r1
 80080fa:	333e      	adds	r3, #62	; 0x3e
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	e00b      	b.n	8008118 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008100:	78fb      	ldrb	r3, [r7, #3]
 8008102:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008106:	68f9      	ldr	r1, [r7, #12]
 8008108:	4613      	mov	r3, r2
 800810a:	00db      	lsls	r3, r3, #3
 800810c:	4413      	add	r3, r2
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	440b      	add	r3, r1
 8008112:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008116:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008118:	4618      	mov	r0, r3
 800811a:	3714      	adds	r7, #20
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	460b      	mov	r3, r1
 800812e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008130:	2300      	movs	r3, #0
 8008132:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800813e:	78fa      	ldrb	r2, [r7, #3]
 8008140:	4611      	mov	r1, r2
 8008142:	4618      	mov	r0, r3
 8008144:	f7fa fcef 	bl	8002b26 <HAL_PCD_SetAddress>
 8008148:	4603      	mov	r3, r0
 800814a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800814c:	7bfb      	ldrb	r3, [r7, #15]
 800814e:	4618      	mov	r0, r3
 8008150:	f000 f874 	bl	800823c <USBD_Get_USB_Status>
 8008154:	4603      	mov	r3, r0
 8008156:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008158:	7bbb      	ldrb	r3, [r7, #14]
}
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b086      	sub	sp, #24
 8008166:	af00      	add	r7, sp, #0
 8008168:	60f8      	str	r0, [r7, #12]
 800816a:	607a      	str	r2, [r7, #4]
 800816c:	603b      	str	r3, [r7, #0]
 800816e:	460b      	mov	r3, r1
 8008170:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008180:	7af9      	ldrb	r1, [r7, #11]
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	f7fa fe08 	bl	8002d9a <HAL_PCD_EP_Transmit>
 800818a:	4603      	mov	r3, r0
 800818c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800818e:	7dfb      	ldrb	r3, [r7, #23]
 8008190:	4618      	mov	r0, r3
 8008192:	f000 f853 	bl	800823c <USBD_Get_USB_Status>
 8008196:	4603      	mov	r3, r0
 8008198:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800819a:	7dbb      	ldrb	r3, [r7, #22]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3718      	adds	r7, #24
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	607a      	str	r2, [r7, #4]
 80081ae:	603b      	str	r3, [r7, #0]
 80081b0:	460b      	mov	r3, r1
 80081b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081b4:	2300      	movs	r3, #0
 80081b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80081c2:	7af9      	ldrb	r1, [r7, #11]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	f7fa fd84 	bl	8002cd4 <HAL_PCD_EP_Receive>
 80081cc:	4603      	mov	r3, r0
 80081ce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081d0:	7dfb      	ldrb	r3, [r7, #23]
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 f832 	bl	800823c <USBD_Get_USB_Status>
 80081d8:	4603      	mov	r3, r0
 80081da:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80081dc:	7dbb      	ldrb	r3, [r7, #22]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3718      	adds	r7, #24
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b082      	sub	sp, #8
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	460b      	mov	r3, r1
 80081f0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80081f8:	78fa      	ldrb	r2, [r7, #3]
 80081fa:	4611      	mov	r1, r2
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7fa fdb4 	bl	8002d6a <HAL_PCD_EP_GetRxCount>
 8008202:	4603      	mov	r3, r0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3708      	adds	r7, #8
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008214:	4b03      	ldr	r3, [pc, #12]	; (8008224 <USBD_static_malloc+0x18>)
}
 8008216:	4618      	mov	r0, r3
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	20002270 	.word	0x20002270

08008228 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]

}
 8008230:	bf00      	nop
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800823c:	b480      	push	{r7}
 800823e:	b085      	sub	sp, #20
 8008240:	af00      	add	r7, sp, #0
 8008242:	4603      	mov	r3, r0
 8008244:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008246:	2300      	movs	r3, #0
 8008248:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800824a:	79fb      	ldrb	r3, [r7, #7]
 800824c:	2b03      	cmp	r3, #3
 800824e:	d817      	bhi.n	8008280 <USBD_Get_USB_Status+0x44>
 8008250:	a201      	add	r2, pc, #4	; (adr r2, 8008258 <USBD_Get_USB_Status+0x1c>)
 8008252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008256:	bf00      	nop
 8008258:	08008269 	.word	0x08008269
 800825c:	0800826f 	.word	0x0800826f
 8008260:	08008275 	.word	0x08008275
 8008264:	0800827b 	.word	0x0800827b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008268:	2300      	movs	r3, #0
 800826a:	73fb      	strb	r3, [r7, #15]
    break;
 800826c:	e00b      	b.n	8008286 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800826e:	2303      	movs	r3, #3
 8008270:	73fb      	strb	r3, [r7, #15]
    break;
 8008272:	e008      	b.n	8008286 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008274:	2301      	movs	r3, #1
 8008276:	73fb      	strb	r3, [r7, #15]
    break;
 8008278:	e005      	b.n	8008286 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800827a:	2303      	movs	r3, #3
 800827c:	73fb      	strb	r3, [r7, #15]
    break;
 800827e:	e002      	b.n	8008286 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008280:	2303      	movs	r3, #3
 8008282:	73fb      	strb	r3, [r7, #15]
    break;
 8008284:	bf00      	nop
  }
  return usb_status;
 8008286:	7bfb      	ldrb	r3, [r7, #15]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3714      	adds	r7, #20
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <__errno>:
 8008294:	4b01      	ldr	r3, [pc, #4]	; (800829c <__errno+0x8>)
 8008296:	6818      	ldr	r0, [r3, #0]
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	20000160 	.word	0x20000160

080082a0 <__libc_init_array>:
 80082a0:	b570      	push	{r4, r5, r6, lr}
 80082a2:	4d0d      	ldr	r5, [pc, #52]	; (80082d8 <__libc_init_array+0x38>)
 80082a4:	4c0d      	ldr	r4, [pc, #52]	; (80082dc <__libc_init_array+0x3c>)
 80082a6:	1b64      	subs	r4, r4, r5
 80082a8:	10a4      	asrs	r4, r4, #2
 80082aa:	2600      	movs	r6, #0
 80082ac:	42a6      	cmp	r6, r4
 80082ae:	d109      	bne.n	80082c4 <__libc_init_array+0x24>
 80082b0:	4d0b      	ldr	r5, [pc, #44]	; (80082e0 <__libc_init_array+0x40>)
 80082b2:	4c0c      	ldr	r4, [pc, #48]	; (80082e4 <__libc_init_array+0x44>)
 80082b4:	f002 ff04 	bl	800b0c0 <_init>
 80082b8:	1b64      	subs	r4, r4, r5
 80082ba:	10a4      	asrs	r4, r4, #2
 80082bc:	2600      	movs	r6, #0
 80082be:	42a6      	cmp	r6, r4
 80082c0:	d105      	bne.n	80082ce <__libc_init_array+0x2e>
 80082c2:	bd70      	pop	{r4, r5, r6, pc}
 80082c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80082c8:	4798      	blx	r3
 80082ca:	3601      	adds	r6, #1
 80082cc:	e7ee      	b.n	80082ac <__libc_init_array+0xc>
 80082ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80082d2:	4798      	blx	r3
 80082d4:	3601      	adds	r6, #1
 80082d6:	e7f2      	b.n	80082be <__libc_init_array+0x1e>
 80082d8:	0800b52c 	.word	0x0800b52c
 80082dc:	0800b52c 	.word	0x0800b52c
 80082e0:	0800b52c 	.word	0x0800b52c
 80082e4:	0800b530 	.word	0x0800b530

080082e8 <memset>:
 80082e8:	4402      	add	r2, r0
 80082ea:	4603      	mov	r3, r0
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d100      	bne.n	80082f2 <memset+0xa>
 80082f0:	4770      	bx	lr
 80082f2:	f803 1b01 	strb.w	r1, [r3], #1
 80082f6:	e7f9      	b.n	80082ec <memset+0x4>

080082f8 <__cvt>:
 80082f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082fc:	ec55 4b10 	vmov	r4, r5, d0
 8008300:	2d00      	cmp	r5, #0
 8008302:	460e      	mov	r6, r1
 8008304:	4619      	mov	r1, r3
 8008306:	462b      	mov	r3, r5
 8008308:	bfbb      	ittet	lt
 800830a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800830e:	461d      	movlt	r5, r3
 8008310:	2300      	movge	r3, #0
 8008312:	232d      	movlt	r3, #45	; 0x2d
 8008314:	700b      	strb	r3, [r1, #0]
 8008316:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008318:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800831c:	4691      	mov	r9, r2
 800831e:	f023 0820 	bic.w	r8, r3, #32
 8008322:	bfbc      	itt	lt
 8008324:	4622      	movlt	r2, r4
 8008326:	4614      	movlt	r4, r2
 8008328:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800832c:	d005      	beq.n	800833a <__cvt+0x42>
 800832e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008332:	d100      	bne.n	8008336 <__cvt+0x3e>
 8008334:	3601      	adds	r6, #1
 8008336:	2102      	movs	r1, #2
 8008338:	e000      	b.n	800833c <__cvt+0x44>
 800833a:	2103      	movs	r1, #3
 800833c:	ab03      	add	r3, sp, #12
 800833e:	9301      	str	r3, [sp, #4]
 8008340:	ab02      	add	r3, sp, #8
 8008342:	9300      	str	r3, [sp, #0]
 8008344:	ec45 4b10 	vmov	d0, r4, r5
 8008348:	4653      	mov	r3, sl
 800834a:	4632      	mov	r2, r6
 800834c:	f000 fcec 	bl	8008d28 <_dtoa_r>
 8008350:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008354:	4607      	mov	r7, r0
 8008356:	d102      	bne.n	800835e <__cvt+0x66>
 8008358:	f019 0f01 	tst.w	r9, #1
 800835c:	d022      	beq.n	80083a4 <__cvt+0xac>
 800835e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008362:	eb07 0906 	add.w	r9, r7, r6
 8008366:	d110      	bne.n	800838a <__cvt+0x92>
 8008368:	783b      	ldrb	r3, [r7, #0]
 800836a:	2b30      	cmp	r3, #48	; 0x30
 800836c:	d10a      	bne.n	8008384 <__cvt+0x8c>
 800836e:	2200      	movs	r2, #0
 8008370:	2300      	movs	r3, #0
 8008372:	4620      	mov	r0, r4
 8008374:	4629      	mov	r1, r5
 8008376:	f7f8 fbaf 	bl	8000ad8 <__aeabi_dcmpeq>
 800837a:	b918      	cbnz	r0, 8008384 <__cvt+0x8c>
 800837c:	f1c6 0601 	rsb	r6, r6, #1
 8008380:	f8ca 6000 	str.w	r6, [sl]
 8008384:	f8da 3000 	ldr.w	r3, [sl]
 8008388:	4499      	add	r9, r3
 800838a:	2200      	movs	r2, #0
 800838c:	2300      	movs	r3, #0
 800838e:	4620      	mov	r0, r4
 8008390:	4629      	mov	r1, r5
 8008392:	f7f8 fba1 	bl	8000ad8 <__aeabi_dcmpeq>
 8008396:	b108      	cbz	r0, 800839c <__cvt+0xa4>
 8008398:	f8cd 900c 	str.w	r9, [sp, #12]
 800839c:	2230      	movs	r2, #48	; 0x30
 800839e:	9b03      	ldr	r3, [sp, #12]
 80083a0:	454b      	cmp	r3, r9
 80083a2:	d307      	bcc.n	80083b4 <__cvt+0xbc>
 80083a4:	9b03      	ldr	r3, [sp, #12]
 80083a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083a8:	1bdb      	subs	r3, r3, r7
 80083aa:	4638      	mov	r0, r7
 80083ac:	6013      	str	r3, [r2, #0]
 80083ae:	b004      	add	sp, #16
 80083b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083b4:	1c59      	adds	r1, r3, #1
 80083b6:	9103      	str	r1, [sp, #12]
 80083b8:	701a      	strb	r2, [r3, #0]
 80083ba:	e7f0      	b.n	800839e <__cvt+0xa6>

080083bc <__exponent>:
 80083bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083be:	4603      	mov	r3, r0
 80083c0:	2900      	cmp	r1, #0
 80083c2:	bfb8      	it	lt
 80083c4:	4249      	neglt	r1, r1
 80083c6:	f803 2b02 	strb.w	r2, [r3], #2
 80083ca:	bfb4      	ite	lt
 80083cc:	222d      	movlt	r2, #45	; 0x2d
 80083ce:	222b      	movge	r2, #43	; 0x2b
 80083d0:	2909      	cmp	r1, #9
 80083d2:	7042      	strb	r2, [r0, #1]
 80083d4:	dd2a      	ble.n	800842c <__exponent+0x70>
 80083d6:	f10d 0407 	add.w	r4, sp, #7
 80083da:	46a4      	mov	ip, r4
 80083dc:	270a      	movs	r7, #10
 80083de:	46a6      	mov	lr, r4
 80083e0:	460a      	mov	r2, r1
 80083e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80083e6:	fb07 1516 	mls	r5, r7, r6, r1
 80083ea:	3530      	adds	r5, #48	; 0x30
 80083ec:	2a63      	cmp	r2, #99	; 0x63
 80083ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80083f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80083f6:	4631      	mov	r1, r6
 80083f8:	dcf1      	bgt.n	80083de <__exponent+0x22>
 80083fa:	3130      	adds	r1, #48	; 0x30
 80083fc:	f1ae 0502 	sub.w	r5, lr, #2
 8008400:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008404:	1c44      	adds	r4, r0, #1
 8008406:	4629      	mov	r1, r5
 8008408:	4561      	cmp	r1, ip
 800840a:	d30a      	bcc.n	8008422 <__exponent+0x66>
 800840c:	f10d 0209 	add.w	r2, sp, #9
 8008410:	eba2 020e 	sub.w	r2, r2, lr
 8008414:	4565      	cmp	r5, ip
 8008416:	bf88      	it	hi
 8008418:	2200      	movhi	r2, #0
 800841a:	4413      	add	r3, r2
 800841c:	1a18      	subs	r0, r3, r0
 800841e:	b003      	add	sp, #12
 8008420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008422:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008426:	f804 2f01 	strb.w	r2, [r4, #1]!
 800842a:	e7ed      	b.n	8008408 <__exponent+0x4c>
 800842c:	2330      	movs	r3, #48	; 0x30
 800842e:	3130      	adds	r1, #48	; 0x30
 8008430:	7083      	strb	r3, [r0, #2]
 8008432:	70c1      	strb	r1, [r0, #3]
 8008434:	1d03      	adds	r3, r0, #4
 8008436:	e7f1      	b.n	800841c <__exponent+0x60>

08008438 <_printf_float>:
 8008438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843c:	ed2d 8b02 	vpush	{d8}
 8008440:	b08d      	sub	sp, #52	; 0x34
 8008442:	460c      	mov	r4, r1
 8008444:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008448:	4616      	mov	r6, r2
 800844a:	461f      	mov	r7, r3
 800844c:	4605      	mov	r5, r0
 800844e:	f001 fa59 	bl	8009904 <_localeconv_r>
 8008452:	f8d0 a000 	ldr.w	sl, [r0]
 8008456:	4650      	mov	r0, sl
 8008458:	f7f7 fec2 	bl	80001e0 <strlen>
 800845c:	2300      	movs	r3, #0
 800845e:	930a      	str	r3, [sp, #40]	; 0x28
 8008460:	6823      	ldr	r3, [r4, #0]
 8008462:	9305      	str	r3, [sp, #20]
 8008464:	f8d8 3000 	ldr.w	r3, [r8]
 8008468:	f894 b018 	ldrb.w	fp, [r4, #24]
 800846c:	3307      	adds	r3, #7
 800846e:	f023 0307 	bic.w	r3, r3, #7
 8008472:	f103 0208 	add.w	r2, r3, #8
 8008476:	f8c8 2000 	str.w	r2, [r8]
 800847a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008482:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008486:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800848a:	9307      	str	r3, [sp, #28]
 800848c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008490:	ee08 0a10 	vmov	s16, r0
 8008494:	4b9f      	ldr	r3, [pc, #636]	; (8008714 <_printf_float+0x2dc>)
 8008496:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800849a:	f04f 32ff 	mov.w	r2, #4294967295
 800849e:	f7f8 fb4d 	bl	8000b3c <__aeabi_dcmpun>
 80084a2:	bb88      	cbnz	r0, 8008508 <_printf_float+0xd0>
 80084a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084a8:	4b9a      	ldr	r3, [pc, #616]	; (8008714 <_printf_float+0x2dc>)
 80084aa:	f04f 32ff 	mov.w	r2, #4294967295
 80084ae:	f7f8 fb27 	bl	8000b00 <__aeabi_dcmple>
 80084b2:	bb48      	cbnz	r0, 8008508 <_printf_float+0xd0>
 80084b4:	2200      	movs	r2, #0
 80084b6:	2300      	movs	r3, #0
 80084b8:	4640      	mov	r0, r8
 80084ba:	4649      	mov	r1, r9
 80084bc:	f7f8 fb16 	bl	8000aec <__aeabi_dcmplt>
 80084c0:	b110      	cbz	r0, 80084c8 <_printf_float+0x90>
 80084c2:	232d      	movs	r3, #45	; 0x2d
 80084c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084c8:	4b93      	ldr	r3, [pc, #588]	; (8008718 <_printf_float+0x2e0>)
 80084ca:	4894      	ldr	r0, [pc, #592]	; (800871c <_printf_float+0x2e4>)
 80084cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80084d0:	bf94      	ite	ls
 80084d2:	4698      	movls	r8, r3
 80084d4:	4680      	movhi	r8, r0
 80084d6:	2303      	movs	r3, #3
 80084d8:	6123      	str	r3, [r4, #16]
 80084da:	9b05      	ldr	r3, [sp, #20]
 80084dc:	f023 0204 	bic.w	r2, r3, #4
 80084e0:	6022      	str	r2, [r4, #0]
 80084e2:	f04f 0900 	mov.w	r9, #0
 80084e6:	9700      	str	r7, [sp, #0]
 80084e8:	4633      	mov	r3, r6
 80084ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80084ec:	4621      	mov	r1, r4
 80084ee:	4628      	mov	r0, r5
 80084f0:	f000 f9d8 	bl	80088a4 <_printf_common>
 80084f4:	3001      	adds	r0, #1
 80084f6:	f040 8090 	bne.w	800861a <_printf_float+0x1e2>
 80084fa:	f04f 30ff 	mov.w	r0, #4294967295
 80084fe:	b00d      	add	sp, #52	; 0x34
 8008500:	ecbd 8b02 	vpop	{d8}
 8008504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008508:	4642      	mov	r2, r8
 800850a:	464b      	mov	r3, r9
 800850c:	4640      	mov	r0, r8
 800850e:	4649      	mov	r1, r9
 8008510:	f7f8 fb14 	bl	8000b3c <__aeabi_dcmpun>
 8008514:	b140      	cbz	r0, 8008528 <_printf_float+0xf0>
 8008516:	464b      	mov	r3, r9
 8008518:	2b00      	cmp	r3, #0
 800851a:	bfbc      	itt	lt
 800851c:	232d      	movlt	r3, #45	; 0x2d
 800851e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008522:	487f      	ldr	r0, [pc, #508]	; (8008720 <_printf_float+0x2e8>)
 8008524:	4b7f      	ldr	r3, [pc, #508]	; (8008724 <_printf_float+0x2ec>)
 8008526:	e7d1      	b.n	80084cc <_printf_float+0x94>
 8008528:	6863      	ldr	r3, [r4, #4]
 800852a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800852e:	9206      	str	r2, [sp, #24]
 8008530:	1c5a      	adds	r2, r3, #1
 8008532:	d13f      	bne.n	80085b4 <_printf_float+0x17c>
 8008534:	2306      	movs	r3, #6
 8008536:	6063      	str	r3, [r4, #4]
 8008538:	9b05      	ldr	r3, [sp, #20]
 800853a:	6861      	ldr	r1, [r4, #4]
 800853c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008540:	2300      	movs	r3, #0
 8008542:	9303      	str	r3, [sp, #12]
 8008544:	ab0a      	add	r3, sp, #40	; 0x28
 8008546:	e9cd b301 	strd	fp, r3, [sp, #4]
 800854a:	ab09      	add	r3, sp, #36	; 0x24
 800854c:	ec49 8b10 	vmov	d0, r8, r9
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	6022      	str	r2, [r4, #0]
 8008554:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008558:	4628      	mov	r0, r5
 800855a:	f7ff fecd 	bl	80082f8 <__cvt>
 800855e:	9b06      	ldr	r3, [sp, #24]
 8008560:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008562:	2b47      	cmp	r3, #71	; 0x47
 8008564:	4680      	mov	r8, r0
 8008566:	d108      	bne.n	800857a <_printf_float+0x142>
 8008568:	1cc8      	adds	r0, r1, #3
 800856a:	db02      	blt.n	8008572 <_printf_float+0x13a>
 800856c:	6863      	ldr	r3, [r4, #4]
 800856e:	4299      	cmp	r1, r3
 8008570:	dd41      	ble.n	80085f6 <_printf_float+0x1be>
 8008572:	f1ab 0b02 	sub.w	fp, fp, #2
 8008576:	fa5f fb8b 	uxtb.w	fp, fp
 800857a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800857e:	d820      	bhi.n	80085c2 <_printf_float+0x18a>
 8008580:	3901      	subs	r1, #1
 8008582:	465a      	mov	r2, fp
 8008584:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008588:	9109      	str	r1, [sp, #36]	; 0x24
 800858a:	f7ff ff17 	bl	80083bc <__exponent>
 800858e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008590:	1813      	adds	r3, r2, r0
 8008592:	2a01      	cmp	r2, #1
 8008594:	4681      	mov	r9, r0
 8008596:	6123      	str	r3, [r4, #16]
 8008598:	dc02      	bgt.n	80085a0 <_printf_float+0x168>
 800859a:	6822      	ldr	r2, [r4, #0]
 800859c:	07d2      	lsls	r2, r2, #31
 800859e:	d501      	bpl.n	80085a4 <_printf_float+0x16c>
 80085a0:	3301      	adds	r3, #1
 80085a2:	6123      	str	r3, [r4, #16]
 80085a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d09c      	beq.n	80084e6 <_printf_float+0xae>
 80085ac:	232d      	movs	r3, #45	; 0x2d
 80085ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085b2:	e798      	b.n	80084e6 <_printf_float+0xae>
 80085b4:	9a06      	ldr	r2, [sp, #24]
 80085b6:	2a47      	cmp	r2, #71	; 0x47
 80085b8:	d1be      	bne.n	8008538 <_printf_float+0x100>
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1bc      	bne.n	8008538 <_printf_float+0x100>
 80085be:	2301      	movs	r3, #1
 80085c0:	e7b9      	b.n	8008536 <_printf_float+0xfe>
 80085c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80085c6:	d118      	bne.n	80085fa <_printf_float+0x1c2>
 80085c8:	2900      	cmp	r1, #0
 80085ca:	6863      	ldr	r3, [r4, #4]
 80085cc:	dd0b      	ble.n	80085e6 <_printf_float+0x1ae>
 80085ce:	6121      	str	r1, [r4, #16]
 80085d0:	b913      	cbnz	r3, 80085d8 <_printf_float+0x1a0>
 80085d2:	6822      	ldr	r2, [r4, #0]
 80085d4:	07d0      	lsls	r0, r2, #31
 80085d6:	d502      	bpl.n	80085de <_printf_float+0x1a6>
 80085d8:	3301      	adds	r3, #1
 80085da:	440b      	add	r3, r1
 80085dc:	6123      	str	r3, [r4, #16]
 80085de:	65a1      	str	r1, [r4, #88]	; 0x58
 80085e0:	f04f 0900 	mov.w	r9, #0
 80085e4:	e7de      	b.n	80085a4 <_printf_float+0x16c>
 80085e6:	b913      	cbnz	r3, 80085ee <_printf_float+0x1b6>
 80085e8:	6822      	ldr	r2, [r4, #0]
 80085ea:	07d2      	lsls	r2, r2, #31
 80085ec:	d501      	bpl.n	80085f2 <_printf_float+0x1ba>
 80085ee:	3302      	adds	r3, #2
 80085f0:	e7f4      	b.n	80085dc <_printf_float+0x1a4>
 80085f2:	2301      	movs	r3, #1
 80085f4:	e7f2      	b.n	80085dc <_printf_float+0x1a4>
 80085f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80085fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085fc:	4299      	cmp	r1, r3
 80085fe:	db05      	blt.n	800860c <_printf_float+0x1d4>
 8008600:	6823      	ldr	r3, [r4, #0]
 8008602:	6121      	str	r1, [r4, #16]
 8008604:	07d8      	lsls	r0, r3, #31
 8008606:	d5ea      	bpl.n	80085de <_printf_float+0x1a6>
 8008608:	1c4b      	adds	r3, r1, #1
 800860a:	e7e7      	b.n	80085dc <_printf_float+0x1a4>
 800860c:	2900      	cmp	r1, #0
 800860e:	bfd4      	ite	le
 8008610:	f1c1 0202 	rsble	r2, r1, #2
 8008614:	2201      	movgt	r2, #1
 8008616:	4413      	add	r3, r2
 8008618:	e7e0      	b.n	80085dc <_printf_float+0x1a4>
 800861a:	6823      	ldr	r3, [r4, #0]
 800861c:	055a      	lsls	r2, r3, #21
 800861e:	d407      	bmi.n	8008630 <_printf_float+0x1f8>
 8008620:	6923      	ldr	r3, [r4, #16]
 8008622:	4642      	mov	r2, r8
 8008624:	4631      	mov	r1, r6
 8008626:	4628      	mov	r0, r5
 8008628:	47b8      	blx	r7
 800862a:	3001      	adds	r0, #1
 800862c:	d12c      	bne.n	8008688 <_printf_float+0x250>
 800862e:	e764      	b.n	80084fa <_printf_float+0xc2>
 8008630:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008634:	f240 80e0 	bls.w	80087f8 <_printf_float+0x3c0>
 8008638:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800863c:	2200      	movs	r2, #0
 800863e:	2300      	movs	r3, #0
 8008640:	f7f8 fa4a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008644:	2800      	cmp	r0, #0
 8008646:	d034      	beq.n	80086b2 <_printf_float+0x27a>
 8008648:	4a37      	ldr	r2, [pc, #220]	; (8008728 <_printf_float+0x2f0>)
 800864a:	2301      	movs	r3, #1
 800864c:	4631      	mov	r1, r6
 800864e:	4628      	mov	r0, r5
 8008650:	47b8      	blx	r7
 8008652:	3001      	adds	r0, #1
 8008654:	f43f af51 	beq.w	80084fa <_printf_float+0xc2>
 8008658:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800865c:	429a      	cmp	r2, r3
 800865e:	db02      	blt.n	8008666 <_printf_float+0x22e>
 8008660:	6823      	ldr	r3, [r4, #0]
 8008662:	07d8      	lsls	r0, r3, #31
 8008664:	d510      	bpl.n	8008688 <_printf_float+0x250>
 8008666:	ee18 3a10 	vmov	r3, s16
 800866a:	4652      	mov	r2, sl
 800866c:	4631      	mov	r1, r6
 800866e:	4628      	mov	r0, r5
 8008670:	47b8      	blx	r7
 8008672:	3001      	adds	r0, #1
 8008674:	f43f af41 	beq.w	80084fa <_printf_float+0xc2>
 8008678:	f04f 0800 	mov.w	r8, #0
 800867c:	f104 091a 	add.w	r9, r4, #26
 8008680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008682:	3b01      	subs	r3, #1
 8008684:	4543      	cmp	r3, r8
 8008686:	dc09      	bgt.n	800869c <_printf_float+0x264>
 8008688:	6823      	ldr	r3, [r4, #0]
 800868a:	079b      	lsls	r3, r3, #30
 800868c:	f100 8105 	bmi.w	800889a <_printf_float+0x462>
 8008690:	68e0      	ldr	r0, [r4, #12]
 8008692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008694:	4298      	cmp	r0, r3
 8008696:	bfb8      	it	lt
 8008698:	4618      	movlt	r0, r3
 800869a:	e730      	b.n	80084fe <_printf_float+0xc6>
 800869c:	2301      	movs	r3, #1
 800869e:	464a      	mov	r2, r9
 80086a0:	4631      	mov	r1, r6
 80086a2:	4628      	mov	r0, r5
 80086a4:	47b8      	blx	r7
 80086a6:	3001      	adds	r0, #1
 80086a8:	f43f af27 	beq.w	80084fa <_printf_float+0xc2>
 80086ac:	f108 0801 	add.w	r8, r8, #1
 80086b0:	e7e6      	b.n	8008680 <_printf_float+0x248>
 80086b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	dc39      	bgt.n	800872c <_printf_float+0x2f4>
 80086b8:	4a1b      	ldr	r2, [pc, #108]	; (8008728 <_printf_float+0x2f0>)
 80086ba:	2301      	movs	r3, #1
 80086bc:	4631      	mov	r1, r6
 80086be:	4628      	mov	r0, r5
 80086c0:	47b8      	blx	r7
 80086c2:	3001      	adds	r0, #1
 80086c4:	f43f af19 	beq.w	80084fa <_printf_float+0xc2>
 80086c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086cc:	4313      	orrs	r3, r2
 80086ce:	d102      	bne.n	80086d6 <_printf_float+0x29e>
 80086d0:	6823      	ldr	r3, [r4, #0]
 80086d2:	07d9      	lsls	r1, r3, #31
 80086d4:	d5d8      	bpl.n	8008688 <_printf_float+0x250>
 80086d6:	ee18 3a10 	vmov	r3, s16
 80086da:	4652      	mov	r2, sl
 80086dc:	4631      	mov	r1, r6
 80086de:	4628      	mov	r0, r5
 80086e0:	47b8      	blx	r7
 80086e2:	3001      	adds	r0, #1
 80086e4:	f43f af09 	beq.w	80084fa <_printf_float+0xc2>
 80086e8:	f04f 0900 	mov.w	r9, #0
 80086ec:	f104 0a1a 	add.w	sl, r4, #26
 80086f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086f2:	425b      	negs	r3, r3
 80086f4:	454b      	cmp	r3, r9
 80086f6:	dc01      	bgt.n	80086fc <_printf_float+0x2c4>
 80086f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086fa:	e792      	b.n	8008622 <_printf_float+0x1ea>
 80086fc:	2301      	movs	r3, #1
 80086fe:	4652      	mov	r2, sl
 8008700:	4631      	mov	r1, r6
 8008702:	4628      	mov	r0, r5
 8008704:	47b8      	blx	r7
 8008706:	3001      	adds	r0, #1
 8008708:	f43f aef7 	beq.w	80084fa <_printf_float+0xc2>
 800870c:	f109 0901 	add.w	r9, r9, #1
 8008710:	e7ee      	b.n	80086f0 <_printf_float+0x2b8>
 8008712:	bf00      	nop
 8008714:	7fefffff 	.word	0x7fefffff
 8008718:	0800b150 	.word	0x0800b150
 800871c:	0800b154 	.word	0x0800b154
 8008720:	0800b15c 	.word	0x0800b15c
 8008724:	0800b158 	.word	0x0800b158
 8008728:	0800b160 	.word	0x0800b160
 800872c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800872e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008730:	429a      	cmp	r2, r3
 8008732:	bfa8      	it	ge
 8008734:	461a      	movge	r2, r3
 8008736:	2a00      	cmp	r2, #0
 8008738:	4691      	mov	r9, r2
 800873a:	dc37      	bgt.n	80087ac <_printf_float+0x374>
 800873c:	f04f 0b00 	mov.w	fp, #0
 8008740:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008744:	f104 021a 	add.w	r2, r4, #26
 8008748:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800874a:	9305      	str	r3, [sp, #20]
 800874c:	eba3 0309 	sub.w	r3, r3, r9
 8008750:	455b      	cmp	r3, fp
 8008752:	dc33      	bgt.n	80087bc <_printf_float+0x384>
 8008754:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008758:	429a      	cmp	r2, r3
 800875a:	db3b      	blt.n	80087d4 <_printf_float+0x39c>
 800875c:	6823      	ldr	r3, [r4, #0]
 800875e:	07da      	lsls	r2, r3, #31
 8008760:	d438      	bmi.n	80087d4 <_printf_float+0x39c>
 8008762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008764:	9a05      	ldr	r2, [sp, #20]
 8008766:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008768:	1a9a      	subs	r2, r3, r2
 800876a:	eba3 0901 	sub.w	r9, r3, r1
 800876e:	4591      	cmp	r9, r2
 8008770:	bfa8      	it	ge
 8008772:	4691      	movge	r9, r2
 8008774:	f1b9 0f00 	cmp.w	r9, #0
 8008778:	dc35      	bgt.n	80087e6 <_printf_float+0x3ae>
 800877a:	f04f 0800 	mov.w	r8, #0
 800877e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008782:	f104 0a1a 	add.w	sl, r4, #26
 8008786:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800878a:	1a9b      	subs	r3, r3, r2
 800878c:	eba3 0309 	sub.w	r3, r3, r9
 8008790:	4543      	cmp	r3, r8
 8008792:	f77f af79 	ble.w	8008688 <_printf_float+0x250>
 8008796:	2301      	movs	r3, #1
 8008798:	4652      	mov	r2, sl
 800879a:	4631      	mov	r1, r6
 800879c:	4628      	mov	r0, r5
 800879e:	47b8      	blx	r7
 80087a0:	3001      	adds	r0, #1
 80087a2:	f43f aeaa 	beq.w	80084fa <_printf_float+0xc2>
 80087a6:	f108 0801 	add.w	r8, r8, #1
 80087aa:	e7ec      	b.n	8008786 <_printf_float+0x34e>
 80087ac:	4613      	mov	r3, r2
 80087ae:	4631      	mov	r1, r6
 80087b0:	4642      	mov	r2, r8
 80087b2:	4628      	mov	r0, r5
 80087b4:	47b8      	blx	r7
 80087b6:	3001      	adds	r0, #1
 80087b8:	d1c0      	bne.n	800873c <_printf_float+0x304>
 80087ba:	e69e      	b.n	80084fa <_printf_float+0xc2>
 80087bc:	2301      	movs	r3, #1
 80087be:	4631      	mov	r1, r6
 80087c0:	4628      	mov	r0, r5
 80087c2:	9205      	str	r2, [sp, #20]
 80087c4:	47b8      	blx	r7
 80087c6:	3001      	adds	r0, #1
 80087c8:	f43f ae97 	beq.w	80084fa <_printf_float+0xc2>
 80087cc:	9a05      	ldr	r2, [sp, #20]
 80087ce:	f10b 0b01 	add.w	fp, fp, #1
 80087d2:	e7b9      	b.n	8008748 <_printf_float+0x310>
 80087d4:	ee18 3a10 	vmov	r3, s16
 80087d8:	4652      	mov	r2, sl
 80087da:	4631      	mov	r1, r6
 80087dc:	4628      	mov	r0, r5
 80087de:	47b8      	blx	r7
 80087e0:	3001      	adds	r0, #1
 80087e2:	d1be      	bne.n	8008762 <_printf_float+0x32a>
 80087e4:	e689      	b.n	80084fa <_printf_float+0xc2>
 80087e6:	9a05      	ldr	r2, [sp, #20]
 80087e8:	464b      	mov	r3, r9
 80087ea:	4442      	add	r2, r8
 80087ec:	4631      	mov	r1, r6
 80087ee:	4628      	mov	r0, r5
 80087f0:	47b8      	blx	r7
 80087f2:	3001      	adds	r0, #1
 80087f4:	d1c1      	bne.n	800877a <_printf_float+0x342>
 80087f6:	e680      	b.n	80084fa <_printf_float+0xc2>
 80087f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087fa:	2a01      	cmp	r2, #1
 80087fc:	dc01      	bgt.n	8008802 <_printf_float+0x3ca>
 80087fe:	07db      	lsls	r3, r3, #31
 8008800:	d538      	bpl.n	8008874 <_printf_float+0x43c>
 8008802:	2301      	movs	r3, #1
 8008804:	4642      	mov	r2, r8
 8008806:	4631      	mov	r1, r6
 8008808:	4628      	mov	r0, r5
 800880a:	47b8      	blx	r7
 800880c:	3001      	adds	r0, #1
 800880e:	f43f ae74 	beq.w	80084fa <_printf_float+0xc2>
 8008812:	ee18 3a10 	vmov	r3, s16
 8008816:	4652      	mov	r2, sl
 8008818:	4631      	mov	r1, r6
 800881a:	4628      	mov	r0, r5
 800881c:	47b8      	blx	r7
 800881e:	3001      	adds	r0, #1
 8008820:	f43f ae6b 	beq.w	80084fa <_printf_float+0xc2>
 8008824:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008828:	2200      	movs	r2, #0
 800882a:	2300      	movs	r3, #0
 800882c:	f7f8 f954 	bl	8000ad8 <__aeabi_dcmpeq>
 8008830:	b9d8      	cbnz	r0, 800886a <_printf_float+0x432>
 8008832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008834:	f108 0201 	add.w	r2, r8, #1
 8008838:	3b01      	subs	r3, #1
 800883a:	4631      	mov	r1, r6
 800883c:	4628      	mov	r0, r5
 800883e:	47b8      	blx	r7
 8008840:	3001      	adds	r0, #1
 8008842:	d10e      	bne.n	8008862 <_printf_float+0x42a>
 8008844:	e659      	b.n	80084fa <_printf_float+0xc2>
 8008846:	2301      	movs	r3, #1
 8008848:	4652      	mov	r2, sl
 800884a:	4631      	mov	r1, r6
 800884c:	4628      	mov	r0, r5
 800884e:	47b8      	blx	r7
 8008850:	3001      	adds	r0, #1
 8008852:	f43f ae52 	beq.w	80084fa <_printf_float+0xc2>
 8008856:	f108 0801 	add.w	r8, r8, #1
 800885a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800885c:	3b01      	subs	r3, #1
 800885e:	4543      	cmp	r3, r8
 8008860:	dcf1      	bgt.n	8008846 <_printf_float+0x40e>
 8008862:	464b      	mov	r3, r9
 8008864:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008868:	e6dc      	b.n	8008624 <_printf_float+0x1ec>
 800886a:	f04f 0800 	mov.w	r8, #0
 800886e:	f104 0a1a 	add.w	sl, r4, #26
 8008872:	e7f2      	b.n	800885a <_printf_float+0x422>
 8008874:	2301      	movs	r3, #1
 8008876:	4642      	mov	r2, r8
 8008878:	e7df      	b.n	800883a <_printf_float+0x402>
 800887a:	2301      	movs	r3, #1
 800887c:	464a      	mov	r2, r9
 800887e:	4631      	mov	r1, r6
 8008880:	4628      	mov	r0, r5
 8008882:	47b8      	blx	r7
 8008884:	3001      	adds	r0, #1
 8008886:	f43f ae38 	beq.w	80084fa <_printf_float+0xc2>
 800888a:	f108 0801 	add.w	r8, r8, #1
 800888e:	68e3      	ldr	r3, [r4, #12]
 8008890:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008892:	1a5b      	subs	r3, r3, r1
 8008894:	4543      	cmp	r3, r8
 8008896:	dcf0      	bgt.n	800887a <_printf_float+0x442>
 8008898:	e6fa      	b.n	8008690 <_printf_float+0x258>
 800889a:	f04f 0800 	mov.w	r8, #0
 800889e:	f104 0919 	add.w	r9, r4, #25
 80088a2:	e7f4      	b.n	800888e <_printf_float+0x456>

080088a4 <_printf_common>:
 80088a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088a8:	4616      	mov	r6, r2
 80088aa:	4699      	mov	r9, r3
 80088ac:	688a      	ldr	r2, [r1, #8]
 80088ae:	690b      	ldr	r3, [r1, #16]
 80088b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80088b4:	4293      	cmp	r3, r2
 80088b6:	bfb8      	it	lt
 80088b8:	4613      	movlt	r3, r2
 80088ba:	6033      	str	r3, [r6, #0]
 80088bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80088c0:	4607      	mov	r7, r0
 80088c2:	460c      	mov	r4, r1
 80088c4:	b10a      	cbz	r2, 80088ca <_printf_common+0x26>
 80088c6:	3301      	adds	r3, #1
 80088c8:	6033      	str	r3, [r6, #0]
 80088ca:	6823      	ldr	r3, [r4, #0]
 80088cc:	0699      	lsls	r1, r3, #26
 80088ce:	bf42      	ittt	mi
 80088d0:	6833      	ldrmi	r3, [r6, #0]
 80088d2:	3302      	addmi	r3, #2
 80088d4:	6033      	strmi	r3, [r6, #0]
 80088d6:	6825      	ldr	r5, [r4, #0]
 80088d8:	f015 0506 	ands.w	r5, r5, #6
 80088dc:	d106      	bne.n	80088ec <_printf_common+0x48>
 80088de:	f104 0a19 	add.w	sl, r4, #25
 80088e2:	68e3      	ldr	r3, [r4, #12]
 80088e4:	6832      	ldr	r2, [r6, #0]
 80088e6:	1a9b      	subs	r3, r3, r2
 80088e8:	42ab      	cmp	r3, r5
 80088ea:	dc26      	bgt.n	800893a <_printf_common+0x96>
 80088ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80088f0:	1e13      	subs	r3, r2, #0
 80088f2:	6822      	ldr	r2, [r4, #0]
 80088f4:	bf18      	it	ne
 80088f6:	2301      	movne	r3, #1
 80088f8:	0692      	lsls	r2, r2, #26
 80088fa:	d42b      	bmi.n	8008954 <_printf_common+0xb0>
 80088fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008900:	4649      	mov	r1, r9
 8008902:	4638      	mov	r0, r7
 8008904:	47c0      	blx	r8
 8008906:	3001      	adds	r0, #1
 8008908:	d01e      	beq.n	8008948 <_printf_common+0xa4>
 800890a:	6823      	ldr	r3, [r4, #0]
 800890c:	68e5      	ldr	r5, [r4, #12]
 800890e:	6832      	ldr	r2, [r6, #0]
 8008910:	f003 0306 	and.w	r3, r3, #6
 8008914:	2b04      	cmp	r3, #4
 8008916:	bf08      	it	eq
 8008918:	1aad      	subeq	r5, r5, r2
 800891a:	68a3      	ldr	r3, [r4, #8]
 800891c:	6922      	ldr	r2, [r4, #16]
 800891e:	bf0c      	ite	eq
 8008920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008924:	2500      	movne	r5, #0
 8008926:	4293      	cmp	r3, r2
 8008928:	bfc4      	itt	gt
 800892a:	1a9b      	subgt	r3, r3, r2
 800892c:	18ed      	addgt	r5, r5, r3
 800892e:	2600      	movs	r6, #0
 8008930:	341a      	adds	r4, #26
 8008932:	42b5      	cmp	r5, r6
 8008934:	d11a      	bne.n	800896c <_printf_common+0xc8>
 8008936:	2000      	movs	r0, #0
 8008938:	e008      	b.n	800894c <_printf_common+0xa8>
 800893a:	2301      	movs	r3, #1
 800893c:	4652      	mov	r2, sl
 800893e:	4649      	mov	r1, r9
 8008940:	4638      	mov	r0, r7
 8008942:	47c0      	blx	r8
 8008944:	3001      	adds	r0, #1
 8008946:	d103      	bne.n	8008950 <_printf_common+0xac>
 8008948:	f04f 30ff 	mov.w	r0, #4294967295
 800894c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008950:	3501      	adds	r5, #1
 8008952:	e7c6      	b.n	80088e2 <_printf_common+0x3e>
 8008954:	18e1      	adds	r1, r4, r3
 8008956:	1c5a      	adds	r2, r3, #1
 8008958:	2030      	movs	r0, #48	; 0x30
 800895a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800895e:	4422      	add	r2, r4
 8008960:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008964:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008968:	3302      	adds	r3, #2
 800896a:	e7c7      	b.n	80088fc <_printf_common+0x58>
 800896c:	2301      	movs	r3, #1
 800896e:	4622      	mov	r2, r4
 8008970:	4649      	mov	r1, r9
 8008972:	4638      	mov	r0, r7
 8008974:	47c0      	blx	r8
 8008976:	3001      	adds	r0, #1
 8008978:	d0e6      	beq.n	8008948 <_printf_common+0xa4>
 800897a:	3601      	adds	r6, #1
 800897c:	e7d9      	b.n	8008932 <_printf_common+0x8e>
	...

08008980 <_printf_i>:
 8008980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008984:	7e0f      	ldrb	r7, [r1, #24]
 8008986:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008988:	2f78      	cmp	r7, #120	; 0x78
 800898a:	4691      	mov	r9, r2
 800898c:	4680      	mov	r8, r0
 800898e:	460c      	mov	r4, r1
 8008990:	469a      	mov	sl, r3
 8008992:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008996:	d807      	bhi.n	80089a8 <_printf_i+0x28>
 8008998:	2f62      	cmp	r7, #98	; 0x62
 800899a:	d80a      	bhi.n	80089b2 <_printf_i+0x32>
 800899c:	2f00      	cmp	r7, #0
 800899e:	f000 80d8 	beq.w	8008b52 <_printf_i+0x1d2>
 80089a2:	2f58      	cmp	r7, #88	; 0x58
 80089a4:	f000 80a3 	beq.w	8008aee <_printf_i+0x16e>
 80089a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80089b0:	e03a      	b.n	8008a28 <_printf_i+0xa8>
 80089b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80089b6:	2b15      	cmp	r3, #21
 80089b8:	d8f6      	bhi.n	80089a8 <_printf_i+0x28>
 80089ba:	a101      	add	r1, pc, #4	; (adr r1, 80089c0 <_printf_i+0x40>)
 80089bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089c0:	08008a19 	.word	0x08008a19
 80089c4:	08008a2d 	.word	0x08008a2d
 80089c8:	080089a9 	.word	0x080089a9
 80089cc:	080089a9 	.word	0x080089a9
 80089d0:	080089a9 	.word	0x080089a9
 80089d4:	080089a9 	.word	0x080089a9
 80089d8:	08008a2d 	.word	0x08008a2d
 80089dc:	080089a9 	.word	0x080089a9
 80089e0:	080089a9 	.word	0x080089a9
 80089e4:	080089a9 	.word	0x080089a9
 80089e8:	080089a9 	.word	0x080089a9
 80089ec:	08008b39 	.word	0x08008b39
 80089f0:	08008a5d 	.word	0x08008a5d
 80089f4:	08008b1b 	.word	0x08008b1b
 80089f8:	080089a9 	.word	0x080089a9
 80089fc:	080089a9 	.word	0x080089a9
 8008a00:	08008b5b 	.word	0x08008b5b
 8008a04:	080089a9 	.word	0x080089a9
 8008a08:	08008a5d 	.word	0x08008a5d
 8008a0c:	080089a9 	.word	0x080089a9
 8008a10:	080089a9 	.word	0x080089a9
 8008a14:	08008b23 	.word	0x08008b23
 8008a18:	682b      	ldr	r3, [r5, #0]
 8008a1a:	1d1a      	adds	r2, r3, #4
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	602a      	str	r2, [r5, #0]
 8008a20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e0a3      	b.n	8008b74 <_printf_i+0x1f4>
 8008a2c:	6820      	ldr	r0, [r4, #0]
 8008a2e:	6829      	ldr	r1, [r5, #0]
 8008a30:	0606      	lsls	r6, r0, #24
 8008a32:	f101 0304 	add.w	r3, r1, #4
 8008a36:	d50a      	bpl.n	8008a4e <_printf_i+0xce>
 8008a38:	680e      	ldr	r6, [r1, #0]
 8008a3a:	602b      	str	r3, [r5, #0]
 8008a3c:	2e00      	cmp	r6, #0
 8008a3e:	da03      	bge.n	8008a48 <_printf_i+0xc8>
 8008a40:	232d      	movs	r3, #45	; 0x2d
 8008a42:	4276      	negs	r6, r6
 8008a44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a48:	485e      	ldr	r0, [pc, #376]	; (8008bc4 <_printf_i+0x244>)
 8008a4a:	230a      	movs	r3, #10
 8008a4c:	e019      	b.n	8008a82 <_printf_i+0x102>
 8008a4e:	680e      	ldr	r6, [r1, #0]
 8008a50:	602b      	str	r3, [r5, #0]
 8008a52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008a56:	bf18      	it	ne
 8008a58:	b236      	sxthne	r6, r6
 8008a5a:	e7ef      	b.n	8008a3c <_printf_i+0xbc>
 8008a5c:	682b      	ldr	r3, [r5, #0]
 8008a5e:	6820      	ldr	r0, [r4, #0]
 8008a60:	1d19      	adds	r1, r3, #4
 8008a62:	6029      	str	r1, [r5, #0]
 8008a64:	0601      	lsls	r1, r0, #24
 8008a66:	d501      	bpl.n	8008a6c <_printf_i+0xec>
 8008a68:	681e      	ldr	r6, [r3, #0]
 8008a6a:	e002      	b.n	8008a72 <_printf_i+0xf2>
 8008a6c:	0646      	lsls	r6, r0, #25
 8008a6e:	d5fb      	bpl.n	8008a68 <_printf_i+0xe8>
 8008a70:	881e      	ldrh	r6, [r3, #0]
 8008a72:	4854      	ldr	r0, [pc, #336]	; (8008bc4 <_printf_i+0x244>)
 8008a74:	2f6f      	cmp	r7, #111	; 0x6f
 8008a76:	bf0c      	ite	eq
 8008a78:	2308      	moveq	r3, #8
 8008a7a:	230a      	movne	r3, #10
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a82:	6865      	ldr	r5, [r4, #4]
 8008a84:	60a5      	str	r5, [r4, #8]
 8008a86:	2d00      	cmp	r5, #0
 8008a88:	bfa2      	ittt	ge
 8008a8a:	6821      	ldrge	r1, [r4, #0]
 8008a8c:	f021 0104 	bicge.w	r1, r1, #4
 8008a90:	6021      	strge	r1, [r4, #0]
 8008a92:	b90e      	cbnz	r6, 8008a98 <_printf_i+0x118>
 8008a94:	2d00      	cmp	r5, #0
 8008a96:	d04d      	beq.n	8008b34 <_printf_i+0x1b4>
 8008a98:	4615      	mov	r5, r2
 8008a9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a9e:	fb03 6711 	mls	r7, r3, r1, r6
 8008aa2:	5dc7      	ldrb	r7, [r0, r7]
 8008aa4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008aa8:	4637      	mov	r7, r6
 8008aaa:	42bb      	cmp	r3, r7
 8008aac:	460e      	mov	r6, r1
 8008aae:	d9f4      	bls.n	8008a9a <_printf_i+0x11a>
 8008ab0:	2b08      	cmp	r3, #8
 8008ab2:	d10b      	bne.n	8008acc <_printf_i+0x14c>
 8008ab4:	6823      	ldr	r3, [r4, #0]
 8008ab6:	07de      	lsls	r6, r3, #31
 8008ab8:	d508      	bpl.n	8008acc <_printf_i+0x14c>
 8008aba:	6923      	ldr	r3, [r4, #16]
 8008abc:	6861      	ldr	r1, [r4, #4]
 8008abe:	4299      	cmp	r1, r3
 8008ac0:	bfde      	ittt	le
 8008ac2:	2330      	movle	r3, #48	; 0x30
 8008ac4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ac8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008acc:	1b52      	subs	r2, r2, r5
 8008ace:	6122      	str	r2, [r4, #16]
 8008ad0:	f8cd a000 	str.w	sl, [sp]
 8008ad4:	464b      	mov	r3, r9
 8008ad6:	aa03      	add	r2, sp, #12
 8008ad8:	4621      	mov	r1, r4
 8008ada:	4640      	mov	r0, r8
 8008adc:	f7ff fee2 	bl	80088a4 <_printf_common>
 8008ae0:	3001      	adds	r0, #1
 8008ae2:	d14c      	bne.n	8008b7e <_printf_i+0x1fe>
 8008ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae8:	b004      	add	sp, #16
 8008aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aee:	4835      	ldr	r0, [pc, #212]	; (8008bc4 <_printf_i+0x244>)
 8008af0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008af4:	6829      	ldr	r1, [r5, #0]
 8008af6:	6823      	ldr	r3, [r4, #0]
 8008af8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008afc:	6029      	str	r1, [r5, #0]
 8008afe:	061d      	lsls	r5, r3, #24
 8008b00:	d514      	bpl.n	8008b2c <_printf_i+0x1ac>
 8008b02:	07df      	lsls	r7, r3, #31
 8008b04:	bf44      	itt	mi
 8008b06:	f043 0320 	orrmi.w	r3, r3, #32
 8008b0a:	6023      	strmi	r3, [r4, #0]
 8008b0c:	b91e      	cbnz	r6, 8008b16 <_printf_i+0x196>
 8008b0e:	6823      	ldr	r3, [r4, #0]
 8008b10:	f023 0320 	bic.w	r3, r3, #32
 8008b14:	6023      	str	r3, [r4, #0]
 8008b16:	2310      	movs	r3, #16
 8008b18:	e7b0      	b.n	8008a7c <_printf_i+0xfc>
 8008b1a:	6823      	ldr	r3, [r4, #0]
 8008b1c:	f043 0320 	orr.w	r3, r3, #32
 8008b20:	6023      	str	r3, [r4, #0]
 8008b22:	2378      	movs	r3, #120	; 0x78
 8008b24:	4828      	ldr	r0, [pc, #160]	; (8008bc8 <_printf_i+0x248>)
 8008b26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b2a:	e7e3      	b.n	8008af4 <_printf_i+0x174>
 8008b2c:	0659      	lsls	r1, r3, #25
 8008b2e:	bf48      	it	mi
 8008b30:	b2b6      	uxthmi	r6, r6
 8008b32:	e7e6      	b.n	8008b02 <_printf_i+0x182>
 8008b34:	4615      	mov	r5, r2
 8008b36:	e7bb      	b.n	8008ab0 <_printf_i+0x130>
 8008b38:	682b      	ldr	r3, [r5, #0]
 8008b3a:	6826      	ldr	r6, [r4, #0]
 8008b3c:	6961      	ldr	r1, [r4, #20]
 8008b3e:	1d18      	adds	r0, r3, #4
 8008b40:	6028      	str	r0, [r5, #0]
 8008b42:	0635      	lsls	r5, r6, #24
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	d501      	bpl.n	8008b4c <_printf_i+0x1cc>
 8008b48:	6019      	str	r1, [r3, #0]
 8008b4a:	e002      	b.n	8008b52 <_printf_i+0x1d2>
 8008b4c:	0670      	lsls	r0, r6, #25
 8008b4e:	d5fb      	bpl.n	8008b48 <_printf_i+0x1c8>
 8008b50:	8019      	strh	r1, [r3, #0]
 8008b52:	2300      	movs	r3, #0
 8008b54:	6123      	str	r3, [r4, #16]
 8008b56:	4615      	mov	r5, r2
 8008b58:	e7ba      	b.n	8008ad0 <_printf_i+0x150>
 8008b5a:	682b      	ldr	r3, [r5, #0]
 8008b5c:	1d1a      	adds	r2, r3, #4
 8008b5e:	602a      	str	r2, [r5, #0]
 8008b60:	681d      	ldr	r5, [r3, #0]
 8008b62:	6862      	ldr	r2, [r4, #4]
 8008b64:	2100      	movs	r1, #0
 8008b66:	4628      	mov	r0, r5
 8008b68:	f7f7 fb42 	bl	80001f0 <memchr>
 8008b6c:	b108      	cbz	r0, 8008b72 <_printf_i+0x1f2>
 8008b6e:	1b40      	subs	r0, r0, r5
 8008b70:	6060      	str	r0, [r4, #4]
 8008b72:	6863      	ldr	r3, [r4, #4]
 8008b74:	6123      	str	r3, [r4, #16]
 8008b76:	2300      	movs	r3, #0
 8008b78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b7c:	e7a8      	b.n	8008ad0 <_printf_i+0x150>
 8008b7e:	6923      	ldr	r3, [r4, #16]
 8008b80:	462a      	mov	r2, r5
 8008b82:	4649      	mov	r1, r9
 8008b84:	4640      	mov	r0, r8
 8008b86:	47d0      	blx	sl
 8008b88:	3001      	adds	r0, #1
 8008b8a:	d0ab      	beq.n	8008ae4 <_printf_i+0x164>
 8008b8c:	6823      	ldr	r3, [r4, #0]
 8008b8e:	079b      	lsls	r3, r3, #30
 8008b90:	d413      	bmi.n	8008bba <_printf_i+0x23a>
 8008b92:	68e0      	ldr	r0, [r4, #12]
 8008b94:	9b03      	ldr	r3, [sp, #12]
 8008b96:	4298      	cmp	r0, r3
 8008b98:	bfb8      	it	lt
 8008b9a:	4618      	movlt	r0, r3
 8008b9c:	e7a4      	b.n	8008ae8 <_printf_i+0x168>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	4632      	mov	r2, r6
 8008ba2:	4649      	mov	r1, r9
 8008ba4:	4640      	mov	r0, r8
 8008ba6:	47d0      	blx	sl
 8008ba8:	3001      	adds	r0, #1
 8008baa:	d09b      	beq.n	8008ae4 <_printf_i+0x164>
 8008bac:	3501      	adds	r5, #1
 8008bae:	68e3      	ldr	r3, [r4, #12]
 8008bb0:	9903      	ldr	r1, [sp, #12]
 8008bb2:	1a5b      	subs	r3, r3, r1
 8008bb4:	42ab      	cmp	r3, r5
 8008bb6:	dcf2      	bgt.n	8008b9e <_printf_i+0x21e>
 8008bb8:	e7eb      	b.n	8008b92 <_printf_i+0x212>
 8008bba:	2500      	movs	r5, #0
 8008bbc:	f104 0619 	add.w	r6, r4, #25
 8008bc0:	e7f5      	b.n	8008bae <_printf_i+0x22e>
 8008bc2:	bf00      	nop
 8008bc4:	0800b162 	.word	0x0800b162
 8008bc8:	0800b173 	.word	0x0800b173

08008bcc <siprintf>:
 8008bcc:	b40e      	push	{r1, r2, r3}
 8008bce:	b500      	push	{lr}
 8008bd0:	b09c      	sub	sp, #112	; 0x70
 8008bd2:	ab1d      	add	r3, sp, #116	; 0x74
 8008bd4:	9002      	str	r0, [sp, #8]
 8008bd6:	9006      	str	r0, [sp, #24]
 8008bd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008bdc:	4809      	ldr	r0, [pc, #36]	; (8008c04 <siprintf+0x38>)
 8008bde:	9107      	str	r1, [sp, #28]
 8008be0:	9104      	str	r1, [sp, #16]
 8008be2:	4909      	ldr	r1, [pc, #36]	; (8008c08 <siprintf+0x3c>)
 8008be4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008be8:	9105      	str	r1, [sp, #20]
 8008bea:	6800      	ldr	r0, [r0, #0]
 8008bec:	9301      	str	r3, [sp, #4]
 8008bee:	a902      	add	r1, sp, #8
 8008bf0:	f001 fb78 	bl	800a2e4 <_svfiprintf_r>
 8008bf4:	9b02      	ldr	r3, [sp, #8]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	701a      	strb	r2, [r3, #0]
 8008bfa:	b01c      	add	sp, #112	; 0x70
 8008bfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c00:	b003      	add	sp, #12
 8008c02:	4770      	bx	lr
 8008c04:	20000160 	.word	0x20000160
 8008c08:	ffff0208 	.word	0xffff0208

08008c0c <quorem>:
 8008c0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c10:	6903      	ldr	r3, [r0, #16]
 8008c12:	690c      	ldr	r4, [r1, #16]
 8008c14:	42a3      	cmp	r3, r4
 8008c16:	4607      	mov	r7, r0
 8008c18:	f2c0 8081 	blt.w	8008d1e <quorem+0x112>
 8008c1c:	3c01      	subs	r4, #1
 8008c1e:	f101 0814 	add.w	r8, r1, #20
 8008c22:	f100 0514 	add.w	r5, r0, #20
 8008c26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c2a:	9301      	str	r3, [sp, #4]
 8008c2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008c30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c34:	3301      	adds	r3, #1
 8008c36:	429a      	cmp	r2, r3
 8008c38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008c3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008c40:	fbb2 f6f3 	udiv	r6, r2, r3
 8008c44:	d331      	bcc.n	8008caa <quorem+0x9e>
 8008c46:	f04f 0e00 	mov.w	lr, #0
 8008c4a:	4640      	mov	r0, r8
 8008c4c:	46ac      	mov	ip, r5
 8008c4e:	46f2      	mov	sl, lr
 8008c50:	f850 2b04 	ldr.w	r2, [r0], #4
 8008c54:	b293      	uxth	r3, r2
 8008c56:	fb06 e303 	mla	r3, r6, r3, lr
 8008c5a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	ebaa 0303 	sub.w	r3, sl, r3
 8008c64:	f8dc a000 	ldr.w	sl, [ip]
 8008c68:	0c12      	lsrs	r2, r2, #16
 8008c6a:	fa13 f38a 	uxtah	r3, r3, sl
 8008c6e:	fb06 e202 	mla	r2, r6, r2, lr
 8008c72:	9300      	str	r3, [sp, #0]
 8008c74:	9b00      	ldr	r3, [sp, #0]
 8008c76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008c7a:	b292      	uxth	r2, r2
 8008c7c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008c80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c84:	f8bd 3000 	ldrh.w	r3, [sp]
 8008c88:	4581      	cmp	r9, r0
 8008c8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c8e:	f84c 3b04 	str.w	r3, [ip], #4
 8008c92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008c96:	d2db      	bcs.n	8008c50 <quorem+0x44>
 8008c98:	f855 300b 	ldr.w	r3, [r5, fp]
 8008c9c:	b92b      	cbnz	r3, 8008caa <quorem+0x9e>
 8008c9e:	9b01      	ldr	r3, [sp, #4]
 8008ca0:	3b04      	subs	r3, #4
 8008ca2:	429d      	cmp	r5, r3
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	d32e      	bcc.n	8008d06 <quorem+0xfa>
 8008ca8:	613c      	str	r4, [r7, #16]
 8008caa:	4638      	mov	r0, r7
 8008cac:	f001 f8c6 	bl	8009e3c <__mcmp>
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	db24      	blt.n	8008cfe <quorem+0xf2>
 8008cb4:	3601      	adds	r6, #1
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	f04f 0c00 	mov.w	ip, #0
 8008cbc:	f858 2b04 	ldr.w	r2, [r8], #4
 8008cc0:	f8d0 e000 	ldr.w	lr, [r0]
 8008cc4:	b293      	uxth	r3, r2
 8008cc6:	ebac 0303 	sub.w	r3, ip, r3
 8008cca:	0c12      	lsrs	r2, r2, #16
 8008ccc:	fa13 f38e 	uxtah	r3, r3, lr
 8008cd0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008cd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cde:	45c1      	cmp	r9, r8
 8008ce0:	f840 3b04 	str.w	r3, [r0], #4
 8008ce4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008ce8:	d2e8      	bcs.n	8008cbc <quorem+0xb0>
 8008cea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008cee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cf2:	b922      	cbnz	r2, 8008cfe <quorem+0xf2>
 8008cf4:	3b04      	subs	r3, #4
 8008cf6:	429d      	cmp	r5, r3
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	d30a      	bcc.n	8008d12 <quorem+0x106>
 8008cfc:	613c      	str	r4, [r7, #16]
 8008cfe:	4630      	mov	r0, r6
 8008d00:	b003      	add	sp, #12
 8008d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d06:	6812      	ldr	r2, [r2, #0]
 8008d08:	3b04      	subs	r3, #4
 8008d0a:	2a00      	cmp	r2, #0
 8008d0c:	d1cc      	bne.n	8008ca8 <quorem+0x9c>
 8008d0e:	3c01      	subs	r4, #1
 8008d10:	e7c7      	b.n	8008ca2 <quorem+0x96>
 8008d12:	6812      	ldr	r2, [r2, #0]
 8008d14:	3b04      	subs	r3, #4
 8008d16:	2a00      	cmp	r2, #0
 8008d18:	d1f0      	bne.n	8008cfc <quorem+0xf0>
 8008d1a:	3c01      	subs	r4, #1
 8008d1c:	e7eb      	b.n	8008cf6 <quorem+0xea>
 8008d1e:	2000      	movs	r0, #0
 8008d20:	e7ee      	b.n	8008d00 <quorem+0xf4>
 8008d22:	0000      	movs	r0, r0
 8008d24:	0000      	movs	r0, r0
	...

08008d28 <_dtoa_r>:
 8008d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d2c:	ed2d 8b04 	vpush	{d8-d9}
 8008d30:	ec57 6b10 	vmov	r6, r7, d0
 8008d34:	b093      	sub	sp, #76	; 0x4c
 8008d36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008d38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008d3c:	9106      	str	r1, [sp, #24]
 8008d3e:	ee10 aa10 	vmov	sl, s0
 8008d42:	4604      	mov	r4, r0
 8008d44:	9209      	str	r2, [sp, #36]	; 0x24
 8008d46:	930c      	str	r3, [sp, #48]	; 0x30
 8008d48:	46bb      	mov	fp, r7
 8008d4a:	b975      	cbnz	r5, 8008d6a <_dtoa_r+0x42>
 8008d4c:	2010      	movs	r0, #16
 8008d4e:	f000 fddd 	bl	800990c <malloc>
 8008d52:	4602      	mov	r2, r0
 8008d54:	6260      	str	r0, [r4, #36]	; 0x24
 8008d56:	b920      	cbnz	r0, 8008d62 <_dtoa_r+0x3a>
 8008d58:	4ba7      	ldr	r3, [pc, #668]	; (8008ff8 <_dtoa_r+0x2d0>)
 8008d5a:	21ea      	movs	r1, #234	; 0xea
 8008d5c:	48a7      	ldr	r0, [pc, #668]	; (8008ffc <_dtoa_r+0x2d4>)
 8008d5e:	f001 fbd1 	bl	800a504 <__assert_func>
 8008d62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008d66:	6005      	str	r5, [r0, #0]
 8008d68:	60c5      	str	r5, [r0, #12]
 8008d6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d6c:	6819      	ldr	r1, [r3, #0]
 8008d6e:	b151      	cbz	r1, 8008d86 <_dtoa_r+0x5e>
 8008d70:	685a      	ldr	r2, [r3, #4]
 8008d72:	604a      	str	r2, [r1, #4]
 8008d74:	2301      	movs	r3, #1
 8008d76:	4093      	lsls	r3, r2
 8008d78:	608b      	str	r3, [r1, #8]
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f000 fe1c 	bl	80099b8 <_Bfree>
 8008d80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d82:	2200      	movs	r2, #0
 8008d84:	601a      	str	r2, [r3, #0]
 8008d86:	1e3b      	subs	r3, r7, #0
 8008d88:	bfaa      	itet	ge
 8008d8a:	2300      	movge	r3, #0
 8008d8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008d90:	f8c8 3000 	strge.w	r3, [r8]
 8008d94:	4b9a      	ldr	r3, [pc, #616]	; (8009000 <_dtoa_r+0x2d8>)
 8008d96:	bfbc      	itt	lt
 8008d98:	2201      	movlt	r2, #1
 8008d9a:	f8c8 2000 	strlt.w	r2, [r8]
 8008d9e:	ea33 030b 	bics.w	r3, r3, fp
 8008da2:	d11b      	bne.n	8008ddc <_dtoa_r+0xb4>
 8008da4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008da6:	f242 730f 	movw	r3, #9999	; 0x270f
 8008daa:	6013      	str	r3, [r2, #0]
 8008dac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008db0:	4333      	orrs	r3, r6
 8008db2:	f000 8592 	beq.w	80098da <_dtoa_r+0xbb2>
 8008db6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008db8:	b963      	cbnz	r3, 8008dd4 <_dtoa_r+0xac>
 8008dba:	4b92      	ldr	r3, [pc, #584]	; (8009004 <_dtoa_r+0x2dc>)
 8008dbc:	e022      	b.n	8008e04 <_dtoa_r+0xdc>
 8008dbe:	4b92      	ldr	r3, [pc, #584]	; (8009008 <_dtoa_r+0x2e0>)
 8008dc0:	9301      	str	r3, [sp, #4]
 8008dc2:	3308      	adds	r3, #8
 8008dc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008dc6:	6013      	str	r3, [r2, #0]
 8008dc8:	9801      	ldr	r0, [sp, #4]
 8008dca:	b013      	add	sp, #76	; 0x4c
 8008dcc:	ecbd 8b04 	vpop	{d8-d9}
 8008dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dd4:	4b8b      	ldr	r3, [pc, #556]	; (8009004 <_dtoa_r+0x2dc>)
 8008dd6:	9301      	str	r3, [sp, #4]
 8008dd8:	3303      	adds	r3, #3
 8008dda:	e7f3      	b.n	8008dc4 <_dtoa_r+0x9c>
 8008ddc:	2200      	movs	r2, #0
 8008dde:	2300      	movs	r3, #0
 8008de0:	4650      	mov	r0, sl
 8008de2:	4659      	mov	r1, fp
 8008de4:	f7f7 fe78 	bl	8000ad8 <__aeabi_dcmpeq>
 8008de8:	ec4b ab19 	vmov	d9, sl, fp
 8008dec:	4680      	mov	r8, r0
 8008dee:	b158      	cbz	r0, 8008e08 <_dtoa_r+0xe0>
 8008df0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008df2:	2301      	movs	r3, #1
 8008df4:	6013      	str	r3, [r2, #0]
 8008df6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	f000 856b 	beq.w	80098d4 <_dtoa_r+0xbac>
 8008dfe:	4883      	ldr	r0, [pc, #524]	; (800900c <_dtoa_r+0x2e4>)
 8008e00:	6018      	str	r0, [r3, #0]
 8008e02:	1e43      	subs	r3, r0, #1
 8008e04:	9301      	str	r3, [sp, #4]
 8008e06:	e7df      	b.n	8008dc8 <_dtoa_r+0xa0>
 8008e08:	ec4b ab10 	vmov	d0, sl, fp
 8008e0c:	aa10      	add	r2, sp, #64	; 0x40
 8008e0e:	a911      	add	r1, sp, #68	; 0x44
 8008e10:	4620      	mov	r0, r4
 8008e12:	f001 f8b9 	bl	8009f88 <__d2b>
 8008e16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008e1a:	ee08 0a10 	vmov	s16, r0
 8008e1e:	2d00      	cmp	r5, #0
 8008e20:	f000 8084 	beq.w	8008f2c <_dtoa_r+0x204>
 8008e24:	ee19 3a90 	vmov	r3, s19
 8008e28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008e30:	4656      	mov	r6, sl
 8008e32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008e36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008e3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008e3e:	4b74      	ldr	r3, [pc, #464]	; (8009010 <_dtoa_r+0x2e8>)
 8008e40:	2200      	movs	r2, #0
 8008e42:	4630      	mov	r0, r6
 8008e44:	4639      	mov	r1, r7
 8008e46:	f7f7 fa27 	bl	8000298 <__aeabi_dsub>
 8008e4a:	a365      	add	r3, pc, #404	; (adr r3, 8008fe0 <_dtoa_r+0x2b8>)
 8008e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e50:	f7f7 fbda 	bl	8000608 <__aeabi_dmul>
 8008e54:	a364      	add	r3, pc, #400	; (adr r3, 8008fe8 <_dtoa_r+0x2c0>)
 8008e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5a:	f7f7 fa1f 	bl	800029c <__adddf3>
 8008e5e:	4606      	mov	r6, r0
 8008e60:	4628      	mov	r0, r5
 8008e62:	460f      	mov	r7, r1
 8008e64:	f7f7 fb66 	bl	8000534 <__aeabi_i2d>
 8008e68:	a361      	add	r3, pc, #388	; (adr r3, 8008ff0 <_dtoa_r+0x2c8>)
 8008e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6e:	f7f7 fbcb 	bl	8000608 <__aeabi_dmul>
 8008e72:	4602      	mov	r2, r0
 8008e74:	460b      	mov	r3, r1
 8008e76:	4630      	mov	r0, r6
 8008e78:	4639      	mov	r1, r7
 8008e7a:	f7f7 fa0f 	bl	800029c <__adddf3>
 8008e7e:	4606      	mov	r6, r0
 8008e80:	460f      	mov	r7, r1
 8008e82:	f7f7 fe71 	bl	8000b68 <__aeabi_d2iz>
 8008e86:	2200      	movs	r2, #0
 8008e88:	9000      	str	r0, [sp, #0]
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	4630      	mov	r0, r6
 8008e8e:	4639      	mov	r1, r7
 8008e90:	f7f7 fe2c 	bl	8000aec <__aeabi_dcmplt>
 8008e94:	b150      	cbz	r0, 8008eac <_dtoa_r+0x184>
 8008e96:	9800      	ldr	r0, [sp, #0]
 8008e98:	f7f7 fb4c 	bl	8000534 <__aeabi_i2d>
 8008e9c:	4632      	mov	r2, r6
 8008e9e:	463b      	mov	r3, r7
 8008ea0:	f7f7 fe1a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ea4:	b910      	cbnz	r0, 8008eac <_dtoa_r+0x184>
 8008ea6:	9b00      	ldr	r3, [sp, #0]
 8008ea8:	3b01      	subs	r3, #1
 8008eaa:	9300      	str	r3, [sp, #0]
 8008eac:	9b00      	ldr	r3, [sp, #0]
 8008eae:	2b16      	cmp	r3, #22
 8008eb0:	d85a      	bhi.n	8008f68 <_dtoa_r+0x240>
 8008eb2:	9a00      	ldr	r2, [sp, #0]
 8008eb4:	4b57      	ldr	r3, [pc, #348]	; (8009014 <_dtoa_r+0x2ec>)
 8008eb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ebe:	ec51 0b19 	vmov	r0, r1, d9
 8008ec2:	f7f7 fe13 	bl	8000aec <__aeabi_dcmplt>
 8008ec6:	2800      	cmp	r0, #0
 8008ec8:	d050      	beq.n	8008f6c <_dtoa_r+0x244>
 8008eca:	9b00      	ldr	r3, [sp, #0]
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	9300      	str	r3, [sp, #0]
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ed4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ed6:	1b5d      	subs	r5, r3, r5
 8008ed8:	1e6b      	subs	r3, r5, #1
 8008eda:	9305      	str	r3, [sp, #20]
 8008edc:	bf45      	ittet	mi
 8008ede:	f1c5 0301 	rsbmi	r3, r5, #1
 8008ee2:	9304      	strmi	r3, [sp, #16]
 8008ee4:	2300      	movpl	r3, #0
 8008ee6:	2300      	movmi	r3, #0
 8008ee8:	bf4c      	ite	mi
 8008eea:	9305      	strmi	r3, [sp, #20]
 8008eec:	9304      	strpl	r3, [sp, #16]
 8008eee:	9b00      	ldr	r3, [sp, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	db3d      	blt.n	8008f70 <_dtoa_r+0x248>
 8008ef4:	9b05      	ldr	r3, [sp, #20]
 8008ef6:	9a00      	ldr	r2, [sp, #0]
 8008ef8:	920a      	str	r2, [sp, #40]	; 0x28
 8008efa:	4413      	add	r3, r2
 8008efc:	9305      	str	r3, [sp, #20]
 8008efe:	2300      	movs	r3, #0
 8008f00:	9307      	str	r3, [sp, #28]
 8008f02:	9b06      	ldr	r3, [sp, #24]
 8008f04:	2b09      	cmp	r3, #9
 8008f06:	f200 8089 	bhi.w	800901c <_dtoa_r+0x2f4>
 8008f0a:	2b05      	cmp	r3, #5
 8008f0c:	bfc4      	itt	gt
 8008f0e:	3b04      	subgt	r3, #4
 8008f10:	9306      	strgt	r3, [sp, #24]
 8008f12:	9b06      	ldr	r3, [sp, #24]
 8008f14:	f1a3 0302 	sub.w	r3, r3, #2
 8008f18:	bfcc      	ite	gt
 8008f1a:	2500      	movgt	r5, #0
 8008f1c:	2501      	movle	r5, #1
 8008f1e:	2b03      	cmp	r3, #3
 8008f20:	f200 8087 	bhi.w	8009032 <_dtoa_r+0x30a>
 8008f24:	e8df f003 	tbb	[pc, r3]
 8008f28:	59383a2d 	.word	0x59383a2d
 8008f2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008f30:	441d      	add	r5, r3
 8008f32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008f36:	2b20      	cmp	r3, #32
 8008f38:	bfc1      	itttt	gt
 8008f3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008f3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008f42:	fa0b f303 	lslgt.w	r3, fp, r3
 8008f46:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008f4a:	bfda      	itte	le
 8008f4c:	f1c3 0320 	rsble	r3, r3, #32
 8008f50:	fa06 f003 	lslle.w	r0, r6, r3
 8008f54:	4318      	orrgt	r0, r3
 8008f56:	f7f7 fadd 	bl	8000514 <__aeabi_ui2d>
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	4606      	mov	r6, r0
 8008f5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008f62:	3d01      	subs	r5, #1
 8008f64:	930e      	str	r3, [sp, #56]	; 0x38
 8008f66:	e76a      	b.n	8008e3e <_dtoa_r+0x116>
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e7b2      	b.n	8008ed2 <_dtoa_r+0x1aa>
 8008f6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008f6e:	e7b1      	b.n	8008ed4 <_dtoa_r+0x1ac>
 8008f70:	9b04      	ldr	r3, [sp, #16]
 8008f72:	9a00      	ldr	r2, [sp, #0]
 8008f74:	1a9b      	subs	r3, r3, r2
 8008f76:	9304      	str	r3, [sp, #16]
 8008f78:	4253      	negs	r3, r2
 8008f7a:	9307      	str	r3, [sp, #28]
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	930a      	str	r3, [sp, #40]	; 0x28
 8008f80:	e7bf      	b.n	8008f02 <_dtoa_r+0x1da>
 8008f82:	2300      	movs	r3, #0
 8008f84:	9308      	str	r3, [sp, #32]
 8008f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	dc55      	bgt.n	8009038 <_dtoa_r+0x310>
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008f92:	461a      	mov	r2, r3
 8008f94:	9209      	str	r2, [sp, #36]	; 0x24
 8008f96:	e00c      	b.n	8008fb2 <_dtoa_r+0x28a>
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e7f3      	b.n	8008f84 <_dtoa_r+0x25c>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fa0:	9308      	str	r3, [sp, #32]
 8008fa2:	9b00      	ldr	r3, [sp, #0]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	9302      	str	r3, [sp, #8]
 8008fa8:	3301      	adds	r3, #1
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	9303      	str	r3, [sp, #12]
 8008fae:	bfb8      	it	lt
 8008fb0:	2301      	movlt	r3, #1
 8008fb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	6042      	str	r2, [r0, #4]
 8008fb8:	2204      	movs	r2, #4
 8008fba:	f102 0614 	add.w	r6, r2, #20
 8008fbe:	429e      	cmp	r6, r3
 8008fc0:	6841      	ldr	r1, [r0, #4]
 8008fc2:	d93d      	bls.n	8009040 <_dtoa_r+0x318>
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	f000 fcb7 	bl	8009938 <_Balloc>
 8008fca:	9001      	str	r0, [sp, #4]
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	d13b      	bne.n	8009048 <_dtoa_r+0x320>
 8008fd0:	4b11      	ldr	r3, [pc, #68]	; (8009018 <_dtoa_r+0x2f0>)
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008fd8:	e6c0      	b.n	8008d5c <_dtoa_r+0x34>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e7df      	b.n	8008f9e <_dtoa_r+0x276>
 8008fde:	bf00      	nop
 8008fe0:	636f4361 	.word	0x636f4361
 8008fe4:	3fd287a7 	.word	0x3fd287a7
 8008fe8:	8b60c8b3 	.word	0x8b60c8b3
 8008fec:	3fc68a28 	.word	0x3fc68a28
 8008ff0:	509f79fb 	.word	0x509f79fb
 8008ff4:	3fd34413 	.word	0x3fd34413
 8008ff8:	0800b191 	.word	0x0800b191
 8008ffc:	0800b1a8 	.word	0x0800b1a8
 8009000:	7ff00000 	.word	0x7ff00000
 8009004:	0800b18d 	.word	0x0800b18d
 8009008:	0800b184 	.word	0x0800b184
 800900c:	0800b161 	.word	0x0800b161
 8009010:	3ff80000 	.word	0x3ff80000
 8009014:	0800b298 	.word	0x0800b298
 8009018:	0800b203 	.word	0x0800b203
 800901c:	2501      	movs	r5, #1
 800901e:	2300      	movs	r3, #0
 8009020:	9306      	str	r3, [sp, #24]
 8009022:	9508      	str	r5, [sp, #32]
 8009024:	f04f 33ff 	mov.w	r3, #4294967295
 8009028:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800902c:	2200      	movs	r2, #0
 800902e:	2312      	movs	r3, #18
 8009030:	e7b0      	b.n	8008f94 <_dtoa_r+0x26c>
 8009032:	2301      	movs	r3, #1
 8009034:	9308      	str	r3, [sp, #32]
 8009036:	e7f5      	b.n	8009024 <_dtoa_r+0x2fc>
 8009038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800903a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800903e:	e7b8      	b.n	8008fb2 <_dtoa_r+0x28a>
 8009040:	3101      	adds	r1, #1
 8009042:	6041      	str	r1, [r0, #4]
 8009044:	0052      	lsls	r2, r2, #1
 8009046:	e7b8      	b.n	8008fba <_dtoa_r+0x292>
 8009048:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800904a:	9a01      	ldr	r2, [sp, #4]
 800904c:	601a      	str	r2, [r3, #0]
 800904e:	9b03      	ldr	r3, [sp, #12]
 8009050:	2b0e      	cmp	r3, #14
 8009052:	f200 809d 	bhi.w	8009190 <_dtoa_r+0x468>
 8009056:	2d00      	cmp	r5, #0
 8009058:	f000 809a 	beq.w	8009190 <_dtoa_r+0x468>
 800905c:	9b00      	ldr	r3, [sp, #0]
 800905e:	2b00      	cmp	r3, #0
 8009060:	dd32      	ble.n	80090c8 <_dtoa_r+0x3a0>
 8009062:	4ab7      	ldr	r2, [pc, #732]	; (8009340 <_dtoa_r+0x618>)
 8009064:	f003 030f 	and.w	r3, r3, #15
 8009068:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800906c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009070:	9b00      	ldr	r3, [sp, #0]
 8009072:	05d8      	lsls	r0, r3, #23
 8009074:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009078:	d516      	bpl.n	80090a8 <_dtoa_r+0x380>
 800907a:	4bb2      	ldr	r3, [pc, #712]	; (8009344 <_dtoa_r+0x61c>)
 800907c:	ec51 0b19 	vmov	r0, r1, d9
 8009080:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009084:	f7f7 fbea 	bl	800085c <__aeabi_ddiv>
 8009088:	f007 070f 	and.w	r7, r7, #15
 800908c:	4682      	mov	sl, r0
 800908e:	468b      	mov	fp, r1
 8009090:	2503      	movs	r5, #3
 8009092:	4eac      	ldr	r6, [pc, #688]	; (8009344 <_dtoa_r+0x61c>)
 8009094:	b957      	cbnz	r7, 80090ac <_dtoa_r+0x384>
 8009096:	4642      	mov	r2, r8
 8009098:	464b      	mov	r3, r9
 800909a:	4650      	mov	r0, sl
 800909c:	4659      	mov	r1, fp
 800909e:	f7f7 fbdd 	bl	800085c <__aeabi_ddiv>
 80090a2:	4682      	mov	sl, r0
 80090a4:	468b      	mov	fp, r1
 80090a6:	e028      	b.n	80090fa <_dtoa_r+0x3d2>
 80090a8:	2502      	movs	r5, #2
 80090aa:	e7f2      	b.n	8009092 <_dtoa_r+0x36a>
 80090ac:	07f9      	lsls	r1, r7, #31
 80090ae:	d508      	bpl.n	80090c2 <_dtoa_r+0x39a>
 80090b0:	4640      	mov	r0, r8
 80090b2:	4649      	mov	r1, r9
 80090b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80090b8:	f7f7 faa6 	bl	8000608 <__aeabi_dmul>
 80090bc:	3501      	adds	r5, #1
 80090be:	4680      	mov	r8, r0
 80090c0:	4689      	mov	r9, r1
 80090c2:	107f      	asrs	r7, r7, #1
 80090c4:	3608      	adds	r6, #8
 80090c6:	e7e5      	b.n	8009094 <_dtoa_r+0x36c>
 80090c8:	f000 809b 	beq.w	8009202 <_dtoa_r+0x4da>
 80090cc:	9b00      	ldr	r3, [sp, #0]
 80090ce:	4f9d      	ldr	r7, [pc, #628]	; (8009344 <_dtoa_r+0x61c>)
 80090d0:	425e      	negs	r6, r3
 80090d2:	4b9b      	ldr	r3, [pc, #620]	; (8009340 <_dtoa_r+0x618>)
 80090d4:	f006 020f 	and.w	r2, r6, #15
 80090d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e0:	ec51 0b19 	vmov	r0, r1, d9
 80090e4:	f7f7 fa90 	bl	8000608 <__aeabi_dmul>
 80090e8:	1136      	asrs	r6, r6, #4
 80090ea:	4682      	mov	sl, r0
 80090ec:	468b      	mov	fp, r1
 80090ee:	2300      	movs	r3, #0
 80090f0:	2502      	movs	r5, #2
 80090f2:	2e00      	cmp	r6, #0
 80090f4:	d17a      	bne.n	80091ec <_dtoa_r+0x4c4>
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d1d3      	bne.n	80090a2 <_dtoa_r+0x37a>
 80090fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f000 8082 	beq.w	8009206 <_dtoa_r+0x4de>
 8009102:	4b91      	ldr	r3, [pc, #580]	; (8009348 <_dtoa_r+0x620>)
 8009104:	2200      	movs	r2, #0
 8009106:	4650      	mov	r0, sl
 8009108:	4659      	mov	r1, fp
 800910a:	f7f7 fcef 	bl	8000aec <__aeabi_dcmplt>
 800910e:	2800      	cmp	r0, #0
 8009110:	d079      	beq.n	8009206 <_dtoa_r+0x4de>
 8009112:	9b03      	ldr	r3, [sp, #12]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d076      	beq.n	8009206 <_dtoa_r+0x4de>
 8009118:	9b02      	ldr	r3, [sp, #8]
 800911a:	2b00      	cmp	r3, #0
 800911c:	dd36      	ble.n	800918c <_dtoa_r+0x464>
 800911e:	9b00      	ldr	r3, [sp, #0]
 8009120:	4650      	mov	r0, sl
 8009122:	4659      	mov	r1, fp
 8009124:	1e5f      	subs	r7, r3, #1
 8009126:	2200      	movs	r2, #0
 8009128:	4b88      	ldr	r3, [pc, #544]	; (800934c <_dtoa_r+0x624>)
 800912a:	f7f7 fa6d 	bl	8000608 <__aeabi_dmul>
 800912e:	9e02      	ldr	r6, [sp, #8]
 8009130:	4682      	mov	sl, r0
 8009132:	468b      	mov	fp, r1
 8009134:	3501      	adds	r5, #1
 8009136:	4628      	mov	r0, r5
 8009138:	f7f7 f9fc 	bl	8000534 <__aeabi_i2d>
 800913c:	4652      	mov	r2, sl
 800913e:	465b      	mov	r3, fp
 8009140:	f7f7 fa62 	bl	8000608 <__aeabi_dmul>
 8009144:	4b82      	ldr	r3, [pc, #520]	; (8009350 <_dtoa_r+0x628>)
 8009146:	2200      	movs	r2, #0
 8009148:	f7f7 f8a8 	bl	800029c <__adddf3>
 800914c:	46d0      	mov	r8, sl
 800914e:	46d9      	mov	r9, fp
 8009150:	4682      	mov	sl, r0
 8009152:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009156:	2e00      	cmp	r6, #0
 8009158:	d158      	bne.n	800920c <_dtoa_r+0x4e4>
 800915a:	4b7e      	ldr	r3, [pc, #504]	; (8009354 <_dtoa_r+0x62c>)
 800915c:	2200      	movs	r2, #0
 800915e:	4640      	mov	r0, r8
 8009160:	4649      	mov	r1, r9
 8009162:	f7f7 f899 	bl	8000298 <__aeabi_dsub>
 8009166:	4652      	mov	r2, sl
 8009168:	465b      	mov	r3, fp
 800916a:	4680      	mov	r8, r0
 800916c:	4689      	mov	r9, r1
 800916e:	f7f7 fcdb 	bl	8000b28 <__aeabi_dcmpgt>
 8009172:	2800      	cmp	r0, #0
 8009174:	f040 8295 	bne.w	80096a2 <_dtoa_r+0x97a>
 8009178:	4652      	mov	r2, sl
 800917a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800917e:	4640      	mov	r0, r8
 8009180:	4649      	mov	r1, r9
 8009182:	f7f7 fcb3 	bl	8000aec <__aeabi_dcmplt>
 8009186:	2800      	cmp	r0, #0
 8009188:	f040 8289 	bne.w	800969e <_dtoa_r+0x976>
 800918c:	ec5b ab19 	vmov	sl, fp, d9
 8009190:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009192:	2b00      	cmp	r3, #0
 8009194:	f2c0 8148 	blt.w	8009428 <_dtoa_r+0x700>
 8009198:	9a00      	ldr	r2, [sp, #0]
 800919a:	2a0e      	cmp	r2, #14
 800919c:	f300 8144 	bgt.w	8009428 <_dtoa_r+0x700>
 80091a0:	4b67      	ldr	r3, [pc, #412]	; (8009340 <_dtoa_r+0x618>)
 80091a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80091aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f280 80d5 	bge.w	800935c <_dtoa_r+0x634>
 80091b2:	9b03      	ldr	r3, [sp, #12]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f300 80d1 	bgt.w	800935c <_dtoa_r+0x634>
 80091ba:	f040 826f 	bne.w	800969c <_dtoa_r+0x974>
 80091be:	4b65      	ldr	r3, [pc, #404]	; (8009354 <_dtoa_r+0x62c>)
 80091c0:	2200      	movs	r2, #0
 80091c2:	4640      	mov	r0, r8
 80091c4:	4649      	mov	r1, r9
 80091c6:	f7f7 fa1f 	bl	8000608 <__aeabi_dmul>
 80091ca:	4652      	mov	r2, sl
 80091cc:	465b      	mov	r3, fp
 80091ce:	f7f7 fca1 	bl	8000b14 <__aeabi_dcmpge>
 80091d2:	9e03      	ldr	r6, [sp, #12]
 80091d4:	4637      	mov	r7, r6
 80091d6:	2800      	cmp	r0, #0
 80091d8:	f040 8245 	bne.w	8009666 <_dtoa_r+0x93e>
 80091dc:	9d01      	ldr	r5, [sp, #4]
 80091de:	2331      	movs	r3, #49	; 0x31
 80091e0:	f805 3b01 	strb.w	r3, [r5], #1
 80091e4:	9b00      	ldr	r3, [sp, #0]
 80091e6:	3301      	adds	r3, #1
 80091e8:	9300      	str	r3, [sp, #0]
 80091ea:	e240      	b.n	800966e <_dtoa_r+0x946>
 80091ec:	07f2      	lsls	r2, r6, #31
 80091ee:	d505      	bpl.n	80091fc <_dtoa_r+0x4d4>
 80091f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091f4:	f7f7 fa08 	bl	8000608 <__aeabi_dmul>
 80091f8:	3501      	adds	r5, #1
 80091fa:	2301      	movs	r3, #1
 80091fc:	1076      	asrs	r6, r6, #1
 80091fe:	3708      	adds	r7, #8
 8009200:	e777      	b.n	80090f2 <_dtoa_r+0x3ca>
 8009202:	2502      	movs	r5, #2
 8009204:	e779      	b.n	80090fa <_dtoa_r+0x3d2>
 8009206:	9f00      	ldr	r7, [sp, #0]
 8009208:	9e03      	ldr	r6, [sp, #12]
 800920a:	e794      	b.n	8009136 <_dtoa_r+0x40e>
 800920c:	9901      	ldr	r1, [sp, #4]
 800920e:	4b4c      	ldr	r3, [pc, #304]	; (8009340 <_dtoa_r+0x618>)
 8009210:	4431      	add	r1, r6
 8009212:	910d      	str	r1, [sp, #52]	; 0x34
 8009214:	9908      	ldr	r1, [sp, #32]
 8009216:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800921a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800921e:	2900      	cmp	r1, #0
 8009220:	d043      	beq.n	80092aa <_dtoa_r+0x582>
 8009222:	494d      	ldr	r1, [pc, #308]	; (8009358 <_dtoa_r+0x630>)
 8009224:	2000      	movs	r0, #0
 8009226:	f7f7 fb19 	bl	800085c <__aeabi_ddiv>
 800922a:	4652      	mov	r2, sl
 800922c:	465b      	mov	r3, fp
 800922e:	f7f7 f833 	bl	8000298 <__aeabi_dsub>
 8009232:	9d01      	ldr	r5, [sp, #4]
 8009234:	4682      	mov	sl, r0
 8009236:	468b      	mov	fp, r1
 8009238:	4649      	mov	r1, r9
 800923a:	4640      	mov	r0, r8
 800923c:	f7f7 fc94 	bl	8000b68 <__aeabi_d2iz>
 8009240:	4606      	mov	r6, r0
 8009242:	f7f7 f977 	bl	8000534 <__aeabi_i2d>
 8009246:	4602      	mov	r2, r0
 8009248:	460b      	mov	r3, r1
 800924a:	4640      	mov	r0, r8
 800924c:	4649      	mov	r1, r9
 800924e:	f7f7 f823 	bl	8000298 <__aeabi_dsub>
 8009252:	3630      	adds	r6, #48	; 0x30
 8009254:	f805 6b01 	strb.w	r6, [r5], #1
 8009258:	4652      	mov	r2, sl
 800925a:	465b      	mov	r3, fp
 800925c:	4680      	mov	r8, r0
 800925e:	4689      	mov	r9, r1
 8009260:	f7f7 fc44 	bl	8000aec <__aeabi_dcmplt>
 8009264:	2800      	cmp	r0, #0
 8009266:	d163      	bne.n	8009330 <_dtoa_r+0x608>
 8009268:	4642      	mov	r2, r8
 800926a:	464b      	mov	r3, r9
 800926c:	4936      	ldr	r1, [pc, #216]	; (8009348 <_dtoa_r+0x620>)
 800926e:	2000      	movs	r0, #0
 8009270:	f7f7 f812 	bl	8000298 <__aeabi_dsub>
 8009274:	4652      	mov	r2, sl
 8009276:	465b      	mov	r3, fp
 8009278:	f7f7 fc38 	bl	8000aec <__aeabi_dcmplt>
 800927c:	2800      	cmp	r0, #0
 800927e:	f040 80b5 	bne.w	80093ec <_dtoa_r+0x6c4>
 8009282:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009284:	429d      	cmp	r5, r3
 8009286:	d081      	beq.n	800918c <_dtoa_r+0x464>
 8009288:	4b30      	ldr	r3, [pc, #192]	; (800934c <_dtoa_r+0x624>)
 800928a:	2200      	movs	r2, #0
 800928c:	4650      	mov	r0, sl
 800928e:	4659      	mov	r1, fp
 8009290:	f7f7 f9ba 	bl	8000608 <__aeabi_dmul>
 8009294:	4b2d      	ldr	r3, [pc, #180]	; (800934c <_dtoa_r+0x624>)
 8009296:	4682      	mov	sl, r0
 8009298:	468b      	mov	fp, r1
 800929a:	4640      	mov	r0, r8
 800929c:	4649      	mov	r1, r9
 800929e:	2200      	movs	r2, #0
 80092a0:	f7f7 f9b2 	bl	8000608 <__aeabi_dmul>
 80092a4:	4680      	mov	r8, r0
 80092a6:	4689      	mov	r9, r1
 80092a8:	e7c6      	b.n	8009238 <_dtoa_r+0x510>
 80092aa:	4650      	mov	r0, sl
 80092ac:	4659      	mov	r1, fp
 80092ae:	f7f7 f9ab 	bl	8000608 <__aeabi_dmul>
 80092b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092b4:	9d01      	ldr	r5, [sp, #4]
 80092b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80092b8:	4682      	mov	sl, r0
 80092ba:	468b      	mov	fp, r1
 80092bc:	4649      	mov	r1, r9
 80092be:	4640      	mov	r0, r8
 80092c0:	f7f7 fc52 	bl	8000b68 <__aeabi_d2iz>
 80092c4:	4606      	mov	r6, r0
 80092c6:	f7f7 f935 	bl	8000534 <__aeabi_i2d>
 80092ca:	3630      	adds	r6, #48	; 0x30
 80092cc:	4602      	mov	r2, r0
 80092ce:	460b      	mov	r3, r1
 80092d0:	4640      	mov	r0, r8
 80092d2:	4649      	mov	r1, r9
 80092d4:	f7f6 ffe0 	bl	8000298 <__aeabi_dsub>
 80092d8:	f805 6b01 	strb.w	r6, [r5], #1
 80092dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092de:	429d      	cmp	r5, r3
 80092e0:	4680      	mov	r8, r0
 80092e2:	4689      	mov	r9, r1
 80092e4:	f04f 0200 	mov.w	r2, #0
 80092e8:	d124      	bne.n	8009334 <_dtoa_r+0x60c>
 80092ea:	4b1b      	ldr	r3, [pc, #108]	; (8009358 <_dtoa_r+0x630>)
 80092ec:	4650      	mov	r0, sl
 80092ee:	4659      	mov	r1, fp
 80092f0:	f7f6 ffd4 	bl	800029c <__adddf3>
 80092f4:	4602      	mov	r2, r0
 80092f6:	460b      	mov	r3, r1
 80092f8:	4640      	mov	r0, r8
 80092fa:	4649      	mov	r1, r9
 80092fc:	f7f7 fc14 	bl	8000b28 <__aeabi_dcmpgt>
 8009300:	2800      	cmp	r0, #0
 8009302:	d173      	bne.n	80093ec <_dtoa_r+0x6c4>
 8009304:	4652      	mov	r2, sl
 8009306:	465b      	mov	r3, fp
 8009308:	4913      	ldr	r1, [pc, #76]	; (8009358 <_dtoa_r+0x630>)
 800930a:	2000      	movs	r0, #0
 800930c:	f7f6 ffc4 	bl	8000298 <__aeabi_dsub>
 8009310:	4602      	mov	r2, r0
 8009312:	460b      	mov	r3, r1
 8009314:	4640      	mov	r0, r8
 8009316:	4649      	mov	r1, r9
 8009318:	f7f7 fbe8 	bl	8000aec <__aeabi_dcmplt>
 800931c:	2800      	cmp	r0, #0
 800931e:	f43f af35 	beq.w	800918c <_dtoa_r+0x464>
 8009322:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009324:	1e6b      	subs	r3, r5, #1
 8009326:	930f      	str	r3, [sp, #60]	; 0x3c
 8009328:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800932c:	2b30      	cmp	r3, #48	; 0x30
 800932e:	d0f8      	beq.n	8009322 <_dtoa_r+0x5fa>
 8009330:	9700      	str	r7, [sp, #0]
 8009332:	e049      	b.n	80093c8 <_dtoa_r+0x6a0>
 8009334:	4b05      	ldr	r3, [pc, #20]	; (800934c <_dtoa_r+0x624>)
 8009336:	f7f7 f967 	bl	8000608 <__aeabi_dmul>
 800933a:	4680      	mov	r8, r0
 800933c:	4689      	mov	r9, r1
 800933e:	e7bd      	b.n	80092bc <_dtoa_r+0x594>
 8009340:	0800b298 	.word	0x0800b298
 8009344:	0800b270 	.word	0x0800b270
 8009348:	3ff00000 	.word	0x3ff00000
 800934c:	40240000 	.word	0x40240000
 8009350:	401c0000 	.word	0x401c0000
 8009354:	40140000 	.word	0x40140000
 8009358:	3fe00000 	.word	0x3fe00000
 800935c:	9d01      	ldr	r5, [sp, #4]
 800935e:	4656      	mov	r6, sl
 8009360:	465f      	mov	r7, fp
 8009362:	4642      	mov	r2, r8
 8009364:	464b      	mov	r3, r9
 8009366:	4630      	mov	r0, r6
 8009368:	4639      	mov	r1, r7
 800936a:	f7f7 fa77 	bl	800085c <__aeabi_ddiv>
 800936e:	f7f7 fbfb 	bl	8000b68 <__aeabi_d2iz>
 8009372:	4682      	mov	sl, r0
 8009374:	f7f7 f8de 	bl	8000534 <__aeabi_i2d>
 8009378:	4642      	mov	r2, r8
 800937a:	464b      	mov	r3, r9
 800937c:	f7f7 f944 	bl	8000608 <__aeabi_dmul>
 8009380:	4602      	mov	r2, r0
 8009382:	460b      	mov	r3, r1
 8009384:	4630      	mov	r0, r6
 8009386:	4639      	mov	r1, r7
 8009388:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800938c:	f7f6 ff84 	bl	8000298 <__aeabi_dsub>
 8009390:	f805 6b01 	strb.w	r6, [r5], #1
 8009394:	9e01      	ldr	r6, [sp, #4]
 8009396:	9f03      	ldr	r7, [sp, #12]
 8009398:	1bae      	subs	r6, r5, r6
 800939a:	42b7      	cmp	r7, r6
 800939c:	4602      	mov	r2, r0
 800939e:	460b      	mov	r3, r1
 80093a0:	d135      	bne.n	800940e <_dtoa_r+0x6e6>
 80093a2:	f7f6 ff7b 	bl	800029c <__adddf3>
 80093a6:	4642      	mov	r2, r8
 80093a8:	464b      	mov	r3, r9
 80093aa:	4606      	mov	r6, r0
 80093ac:	460f      	mov	r7, r1
 80093ae:	f7f7 fbbb 	bl	8000b28 <__aeabi_dcmpgt>
 80093b2:	b9d0      	cbnz	r0, 80093ea <_dtoa_r+0x6c2>
 80093b4:	4642      	mov	r2, r8
 80093b6:	464b      	mov	r3, r9
 80093b8:	4630      	mov	r0, r6
 80093ba:	4639      	mov	r1, r7
 80093bc:	f7f7 fb8c 	bl	8000ad8 <__aeabi_dcmpeq>
 80093c0:	b110      	cbz	r0, 80093c8 <_dtoa_r+0x6a0>
 80093c2:	f01a 0f01 	tst.w	sl, #1
 80093c6:	d110      	bne.n	80093ea <_dtoa_r+0x6c2>
 80093c8:	4620      	mov	r0, r4
 80093ca:	ee18 1a10 	vmov	r1, s16
 80093ce:	f000 faf3 	bl	80099b8 <_Bfree>
 80093d2:	2300      	movs	r3, #0
 80093d4:	9800      	ldr	r0, [sp, #0]
 80093d6:	702b      	strb	r3, [r5, #0]
 80093d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093da:	3001      	adds	r0, #1
 80093dc:	6018      	str	r0, [r3, #0]
 80093de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	f43f acf1 	beq.w	8008dc8 <_dtoa_r+0xa0>
 80093e6:	601d      	str	r5, [r3, #0]
 80093e8:	e4ee      	b.n	8008dc8 <_dtoa_r+0xa0>
 80093ea:	9f00      	ldr	r7, [sp, #0]
 80093ec:	462b      	mov	r3, r5
 80093ee:	461d      	mov	r5, r3
 80093f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80093f4:	2a39      	cmp	r2, #57	; 0x39
 80093f6:	d106      	bne.n	8009406 <_dtoa_r+0x6de>
 80093f8:	9a01      	ldr	r2, [sp, #4]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d1f7      	bne.n	80093ee <_dtoa_r+0x6c6>
 80093fe:	9901      	ldr	r1, [sp, #4]
 8009400:	2230      	movs	r2, #48	; 0x30
 8009402:	3701      	adds	r7, #1
 8009404:	700a      	strb	r2, [r1, #0]
 8009406:	781a      	ldrb	r2, [r3, #0]
 8009408:	3201      	adds	r2, #1
 800940a:	701a      	strb	r2, [r3, #0]
 800940c:	e790      	b.n	8009330 <_dtoa_r+0x608>
 800940e:	4ba6      	ldr	r3, [pc, #664]	; (80096a8 <_dtoa_r+0x980>)
 8009410:	2200      	movs	r2, #0
 8009412:	f7f7 f8f9 	bl	8000608 <__aeabi_dmul>
 8009416:	2200      	movs	r2, #0
 8009418:	2300      	movs	r3, #0
 800941a:	4606      	mov	r6, r0
 800941c:	460f      	mov	r7, r1
 800941e:	f7f7 fb5b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009422:	2800      	cmp	r0, #0
 8009424:	d09d      	beq.n	8009362 <_dtoa_r+0x63a>
 8009426:	e7cf      	b.n	80093c8 <_dtoa_r+0x6a0>
 8009428:	9a08      	ldr	r2, [sp, #32]
 800942a:	2a00      	cmp	r2, #0
 800942c:	f000 80d7 	beq.w	80095de <_dtoa_r+0x8b6>
 8009430:	9a06      	ldr	r2, [sp, #24]
 8009432:	2a01      	cmp	r2, #1
 8009434:	f300 80ba 	bgt.w	80095ac <_dtoa_r+0x884>
 8009438:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800943a:	2a00      	cmp	r2, #0
 800943c:	f000 80b2 	beq.w	80095a4 <_dtoa_r+0x87c>
 8009440:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009444:	9e07      	ldr	r6, [sp, #28]
 8009446:	9d04      	ldr	r5, [sp, #16]
 8009448:	9a04      	ldr	r2, [sp, #16]
 800944a:	441a      	add	r2, r3
 800944c:	9204      	str	r2, [sp, #16]
 800944e:	9a05      	ldr	r2, [sp, #20]
 8009450:	2101      	movs	r1, #1
 8009452:	441a      	add	r2, r3
 8009454:	4620      	mov	r0, r4
 8009456:	9205      	str	r2, [sp, #20]
 8009458:	f000 fb66 	bl	8009b28 <__i2b>
 800945c:	4607      	mov	r7, r0
 800945e:	2d00      	cmp	r5, #0
 8009460:	dd0c      	ble.n	800947c <_dtoa_r+0x754>
 8009462:	9b05      	ldr	r3, [sp, #20]
 8009464:	2b00      	cmp	r3, #0
 8009466:	dd09      	ble.n	800947c <_dtoa_r+0x754>
 8009468:	42ab      	cmp	r3, r5
 800946a:	9a04      	ldr	r2, [sp, #16]
 800946c:	bfa8      	it	ge
 800946e:	462b      	movge	r3, r5
 8009470:	1ad2      	subs	r2, r2, r3
 8009472:	9204      	str	r2, [sp, #16]
 8009474:	9a05      	ldr	r2, [sp, #20]
 8009476:	1aed      	subs	r5, r5, r3
 8009478:	1ad3      	subs	r3, r2, r3
 800947a:	9305      	str	r3, [sp, #20]
 800947c:	9b07      	ldr	r3, [sp, #28]
 800947e:	b31b      	cbz	r3, 80094c8 <_dtoa_r+0x7a0>
 8009480:	9b08      	ldr	r3, [sp, #32]
 8009482:	2b00      	cmp	r3, #0
 8009484:	f000 80af 	beq.w	80095e6 <_dtoa_r+0x8be>
 8009488:	2e00      	cmp	r6, #0
 800948a:	dd13      	ble.n	80094b4 <_dtoa_r+0x78c>
 800948c:	4639      	mov	r1, r7
 800948e:	4632      	mov	r2, r6
 8009490:	4620      	mov	r0, r4
 8009492:	f000 fc09 	bl	8009ca8 <__pow5mult>
 8009496:	ee18 2a10 	vmov	r2, s16
 800949a:	4601      	mov	r1, r0
 800949c:	4607      	mov	r7, r0
 800949e:	4620      	mov	r0, r4
 80094a0:	f000 fb58 	bl	8009b54 <__multiply>
 80094a4:	ee18 1a10 	vmov	r1, s16
 80094a8:	4680      	mov	r8, r0
 80094aa:	4620      	mov	r0, r4
 80094ac:	f000 fa84 	bl	80099b8 <_Bfree>
 80094b0:	ee08 8a10 	vmov	s16, r8
 80094b4:	9b07      	ldr	r3, [sp, #28]
 80094b6:	1b9a      	subs	r2, r3, r6
 80094b8:	d006      	beq.n	80094c8 <_dtoa_r+0x7a0>
 80094ba:	ee18 1a10 	vmov	r1, s16
 80094be:	4620      	mov	r0, r4
 80094c0:	f000 fbf2 	bl	8009ca8 <__pow5mult>
 80094c4:	ee08 0a10 	vmov	s16, r0
 80094c8:	2101      	movs	r1, #1
 80094ca:	4620      	mov	r0, r4
 80094cc:	f000 fb2c 	bl	8009b28 <__i2b>
 80094d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	4606      	mov	r6, r0
 80094d6:	f340 8088 	ble.w	80095ea <_dtoa_r+0x8c2>
 80094da:	461a      	mov	r2, r3
 80094dc:	4601      	mov	r1, r0
 80094de:	4620      	mov	r0, r4
 80094e0:	f000 fbe2 	bl	8009ca8 <__pow5mult>
 80094e4:	9b06      	ldr	r3, [sp, #24]
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	4606      	mov	r6, r0
 80094ea:	f340 8081 	ble.w	80095f0 <_dtoa_r+0x8c8>
 80094ee:	f04f 0800 	mov.w	r8, #0
 80094f2:	6933      	ldr	r3, [r6, #16]
 80094f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80094f8:	6918      	ldr	r0, [r3, #16]
 80094fa:	f000 fac5 	bl	8009a88 <__hi0bits>
 80094fe:	f1c0 0020 	rsb	r0, r0, #32
 8009502:	9b05      	ldr	r3, [sp, #20]
 8009504:	4418      	add	r0, r3
 8009506:	f010 001f 	ands.w	r0, r0, #31
 800950a:	f000 8092 	beq.w	8009632 <_dtoa_r+0x90a>
 800950e:	f1c0 0320 	rsb	r3, r0, #32
 8009512:	2b04      	cmp	r3, #4
 8009514:	f340 808a 	ble.w	800962c <_dtoa_r+0x904>
 8009518:	f1c0 001c 	rsb	r0, r0, #28
 800951c:	9b04      	ldr	r3, [sp, #16]
 800951e:	4403      	add	r3, r0
 8009520:	9304      	str	r3, [sp, #16]
 8009522:	9b05      	ldr	r3, [sp, #20]
 8009524:	4403      	add	r3, r0
 8009526:	4405      	add	r5, r0
 8009528:	9305      	str	r3, [sp, #20]
 800952a:	9b04      	ldr	r3, [sp, #16]
 800952c:	2b00      	cmp	r3, #0
 800952e:	dd07      	ble.n	8009540 <_dtoa_r+0x818>
 8009530:	ee18 1a10 	vmov	r1, s16
 8009534:	461a      	mov	r2, r3
 8009536:	4620      	mov	r0, r4
 8009538:	f000 fc10 	bl	8009d5c <__lshift>
 800953c:	ee08 0a10 	vmov	s16, r0
 8009540:	9b05      	ldr	r3, [sp, #20]
 8009542:	2b00      	cmp	r3, #0
 8009544:	dd05      	ble.n	8009552 <_dtoa_r+0x82a>
 8009546:	4631      	mov	r1, r6
 8009548:	461a      	mov	r2, r3
 800954a:	4620      	mov	r0, r4
 800954c:	f000 fc06 	bl	8009d5c <__lshift>
 8009550:	4606      	mov	r6, r0
 8009552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009554:	2b00      	cmp	r3, #0
 8009556:	d06e      	beq.n	8009636 <_dtoa_r+0x90e>
 8009558:	ee18 0a10 	vmov	r0, s16
 800955c:	4631      	mov	r1, r6
 800955e:	f000 fc6d 	bl	8009e3c <__mcmp>
 8009562:	2800      	cmp	r0, #0
 8009564:	da67      	bge.n	8009636 <_dtoa_r+0x90e>
 8009566:	9b00      	ldr	r3, [sp, #0]
 8009568:	3b01      	subs	r3, #1
 800956a:	ee18 1a10 	vmov	r1, s16
 800956e:	9300      	str	r3, [sp, #0]
 8009570:	220a      	movs	r2, #10
 8009572:	2300      	movs	r3, #0
 8009574:	4620      	mov	r0, r4
 8009576:	f000 fa41 	bl	80099fc <__multadd>
 800957a:	9b08      	ldr	r3, [sp, #32]
 800957c:	ee08 0a10 	vmov	s16, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	f000 81b1 	beq.w	80098e8 <_dtoa_r+0xbc0>
 8009586:	2300      	movs	r3, #0
 8009588:	4639      	mov	r1, r7
 800958a:	220a      	movs	r2, #10
 800958c:	4620      	mov	r0, r4
 800958e:	f000 fa35 	bl	80099fc <__multadd>
 8009592:	9b02      	ldr	r3, [sp, #8]
 8009594:	2b00      	cmp	r3, #0
 8009596:	4607      	mov	r7, r0
 8009598:	f300 808e 	bgt.w	80096b8 <_dtoa_r+0x990>
 800959c:	9b06      	ldr	r3, [sp, #24]
 800959e:	2b02      	cmp	r3, #2
 80095a0:	dc51      	bgt.n	8009646 <_dtoa_r+0x91e>
 80095a2:	e089      	b.n	80096b8 <_dtoa_r+0x990>
 80095a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80095a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80095aa:	e74b      	b.n	8009444 <_dtoa_r+0x71c>
 80095ac:	9b03      	ldr	r3, [sp, #12]
 80095ae:	1e5e      	subs	r6, r3, #1
 80095b0:	9b07      	ldr	r3, [sp, #28]
 80095b2:	42b3      	cmp	r3, r6
 80095b4:	bfbf      	itttt	lt
 80095b6:	9b07      	ldrlt	r3, [sp, #28]
 80095b8:	9607      	strlt	r6, [sp, #28]
 80095ba:	1af2      	sublt	r2, r6, r3
 80095bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80095be:	bfb6      	itet	lt
 80095c0:	189b      	addlt	r3, r3, r2
 80095c2:	1b9e      	subge	r6, r3, r6
 80095c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80095c6:	9b03      	ldr	r3, [sp, #12]
 80095c8:	bfb8      	it	lt
 80095ca:	2600      	movlt	r6, #0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	bfb7      	itett	lt
 80095d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80095d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80095d8:	1a9d      	sublt	r5, r3, r2
 80095da:	2300      	movlt	r3, #0
 80095dc:	e734      	b.n	8009448 <_dtoa_r+0x720>
 80095de:	9e07      	ldr	r6, [sp, #28]
 80095e0:	9d04      	ldr	r5, [sp, #16]
 80095e2:	9f08      	ldr	r7, [sp, #32]
 80095e4:	e73b      	b.n	800945e <_dtoa_r+0x736>
 80095e6:	9a07      	ldr	r2, [sp, #28]
 80095e8:	e767      	b.n	80094ba <_dtoa_r+0x792>
 80095ea:	9b06      	ldr	r3, [sp, #24]
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	dc18      	bgt.n	8009622 <_dtoa_r+0x8fa>
 80095f0:	f1ba 0f00 	cmp.w	sl, #0
 80095f4:	d115      	bne.n	8009622 <_dtoa_r+0x8fa>
 80095f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80095fa:	b993      	cbnz	r3, 8009622 <_dtoa_r+0x8fa>
 80095fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009600:	0d1b      	lsrs	r3, r3, #20
 8009602:	051b      	lsls	r3, r3, #20
 8009604:	b183      	cbz	r3, 8009628 <_dtoa_r+0x900>
 8009606:	9b04      	ldr	r3, [sp, #16]
 8009608:	3301      	adds	r3, #1
 800960a:	9304      	str	r3, [sp, #16]
 800960c:	9b05      	ldr	r3, [sp, #20]
 800960e:	3301      	adds	r3, #1
 8009610:	9305      	str	r3, [sp, #20]
 8009612:	f04f 0801 	mov.w	r8, #1
 8009616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009618:	2b00      	cmp	r3, #0
 800961a:	f47f af6a 	bne.w	80094f2 <_dtoa_r+0x7ca>
 800961e:	2001      	movs	r0, #1
 8009620:	e76f      	b.n	8009502 <_dtoa_r+0x7da>
 8009622:	f04f 0800 	mov.w	r8, #0
 8009626:	e7f6      	b.n	8009616 <_dtoa_r+0x8ee>
 8009628:	4698      	mov	r8, r3
 800962a:	e7f4      	b.n	8009616 <_dtoa_r+0x8ee>
 800962c:	f43f af7d 	beq.w	800952a <_dtoa_r+0x802>
 8009630:	4618      	mov	r0, r3
 8009632:	301c      	adds	r0, #28
 8009634:	e772      	b.n	800951c <_dtoa_r+0x7f4>
 8009636:	9b03      	ldr	r3, [sp, #12]
 8009638:	2b00      	cmp	r3, #0
 800963a:	dc37      	bgt.n	80096ac <_dtoa_r+0x984>
 800963c:	9b06      	ldr	r3, [sp, #24]
 800963e:	2b02      	cmp	r3, #2
 8009640:	dd34      	ble.n	80096ac <_dtoa_r+0x984>
 8009642:	9b03      	ldr	r3, [sp, #12]
 8009644:	9302      	str	r3, [sp, #8]
 8009646:	9b02      	ldr	r3, [sp, #8]
 8009648:	b96b      	cbnz	r3, 8009666 <_dtoa_r+0x93e>
 800964a:	4631      	mov	r1, r6
 800964c:	2205      	movs	r2, #5
 800964e:	4620      	mov	r0, r4
 8009650:	f000 f9d4 	bl	80099fc <__multadd>
 8009654:	4601      	mov	r1, r0
 8009656:	4606      	mov	r6, r0
 8009658:	ee18 0a10 	vmov	r0, s16
 800965c:	f000 fbee 	bl	8009e3c <__mcmp>
 8009660:	2800      	cmp	r0, #0
 8009662:	f73f adbb 	bgt.w	80091dc <_dtoa_r+0x4b4>
 8009666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009668:	9d01      	ldr	r5, [sp, #4]
 800966a:	43db      	mvns	r3, r3
 800966c:	9300      	str	r3, [sp, #0]
 800966e:	f04f 0800 	mov.w	r8, #0
 8009672:	4631      	mov	r1, r6
 8009674:	4620      	mov	r0, r4
 8009676:	f000 f99f 	bl	80099b8 <_Bfree>
 800967a:	2f00      	cmp	r7, #0
 800967c:	f43f aea4 	beq.w	80093c8 <_dtoa_r+0x6a0>
 8009680:	f1b8 0f00 	cmp.w	r8, #0
 8009684:	d005      	beq.n	8009692 <_dtoa_r+0x96a>
 8009686:	45b8      	cmp	r8, r7
 8009688:	d003      	beq.n	8009692 <_dtoa_r+0x96a>
 800968a:	4641      	mov	r1, r8
 800968c:	4620      	mov	r0, r4
 800968e:	f000 f993 	bl	80099b8 <_Bfree>
 8009692:	4639      	mov	r1, r7
 8009694:	4620      	mov	r0, r4
 8009696:	f000 f98f 	bl	80099b8 <_Bfree>
 800969a:	e695      	b.n	80093c8 <_dtoa_r+0x6a0>
 800969c:	2600      	movs	r6, #0
 800969e:	4637      	mov	r7, r6
 80096a0:	e7e1      	b.n	8009666 <_dtoa_r+0x93e>
 80096a2:	9700      	str	r7, [sp, #0]
 80096a4:	4637      	mov	r7, r6
 80096a6:	e599      	b.n	80091dc <_dtoa_r+0x4b4>
 80096a8:	40240000 	.word	0x40240000
 80096ac:	9b08      	ldr	r3, [sp, #32]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f000 80ca 	beq.w	8009848 <_dtoa_r+0xb20>
 80096b4:	9b03      	ldr	r3, [sp, #12]
 80096b6:	9302      	str	r3, [sp, #8]
 80096b8:	2d00      	cmp	r5, #0
 80096ba:	dd05      	ble.n	80096c8 <_dtoa_r+0x9a0>
 80096bc:	4639      	mov	r1, r7
 80096be:	462a      	mov	r2, r5
 80096c0:	4620      	mov	r0, r4
 80096c2:	f000 fb4b 	bl	8009d5c <__lshift>
 80096c6:	4607      	mov	r7, r0
 80096c8:	f1b8 0f00 	cmp.w	r8, #0
 80096cc:	d05b      	beq.n	8009786 <_dtoa_r+0xa5e>
 80096ce:	6879      	ldr	r1, [r7, #4]
 80096d0:	4620      	mov	r0, r4
 80096d2:	f000 f931 	bl	8009938 <_Balloc>
 80096d6:	4605      	mov	r5, r0
 80096d8:	b928      	cbnz	r0, 80096e6 <_dtoa_r+0x9be>
 80096da:	4b87      	ldr	r3, [pc, #540]	; (80098f8 <_dtoa_r+0xbd0>)
 80096dc:	4602      	mov	r2, r0
 80096de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80096e2:	f7ff bb3b 	b.w	8008d5c <_dtoa_r+0x34>
 80096e6:	693a      	ldr	r2, [r7, #16]
 80096e8:	3202      	adds	r2, #2
 80096ea:	0092      	lsls	r2, r2, #2
 80096ec:	f107 010c 	add.w	r1, r7, #12
 80096f0:	300c      	adds	r0, #12
 80096f2:	f000 f913 	bl	800991c <memcpy>
 80096f6:	2201      	movs	r2, #1
 80096f8:	4629      	mov	r1, r5
 80096fa:	4620      	mov	r0, r4
 80096fc:	f000 fb2e 	bl	8009d5c <__lshift>
 8009700:	9b01      	ldr	r3, [sp, #4]
 8009702:	f103 0901 	add.w	r9, r3, #1
 8009706:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800970a:	4413      	add	r3, r2
 800970c:	9305      	str	r3, [sp, #20]
 800970e:	f00a 0301 	and.w	r3, sl, #1
 8009712:	46b8      	mov	r8, r7
 8009714:	9304      	str	r3, [sp, #16]
 8009716:	4607      	mov	r7, r0
 8009718:	4631      	mov	r1, r6
 800971a:	ee18 0a10 	vmov	r0, s16
 800971e:	f7ff fa75 	bl	8008c0c <quorem>
 8009722:	4641      	mov	r1, r8
 8009724:	9002      	str	r0, [sp, #8]
 8009726:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800972a:	ee18 0a10 	vmov	r0, s16
 800972e:	f000 fb85 	bl	8009e3c <__mcmp>
 8009732:	463a      	mov	r2, r7
 8009734:	9003      	str	r0, [sp, #12]
 8009736:	4631      	mov	r1, r6
 8009738:	4620      	mov	r0, r4
 800973a:	f000 fb9b 	bl	8009e74 <__mdiff>
 800973e:	68c2      	ldr	r2, [r0, #12]
 8009740:	f109 3bff 	add.w	fp, r9, #4294967295
 8009744:	4605      	mov	r5, r0
 8009746:	bb02      	cbnz	r2, 800978a <_dtoa_r+0xa62>
 8009748:	4601      	mov	r1, r0
 800974a:	ee18 0a10 	vmov	r0, s16
 800974e:	f000 fb75 	bl	8009e3c <__mcmp>
 8009752:	4602      	mov	r2, r0
 8009754:	4629      	mov	r1, r5
 8009756:	4620      	mov	r0, r4
 8009758:	9207      	str	r2, [sp, #28]
 800975a:	f000 f92d 	bl	80099b8 <_Bfree>
 800975e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009762:	ea43 0102 	orr.w	r1, r3, r2
 8009766:	9b04      	ldr	r3, [sp, #16]
 8009768:	430b      	orrs	r3, r1
 800976a:	464d      	mov	r5, r9
 800976c:	d10f      	bne.n	800978e <_dtoa_r+0xa66>
 800976e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009772:	d02a      	beq.n	80097ca <_dtoa_r+0xaa2>
 8009774:	9b03      	ldr	r3, [sp, #12]
 8009776:	2b00      	cmp	r3, #0
 8009778:	dd02      	ble.n	8009780 <_dtoa_r+0xa58>
 800977a:	9b02      	ldr	r3, [sp, #8]
 800977c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009780:	f88b a000 	strb.w	sl, [fp]
 8009784:	e775      	b.n	8009672 <_dtoa_r+0x94a>
 8009786:	4638      	mov	r0, r7
 8009788:	e7ba      	b.n	8009700 <_dtoa_r+0x9d8>
 800978a:	2201      	movs	r2, #1
 800978c:	e7e2      	b.n	8009754 <_dtoa_r+0xa2c>
 800978e:	9b03      	ldr	r3, [sp, #12]
 8009790:	2b00      	cmp	r3, #0
 8009792:	db04      	blt.n	800979e <_dtoa_r+0xa76>
 8009794:	9906      	ldr	r1, [sp, #24]
 8009796:	430b      	orrs	r3, r1
 8009798:	9904      	ldr	r1, [sp, #16]
 800979a:	430b      	orrs	r3, r1
 800979c:	d122      	bne.n	80097e4 <_dtoa_r+0xabc>
 800979e:	2a00      	cmp	r2, #0
 80097a0:	ddee      	ble.n	8009780 <_dtoa_r+0xa58>
 80097a2:	ee18 1a10 	vmov	r1, s16
 80097a6:	2201      	movs	r2, #1
 80097a8:	4620      	mov	r0, r4
 80097aa:	f000 fad7 	bl	8009d5c <__lshift>
 80097ae:	4631      	mov	r1, r6
 80097b0:	ee08 0a10 	vmov	s16, r0
 80097b4:	f000 fb42 	bl	8009e3c <__mcmp>
 80097b8:	2800      	cmp	r0, #0
 80097ba:	dc03      	bgt.n	80097c4 <_dtoa_r+0xa9c>
 80097bc:	d1e0      	bne.n	8009780 <_dtoa_r+0xa58>
 80097be:	f01a 0f01 	tst.w	sl, #1
 80097c2:	d0dd      	beq.n	8009780 <_dtoa_r+0xa58>
 80097c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80097c8:	d1d7      	bne.n	800977a <_dtoa_r+0xa52>
 80097ca:	2339      	movs	r3, #57	; 0x39
 80097cc:	f88b 3000 	strb.w	r3, [fp]
 80097d0:	462b      	mov	r3, r5
 80097d2:	461d      	mov	r5, r3
 80097d4:	3b01      	subs	r3, #1
 80097d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80097da:	2a39      	cmp	r2, #57	; 0x39
 80097dc:	d071      	beq.n	80098c2 <_dtoa_r+0xb9a>
 80097de:	3201      	adds	r2, #1
 80097e0:	701a      	strb	r2, [r3, #0]
 80097e2:	e746      	b.n	8009672 <_dtoa_r+0x94a>
 80097e4:	2a00      	cmp	r2, #0
 80097e6:	dd07      	ble.n	80097f8 <_dtoa_r+0xad0>
 80097e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80097ec:	d0ed      	beq.n	80097ca <_dtoa_r+0xaa2>
 80097ee:	f10a 0301 	add.w	r3, sl, #1
 80097f2:	f88b 3000 	strb.w	r3, [fp]
 80097f6:	e73c      	b.n	8009672 <_dtoa_r+0x94a>
 80097f8:	9b05      	ldr	r3, [sp, #20]
 80097fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80097fe:	4599      	cmp	r9, r3
 8009800:	d047      	beq.n	8009892 <_dtoa_r+0xb6a>
 8009802:	ee18 1a10 	vmov	r1, s16
 8009806:	2300      	movs	r3, #0
 8009808:	220a      	movs	r2, #10
 800980a:	4620      	mov	r0, r4
 800980c:	f000 f8f6 	bl	80099fc <__multadd>
 8009810:	45b8      	cmp	r8, r7
 8009812:	ee08 0a10 	vmov	s16, r0
 8009816:	f04f 0300 	mov.w	r3, #0
 800981a:	f04f 020a 	mov.w	r2, #10
 800981e:	4641      	mov	r1, r8
 8009820:	4620      	mov	r0, r4
 8009822:	d106      	bne.n	8009832 <_dtoa_r+0xb0a>
 8009824:	f000 f8ea 	bl	80099fc <__multadd>
 8009828:	4680      	mov	r8, r0
 800982a:	4607      	mov	r7, r0
 800982c:	f109 0901 	add.w	r9, r9, #1
 8009830:	e772      	b.n	8009718 <_dtoa_r+0x9f0>
 8009832:	f000 f8e3 	bl	80099fc <__multadd>
 8009836:	4639      	mov	r1, r7
 8009838:	4680      	mov	r8, r0
 800983a:	2300      	movs	r3, #0
 800983c:	220a      	movs	r2, #10
 800983e:	4620      	mov	r0, r4
 8009840:	f000 f8dc 	bl	80099fc <__multadd>
 8009844:	4607      	mov	r7, r0
 8009846:	e7f1      	b.n	800982c <_dtoa_r+0xb04>
 8009848:	9b03      	ldr	r3, [sp, #12]
 800984a:	9302      	str	r3, [sp, #8]
 800984c:	9d01      	ldr	r5, [sp, #4]
 800984e:	ee18 0a10 	vmov	r0, s16
 8009852:	4631      	mov	r1, r6
 8009854:	f7ff f9da 	bl	8008c0c <quorem>
 8009858:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800985c:	9b01      	ldr	r3, [sp, #4]
 800985e:	f805 ab01 	strb.w	sl, [r5], #1
 8009862:	1aea      	subs	r2, r5, r3
 8009864:	9b02      	ldr	r3, [sp, #8]
 8009866:	4293      	cmp	r3, r2
 8009868:	dd09      	ble.n	800987e <_dtoa_r+0xb56>
 800986a:	ee18 1a10 	vmov	r1, s16
 800986e:	2300      	movs	r3, #0
 8009870:	220a      	movs	r2, #10
 8009872:	4620      	mov	r0, r4
 8009874:	f000 f8c2 	bl	80099fc <__multadd>
 8009878:	ee08 0a10 	vmov	s16, r0
 800987c:	e7e7      	b.n	800984e <_dtoa_r+0xb26>
 800987e:	9b02      	ldr	r3, [sp, #8]
 8009880:	2b00      	cmp	r3, #0
 8009882:	bfc8      	it	gt
 8009884:	461d      	movgt	r5, r3
 8009886:	9b01      	ldr	r3, [sp, #4]
 8009888:	bfd8      	it	le
 800988a:	2501      	movle	r5, #1
 800988c:	441d      	add	r5, r3
 800988e:	f04f 0800 	mov.w	r8, #0
 8009892:	ee18 1a10 	vmov	r1, s16
 8009896:	2201      	movs	r2, #1
 8009898:	4620      	mov	r0, r4
 800989a:	f000 fa5f 	bl	8009d5c <__lshift>
 800989e:	4631      	mov	r1, r6
 80098a0:	ee08 0a10 	vmov	s16, r0
 80098a4:	f000 faca 	bl	8009e3c <__mcmp>
 80098a8:	2800      	cmp	r0, #0
 80098aa:	dc91      	bgt.n	80097d0 <_dtoa_r+0xaa8>
 80098ac:	d102      	bne.n	80098b4 <_dtoa_r+0xb8c>
 80098ae:	f01a 0f01 	tst.w	sl, #1
 80098b2:	d18d      	bne.n	80097d0 <_dtoa_r+0xaa8>
 80098b4:	462b      	mov	r3, r5
 80098b6:	461d      	mov	r5, r3
 80098b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098bc:	2a30      	cmp	r2, #48	; 0x30
 80098be:	d0fa      	beq.n	80098b6 <_dtoa_r+0xb8e>
 80098c0:	e6d7      	b.n	8009672 <_dtoa_r+0x94a>
 80098c2:	9a01      	ldr	r2, [sp, #4]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d184      	bne.n	80097d2 <_dtoa_r+0xaaa>
 80098c8:	9b00      	ldr	r3, [sp, #0]
 80098ca:	3301      	adds	r3, #1
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	2331      	movs	r3, #49	; 0x31
 80098d0:	7013      	strb	r3, [r2, #0]
 80098d2:	e6ce      	b.n	8009672 <_dtoa_r+0x94a>
 80098d4:	4b09      	ldr	r3, [pc, #36]	; (80098fc <_dtoa_r+0xbd4>)
 80098d6:	f7ff ba95 	b.w	8008e04 <_dtoa_r+0xdc>
 80098da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098dc:	2b00      	cmp	r3, #0
 80098de:	f47f aa6e 	bne.w	8008dbe <_dtoa_r+0x96>
 80098e2:	4b07      	ldr	r3, [pc, #28]	; (8009900 <_dtoa_r+0xbd8>)
 80098e4:	f7ff ba8e 	b.w	8008e04 <_dtoa_r+0xdc>
 80098e8:	9b02      	ldr	r3, [sp, #8]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	dcae      	bgt.n	800984c <_dtoa_r+0xb24>
 80098ee:	9b06      	ldr	r3, [sp, #24]
 80098f0:	2b02      	cmp	r3, #2
 80098f2:	f73f aea8 	bgt.w	8009646 <_dtoa_r+0x91e>
 80098f6:	e7a9      	b.n	800984c <_dtoa_r+0xb24>
 80098f8:	0800b203 	.word	0x0800b203
 80098fc:	0800b160 	.word	0x0800b160
 8009900:	0800b184 	.word	0x0800b184

08009904 <_localeconv_r>:
 8009904:	4800      	ldr	r0, [pc, #0]	; (8009908 <_localeconv_r+0x4>)
 8009906:	4770      	bx	lr
 8009908:	200002b4 	.word	0x200002b4

0800990c <malloc>:
 800990c:	4b02      	ldr	r3, [pc, #8]	; (8009918 <malloc+0xc>)
 800990e:	4601      	mov	r1, r0
 8009910:	6818      	ldr	r0, [r3, #0]
 8009912:	f000 bc17 	b.w	800a144 <_malloc_r>
 8009916:	bf00      	nop
 8009918:	20000160 	.word	0x20000160

0800991c <memcpy>:
 800991c:	440a      	add	r2, r1
 800991e:	4291      	cmp	r1, r2
 8009920:	f100 33ff 	add.w	r3, r0, #4294967295
 8009924:	d100      	bne.n	8009928 <memcpy+0xc>
 8009926:	4770      	bx	lr
 8009928:	b510      	push	{r4, lr}
 800992a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800992e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009932:	4291      	cmp	r1, r2
 8009934:	d1f9      	bne.n	800992a <memcpy+0xe>
 8009936:	bd10      	pop	{r4, pc}

08009938 <_Balloc>:
 8009938:	b570      	push	{r4, r5, r6, lr}
 800993a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800993c:	4604      	mov	r4, r0
 800993e:	460d      	mov	r5, r1
 8009940:	b976      	cbnz	r6, 8009960 <_Balloc+0x28>
 8009942:	2010      	movs	r0, #16
 8009944:	f7ff ffe2 	bl	800990c <malloc>
 8009948:	4602      	mov	r2, r0
 800994a:	6260      	str	r0, [r4, #36]	; 0x24
 800994c:	b920      	cbnz	r0, 8009958 <_Balloc+0x20>
 800994e:	4b18      	ldr	r3, [pc, #96]	; (80099b0 <_Balloc+0x78>)
 8009950:	4818      	ldr	r0, [pc, #96]	; (80099b4 <_Balloc+0x7c>)
 8009952:	2166      	movs	r1, #102	; 0x66
 8009954:	f000 fdd6 	bl	800a504 <__assert_func>
 8009958:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800995c:	6006      	str	r6, [r0, #0]
 800995e:	60c6      	str	r6, [r0, #12]
 8009960:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009962:	68f3      	ldr	r3, [r6, #12]
 8009964:	b183      	cbz	r3, 8009988 <_Balloc+0x50>
 8009966:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800996e:	b9b8      	cbnz	r0, 80099a0 <_Balloc+0x68>
 8009970:	2101      	movs	r1, #1
 8009972:	fa01 f605 	lsl.w	r6, r1, r5
 8009976:	1d72      	adds	r2, r6, #5
 8009978:	0092      	lsls	r2, r2, #2
 800997a:	4620      	mov	r0, r4
 800997c:	f000 fb60 	bl	800a040 <_calloc_r>
 8009980:	b160      	cbz	r0, 800999c <_Balloc+0x64>
 8009982:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009986:	e00e      	b.n	80099a6 <_Balloc+0x6e>
 8009988:	2221      	movs	r2, #33	; 0x21
 800998a:	2104      	movs	r1, #4
 800998c:	4620      	mov	r0, r4
 800998e:	f000 fb57 	bl	800a040 <_calloc_r>
 8009992:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009994:	60f0      	str	r0, [r6, #12]
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d1e4      	bne.n	8009966 <_Balloc+0x2e>
 800999c:	2000      	movs	r0, #0
 800999e:	bd70      	pop	{r4, r5, r6, pc}
 80099a0:	6802      	ldr	r2, [r0, #0]
 80099a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80099a6:	2300      	movs	r3, #0
 80099a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80099ac:	e7f7      	b.n	800999e <_Balloc+0x66>
 80099ae:	bf00      	nop
 80099b0:	0800b191 	.word	0x0800b191
 80099b4:	0800b214 	.word	0x0800b214

080099b8 <_Bfree>:
 80099b8:	b570      	push	{r4, r5, r6, lr}
 80099ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80099bc:	4605      	mov	r5, r0
 80099be:	460c      	mov	r4, r1
 80099c0:	b976      	cbnz	r6, 80099e0 <_Bfree+0x28>
 80099c2:	2010      	movs	r0, #16
 80099c4:	f7ff ffa2 	bl	800990c <malloc>
 80099c8:	4602      	mov	r2, r0
 80099ca:	6268      	str	r0, [r5, #36]	; 0x24
 80099cc:	b920      	cbnz	r0, 80099d8 <_Bfree+0x20>
 80099ce:	4b09      	ldr	r3, [pc, #36]	; (80099f4 <_Bfree+0x3c>)
 80099d0:	4809      	ldr	r0, [pc, #36]	; (80099f8 <_Bfree+0x40>)
 80099d2:	218a      	movs	r1, #138	; 0x8a
 80099d4:	f000 fd96 	bl	800a504 <__assert_func>
 80099d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099dc:	6006      	str	r6, [r0, #0]
 80099de:	60c6      	str	r6, [r0, #12]
 80099e0:	b13c      	cbz	r4, 80099f2 <_Bfree+0x3a>
 80099e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80099e4:	6862      	ldr	r2, [r4, #4]
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80099ec:	6021      	str	r1, [r4, #0]
 80099ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80099f2:	bd70      	pop	{r4, r5, r6, pc}
 80099f4:	0800b191 	.word	0x0800b191
 80099f8:	0800b214 	.word	0x0800b214

080099fc <__multadd>:
 80099fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a00:	690d      	ldr	r5, [r1, #16]
 8009a02:	4607      	mov	r7, r0
 8009a04:	460c      	mov	r4, r1
 8009a06:	461e      	mov	r6, r3
 8009a08:	f101 0c14 	add.w	ip, r1, #20
 8009a0c:	2000      	movs	r0, #0
 8009a0e:	f8dc 3000 	ldr.w	r3, [ip]
 8009a12:	b299      	uxth	r1, r3
 8009a14:	fb02 6101 	mla	r1, r2, r1, r6
 8009a18:	0c1e      	lsrs	r6, r3, #16
 8009a1a:	0c0b      	lsrs	r3, r1, #16
 8009a1c:	fb02 3306 	mla	r3, r2, r6, r3
 8009a20:	b289      	uxth	r1, r1
 8009a22:	3001      	adds	r0, #1
 8009a24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009a28:	4285      	cmp	r5, r0
 8009a2a:	f84c 1b04 	str.w	r1, [ip], #4
 8009a2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009a32:	dcec      	bgt.n	8009a0e <__multadd+0x12>
 8009a34:	b30e      	cbz	r6, 8009a7a <__multadd+0x7e>
 8009a36:	68a3      	ldr	r3, [r4, #8]
 8009a38:	42ab      	cmp	r3, r5
 8009a3a:	dc19      	bgt.n	8009a70 <__multadd+0x74>
 8009a3c:	6861      	ldr	r1, [r4, #4]
 8009a3e:	4638      	mov	r0, r7
 8009a40:	3101      	adds	r1, #1
 8009a42:	f7ff ff79 	bl	8009938 <_Balloc>
 8009a46:	4680      	mov	r8, r0
 8009a48:	b928      	cbnz	r0, 8009a56 <__multadd+0x5a>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	4b0c      	ldr	r3, [pc, #48]	; (8009a80 <__multadd+0x84>)
 8009a4e:	480d      	ldr	r0, [pc, #52]	; (8009a84 <__multadd+0x88>)
 8009a50:	21b5      	movs	r1, #181	; 0xb5
 8009a52:	f000 fd57 	bl	800a504 <__assert_func>
 8009a56:	6922      	ldr	r2, [r4, #16]
 8009a58:	3202      	adds	r2, #2
 8009a5a:	f104 010c 	add.w	r1, r4, #12
 8009a5e:	0092      	lsls	r2, r2, #2
 8009a60:	300c      	adds	r0, #12
 8009a62:	f7ff ff5b 	bl	800991c <memcpy>
 8009a66:	4621      	mov	r1, r4
 8009a68:	4638      	mov	r0, r7
 8009a6a:	f7ff ffa5 	bl	80099b8 <_Bfree>
 8009a6e:	4644      	mov	r4, r8
 8009a70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a74:	3501      	adds	r5, #1
 8009a76:	615e      	str	r6, [r3, #20]
 8009a78:	6125      	str	r5, [r4, #16]
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a80:	0800b203 	.word	0x0800b203
 8009a84:	0800b214 	.word	0x0800b214

08009a88 <__hi0bits>:
 8009a88:	0c03      	lsrs	r3, r0, #16
 8009a8a:	041b      	lsls	r3, r3, #16
 8009a8c:	b9d3      	cbnz	r3, 8009ac4 <__hi0bits+0x3c>
 8009a8e:	0400      	lsls	r0, r0, #16
 8009a90:	2310      	movs	r3, #16
 8009a92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009a96:	bf04      	itt	eq
 8009a98:	0200      	lsleq	r0, r0, #8
 8009a9a:	3308      	addeq	r3, #8
 8009a9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009aa0:	bf04      	itt	eq
 8009aa2:	0100      	lsleq	r0, r0, #4
 8009aa4:	3304      	addeq	r3, #4
 8009aa6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009aaa:	bf04      	itt	eq
 8009aac:	0080      	lsleq	r0, r0, #2
 8009aae:	3302      	addeq	r3, #2
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	db05      	blt.n	8009ac0 <__hi0bits+0x38>
 8009ab4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009ab8:	f103 0301 	add.w	r3, r3, #1
 8009abc:	bf08      	it	eq
 8009abe:	2320      	moveq	r3, #32
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	4770      	bx	lr
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	e7e4      	b.n	8009a92 <__hi0bits+0xa>

08009ac8 <__lo0bits>:
 8009ac8:	6803      	ldr	r3, [r0, #0]
 8009aca:	f013 0207 	ands.w	r2, r3, #7
 8009ace:	4601      	mov	r1, r0
 8009ad0:	d00b      	beq.n	8009aea <__lo0bits+0x22>
 8009ad2:	07da      	lsls	r2, r3, #31
 8009ad4:	d423      	bmi.n	8009b1e <__lo0bits+0x56>
 8009ad6:	0798      	lsls	r0, r3, #30
 8009ad8:	bf49      	itett	mi
 8009ada:	085b      	lsrmi	r3, r3, #1
 8009adc:	089b      	lsrpl	r3, r3, #2
 8009ade:	2001      	movmi	r0, #1
 8009ae0:	600b      	strmi	r3, [r1, #0]
 8009ae2:	bf5c      	itt	pl
 8009ae4:	600b      	strpl	r3, [r1, #0]
 8009ae6:	2002      	movpl	r0, #2
 8009ae8:	4770      	bx	lr
 8009aea:	b298      	uxth	r0, r3
 8009aec:	b9a8      	cbnz	r0, 8009b1a <__lo0bits+0x52>
 8009aee:	0c1b      	lsrs	r3, r3, #16
 8009af0:	2010      	movs	r0, #16
 8009af2:	b2da      	uxtb	r2, r3
 8009af4:	b90a      	cbnz	r2, 8009afa <__lo0bits+0x32>
 8009af6:	3008      	adds	r0, #8
 8009af8:	0a1b      	lsrs	r3, r3, #8
 8009afa:	071a      	lsls	r2, r3, #28
 8009afc:	bf04      	itt	eq
 8009afe:	091b      	lsreq	r3, r3, #4
 8009b00:	3004      	addeq	r0, #4
 8009b02:	079a      	lsls	r2, r3, #30
 8009b04:	bf04      	itt	eq
 8009b06:	089b      	lsreq	r3, r3, #2
 8009b08:	3002      	addeq	r0, #2
 8009b0a:	07da      	lsls	r2, r3, #31
 8009b0c:	d403      	bmi.n	8009b16 <__lo0bits+0x4e>
 8009b0e:	085b      	lsrs	r3, r3, #1
 8009b10:	f100 0001 	add.w	r0, r0, #1
 8009b14:	d005      	beq.n	8009b22 <__lo0bits+0x5a>
 8009b16:	600b      	str	r3, [r1, #0]
 8009b18:	4770      	bx	lr
 8009b1a:	4610      	mov	r0, r2
 8009b1c:	e7e9      	b.n	8009af2 <__lo0bits+0x2a>
 8009b1e:	2000      	movs	r0, #0
 8009b20:	4770      	bx	lr
 8009b22:	2020      	movs	r0, #32
 8009b24:	4770      	bx	lr
	...

08009b28 <__i2b>:
 8009b28:	b510      	push	{r4, lr}
 8009b2a:	460c      	mov	r4, r1
 8009b2c:	2101      	movs	r1, #1
 8009b2e:	f7ff ff03 	bl	8009938 <_Balloc>
 8009b32:	4602      	mov	r2, r0
 8009b34:	b928      	cbnz	r0, 8009b42 <__i2b+0x1a>
 8009b36:	4b05      	ldr	r3, [pc, #20]	; (8009b4c <__i2b+0x24>)
 8009b38:	4805      	ldr	r0, [pc, #20]	; (8009b50 <__i2b+0x28>)
 8009b3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009b3e:	f000 fce1 	bl	800a504 <__assert_func>
 8009b42:	2301      	movs	r3, #1
 8009b44:	6144      	str	r4, [r0, #20]
 8009b46:	6103      	str	r3, [r0, #16]
 8009b48:	bd10      	pop	{r4, pc}
 8009b4a:	bf00      	nop
 8009b4c:	0800b203 	.word	0x0800b203
 8009b50:	0800b214 	.word	0x0800b214

08009b54 <__multiply>:
 8009b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b58:	4691      	mov	r9, r2
 8009b5a:	690a      	ldr	r2, [r1, #16]
 8009b5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	bfb8      	it	lt
 8009b64:	460b      	movlt	r3, r1
 8009b66:	460c      	mov	r4, r1
 8009b68:	bfbc      	itt	lt
 8009b6a:	464c      	movlt	r4, r9
 8009b6c:	4699      	movlt	r9, r3
 8009b6e:	6927      	ldr	r7, [r4, #16]
 8009b70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009b74:	68a3      	ldr	r3, [r4, #8]
 8009b76:	6861      	ldr	r1, [r4, #4]
 8009b78:	eb07 060a 	add.w	r6, r7, sl
 8009b7c:	42b3      	cmp	r3, r6
 8009b7e:	b085      	sub	sp, #20
 8009b80:	bfb8      	it	lt
 8009b82:	3101      	addlt	r1, #1
 8009b84:	f7ff fed8 	bl	8009938 <_Balloc>
 8009b88:	b930      	cbnz	r0, 8009b98 <__multiply+0x44>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	4b44      	ldr	r3, [pc, #272]	; (8009ca0 <__multiply+0x14c>)
 8009b8e:	4845      	ldr	r0, [pc, #276]	; (8009ca4 <__multiply+0x150>)
 8009b90:	f240 115d 	movw	r1, #349	; 0x15d
 8009b94:	f000 fcb6 	bl	800a504 <__assert_func>
 8009b98:	f100 0514 	add.w	r5, r0, #20
 8009b9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009ba0:	462b      	mov	r3, r5
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	4543      	cmp	r3, r8
 8009ba6:	d321      	bcc.n	8009bec <__multiply+0x98>
 8009ba8:	f104 0314 	add.w	r3, r4, #20
 8009bac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009bb0:	f109 0314 	add.w	r3, r9, #20
 8009bb4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009bb8:	9202      	str	r2, [sp, #8]
 8009bba:	1b3a      	subs	r2, r7, r4
 8009bbc:	3a15      	subs	r2, #21
 8009bbe:	f022 0203 	bic.w	r2, r2, #3
 8009bc2:	3204      	adds	r2, #4
 8009bc4:	f104 0115 	add.w	r1, r4, #21
 8009bc8:	428f      	cmp	r7, r1
 8009bca:	bf38      	it	cc
 8009bcc:	2204      	movcc	r2, #4
 8009bce:	9201      	str	r2, [sp, #4]
 8009bd0:	9a02      	ldr	r2, [sp, #8]
 8009bd2:	9303      	str	r3, [sp, #12]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d80c      	bhi.n	8009bf2 <__multiply+0x9e>
 8009bd8:	2e00      	cmp	r6, #0
 8009bda:	dd03      	ble.n	8009be4 <__multiply+0x90>
 8009bdc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d05a      	beq.n	8009c9a <__multiply+0x146>
 8009be4:	6106      	str	r6, [r0, #16]
 8009be6:	b005      	add	sp, #20
 8009be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bec:	f843 2b04 	str.w	r2, [r3], #4
 8009bf0:	e7d8      	b.n	8009ba4 <__multiply+0x50>
 8009bf2:	f8b3 a000 	ldrh.w	sl, [r3]
 8009bf6:	f1ba 0f00 	cmp.w	sl, #0
 8009bfa:	d024      	beq.n	8009c46 <__multiply+0xf2>
 8009bfc:	f104 0e14 	add.w	lr, r4, #20
 8009c00:	46a9      	mov	r9, r5
 8009c02:	f04f 0c00 	mov.w	ip, #0
 8009c06:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009c0a:	f8d9 1000 	ldr.w	r1, [r9]
 8009c0e:	fa1f fb82 	uxth.w	fp, r2
 8009c12:	b289      	uxth	r1, r1
 8009c14:	fb0a 110b 	mla	r1, sl, fp, r1
 8009c18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009c1c:	f8d9 2000 	ldr.w	r2, [r9]
 8009c20:	4461      	add	r1, ip
 8009c22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c26:	fb0a c20b 	mla	r2, sl, fp, ip
 8009c2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009c2e:	b289      	uxth	r1, r1
 8009c30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c34:	4577      	cmp	r7, lr
 8009c36:	f849 1b04 	str.w	r1, [r9], #4
 8009c3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c3e:	d8e2      	bhi.n	8009c06 <__multiply+0xb2>
 8009c40:	9a01      	ldr	r2, [sp, #4]
 8009c42:	f845 c002 	str.w	ip, [r5, r2]
 8009c46:	9a03      	ldr	r2, [sp, #12]
 8009c48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009c4c:	3304      	adds	r3, #4
 8009c4e:	f1b9 0f00 	cmp.w	r9, #0
 8009c52:	d020      	beq.n	8009c96 <__multiply+0x142>
 8009c54:	6829      	ldr	r1, [r5, #0]
 8009c56:	f104 0c14 	add.w	ip, r4, #20
 8009c5a:	46ae      	mov	lr, r5
 8009c5c:	f04f 0a00 	mov.w	sl, #0
 8009c60:	f8bc b000 	ldrh.w	fp, [ip]
 8009c64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009c68:	fb09 220b 	mla	r2, r9, fp, r2
 8009c6c:	4492      	add	sl, r2
 8009c6e:	b289      	uxth	r1, r1
 8009c70:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009c74:	f84e 1b04 	str.w	r1, [lr], #4
 8009c78:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009c7c:	f8be 1000 	ldrh.w	r1, [lr]
 8009c80:	0c12      	lsrs	r2, r2, #16
 8009c82:	fb09 1102 	mla	r1, r9, r2, r1
 8009c86:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009c8a:	4567      	cmp	r7, ip
 8009c8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009c90:	d8e6      	bhi.n	8009c60 <__multiply+0x10c>
 8009c92:	9a01      	ldr	r2, [sp, #4]
 8009c94:	50a9      	str	r1, [r5, r2]
 8009c96:	3504      	adds	r5, #4
 8009c98:	e79a      	b.n	8009bd0 <__multiply+0x7c>
 8009c9a:	3e01      	subs	r6, #1
 8009c9c:	e79c      	b.n	8009bd8 <__multiply+0x84>
 8009c9e:	bf00      	nop
 8009ca0:	0800b203 	.word	0x0800b203
 8009ca4:	0800b214 	.word	0x0800b214

08009ca8 <__pow5mult>:
 8009ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cac:	4615      	mov	r5, r2
 8009cae:	f012 0203 	ands.w	r2, r2, #3
 8009cb2:	4606      	mov	r6, r0
 8009cb4:	460f      	mov	r7, r1
 8009cb6:	d007      	beq.n	8009cc8 <__pow5mult+0x20>
 8009cb8:	4c25      	ldr	r4, [pc, #148]	; (8009d50 <__pow5mult+0xa8>)
 8009cba:	3a01      	subs	r2, #1
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009cc2:	f7ff fe9b 	bl	80099fc <__multadd>
 8009cc6:	4607      	mov	r7, r0
 8009cc8:	10ad      	asrs	r5, r5, #2
 8009cca:	d03d      	beq.n	8009d48 <__pow5mult+0xa0>
 8009ccc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009cce:	b97c      	cbnz	r4, 8009cf0 <__pow5mult+0x48>
 8009cd0:	2010      	movs	r0, #16
 8009cd2:	f7ff fe1b 	bl	800990c <malloc>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	6270      	str	r0, [r6, #36]	; 0x24
 8009cda:	b928      	cbnz	r0, 8009ce8 <__pow5mult+0x40>
 8009cdc:	4b1d      	ldr	r3, [pc, #116]	; (8009d54 <__pow5mult+0xac>)
 8009cde:	481e      	ldr	r0, [pc, #120]	; (8009d58 <__pow5mult+0xb0>)
 8009ce0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009ce4:	f000 fc0e 	bl	800a504 <__assert_func>
 8009ce8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009cec:	6004      	str	r4, [r0, #0]
 8009cee:	60c4      	str	r4, [r0, #12]
 8009cf0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009cf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009cf8:	b94c      	cbnz	r4, 8009d0e <__pow5mult+0x66>
 8009cfa:	f240 2171 	movw	r1, #625	; 0x271
 8009cfe:	4630      	mov	r0, r6
 8009d00:	f7ff ff12 	bl	8009b28 <__i2b>
 8009d04:	2300      	movs	r3, #0
 8009d06:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d0a:	4604      	mov	r4, r0
 8009d0c:	6003      	str	r3, [r0, #0]
 8009d0e:	f04f 0900 	mov.w	r9, #0
 8009d12:	07eb      	lsls	r3, r5, #31
 8009d14:	d50a      	bpl.n	8009d2c <__pow5mult+0x84>
 8009d16:	4639      	mov	r1, r7
 8009d18:	4622      	mov	r2, r4
 8009d1a:	4630      	mov	r0, r6
 8009d1c:	f7ff ff1a 	bl	8009b54 <__multiply>
 8009d20:	4639      	mov	r1, r7
 8009d22:	4680      	mov	r8, r0
 8009d24:	4630      	mov	r0, r6
 8009d26:	f7ff fe47 	bl	80099b8 <_Bfree>
 8009d2a:	4647      	mov	r7, r8
 8009d2c:	106d      	asrs	r5, r5, #1
 8009d2e:	d00b      	beq.n	8009d48 <__pow5mult+0xa0>
 8009d30:	6820      	ldr	r0, [r4, #0]
 8009d32:	b938      	cbnz	r0, 8009d44 <__pow5mult+0x9c>
 8009d34:	4622      	mov	r2, r4
 8009d36:	4621      	mov	r1, r4
 8009d38:	4630      	mov	r0, r6
 8009d3a:	f7ff ff0b 	bl	8009b54 <__multiply>
 8009d3e:	6020      	str	r0, [r4, #0]
 8009d40:	f8c0 9000 	str.w	r9, [r0]
 8009d44:	4604      	mov	r4, r0
 8009d46:	e7e4      	b.n	8009d12 <__pow5mult+0x6a>
 8009d48:	4638      	mov	r0, r7
 8009d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d4e:	bf00      	nop
 8009d50:	0800b360 	.word	0x0800b360
 8009d54:	0800b191 	.word	0x0800b191
 8009d58:	0800b214 	.word	0x0800b214

08009d5c <__lshift>:
 8009d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d60:	460c      	mov	r4, r1
 8009d62:	6849      	ldr	r1, [r1, #4]
 8009d64:	6923      	ldr	r3, [r4, #16]
 8009d66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d6a:	68a3      	ldr	r3, [r4, #8]
 8009d6c:	4607      	mov	r7, r0
 8009d6e:	4691      	mov	r9, r2
 8009d70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d74:	f108 0601 	add.w	r6, r8, #1
 8009d78:	42b3      	cmp	r3, r6
 8009d7a:	db0b      	blt.n	8009d94 <__lshift+0x38>
 8009d7c:	4638      	mov	r0, r7
 8009d7e:	f7ff fddb 	bl	8009938 <_Balloc>
 8009d82:	4605      	mov	r5, r0
 8009d84:	b948      	cbnz	r0, 8009d9a <__lshift+0x3e>
 8009d86:	4602      	mov	r2, r0
 8009d88:	4b2a      	ldr	r3, [pc, #168]	; (8009e34 <__lshift+0xd8>)
 8009d8a:	482b      	ldr	r0, [pc, #172]	; (8009e38 <__lshift+0xdc>)
 8009d8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009d90:	f000 fbb8 	bl	800a504 <__assert_func>
 8009d94:	3101      	adds	r1, #1
 8009d96:	005b      	lsls	r3, r3, #1
 8009d98:	e7ee      	b.n	8009d78 <__lshift+0x1c>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	f100 0114 	add.w	r1, r0, #20
 8009da0:	f100 0210 	add.w	r2, r0, #16
 8009da4:	4618      	mov	r0, r3
 8009da6:	4553      	cmp	r3, sl
 8009da8:	db37      	blt.n	8009e1a <__lshift+0xbe>
 8009daa:	6920      	ldr	r0, [r4, #16]
 8009dac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009db0:	f104 0314 	add.w	r3, r4, #20
 8009db4:	f019 091f 	ands.w	r9, r9, #31
 8009db8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009dbc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009dc0:	d02f      	beq.n	8009e22 <__lshift+0xc6>
 8009dc2:	f1c9 0e20 	rsb	lr, r9, #32
 8009dc6:	468a      	mov	sl, r1
 8009dc8:	f04f 0c00 	mov.w	ip, #0
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	fa02 f209 	lsl.w	r2, r2, r9
 8009dd2:	ea42 020c 	orr.w	r2, r2, ip
 8009dd6:	f84a 2b04 	str.w	r2, [sl], #4
 8009dda:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dde:	4298      	cmp	r0, r3
 8009de0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009de4:	d8f2      	bhi.n	8009dcc <__lshift+0x70>
 8009de6:	1b03      	subs	r3, r0, r4
 8009de8:	3b15      	subs	r3, #21
 8009dea:	f023 0303 	bic.w	r3, r3, #3
 8009dee:	3304      	adds	r3, #4
 8009df0:	f104 0215 	add.w	r2, r4, #21
 8009df4:	4290      	cmp	r0, r2
 8009df6:	bf38      	it	cc
 8009df8:	2304      	movcc	r3, #4
 8009dfa:	f841 c003 	str.w	ip, [r1, r3]
 8009dfe:	f1bc 0f00 	cmp.w	ip, #0
 8009e02:	d001      	beq.n	8009e08 <__lshift+0xac>
 8009e04:	f108 0602 	add.w	r6, r8, #2
 8009e08:	3e01      	subs	r6, #1
 8009e0a:	4638      	mov	r0, r7
 8009e0c:	612e      	str	r6, [r5, #16]
 8009e0e:	4621      	mov	r1, r4
 8009e10:	f7ff fdd2 	bl	80099b8 <_Bfree>
 8009e14:	4628      	mov	r0, r5
 8009e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e1e:	3301      	adds	r3, #1
 8009e20:	e7c1      	b.n	8009da6 <__lshift+0x4a>
 8009e22:	3904      	subs	r1, #4
 8009e24:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e28:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e2c:	4298      	cmp	r0, r3
 8009e2e:	d8f9      	bhi.n	8009e24 <__lshift+0xc8>
 8009e30:	e7ea      	b.n	8009e08 <__lshift+0xac>
 8009e32:	bf00      	nop
 8009e34:	0800b203 	.word	0x0800b203
 8009e38:	0800b214 	.word	0x0800b214

08009e3c <__mcmp>:
 8009e3c:	b530      	push	{r4, r5, lr}
 8009e3e:	6902      	ldr	r2, [r0, #16]
 8009e40:	690c      	ldr	r4, [r1, #16]
 8009e42:	1b12      	subs	r2, r2, r4
 8009e44:	d10e      	bne.n	8009e64 <__mcmp+0x28>
 8009e46:	f100 0314 	add.w	r3, r0, #20
 8009e4a:	3114      	adds	r1, #20
 8009e4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009e50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009e54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009e58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009e5c:	42a5      	cmp	r5, r4
 8009e5e:	d003      	beq.n	8009e68 <__mcmp+0x2c>
 8009e60:	d305      	bcc.n	8009e6e <__mcmp+0x32>
 8009e62:	2201      	movs	r2, #1
 8009e64:	4610      	mov	r0, r2
 8009e66:	bd30      	pop	{r4, r5, pc}
 8009e68:	4283      	cmp	r3, r0
 8009e6a:	d3f3      	bcc.n	8009e54 <__mcmp+0x18>
 8009e6c:	e7fa      	b.n	8009e64 <__mcmp+0x28>
 8009e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e72:	e7f7      	b.n	8009e64 <__mcmp+0x28>

08009e74 <__mdiff>:
 8009e74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e78:	460c      	mov	r4, r1
 8009e7a:	4606      	mov	r6, r0
 8009e7c:	4611      	mov	r1, r2
 8009e7e:	4620      	mov	r0, r4
 8009e80:	4690      	mov	r8, r2
 8009e82:	f7ff ffdb 	bl	8009e3c <__mcmp>
 8009e86:	1e05      	subs	r5, r0, #0
 8009e88:	d110      	bne.n	8009eac <__mdiff+0x38>
 8009e8a:	4629      	mov	r1, r5
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	f7ff fd53 	bl	8009938 <_Balloc>
 8009e92:	b930      	cbnz	r0, 8009ea2 <__mdiff+0x2e>
 8009e94:	4b3a      	ldr	r3, [pc, #232]	; (8009f80 <__mdiff+0x10c>)
 8009e96:	4602      	mov	r2, r0
 8009e98:	f240 2132 	movw	r1, #562	; 0x232
 8009e9c:	4839      	ldr	r0, [pc, #228]	; (8009f84 <__mdiff+0x110>)
 8009e9e:	f000 fb31 	bl	800a504 <__assert_func>
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009ea8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eac:	bfa4      	itt	ge
 8009eae:	4643      	movge	r3, r8
 8009eb0:	46a0      	movge	r8, r4
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009eb8:	bfa6      	itte	ge
 8009eba:	461c      	movge	r4, r3
 8009ebc:	2500      	movge	r5, #0
 8009ebe:	2501      	movlt	r5, #1
 8009ec0:	f7ff fd3a 	bl	8009938 <_Balloc>
 8009ec4:	b920      	cbnz	r0, 8009ed0 <__mdiff+0x5c>
 8009ec6:	4b2e      	ldr	r3, [pc, #184]	; (8009f80 <__mdiff+0x10c>)
 8009ec8:	4602      	mov	r2, r0
 8009eca:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009ece:	e7e5      	b.n	8009e9c <__mdiff+0x28>
 8009ed0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009ed4:	6926      	ldr	r6, [r4, #16]
 8009ed6:	60c5      	str	r5, [r0, #12]
 8009ed8:	f104 0914 	add.w	r9, r4, #20
 8009edc:	f108 0514 	add.w	r5, r8, #20
 8009ee0:	f100 0e14 	add.w	lr, r0, #20
 8009ee4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009ee8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009eec:	f108 0210 	add.w	r2, r8, #16
 8009ef0:	46f2      	mov	sl, lr
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ef8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009efc:	fa1f f883 	uxth.w	r8, r3
 8009f00:	fa11 f18b 	uxtah	r1, r1, fp
 8009f04:	0c1b      	lsrs	r3, r3, #16
 8009f06:	eba1 0808 	sub.w	r8, r1, r8
 8009f0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009f12:	fa1f f888 	uxth.w	r8, r8
 8009f16:	1419      	asrs	r1, r3, #16
 8009f18:	454e      	cmp	r6, r9
 8009f1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009f1e:	f84a 3b04 	str.w	r3, [sl], #4
 8009f22:	d8e7      	bhi.n	8009ef4 <__mdiff+0x80>
 8009f24:	1b33      	subs	r3, r6, r4
 8009f26:	3b15      	subs	r3, #21
 8009f28:	f023 0303 	bic.w	r3, r3, #3
 8009f2c:	3304      	adds	r3, #4
 8009f2e:	3415      	adds	r4, #21
 8009f30:	42a6      	cmp	r6, r4
 8009f32:	bf38      	it	cc
 8009f34:	2304      	movcc	r3, #4
 8009f36:	441d      	add	r5, r3
 8009f38:	4473      	add	r3, lr
 8009f3a:	469e      	mov	lr, r3
 8009f3c:	462e      	mov	r6, r5
 8009f3e:	4566      	cmp	r6, ip
 8009f40:	d30e      	bcc.n	8009f60 <__mdiff+0xec>
 8009f42:	f10c 0203 	add.w	r2, ip, #3
 8009f46:	1b52      	subs	r2, r2, r5
 8009f48:	f022 0203 	bic.w	r2, r2, #3
 8009f4c:	3d03      	subs	r5, #3
 8009f4e:	45ac      	cmp	ip, r5
 8009f50:	bf38      	it	cc
 8009f52:	2200      	movcc	r2, #0
 8009f54:	441a      	add	r2, r3
 8009f56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009f5a:	b17b      	cbz	r3, 8009f7c <__mdiff+0x108>
 8009f5c:	6107      	str	r7, [r0, #16]
 8009f5e:	e7a3      	b.n	8009ea8 <__mdiff+0x34>
 8009f60:	f856 8b04 	ldr.w	r8, [r6], #4
 8009f64:	fa11 f288 	uxtah	r2, r1, r8
 8009f68:	1414      	asrs	r4, r2, #16
 8009f6a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009f6e:	b292      	uxth	r2, r2
 8009f70:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009f74:	f84e 2b04 	str.w	r2, [lr], #4
 8009f78:	1421      	asrs	r1, r4, #16
 8009f7a:	e7e0      	b.n	8009f3e <__mdiff+0xca>
 8009f7c:	3f01      	subs	r7, #1
 8009f7e:	e7ea      	b.n	8009f56 <__mdiff+0xe2>
 8009f80:	0800b203 	.word	0x0800b203
 8009f84:	0800b214 	.word	0x0800b214

08009f88 <__d2b>:
 8009f88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f8c:	4689      	mov	r9, r1
 8009f8e:	2101      	movs	r1, #1
 8009f90:	ec57 6b10 	vmov	r6, r7, d0
 8009f94:	4690      	mov	r8, r2
 8009f96:	f7ff fccf 	bl	8009938 <_Balloc>
 8009f9a:	4604      	mov	r4, r0
 8009f9c:	b930      	cbnz	r0, 8009fac <__d2b+0x24>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	4b25      	ldr	r3, [pc, #148]	; (800a038 <__d2b+0xb0>)
 8009fa2:	4826      	ldr	r0, [pc, #152]	; (800a03c <__d2b+0xb4>)
 8009fa4:	f240 310a 	movw	r1, #778	; 0x30a
 8009fa8:	f000 faac 	bl	800a504 <__assert_func>
 8009fac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009fb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009fb4:	bb35      	cbnz	r5, 800a004 <__d2b+0x7c>
 8009fb6:	2e00      	cmp	r6, #0
 8009fb8:	9301      	str	r3, [sp, #4]
 8009fba:	d028      	beq.n	800a00e <__d2b+0x86>
 8009fbc:	4668      	mov	r0, sp
 8009fbe:	9600      	str	r6, [sp, #0]
 8009fc0:	f7ff fd82 	bl	8009ac8 <__lo0bits>
 8009fc4:	9900      	ldr	r1, [sp, #0]
 8009fc6:	b300      	cbz	r0, 800a00a <__d2b+0x82>
 8009fc8:	9a01      	ldr	r2, [sp, #4]
 8009fca:	f1c0 0320 	rsb	r3, r0, #32
 8009fce:	fa02 f303 	lsl.w	r3, r2, r3
 8009fd2:	430b      	orrs	r3, r1
 8009fd4:	40c2      	lsrs	r2, r0
 8009fd6:	6163      	str	r3, [r4, #20]
 8009fd8:	9201      	str	r2, [sp, #4]
 8009fda:	9b01      	ldr	r3, [sp, #4]
 8009fdc:	61a3      	str	r3, [r4, #24]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	bf14      	ite	ne
 8009fe2:	2202      	movne	r2, #2
 8009fe4:	2201      	moveq	r2, #1
 8009fe6:	6122      	str	r2, [r4, #16]
 8009fe8:	b1d5      	cbz	r5, 800a020 <__d2b+0x98>
 8009fea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009fee:	4405      	add	r5, r0
 8009ff0:	f8c9 5000 	str.w	r5, [r9]
 8009ff4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ff8:	f8c8 0000 	str.w	r0, [r8]
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	b003      	add	sp, #12
 800a000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a004:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a008:	e7d5      	b.n	8009fb6 <__d2b+0x2e>
 800a00a:	6161      	str	r1, [r4, #20]
 800a00c:	e7e5      	b.n	8009fda <__d2b+0x52>
 800a00e:	a801      	add	r0, sp, #4
 800a010:	f7ff fd5a 	bl	8009ac8 <__lo0bits>
 800a014:	9b01      	ldr	r3, [sp, #4]
 800a016:	6163      	str	r3, [r4, #20]
 800a018:	2201      	movs	r2, #1
 800a01a:	6122      	str	r2, [r4, #16]
 800a01c:	3020      	adds	r0, #32
 800a01e:	e7e3      	b.n	8009fe8 <__d2b+0x60>
 800a020:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a024:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a028:	f8c9 0000 	str.w	r0, [r9]
 800a02c:	6918      	ldr	r0, [r3, #16]
 800a02e:	f7ff fd2b 	bl	8009a88 <__hi0bits>
 800a032:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a036:	e7df      	b.n	8009ff8 <__d2b+0x70>
 800a038:	0800b203 	.word	0x0800b203
 800a03c:	0800b214 	.word	0x0800b214

0800a040 <_calloc_r>:
 800a040:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a042:	fba1 2402 	umull	r2, r4, r1, r2
 800a046:	b94c      	cbnz	r4, 800a05c <_calloc_r+0x1c>
 800a048:	4611      	mov	r1, r2
 800a04a:	9201      	str	r2, [sp, #4]
 800a04c:	f000 f87a 	bl	800a144 <_malloc_r>
 800a050:	9a01      	ldr	r2, [sp, #4]
 800a052:	4605      	mov	r5, r0
 800a054:	b930      	cbnz	r0, 800a064 <_calloc_r+0x24>
 800a056:	4628      	mov	r0, r5
 800a058:	b003      	add	sp, #12
 800a05a:	bd30      	pop	{r4, r5, pc}
 800a05c:	220c      	movs	r2, #12
 800a05e:	6002      	str	r2, [r0, #0]
 800a060:	2500      	movs	r5, #0
 800a062:	e7f8      	b.n	800a056 <_calloc_r+0x16>
 800a064:	4621      	mov	r1, r4
 800a066:	f7fe f93f 	bl	80082e8 <memset>
 800a06a:	e7f4      	b.n	800a056 <_calloc_r+0x16>

0800a06c <_free_r>:
 800a06c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a06e:	2900      	cmp	r1, #0
 800a070:	d044      	beq.n	800a0fc <_free_r+0x90>
 800a072:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a076:	9001      	str	r0, [sp, #4]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	f1a1 0404 	sub.w	r4, r1, #4
 800a07e:	bfb8      	it	lt
 800a080:	18e4      	addlt	r4, r4, r3
 800a082:	f000 fa9b 	bl	800a5bc <__malloc_lock>
 800a086:	4a1e      	ldr	r2, [pc, #120]	; (800a100 <_free_r+0x94>)
 800a088:	9801      	ldr	r0, [sp, #4]
 800a08a:	6813      	ldr	r3, [r2, #0]
 800a08c:	b933      	cbnz	r3, 800a09c <_free_r+0x30>
 800a08e:	6063      	str	r3, [r4, #4]
 800a090:	6014      	str	r4, [r2, #0]
 800a092:	b003      	add	sp, #12
 800a094:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a098:	f000 ba96 	b.w	800a5c8 <__malloc_unlock>
 800a09c:	42a3      	cmp	r3, r4
 800a09e:	d908      	bls.n	800a0b2 <_free_r+0x46>
 800a0a0:	6825      	ldr	r5, [r4, #0]
 800a0a2:	1961      	adds	r1, r4, r5
 800a0a4:	428b      	cmp	r3, r1
 800a0a6:	bf01      	itttt	eq
 800a0a8:	6819      	ldreq	r1, [r3, #0]
 800a0aa:	685b      	ldreq	r3, [r3, #4]
 800a0ac:	1949      	addeq	r1, r1, r5
 800a0ae:	6021      	streq	r1, [r4, #0]
 800a0b0:	e7ed      	b.n	800a08e <_free_r+0x22>
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	b10b      	cbz	r3, 800a0bc <_free_r+0x50>
 800a0b8:	42a3      	cmp	r3, r4
 800a0ba:	d9fa      	bls.n	800a0b2 <_free_r+0x46>
 800a0bc:	6811      	ldr	r1, [r2, #0]
 800a0be:	1855      	adds	r5, r2, r1
 800a0c0:	42a5      	cmp	r5, r4
 800a0c2:	d10b      	bne.n	800a0dc <_free_r+0x70>
 800a0c4:	6824      	ldr	r4, [r4, #0]
 800a0c6:	4421      	add	r1, r4
 800a0c8:	1854      	adds	r4, r2, r1
 800a0ca:	42a3      	cmp	r3, r4
 800a0cc:	6011      	str	r1, [r2, #0]
 800a0ce:	d1e0      	bne.n	800a092 <_free_r+0x26>
 800a0d0:	681c      	ldr	r4, [r3, #0]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	6053      	str	r3, [r2, #4]
 800a0d6:	4421      	add	r1, r4
 800a0d8:	6011      	str	r1, [r2, #0]
 800a0da:	e7da      	b.n	800a092 <_free_r+0x26>
 800a0dc:	d902      	bls.n	800a0e4 <_free_r+0x78>
 800a0de:	230c      	movs	r3, #12
 800a0e0:	6003      	str	r3, [r0, #0]
 800a0e2:	e7d6      	b.n	800a092 <_free_r+0x26>
 800a0e4:	6825      	ldr	r5, [r4, #0]
 800a0e6:	1961      	adds	r1, r4, r5
 800a0e8:	428b      	cmp	r3, r1
 800a0ea:	bf04      	itt	eq
 800a0ec:	6819      	ldreq	r1, [r3, #0]
 800a0ee:	685b      	ldreq	r3, [r3, #4]
 800a0f0:	6063      	str	r3, [r4, #4]
 800a0f2:	bf04      	itt	eq
 800a0f4:	1949      	addeq	r1, r1, r5
 800a0f6:	6021      	streq	r1, [r4, #0]
 800a0f8:	6054      	str	r4, [r2, #4]
 800a0fa:	e7ca      	b.n	800a092 <_free_r+0x26>
 800a0fc:	b003      	add	sp, #12
 800a0fe:	bd30      	pop	{r4, r5, pc}
 800a100:	20002490 	.word	0x20002490

0800a104 <sbrk_aligned>:
 800a104:	b570      	push	{r4, r5, r6, lr}
 800a106:	4e0e      	ldr	r6, [pc, #56]	; (800a140 <sbrk_aligned+0x3c>)
 800a108:	460c      	mov	r4, r1
 800a10a:	6831      	ldr	r1, [r6, #0]
 800a10c:	4605      	mov	r5, r0
 800a10e:	b911      	cbnz	r1, 800a116 <sbrk_aligned+0x12>
 800a110:	f000 f9e8 	bl	800a4e4 <_sbrk_r>
 800a114:	6030      	str	r0, [r6, #0]
 800a116:	4621      	mov	r1, r4
 800a118:	4628      	mov	r0, r5
 800a11a:	f000 f9e3 	bl	800a4e4 <_sbrk_r>
 800a11e:	1c43      	adds	r3, r0, #1
 800a120:	d00a      	beq.n	800a138 <sbrk_aligned+0x34>
 800a122:	1cc4      	adds	r4, r0, #3
 800a124:	f024 0403 	bic.w	r4, r4, #3
 800a128:	42a0      	cmp	r0, r4
 800a12a:	d007      	beq.n	800a13c <sbrk_aligned+0x38>
 800a12c:	1a21      	subs	r1, r4, r0
 800a12e:	4628      	mov	r0, r5
 800a130:	f000 f9d8 	bl	800a4e4 <_sbrk_r>
 800a134:	3001      	adds	r0, #1
 800a136:	d101      	bne.n	800a13c <sbrk_aligned+0x38>
 800a138:	f04f 34ff 	mov.w	r4, #4294967295
 800a13c:	4620      	mov	r0, r4
 800a13e:	bd70      	pop	{r4, r5, r6, pc}
 800a140:	20002494 	.word	0x20002494

0800a144 <_malloc_r>:
 800a144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a148:	1ccd      	adds	r5, r1, #3
 800a14a:	f025 0503 	bic.w	r5, r5, #3
 800a14e:	3508      	adds	r5, #8
 800a150:	2d0c      	cmp	r5, #12
 800a152:	bf38      	it	cc
 800a154:	250c      	movcc	r5, #12
 800a156:	2d00      	cmp	r5, #0
 800a158:	4607      	mov	r7, r0
 800a15a:	db01      	blt.n	800a160 <_malloc_r+0x1c>
 800a15c:	42a9      	cmp	r1, r5
 800a15e:	d905      	bls.n	800a16c <_malloc_r+0x28>
 800a160:	230c      	movs	r3, #12
 800a162:	603b      	str	r3, [r7, #0]
 800a164:	2600      	movs	r6, #0
 800a166:	4630      	mov	r0, r6
 800a168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a16c:	4e2e      	ldr	r6, [pc, #184]	; (800a228 <_malloc_r+0xe4>)
 800a16e:	f000 fa25 	bl	800a5bc <__malloc_lock>
 800a172:	6833      	ldr	r3, [r6, #0]
 800a174:	461c      	mov	r4, r3
 800a176:	bb34      	cbnz	r4, 800a1c6 <_malloc_r+0x82>
 800a178:	4629      	mov	r1, r5
 800a17a:	4638      	mov	r0, r7
 800a17c:	f7ff ffc2 	bl	800a104 <sbrk_aligned>
 800a180:	1c43      	adds	r3, r0, #1
 800a182:	4604      	mov	r4, r0
 800a184:	d14d      	bne.n	800a222 <_malloc_r+0xde>
 800a186:	6834      	ldr	r4, [r6, #0]
 800a188:	4626      	mov	r6, r4
 800a18a:	2e00      	cmp	r6, #0
 800a18c:	d140      	bne.n	800a210 <_malloc_r+0xcc>
 800a18e:	6823      	ldr	r3, [r4, #0]
 800a190:	4631      	mov	r1, r6
 800a192:	4638      	mov	r0, r7
 800a194:	eb04 0803 	add.w	r8, r4, r3
 800a198:	f000 f9a4 	bl	800a4e4 <_sbrk_r>
 800a19c:	4580      	cmp	r8, r0
 800a19e:	d13a      	bne.n	800a216 <_malloc_r+0xd2>
 800a1a0:	6821      	ldr	r1, [r4, #0]
 800a1a2:	3503      	adds	r5, #3
 800a1a4:	1a6d      	subs	r5, r5, r1
 800a1a6:	f025 0503 	bic.w	r5, r5, #3
 800a1aa:	3508      	adds	r5, #8
 800a1ac:	2d0c      	cmp	r5, #12
 800a1ae:	bf38      	it	cc
 800a1b0:	250c      	movcc	r5, #12
 800a1b2:	4629      	mov	r1, r5
 800a1b4:	4638      	mov	r0, r7
 800a1b6:	f7ff ffa5 	bl	800a104 <sbrk_aligned>
 800a1ba:	3001      	adds	r0, #1
 800a1bc:	d02b      	beq.n	800a216 <_malloc_r+0xd2>
 800a1be:	6823      	ldr	r3, [r4, #0]
 800a1c0:	442b      	add	r3, r5
 800a1c2:	6023      	str	r3, [r4, #0]
 800a1c4:	e00e      	b.n	800a1e4 <_malloc_r+0xa0>
 800a1c6:	6822      	ldr	r2, [r4, #0]
 800a1c8:	1b52      	subs	r2, r2, r5
 800a1ca:	d41e      	bmi.n	800a20a <_malloc_r+0xc6>
 800a1cc:	2a0b      	cmp	r2, #11
 800a1ce:	d916      	bls.n	800a1fe <_malloc_r+0xba>
 800a1d0:	1961      	adds	r1, r4, r5
 800a1d2:	42a3      	cmp	r3, r4
 800a1d4:	6025      	str	r5, [r4, #0]
 800a1d6:	bf18      	it	ne
 800a1d8:	6059      	strne	r1, [r3, #4]
 800a1da:	6863      	ldr	r3, [r4, #4]
 800a1dc:	bf08      	it	eq
 800a1de:	6031      	streq	r1, [r6, #0]
 800a1e0:	5162      	str	r2, [r4, r5]
 800a1e2:	604b      	str	r3, [r1, #4]
 800a1e4:	4638      	mov	r0, r7
 800a1e6:	f104 060b 	add.w	r6, r4, #11
 800a1ea:	f000 f9ed 	bl	800a5c8 <__malloc_unlock>
 800a1ee:	f026 0607 	bic.w	r6, r6, #7
 800a1f2:	1d23      	adds	r3, r4, #4
 800a1f4:	1af2      	subs	r2, r6, r3
 800a1f6:	d0b6      	beq.n	800a166 <_malloc_r+0x22>
 800a1f8:	1b9b      	subs	r3, r3, r6
 800a1fa:	50a3      	str	r3, [r4, r2]
 800a1fc:	e7b3      	b.n	800a166 <_malloc_r+0x22>
 800a1fe:	6862      	ldr	r2, [r4, #4]
 800a200:	42a3      	cmp	r3, r4
 800a202:	bf0c      	ite	eq
 800a204:	6032      	streq	r2, [r6, #0]
 800a206:	605a      	strne	r2, [r3, #4]
 800a208:	e7ec      	b.n	800a1e4 <_malloc_r+0xa0>
 800a20a:	4623      	mov	r3, r4
 800a20c:	6864      	ldr	r4, [r4, #4]
 800a20e:	e7b2      	b.n	800a176 <_malloc_r+0x32>
 800a210:	4634      	mov	r4, r6
 800a212:	6876      	ldr	r6, [r6, #4]
 800a214:	e7b9      	b.n	800a18a <_malloc_r+0x46>
 800a216:	230c      	movs	r3, #12
 800a218:	603b      	str	r3, [r7, #0]
 800a21a:	4638      	mov	r0, r7
 800a21c:	f000 f9d4 	bl	800a5c8 <__malloc_unlock>
 800a220:	e7a1      	b.n	800a166 <_malloc_r+0x22>
 800a222:	6025      	str	r5, [r4, #0]
 800a224:	e7de      	b.n	800a1e4 <_malloc_r+0xa0>
 800a226:	bf00      	nop
 800a228:	20002490 	.word	0x20002490

0800a22c <__ssputs_r>:
 800a22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a230:	688e      	ldr	r6, [r1, #8]
 800a232:	429e      	cmp	r6, r3
 800a234:	4682      	mov	sl, r0
 800a236:	460c      	mov	r4, r1
 800a238:	4690      	mov	r8, r2
 800a23a:	461f      	mov	r7, r3
 800a23c:	d838      	bhi.n	800a2b0 <__ssputs_r+0x84>
 800a23e:	898a      	ldrh	r2, [r1, #12]
 800a240:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a244:	d032      	beq.n	800a2ac <__ssputs_r+0x80>
 800a246:	6825      	ldr	r5, [r4, #0]
 800a248:	6909      	ldr	r1, [r1, #16]
 800a24a:	eba5 0901 	sub.w	r9, r5, r1
 800a24e:	6965      	ldr	r5, [r4, #20]
 800a250:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a254:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a258:	3301      	adds	r3, #1
 800a25a:	444b      	add	r3, r9
 800a25c:	106d      	asrs	r5, r5, #1
 800a25e:	429d      	cmp	r5, r3
 800a260:	bf38      	it	cc
 800a262:	461d      	movcc	r5, r3
 800a264:	0553      	lsls	r3, r2, #21
 800a266:	d531      	bpl.n	800a2cc <__ssputs_r+0xa0>
 800a268:	4629      	mov	r1, r5
 800a26a:	f7ff ff6b 	bl	800a144 <_malloc_r>
 800a26e:	4606      	mov	r6, r0
 800a270:	b950      	cbnz	r0, 800a288 <__ssputs_r+0x5c>
 800a272:	230c      	movs	r3, #12
 800a274:	f8ca 3000 	str.w	r3, [sl]
 800a278:	89a3      	ldrh	r3, [r4, #12]
 800a27a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a27e:	81a3      	strh	r3, [r4, #12]
 800a280:	f04f 30ff 	mov.w	r0, #4294967295
 800a284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a288:	6921      	ldr	r1, [r4, #16]
 800a28a:	464a      	mov	r2, r9
 800a28c:	f7ff fb46 	bl	800991c <memcpy>
 800a290:	89a3      	ldrh	r3, [r4, #12]
 800a292:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a29a:	81a3      	strh	r3, [r4, #12]
 800a29c:	6126      	str	r6, [r4, #16]
 800a29e:	6165      	str	r5, [r4, #20]
 800a2a0:	444e      	add	r6, r9
 800a2a2:	eba5 0509 	sub.w	r5, r5, r9
 800a2a6:	6026      	str	r6, [r4, #0]
 800a2a8:	60a5      	str	r5, [r4, #8]
 800a2aa:	463e      	mov	r6, r7
 800a2ac:	42be      	cmp	r6, r7
 800a2ae:	d900      	bls.n	800a2b2 <__ssputs_r+0x86>
 800a2b0:	463e      	mov	r6, r7
 800a2b2:	6820      	ldr	r0, [r4, #0]
 800a2b4:	4632      	mov	r2, r6
 800a2b6:	4641      	mov	r1, r8
 800a2b8:	f000 f966 	bl	800a588 <memmove>
 800a2bc:	68a3      	ldr	r3, [r4, #8]
 800a2be:	1b9b      	subs	r3, r3, r6
 800a2c0:	60a3      	str	r3, [r4, #8]
 800a2c2:	6823      	ldr	r3, [r4, #0]
 800a2c4:	4433      	add	r3, r6
 800a2c6:	6023      	str	r3, [r4, #0]
 800a2c8:	2000      	movs	r0, #0
 800a2ca:	e7db      	b.n	800a284 <__ssputs_r+0x58>
 800a2cc:	462a      	mov	r2, r5
 800a2ce:	f000 f981 	bl	800a5d4 <_realloc_r>
 800a2d2:	4606      	mov	r6, r0
 800a2d4:	2800      	cmp	r0, #0
 800a2d6:	d1e1      	bne.n	800a29c <__ssputs_r+0x70>
 800a2d8:	6921      	ldr	r1, [r4, #16]
 800a2da:	4650      	mov	r0, sl
 800a2dc:	f7ff fec6 	bl	800a06c <_free_r>
 800a2e0:	e7c7      	b.n	800a272 <__ssputs_r+0x46>
	...

0800a2e4 <_svfiprintf_r>:
 800a2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2e8:	4698      	mov	r8, r3
 800a2ea:	898b      	ldrh	r3, [r1, #12]
 800a2ec:	061b      	lsls	r3, r3, #24
 800a2ee:	b09d      	sub	sp, #116	; 0x74
 800a2f0:	4607      	mov	r7, r0
 800a2f2:	460d      	mov	r5, r1
 800a2f4:	4614      	mov	r4, r2
 800a2f6:	d50e      	bpl.n	800a316 <_svfiprintf_r+0x32>
 800a2f8:	690b      	ldr	r3, [r1, #16]
 800a2fa:	b963      	cbnz	r3, 800a316 <_svfiprintf_r+0x32>
 800a2fc:	2140      	movs	r1, #64	; 0x40
 800a2fe:	f7ff ff21 	bl	800a144 <_malloc_r>
 800a302:	6028      	str	r0, [r5, #0]
 800a304:	6128      	str	r0, [r5, #16]
 800a306:	b920      	cbnz	r0, 800a312 <_svfiprintf_r+0x2e>
 800a308:	230c      	movs	r3, #12
 800a30a:	603b      	str	r3, [r7, #0]
 800a30c:	f04f 30ff 	mov.w	r0, #4294967295
 800a310:	e0d1      	b.n	800a4b6 <_svfiprintf_r+0x1d2>
 800a312:	2340      	movs	r3, #64	; 0x40
 800a314:	616b      	str	r3, [r5, #20]
 800a316:	2300      	movs	r3, #0
 800a318:	9309      	str	r3, [sp, #36]	; 0x24
 800a31a:	2320      	movs	r3, #32
 800a31c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a320:	f8cd 800c 	str.w	r8, [sp, #12]
 800a324:	2330      	movs	r3, #48	; 0x30
 800a326:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a4d0 <_svfiprintf_r+0x1ec>
 800a32a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a32e:	f04f 0901 	mov.w	r9, #1
 800a332:	4623      	mov	r3, r4
 800a334:	469a      	mov	sl, r3
 800a336:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a33a:	b10a      	cbz	r2, 800a340 <_svfiprintf_r+0x5c>
 800a33c:	2a25      	cmp	r2, #37	; 0x25
 800a33e:	d1f9      	bne.n	800a334 <_svfiprintf_r+0x50>
 800a340:	ebba 0b04 	subs.w	fp, sl, r4
 800a344:	d00b      	beq.n	800a35e <_svfiprintf_r+0x7a>
 800a346:	465b      	mov	r3, fp
 800a348:	4622      	mov	r2, r4
 800a34a:	4629      	mov	r1, r5
 800a34c:	4638      	mov	r0, r7
 800a34e:	f7ff ff6d 	bl	800a22c <__ssputs_r>
 800a352:	3001      	adds	r0, #1
 800a354:	f000 80aa 	beq.w	800a4ac <_svfiprintf_r+0x1c8>
 800a358:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a35a:	445a      	add	r2, fp
 800a35c:	9209      	str	r2, [sp, #36]	; 0x24
 800a35e:	f89a 3000 	ldrb.w	r3, [sl]
 800a362:	2b00      	cmp	r3, #0
 800a364:	f000 80a2 	beq.w	800a4ac <_svfiprintf_r+0x1c8>
 800a368:	2300      	movs	r3, #0
 800a36a:	f04f 32ff 	mov.w	r2, #4294967295
 800a36e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a372:	f10a 0a01 	add.w	sl, sl, #1
 800a376:	9304      	str	r3, [sp, #16]
 800a378:	9307      	str	r3, [sp, #28]
 800a37a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a37e:	931a      	str	r3, [sp, #104]	; 0x68
 800a380:	4654      	mov	r4, sl
 800a382:	2205      	movs	r2, #5
 800a384:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a388:	4851      	ldr	r0, [pc, #324]	; (800a4d0 <_svfiprintf_r+0x1ec>)
 800a38a:	f7f5 ff31 	bl	80001f0 <memchr>
 800a38e:	9a04      	ldr	r2, [sp, #16]
 800a390:	b9d8      	cbnz	r0, 800a3ca <_svfiprintf_r+0xe6>
 800a392:	06d0      	lsls	r0, r2, #27
 800a394:	bf44      	itt	mi
 800a396:	2320      	movmi	r3, #32
 800a398:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a39c:	0711      	lsls	r1, r2, #28
 800a39e:	bf44      	itt	mi
 800a3a0:	232b      	movmi	r3, #43	; 0x2b
 800a3a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3a6:	f89a 3000 	ldrb.w	r3, [sl]
 800a3aa:	2b2a      	cmp	r3, #42	; 0x2a
 800a3ac:	d015      	beq.n	800a3da <_svfiprintf_r+0xf6>
 800a3ae:	9a07      	ldr	r2, [sp, #28]
 800a3b0:	4654      	mov	r4, sl
 800a3b2:	2000      	movs	r0, #0
 800a3b4:	f04f 0c0a 	mov.w	ip, #10
 800a3b8:	4621      	mov	r1, r4
 800a3ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3be:	3b30      	subs	r3, #48	; 0x30
 800a3c0:	2b09      	cmp	r3, #9
 800a3c2:	d94e      	bls.n	800a462 <_svfiprintf_r+0x17e>
 800a3c4:	b1b0      	cbz	r0, 800a3f4 <_svfiprintf_r+0x110>
 800a3c6:	9207      	str	r2, [sp, #28]
 800a3c8:	e014      	b.n	800a3f4 <_svfiprintf_r+0x110>
 800a3ca:	eba0 0308 	sub.w	r3, r0, r8
 800a3ce:	fa09 f303 	lsl.w	r3, r9, r3
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	9304      	str	r3, [sp, #16]
 800a3d6:	46a2      	mov	sl, r4
 800a3d8:	e7d2      	b.n	800a380 <_svfiprintf_r+0x9c>
 800a3da:	9b03      	ldr	r3, [sp, #12]
 800a3dc:	1d19      	adds	r1, r3, #4
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	9103      	str	r1, [sp, #12]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	bfbb      	ittet	lt
 800a3e6:	425b      	neglt	r3, r3
 800a3e8:	f042 0202 	orrlt.w	r2, r2, #2
 800a3ec:	9307      	strge	r3, [sp, #28]
 800a3ee:	9307      	strlt	r3, [sp, #28]
 800a3f0:	bfb8      	it	lt
 800a3f2:	9204      	strlt	r2, [sp, #16]
 800a3f4:	7823      	ldrb	r3, [r4, #0]
 800a3f6:	2b2e      	cmp	r3, #46	; 0x2e
 800a3f8:	d10c      	bne.n	800a414 <_svfiprintf_r+0x130>
 800a3fa:	7863      	ldrb	r3, [r4, #1]
 800a3fc:	2b2a      	cmp	r3, #42	; 0x2a
 800a3fe:	d135      	bne.n	800a46c <_svfiprintf_r+0x188>
 800a400:	9b03      	ldr	r3, [sp, #12]
 800a402:	1d1a      	adds	r2, r3, #4
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	9203      	str	r2, [sp, #12]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	bfb8      	it	lt
 800a40c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a410:	3402      	adds	r4, #2
 800a412:	9305      	str	r3, [sp, #20]
 800a414:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a4e0 <_svfiprintf_r+0x1fc>
 800a418:	7821      	ldrb	r1, [r4, #0]
 800a41a:	2203      	movs	r2, #3
 800a41c:	4650      	mov	r0, sl
 800a41e:	f7f5 fee7 	bl	80001f0 <memchr>
 800a422:	b140      	cbz	r0, 800a436 <_svfiprintf_r+0x152>
 800a424:	2340      	movs	r3, #64	; 0x40
 800a426:	eba0 000a 	sub.w	r0, r0, sl
 800a42a:	fa03 f000 	lsl.w	r0, r3, r0
 800a42e:	9b04      	ldr	r3, [sp, #16]
 800a430:	4303      	orrs	r3, r0
 800a432:	3401      	adds	r4, #1
 800a434:	9304      	str	r3, [sp, #16]
 800a436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a43a:	4826      	ldr	r0, [pc, #152]	; (800a4d4 <_svfiprintf_r+0x1f0>)
 800a43c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a440:	2206      	movs	r2, #6
 800a442:	f7f5 fed5 	bl	80001f0 <memchr>
 800a446:	2800      	cmp	r0, #0
 800a448:	d038      	beq.n	800a4bc <_svfiprintf_r+0x1d8>
 800a44a:	4b23      	ldr	r3, [pc, #140]	; (800a4d8 <_svfiprintf_r+0x1f4>)
 800a44c:	bb1b      	cbnz	r3, 800a496 <_svfiprintf_r+0x1b2>
 800a44e:	9b03      	ldr	r3, [sp, #12]
 800a450:	3307      	adds	r3, #7
 800a452:	f023 0307 	bic.w	r3, r3, #7
 800a456:	3308      	adds	r3, #8
 800a458:	9303      	str	r3, [sp, #12]
 800a45a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a45c:	4433      	add	r3, r6
 800a45e:	9309      	str	r3, [sp, #36]	; 0x24
 800a460:	e767      	b.n	800a332 <_svfiprintf_r+0x4e>
 800a462:	fb0c 3202 	mla	r2, ip, r2, r3
 800a466:	460c      	mov	r4, r1
 800a468:	2001      	movs	r0, #1
 800a46a:	e7a5      	b.n	800a3b8 <_svfiprintf_r+0xd4>
 800a46c:	2300      	movs	r3, #0
 800a46e:	3401      	adds	r4, #1
 800a470:	9305      	str	r3, [sp, #20]
 800a472:	4619      	mov	r1, r3
 800a474:	f04f 0c0a 	mov.w	ip, #10
 800a478:	4620      	mov	r0, r4
 800a47a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a47e:	3a30      	subs	r2, #48	; 0x30
 800a480:	2a09      	cmp	r2, #9
 800a482:	d903      	bls.n	800a48c <_svfiprintf_r+0x1a8>
 800a484:	2b00      	cmp	r3, #0
 800a486:	d0c5      	beq.n	800a414 <_svfiprintf_r+0x130>
 800a488:	9105      	str	r1, [sp, #20]
 800a48a:	e7c3      	b.n	800a414 <_svfiprintf_r+0x130>
 800a48c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a490:	4604      	mov	r4, r0
 800a492:	2301      	movs	r3, #1
 800a494:	e7f0      	b.n	800a478 <_svfiprintf_r+0x194>
 800a496:	ab03      	add	r3, sp, #12
 800a498:	9300      	str	r3, [sp, #0]
 800a49a:	462a      	mov	r2, r5
 800a49c:	4b0f      	ldr	r3, [pc, #60]	; (800a4dc <_svfiprintf_r+0x1f8>)
 800a49e:	a904      	add	r1, sp, #16
 800a4a0:	4638      	mov	r0, r7
 800a4a2:	f7fd ffc9 	bl	8008438 <_printf_float>
 800a4a6:	1c42      	adds	r2, r0, #1
 800a4a8:	4606      	mov	r6, r0
 800a4aa:	d1d6      	bne.n	800a45a <_svfiprintf_r+0x176>
 800a4ac:	89ab      	ldrh	r3, [r5, #12]
 800a4ae:	065b      	lsls	r3, r3, #25
 800a4b0:	f53f af2c 	bmi.w	800a30c <_svfiprintf_r+0x28>
 800a4b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4b6:	b01d      	add	sp, #116	; 0x74
 800a4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4bc:	ab03      	add	r3, sp, #12
 800a4be:	9300      	str	r3, [sp, #0]
 800a4c0:	462a      	mov	r2, r5
 800a4c2:	4b06      	ldr	r3, [pc, #24]	; (800a4dc <_svfiprintf_r+0x1f8>)
 800a4c4:	a904      	add	r1, sp, #16
 800a4c6:	4638      	mov	r0, r7
 800a4c8:	f7fe fa5a 	bl	8008980 <_printf_i>
 800a4cc:	e7eb      	b.n	800a4a6 <_svfiprintf_r+0x1c2>
 800a4ce:	bf00      	nop
 800a4d0:	0800b36c 	.word	0x0800b36c
 800a4d4:	0800b376 	.word	0x0800b376
 800a4d8:	08008439 	.word	0x08008439
 800a4dc:	0800a22d 	.word	0x0800a22d
 800a4e0:	0800b372 	.word	0x0800b372

0800a4e4 <_sbrk_r>:
 800a4e4:	b538      	push	{r3, r4, r5, lr}
 800a4e6:	4d06      	ldr	r5, [pc, #24]	; (800a500 <_sbrk_r+0x1c>)
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	4604      	mov	r4, r0
 800a4ec:	4608      	mov	r0, r1
 800a4ee:	602b      	str	r3, [r5, #0]
 800a4f0:	f7f7 f816 	bl	8001520 <_sbrk>
 800a4f4:	1c43      	adds	r3, r0, #1
 800a4f6:	d102      	bne.n	800a4fe <_sbrk_r+0x1a>
 800a4f8:	682b      	ldr	r3, [r5, #0]
 800a4fa:	b103      	cbz	r3, 800a4fe <_sbrk_r+0x1a>
 800a4fc:	6023      	str	r3, [r4, #0]
 800a4fe:	bd38      	pop	{r3, r4, r5, pc}
 800a500:	20002498 	.word	0x20002498

0800a504 <__assert_func>:
 800a504:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a506:	4614      	mov	r4, r2
 800a508:	461a      	mov	r2, r3
 800a50a:	4b09      	ldr	r3, [pc, #36]	; (800a530 <__assert_func+0x2c>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4605      	mov	r5, r0
 800a510:	68d8      	ldr	r0, [r3, #12]
 800a512:	b14c      	cbz	r4, 800a528 <__assert_func+0x24>
 800a514:	4b07      	ldr	r3, [pc, #28]	; (800a534 <__assert_func+0x30>)
 800a516:	9100      	str	r1, [sp, #0]
 800a518:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a51c:	4906      	ldr	r1, [pc, #24]	; (800a538 <__assert_func+0x34>)
 800a51e:	462b      	mov	r3, r5
 800a520:	f000 f80e 	bl	800a540 <fiprintf>
 800a524:	f000 faac 	bl	800aa80 <abort>
 800a528:	4b04      	ldr	r3, [pc, #16]	; (800a53c <__assert_func+0x38>)
 800a52a:	461c      	mov	r4, r3
 800a52c:	e7f3      	b.n	800a516 <__assert_func+0x12>
 800a52e:	bf00      	nop
 800a530:	20000160 	.word	0x20000160
 800a534:	0800b37d 	.word	0x0800b37d
 800a538:	0800b38a 	.word	0x0800b38a
 800a53c:	0800b3b8 	.word	0x0800b3b8

0800a540 <fiprintf>:
 800a540:	b40e      	push	{r1, r2, r3}
 800a542:	b503      	push	{r0, r1, lr}
 800a544:	4601      	mov	r1, r0
 800a546:	ab03      	add	r3, sp, #12
 800a548:	4805      	ldr	r0, [pc, #20]	; (800a560 <fiprintf+0x20>)
 800a54a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a54e:	6800      	ldr	r0, [r0, #0]
 800a550:	9301      	str	r3, [sp, #4]
 800a552:	f000 f897 	bl	800a684 <_vfiprintf_r>
 800a556:	b002      	add	sp, #8
 800a558:	f85d eb04 	ldr.w	lr, [sp], #4
 800a55c:	b003      	add	sp, #12
 800a55e:	4770      	bx	lr
 800a560:	20000160 	.word	0x20000160

0800a564 <__ascii_mbtowc>:
 800a564:	b082      	sub	sp, #8
 800a566:	b901      	cbnz	r1, 800a56a <__ascii_mbtowc+0x6>
 800a568:	a901      	add	r1, sp, #4
 800a56a:	b142      	cbz	r2, 800a57e <__ascii_mbtowc+0x1a>
 800a56c:	b14b      	cbz	r3, 800a582 <__ascii_mbtowc+0x1e>
 800a56e:	7813      	ldrb	r3, [r2, #0]
 800a570:	600b      	str	r3, [r1, #0]
 800a572:	7812      	ldrb	r2, [r2, #0]
 800a574:	1e10      	subs	r0, r2, #0
 800a576:	bf18      	it	ne
 800a578:	2001      	movne	r0, #1
 800a57a:	b002      	add	sp, #8
 800a57c:	4770      	bx	lr
 800a57e:	4610      	mov	r0, r2
 800a580:	e7fb      	b.n	800a57a <__ascii_mbtowc+0x16>
 800a582:	f06f 0001 	mvn.w	r0, #1
 800a586:	e7f8      	b.n	800a57a <__ascii_mbtowc+0x16>

0800a588 <memmove>:
 800a588:	4288      	cmp	r0, r1
 800a58a:	b510      	push	{r4, lr}
 800a58c:	eb01 0402 	add.w	r4, r1, r2
 800a590:	d902      	bls.n	800a598 <memmove+0x10>
 800a592:	4284      	cmp	r4, r0
 800a594:	4623      	mov	r3, r4
 800a596:	d807      	bhi.n	800a5a8 <memmove+0x20>
 800a598:	1e43      	subs	r3, r0, #1
 800a59a:	42a1      	cmp	r1, r4
 800a59c:	d008      	beq.n	800a5b0 <memmove+0x28>
 800a59e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5a6:	e7f8      	b.n	800a59a <memmove+0x12>
 800a5a8:	4402      	add	r2, r0
 800a5aa:	4601      	mov	r1, r0
 800a5ac:	428a      	cmp	r2, r1
 800a5ae:	d100      	bne.n	800a5b2 <memmove+0x2a>
 800a5b0:	bd10      	pop	{r4, pc}
 800a5b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5ba:	e7f7      	b.n	800a5ac <memmove+0x24>

0800a5bc <__malloc_lock>:
 800a5bc:	4801      	ldr	r0, [pc, #4]	; (800a5c4 <__malloc_lock+0x8>)
 800a5be:	f000 bc1f 	b.w	800ae00 <__retarget_lock_acquire_recursive>
 800a5c2:	bf00      	nop
 800a5c4:	2000249c 	.word	0x2000249c

0800a5c8 <__malloc_unlock>:
 800a5c8:	4801      	ldr	r0, [pc, #4]	; (800a5d0 <__malloc_unlock+0x8>)
 800a5ca:	f000 bc1a 	b.w	800ae02 <__retarget_lock_release_recursive>
 800a5ce:	bf00      	nop
 800a5d0:	2000249c 	.word	0x2000249c

0800a5d4 <_realloc_r>:
 800a5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5d8:	4680      	mov	r8, r0
 800a5da:	4614      	mov	r4, r2
 800a5dc:	460e      	mov	r6, r1
 800a5de:	b921      	cbnz	r1, 800a5ea <_realloc_r+0x16>
 800a5e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5e4:	4611      	mov	r1, r2
 800a5e6:	f7ff bdad 	b.w	800a144 <_malloc_r>
 800a5ea:	b92a      	cbnz	r2, 800a5f8 <_realloc_r+0x24>
 800a5ec:	f7ff fd3e 	bl	800a06c <_free_r>
 800a5f0:	4625      	mov	r5, r4
 800a5f2:	4628      	mov	r0, r5
 800a5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5f8:	f000 fc6a 	bl	800aed0 <_malloc_usable_size_r>
 800a5fc:	4284      	cmp	r4, r0
 800a5fe:	4607      	mov	r7, r0
 800a600:	d802      	bhi.n	800a608 <_realloc_r+0x34>
 800a602:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a606:	d812      	bhi.n	800a62e <_realloc_r+0x5a>
 800a608:	4621      	mov	r1, r4
 800a60a:	4640      	mov	r0, r8
 800a60c:	f7ff fd9a 	bl	800a144 <_malloc_r>
 800a610:	4605      	mov	r5, r0
 800a612:	2800      	cmp	r0, #0
 800a614:	d0ed      	beq.n	800a5f2 <_realloc_r+0x1e>
 800a616:	42bc      	cmp	r4, r7
 800a618:	4622      	mov	r2, r4
 800a61a:	4631      	mov	r1, r6
 800a61c:	bf28      	it	cs
 800a61e:	463a      	movcs	r2, r7
 800a620:	f7ff f97c 	bl	800991c <memcpy>
 800a624:	4631      	mov	r1, r6
 800a626:	4640      	mov	r0, r8
 800a628:	f7ff fd20 	bl	800a06c <_free_r>
 800a62c:	e7e1      	b.n	800a5f2 <_realloc_r+0x1e>
 800a62e:	4635      	mov	r5, r6
 800a630:	e7df      	b.n	800a5f2 <_realloc_r+0x1e>

0800a632 <__sfputc_r>:
 800a632:	6893      	ldr	r3, [r2, #8]
 800a634:	3b01      	subs	r3, #1
 800a636:	2b00      	cmp	r3, #0
 800a638:	b410      	push	{r4}
 800a63a:	6093      	str	r3, [r2, #8]
 800a63c:	da08      	bge.n	800a650 <__sfputc_r+0x1e>
 800a63e:	6994      	ldr	r4, [r2, #24]
 800a640:	42a3      	cmp	r3, r4
 800a642:	db01      	blt.n	800a648 <__sfputc_r+0x16>
 800a644:	290a      	cmp	r1, #10
 800a646:	d103      	bne.n	800a650 <__sfputc_r+0x1e>
 800a648:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a64c:	f000 b94a 	b.w	800a8e4 <__swbuf_r>
 800a650:	6813      	ldr	r3, [r2, #0]
 800a652:	1c58      	adds	r0, r3, #1
 800a654:	6010      	str	r0, [r2, #0]
 800a656:	7019      	strb	r1, [r3, #0]
 800a658:	4608      	mov	r0, r1
 800a65a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a65e:	4770      	bx	lr

0800a660 <__sfputs_r>:
 800a660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a662:	4606      	mov	r6, r0
 800a664:	460f      	mov	r7, r1
 800a666:	4614      	mov	r4, r2
 800a668:	18d5      	adds	r5, r2, r3
 800a66a:	42ac      	cmp	r4, r5
 800a66c:	d101      	bne.n	800a672 <__sfputs_r+0x12>
 800a66e:	2000      	movs	r0, #0
 800a670:	e007      	b.n	800a682 <__sfputs_r+0x22>
 800a672:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a676:	463a      	mov	r2, r7
 800a678:	4630      	mov	r0, r6
 800a67a:	f7ff ffda 	bl	800a632 <__sfputc_r>
 800a67e:	1c43      	adds	r3, r0, #1
 800a680:	d1f3      	bne.n	800a66a <__sfputs_r+0xa>
 800a682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a684 <_vfiprintf_r>:
 800a684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a688:	460d      	mov	r5, r1
 800a68a:	b09d      	sub	sp, #116	; 0x74
 800a68c:	4614      	mov	r4, r2
 800a68e:	4698      	mov	r8, r3
 800a690:	4606      	mov	r6, r0
 800a692:	b118      	cbz	r0, 800a69c <_vfiprintf_r+0x18>
 800a694:	6983      	ldr	r3, [r0, #24]
 800a696:	b90b      	cbnz	r3, 800a69c <_vfiprintf_r+0x18>
 800a698:	f000 fb14 	bl	800acc4 <__sinit>
 800a69c:	4b89      	ldr	r3, [pc, #548]	; (800a8c4 <_vfiprintf_r+0x240>)
 800a69e:	429d      	cmp	r5, r3
 800a6a0:	d11b      	bne.n	800a6da <_vfiprintf_r+0x56>
 800a6a2:	6875      	ldr	r5, [r6, #4]
 800a6a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6a6:	07d9      	lsls	r1, r3, #31
 800a6a8:	d405      	bmi.n	800a6b6 <_vfiprintf_r+0x32>
 800a6aa:	89ab      	ldrh	r3, [r5, #12]
 800a6ac:	059a      	lsls	r2, r3, #22
 800a6ae:	d402      	bmi.n	800a6b6 <_vfiprintf_r+0x32>
 800a6b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6b2:	f000 fba5 	bl	800ae00 <__retarget_lock_acquire_recursive>
 800a6b6:	89ab      	ldrh	r3, [r5, #12]
 800a6b8:	071b      	lsls	r3, r3, #28
 800a6ba:	d501      	bpl.n	800a6c0 <_vfiprintf_r+0x3c>
 800a6bc:	692b      	ldr	r3, [r5, #16]
 800a6be:	b9eb      	cbnz	r3, 800a6fc <_vfiprintf_r+0x78>
 800a6c0:	4629      	mov	r1, r5
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	f000 f96e 	bl	800a9a4 <__swsetup_r>
 800a6c8:	b1c0      	cbz	r0, 800a6fc <_vfiprintf_r+0x78>
 800a6ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6cc:	07dc      	lsls	r4, r3, #31
 800a6ce:	d50e      	bpl.n	800a6ee <_vfiprintf_r+0x6a>
 800a6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6d4:	b01d      	add	sp, #116	; 0x74
 800a6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6da:	4b7b      	ldr	r3, [pc, #492]	; (800a8c8 <_vfiprintf_r+0x244>)
 800a6dc:	429d      	cmp	r5, r3
 800a6de:	d101      	bne.n	800a6e4 <_vfiprintf_r+0x60>
 800a6e0:	68b5      	ldr	r5, [r6, #8]
 800a6e2:	e7df      	b.n	800a6a4 <_vfiprintf_r+0x20>
 800a6e4:	4b79      	ldr	r3, [pc, #484]	; (800a8cc <_vfiprintf_r+0x248>)
 800a6e6:	429d      	cmp	r5, r3
 800a6e8:	bf08      	it	eq
 800a6ea:	68f5      	ldreq	r5, [r6, #12]
 800a6ec:	e7da      	b.n	800a6a4 <_vfiprintf_r+0x20>
 800a6ee:	89ab      	ldrh	r3, [r5, #12]
 800a6f0:	0598      	lsls	r0, r3, #22
 800a6f2:	d4ed      	bmi.n	800a6d0 <_vfiprintf_r+0x4c>
 800a6f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6f6:	f000 fb84 	bl	800ae02 <__retarget_lock_release_recursive>
 800a6fa:	e7e9      	b.n	800a6d0 <_vfiprintf_r+0x4c>
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a700:	2320      	movs	r3, #32
 800a702:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a706:	f8cd 800c 	str.w	r8, [sp, #12]
 800a70a:	2330      	movs	r3, #48	; 0x30
 800a70c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a8d0 <_vfiprintf_r+0x24c>
 800a710:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a714:	f04f 0901 	mov.w	r9, #1
 800a718:	4623      	mov	r3, r4
 800a71a:	469a      	mov	sl, r3
 800a71c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a720:	b10a      	cbz	r2, 800a726 <_vfiprintf_r+0xa2>
 800a722:	2a25      	cmp	r2, #37	; 0x25
 800a724:	d1f9      	bne.n	800a71a <_vfiprintf_r+0x96>
 800a726:	ebba 0b04 	subs.w	fp, sl, r4
 800a72a:	d00b      	beq.n	800a744 <_vfiprintf_r+0xc0>
 800a72c:	465b      	mov	r3, fp
 800a72e:	4622      	mov	r2, r4
 800a730:	4629      	mov	r1, r5
 800a732:	4630      	mov	r0, r6
 800a734:	f7ff ff94 	bl	800a660 <__sfputs_r>
 800a738:	3001      	adds	r0, #1
 800a73a:	f000 80aa 	beq.w	800a892 <_vfiprintf_r+0x20e>
 800a73e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a740:	445a      	add	r2, fp
 800a742:	9209      	str	r2, [sp, #36]	; 0x24
 800a744:	f89a 3000 	ldrb.w	r3, [sl]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f000 80a2 	beq.w	800a892 <_vfiprintf_r+0x20e>
 800a74e:	2300      	movs	r3, #0
 800a750:	f04f 32ff 	mov.w	r2, #4294967295
 800a754:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a758:	f10a 0a01 	add.w	sl, sl, #1
 800a75c:	9304      	str	r3, [sp, #16]
 800a75e:	9307      	str	r3, [sp, #28]
 800a760:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a764:	931a      	str	r3, [sp, #104]	; 0x68
 800a766:	4654      	mov	r4, sl
 800a768:	2205      	movs	r2, #5
 800a76a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a76e:	4858      	ldr	r0, [pc, #352]	; (800a8d0 <_vfiprintf_r+0x24c>)
 800a770:	f7f5 fd3e 	bl	80001f0 <memchr>
 800a774:	9a04      	ldr	r2, [sp, #16]
 800a776:	b9d8      	cbnz	r0, 800a7b0 <_vfiprintf_r+0x12c>
 800a778:	06d1      	lsls	r1, r2, #27
 800a77a:	bf44      	itt	mi
 800a77c:	2320      	movmi	r3, #32
 800a77e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a782:	0713      	lsls	r3, r2, #28
 800a784:	bf44      	itt	mi
 800a786:	232b      	movmi	r3, #43	; 0x2b
 800a788:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a78c:	f89a 3000 	ldrb.w	r3, [sl]
 800a790:	2b2a      	cmp	r3, #42	; 0x2a
 800a792:	d015      	beq.n	800a7c0 <_vfiprintf_r+0x13c>
 800a794:	9a07      	ldr	r2, [sp, #28]
 800a796:	4654      	mov	r4, sl
 800a798:	2000      	movs	r0, #0
 800a79a:	f04f 0c0a 	mov.w	ip, #10
 800a79e:	4621      	mov	r1, r4
 800a7a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7a4:	3b30      	subs	r3, #48	; 0x30
 800a7a6:	2b09      	cmp	r3, #9
 800a7a8:	d94e      	bls.n	800a848 <_vfiprintf_r+0x1c4>
 800a7aa:	b1b0      	cbz	r0, 800a7da <_vfiprintf_r+0x156>
 800a7ac:	9207      	str	r2, [sp, #28]
 800a7ae:	e014      	b.n	800a7da <_vfiprintf_r+0x156>
 800a7b0:	eba0 0308 	sub.w	r3, r0, r8
 800a7b4:	fa09 f303 	lsl.w	r3, r9, r3
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	9304      	str	r3, [sp, #16]
 800a7bc:	46a2      	mov	sl, r4
 800a7be:	e7d2      	b.n	800a766 <_vfiprintf_r+0xe2>
 800a7c0:	9b03      	ldr	r3, [sp, #12]
 800a7c2:	1d19      	adds	r1, r3, #4
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	9103      	str	r1, [sp, #12]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	bfbb      	ittet	lt
 800a7cc:	425b      	neglt	r3, r3
 800a7ce:	f042 0202 	orrlt.w	r2, r2, #2
 800a7d2:	9307      	strge	r3, [sp, #28]
 800a7d4:	9307      	strlt	r3, [sp, #28]
 800a7d6:	bfb8      	it	lt
 800a7d8:	9204      	strlt	r2, [sp, #16]
 800a7da:	7823      	ldrb	r3, [r4, #0]
 800a7dc:	2b2e      	cmp	r3, #46	; 0x2e
 800a7de:	d10c      	bne.n	800a7fa <_vfiprintf_r+0x176>
 800a7e0:	7863      	ldrb	r3, [r4, #1]
 800a7e2:	2b2a      	cmp	r3, #42	; 0x2a
 800a7e4:	d135      	bne.n	800a852 <_vfiprintf_r+0x1ce>
 800a7e6:	9b03      	ldr	r3, [sp, #12]
 800a7e8:	1d1a      	adds	r2, r3, #4
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	9203      	str	r2, [sp, #12]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	bfb8      	it	lt
 800a7f2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7f6:	3402      	adds	r4, #2
 800a7f8:	9305      	str	r3, [sp, #20]
 800a7fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a8e0 <_vfiprintf_r+0x25c>
 800a7fe:	7821      	ldrb	r1, [r4, #0]
 800a800:	2203      	movs	r2, #3
 800a802:	4650      	mov	r0, sl
 800a804:	f7f5 fcf4 	bl	80001f0 <memchr>
 800a808:	b140      	cbz	r0, 800a81c <_vfiprintf_r+0x198>
 800a80a:	2340      	movs	r3, #64	; 0x40
 800a80c:	eba0 000a 	sub.w	r0, r0, sl
 800a810:	fa03 f000 	lsl.w	r0, r3, r0
 800a814:	9b04      	ldr	r3, [sp, #16]
 800a816:	4303      	orrs	r3, r0
 800a818:	3401      	adds	r4, #1
 800a81a:	9304      	str	r3, [sp, #16]
 800a81c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a820:	482c      	ldr	r0, [pc, #176]	; (800a8d4 <_vfiprintf_r+0x250>)
 800a822:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a826:	2206      	movs	r2, #6
 800a828:	f7f5 fce2 	bl	80001f0 <memchr>
 800a82c:	2800      	cmp	r0, #0
 800a82e:	d03f      	beq.n	800a8b0 <_vfiprintf_r+0x22c>
 800a830:	4b29      	ldr	r3, [pc, #164]	; (800a8d8 <_vfiprintf_r+0x254>)
 800a832:	bb1b      	cbnz	r3, 800a87c <_vfiprintf_r+0x1f8>
 800a834:	9b03      	ldr	r3, [sp, #12]
 800a836:	3307      	adds	r3, #7
 800a838:	f023 0307 	bic.w	r3, r3, #7
 800a83c:	3308      	adds	r3, #8
 800a83e:	9303      	str	r3, [sp, #12]
 800a840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a842:	443b      	add	r3, r7
 800a844:	9309      	str	r3, [sp, #36]	; 0x24
 800a846:	e767      	b.n	800a718 <_vfiprintf_r+0x94>
 800a848:	fb0c 3202 	mla	r2, ip, r2, r3
 800a84c:	460c      	mov	r4, r1
 800a84e:	2001      	movs	r0, #1
 800a850:	e7a5      	b.n	800a79e <_vfiprintf_r+0x11a>
 800a852:	2300      	movs	r3, #0
 800a854:	3401      	adds	r4, #1
 800a856:	9305      	str	r3, [sp, #20]
 800a858:	4619      	mov	r1, r3
 800a85a:	f04f 0c0a 	mov.w	ip, #10
 800a85e:	4620      	mov	r0, r4
 800a860:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a864:	3a30      	subs	r2, #48	; 0x30
 800a866:	2a09      	cmp	r2, #9
 800a868:	d903      	bls.n	800a872 <_vfiprintf_r+0x1ee>
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d0c5      	beq.n	800a7fa <_vfiprintf_r+0x176>
 800a86e:	9105      	str	r1, [sp, #20]
 800a870:	e7c3      	b.n	800a7fa <_vfiprintf_r+0x176>
 800a872:	fb0c 2101 	mla	r1, ip, r1, r2
 800a876:	4604      	mov	r4, r0
 800a878:	2301      	movs	r3, #1
 800a87a:	e7f0      	b.n	800a85e <_vfiprintf_r+0x1da>
 800a87c:	ab03      	add	r3, sp, #12
 800a87e:	9300      	str	r3, [sp, #0]
 800a880:	462a      	mov	r2, r5
 800a882:	4b16      	ldr	r3, [pc, #88]	; (800a8dc <_vfiprintf_r+0x258>)
 800a884:	a904      	add	r1, sp, #16
 800a886:	4630      	mov	r0, r6
 800a888:	f7fd fdd6 	bl	8008438 <_printf_float>
 800a88c:	4607      	mov	r7, r0
 800a88e:	1c78      	adds	r0, r7, #1
 800a890:	d1d6      	bne.n	800a840 <_vfiprintf_r+0x1bc>
 800a892:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a894:	07d9      	lsls	r1, r3, #31
 800a896:	d405      	bmi.n	800a8a4 <_vfiprintf_r+0x220>
 800a898:	89ab      	ldrh	r3, [r5, #12]
 800a89a:	059a      	lsls	r2, r3, #22
 800a89c:	d402      	bmi.n	800a8a4 <_vfiprintf_r+0x220>
 800a89e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8a0:	f000 faaf 	bl	800ae02 <__retarget_lock_release_recursive>
 800a8a4:	89ab      	ldrh	r3, [r5, #12]
 800a8a6:	065b      	lsls	r3, r3, #25
 800a8a8:	f53f af12 	bmi.w	800a6d0 <_vfiprintf_r+0x4c>
 800a8ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8ae:	e711      	b.n	800a6d4 <_vfiprintf_r+0x50>
 800a8b0:	ab03      	add	r3, sp, #12
 800a8b2:	9300      	str	r3, [sp, #0]
 800a8b4:	462a      	mov	r2, r5
 800a8b6:	4b09      	ldr	r3, [pc, #36]	; (800a8dc <_vfiprintf_r+0x258>)
 800a8b8:	a904      	add	r1, sp, #16
 800a8ba:	4630      	mov	r0, r6
 800a8bc:	f7fe f860 	bl	8008980 <_printf_i>
 800a8c0:	e7e4      	b.n	800a88c <_vfiprintf_r+0x208>
 800a8c2:	bf00      	nop
 800a8c4:	0800b4e4 	.word	0x0800b4e4
 800a8c8:	0800b504 	.word	0x0800b504
 800a8cc:	0800b4c4 	.word	0x0800b4c4
 800a8d0:	0800b36c 	.word	0x0800b36c
 800a8d4:	0800b376 	.word	0x0800b376
 800a8d8:	08008439 	.word	0x08008439
 800a8dc:	0800a661 	.word	0x0800a661
 800a8e0:	0800b372 	.word	0x0800b372

0800a8e4 <__swbuf_r>:
 800a8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8e6:	460e      	mov	r6, r1
 800a8e8:	4614      	mov	r4, r2
 800a8ea:	4605      	mov	r5, r0
 800a8ec:	b118      	cbz	r0, 800a8f6 <__swbuf_r+0x12>
 800a8ee:	6983      	ldr	r3, [r0, #24]
 800a8f0:	b90b      	cbnz	r3, 800a8f6 <__swbuf_r+0x12>
 800a8f2:	f000 f9e7 	bl	800acc4 <__sinit>
 800a8f6:	4b21      	ldr	r3, [pc, #132]	; (800a97c <__swbuf_r+0x98>)
 800a8f8:	429c      	cmp	r4, r3
 800a8fa:	d12b      	bne.n	800a954 <__swbuf_r+0x70>
 800a8fc:	686c      	ldr	r4, [r5, #4]
 800a8fe:	69a3      	ldr	r3, [r4, #24]
 800a900:	60a3      	str	r3, [r4, #8]
 800a902:	89a3      	ldrh	r3, [r4, #12]
 800a904:	071a      	lsls	r2, r3, #28
 800a906:	d52f      	bpl.n	800a968 <__swbuf_r+0x84>
 800a908:	6923      	ldr	r3, [r4, #16]
 800a90a:	b36b      	cbz	r3, 800a968 <__swbuf_r+0x84>
 800a90c:	6923      	ldr	r3, [r4, #16]
 800a90e:	6820      	ldr	r0, [r4, #0]
 800a910:	1ac0      	subs	r0, r0, r3
 800a912:	6963      	ldr	r3, [r4, #20]
 800a914:	b2f6      	uxtb	r6, r6
 800a916:	4283      	cmp	r3, r0
 800a918:	4637      	mov	r7, r6
 800a91a:	dc04      	bgt.n	800a926 <__swbuf_r+0x42>
 800a91c:	4621      	mov	r1, r4
 800a91e:	4628      	mov	r0, r5
 800a920:	f000 f93c 	bl	800ab9c <_fflush_r>
 800a924:	bb30      	cbnz	r0, 800a974 <__swbuf_r+0x90>
 800a926:	68a3      	ldr	r3, [r4, #8]
 800a928:	3b01      	subs	r3, #1
 800a92a:	60a3      	str	r3, [r4, #8]
 800a92c:	6823      	ldr	r3, [r4, #0]
 800a92e:	1c5a      	adds	r2, r3, #1
 800a930:	6022      	str	r2, [r4, #0]
 800a932:	701e      	strb	r6, [r3, #0]
 800a934:	6963      	ldr	r3, [r4, #20]
 800a936:	3001      	adds	r0, #1
 800a938:	4283      	cmp	r3, r0
 800a93a:	d004      	beq.n	800a946 <__swbuf_r+0x62>
 800a93c:	89a3      	ldrh	r3, [r4, #12]
 800a93e:	07db      	lsls	r3, r3, #31
 800a940:	d506      	bpl.n	800a950 <__swbuf_r+0x6c>
 800a942:	2e0a      	cmp	r6, #10
 800a944:	d104      	bne.n	800a950 <__swbuf_r+0x6c>
 800a946:	4621      	mov	r1, r4
 800a948:	4628      	mov	r0, r5
 800a94a:	f000 f927 	bl	800ab9c <_fflush_r>
 800a94e:	b988      	cbnz	r0, 800a974 <__swbuf_r+0x90>
 800a950:	4638      	mov	r0, r7
 800a952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a954:	4b0a      	ldr	r3, [pc, #40]	; (800a980 <__swbuf_r+0x9c>)
 800a956:	429c      	cmp	r4, r3
 800a958:	d101      	bne.n	800a95e <__swbuf_r+0x7a>
 800a95a:	68ac      	ldr	r4, [r5, #8]
 800a95c:	e7cf      	b.n	800a8fe <__swbuf_r+0x1a>
 800a95e:	4b09      	ldr	r3, [pc, #36]	; (800a984 <__swbuf_r+0xa0>)
 800a960:	429c      	cmp	r4, r3
 800a962:	bf08      	it	eq
 800a964:	68ec      	ldreq	r4, [r5, #12]
 800a966:	e7ca      	b.n	800a8fe <__swbuf_r+0x1a>
 800a968:	4621      	mov	r1, r4
 800a96a:	4628      	mov	r0, r5
 800a96c:	f000 f81a 	bl	800a9a4 <__swsetup_r>
 800a970:	2800      	cmp	r0, #0
 800a972:	d0cb      	beq.n	800a90c <__swbuf_r+0x28>
 800a974:	f04f 37ff 	mov.w	r7, #4294967295
 800a978:	e7ea      	b.n	800a950 <__swbuf_r+0x6c>
 800a97a:	bf00      	nop
 800a97c:	0800b4e4 	.word	0x0800b4e4
 800a980:	0800b504 	.word	0x0800b504
 800a984:	0800b4c4 	.word	0x0800b4c4

0800a988 <__ascii_wctomb>:
 800a988:	b149      	cbz	r1, 800a99e <__ascii_wctomb+0x16>
 800a98a:	2aff      	cmp	r2, #255	; 0xff
 800a98c:	bf85      	ittet	hi
 800a98e:	238a      	movhi	r3, #138	; 0x8a
 800a990:	6003      	strhi	r3, [r0, #0]
 800a992:	700a      	strbls	r2, [r1, #0]
 800a994:	f04f 30ff 	movhi.w	r0, #4294967295
 800a998:	bf98      	it	ls
 800a99a:	2001      	movls	r0, #1
 800a99c:	4770      	bx	lr
 800a99e:	4608      	mov	r0, r1
 800a9a0:	4770      	bx	lr
	...

0800a9a4 <__swsetup_r>:
 800a9a4:	4b32      	ldr	r3, [pc, #200]	; (800aa70 <__swsetup_r+0xcc>)
 800a9a6:	b570      	push	{r4, r5, r6, lr}
 800a9a8:	681d      	ldr	r5, [r3, #0]
 800a9aa:	4606      	mov	r6, r0
 800a9ac:	460c      	mov	r4, r1
 800a9ae:	b125      	cbz	r5, 800a9ba <__swsetup_r+0x16>
 800a9b0:	69ab      	ldr	r3, [r5, #24]
 800a9b2:	b913      	cbnz	r3, 800a9ba <__swsetup_r+0x16>
 800a9b4:	4628      	mov	r0, r5
 800a9b6:	f000 f985 	bl	800acc4 <__sinit>
 800a9ba:	4b2e      	ldr	r3, [pc, #184]	; (800aa74 <__swsetup_r+0xd0>)
 800a9bc:	429c      	cmp	r4, r3
 800a9be:	d10f      	bne.n	800a9e0 <__swsetup_r+0x3c>
 800a9c0:	686c      	ldr	r4, [r5, #4]
 800a9c2:	89a3      	ldrh	r3, [r4, #12]
 800a9c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9c8:	0719      	lsls	r1, r3, #28
 800a9ca:	d42c      	bmi.n	800aa26 <__swsetup_r+0x82>
 800a9cc:	06dd      	lsls	r5, r3, #27
 800a9ce:	d411      	bmi.n	800a9f4 <__swsetup_r+0x50>
 800a9d0:	2309      	movs	r3, #9
 800a9d2:	6033      	str	r3, [r6, #0]
 800a9d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a9d8:	81a3      	strh	r3, [r4, #12]
 800a9da:	f04f 30ff 	mov.w	r0, #4294967295
 800a9de:	e03e      	b.n	800aa5e <__swsetup_r+0xba>
 800a9e0:	4b25      	ldr	r3, [pc, #148]	; (800aa78 <__swsetup_r+0xd4>)
 800a9e2:	429c      	cmp	r4, r3
 800a9e4:	d101      	bne.n	800a9ea <__swsetup_r+0x46>
 800a9e6:	68ac      	ldr	r4, [r5, #8]
 800a9e8:	e7eb      	b.n	800a9c2 <__swsetup_r+0x1e>
 800a9ea:	4b24      	ldr	r3, [pc, #144]	; (800aa7c <__swsetup_r+0xd8>)
 800a9ec:	429c      	cmp	r4, r3
 800a9ee:	bf08      	it	eq
 800a9f0:	68ec      	ldreq	r4, [r5, #12]
 800a9f2:	e7e6      	b.n	800a9c2 <__swsetup_r+0x1e>
 800a9f4:	0758      	lsls	r0, r3, #29
 800a9f6:	d512      	bpl.n	800aa1e <__swsetup_r+0x7a>
 800a9f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9fa:	b141      	cbz	r1, 800aa0e <__swsetup_r+0x6a>
 800a9fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa00:	4299      	cmp	r1, r3
 800aa02:	d002      	beq.n	800aa0a <__swsetup_r+0x66>
 800aa04:	4630      	mov	r0, r6
 800aa06:	f7ff fb31 	bl	800a06c <_free_r>
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	6363      	str	r3, [r4, #52]	; 0x34
 800aa0e:	89a3      	ldrh	r3, [r4, #12]
 800aa10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa14:	81a3      	strh	r3, [r4, #12]
 800aa16:	2300      	movs	r3, #0
 800aa18:	6063      	str	r3, [r4, #4]
 800aa1a:	6923      	ldr	r3, [r4, #16]
 800aa1c:	6023      	str	r3, [r4, #0]
 800aa1e:	89a3      	ldrh	r3, [r4, #12]
 800aa20:	f043 0308 	orr.w	r3, r3, #8
 800aa24:	81a3      	strh	r3, [r4, #12]
 800aa26:	6923      	ldr	r3, [r4, #16]
 800aa28:	b94b      	cbnz	r3, 800aa3e <__swsetup_r+0x9a>
 800aa2a:	89a3      	ldrh	r3, [r4, #12]
 800aa2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa34:	d003      	beq.n	800aa3e <__swsetup_r+0x9a>
 800aa36:	4621      	mov	r1, r4
 800aa38:	4630      	mov	r0, r6
 800aa3a:	f000 fa09 	bl	800ae50 <__smakebuf_r>
 800aa3e:	89a0      	ldrh	r0, [r4, #12]
 800aa40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa44:	f010 0301 	ands.w	r3, r0, #1
 800aa48:	d00a      	beq.n	800aa60 <__swsetup_r+0xbc>
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	60a3      	str	r3, [r4, #8]
 800aa4e:	6963      	ldr	r3, [r4, #20]
 800aa50:	425b      	negs	r3, r3
 800aa52:	61a3      	str	r3, [r4, #24]
 800aa54:	6923      	ldr	r3, [r4, #16]
 800aa56:	b943      	cbnz	r3, 800aa6a <__swsetup_r+0xc6>
 800aa58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa5c:	d1ba      	bne.n	800a9d4 <__swsetup_r+0x30>
 800aa5e:	bd70      	pop	{r4, r5, r6, pc}
 800aa60:	0781      	lsls	r1, r0, #30
 800aa62:	bf58      	it	pl
 800aa64:	6963      	ldrpl	r3, [r4, #20]
 800aa66:	60a3      	str	r3, [r4, #8]
 800aa68:	e7f4      	b.n	800aa54 <__swsetup_r+0xb0>
 800aa6a:	2000      	movs	r0, #0
 800aa6c:	e7f7      	b.n	800aa5e <__swsetup_r+0xba>
 800aa6e:	bf00      	nop
 800aa70:	20000160 	.word	0x20000160
 800aa74:	0800b4e4 	.word	0x0800b4e4
 800aa78:	0800b504 	.word	0x0800b504
 800aa7c:	0800b4c4 	.word	0x0800b4c4

0800aa80 <abort>:
 800aa80:	b508      	push	{r3, lr}
 800aa82:	2006      	movs	r0, #6
 800aa84:	f000 fa54 	bl	800af30 <raise>
 800aa88:	2001      	movs	r0, #1
 800aa8a:	f7f6 fcd1 	bl	8001430 <_exit>
	...

0800aa90 <__sflush_r>:
 800aa90:	898a      	ldrh	r2, [r1, #12]
 800aa92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa96:	4605      	mov	r5, r0
 800aa98:	0710      	lsls	r0, r2, #28
 800aa9a:	460c      	mov	r4, r1
 800aa9c:	d458      	bmi.n	800ab50 <__sflush_r+0xc0>
 800aa9e:	684b      	ldr	r3, [r1, #4]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	dc05      	bgt.n	800aab0 <__sflush_r+0x20>
 800aaa4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	dc02      	bgt.n	800aab0 <__sflush_r+0x20>
 800aaaa:	2000      	movs	r0, #0
 800aaac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aab0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aab2:	2e00      	cmp	r6, #0
 800aab4:	d0f9      	beq.n	800aaaa <__sflush_r+0x1a>
 800aab6:	2300      	movs	r3, #0
 800aab8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aabc:	682f      	ldr	r7, [r5, #0]
 800aabe:	602b      	str	r3, [r5, #0]
 800aac0:	d032      	beq.n	800ab28 <__sflush_r+0x98>
 800aac2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aac4:	89a3      	ldrh	r3, [r4, #12]
 800aac6:	075a      	lsls	r2, r3, #29
 800aac8:	d505      	bpl.n	800aad6 <__sflush_r+0x46>
 800aaca:	6863      	ldr	r3, [r4, #4]
 800aacc:	1ac0      	subs	r0, r0, r3
 800aace:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aad0:	b10b      	cbz	r3, 800aad6 <__sflush_r+0x46>
 800aad2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aad4:	1ac0      	subs	r0, r0, r3
 800aad6:	2300      	movs	r3, #0
 800aad8:	4602      	mov	r2, r0
 800aada:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aadc:	6a21      	ldr	r1, [r4, #32]
 800aade:	4628      	mov	r0, r5
 800aae0:	47b0      	blx	r6
 800aae2:	1c43      	adds	r3, r0, #1
 800aae4:	89a3      	ldrh	r3, [r4, #12]
 800aae6:	d106      	bne.n	800aaf6 <__sflush_r+0x66>
 800aae8:	6829      	ldr	r1, [r5, #0]
 800aaea:	291d      	cmp	r1, #29
 800aaec:	d82c      	bhi.n	800ab48 <__sflush_r+0xb8>
 800aaee:	4a2a      	ldr	r2, [pc, #168]	; (800ab98 <__sflush_r+0x108>)
 800aaf0:	40ca      	lsrs	r2, r1
 800aaf2:	07d6      	lsls	r6, r2, #31
 800aaf4:	d528      	bpl.n	800ab48 <__sflush_r+0xb8>
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	6062      	str	r2, [r4, #4]
 800aafa:	04d9      	lsls	r1, r3, #19
 800aafc:	6922      	ldr	r2, [r4, #16]
 800aafe:	6022      	str	r2, [r4, #0]
 800ab00:	d504      	bpl.n	800ab0c <__sflush_r+0x7c>
 800ab02:	1c42      	adds	r2, r0, #1
 800ab04:	d101      	bne.n	800ab0a <__sflush_r+0x7a>
 800ab06:	682b      	ldr	r3, [r5, #0]
 800ab08:	b903      	cbnz	r3, 800ab0c <__sflush_r+0x7c>
 800ab0a:	6560      	str	r0, [r4, #84]	; 0x54
 800ab0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab0e:	602f      	str	r7, [r5, #0]
 800ab10:	2900      	cmp	r1, #0
 800ab12:	d0ca      	beq.n	800aaaa <__sflush_r+0x1a>
 800ab14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab18:	4299      	cmp	r1, r3
 800ab1a:	d002      	beq.n	800ab22 <__sflush_r+0x92>
 800ab1c:	4628      	mov	r0, r5
 800ab1e:	f7ff faa5 	bl	800a06c <_free_r>
 800ab22:	2000      	movs	r0, #0
 800ab24:	6360      	str	r0, [r4, #52]	; 0x34
 800ab26:	e7c1      	b.n	800aaac <__sflush_r+0x1c>
 800ab28:	6a21      	ldr	r1, [r4, #32]
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	4628      	mov	r0, r5
 800ab2e:	47b0      	blx	r6
 800ab30:	1c41      	adds	r1, r0, #1
 800ab32:	d1c7      	bne.n	800aac4 <__sflush_r+0x34>
 800ab34:	682b      	ldr	r3, [r5, #0]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d0c4      	beq.n	800aac4 <__sflush_r+0x34>
 800ab3a:	2b1d      	cmp	r3, #29
 800ab3c:	d001      	beq.n	800ab42 <__sflush_r+0xb2>
 800ab3e:	2b16      	cmp	r3, #22
 800ab40:	d101      	bne.n	800ab46 <__sflush_r+0xb6>
 800ab42:	602f      	str	r7, [r5, #0]
 800ab44:	e7b1      	b.n	800aaaa <__sflush_r+0x1a>
 800ab46:	89a3      	ldrh	r3, [r4, #12]
 800ab48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab4c:	81a3      	strh	r3, [r4, #12]
 800ab4e:	e7ad      	b.n	800aaac <__sflush_r+0x1c>
 800ab50:	690f      	ldr	r7, [r1, #16]
 800ab52:	2f00      	cmp	r7, #0
 800ab54:	d0a9      	beq.n	800aaaa <__sflush_r+0x1a>
 800ab56:	0793      	lsls	r3, r2, #30
 800ab58:	680e      	ldr	r6, [r1, #0]
 800ab5a:	bf08      	it	eq
 800ab5c:	694b      	ldreq	r3, [r1, #20]
 800ab5e:	600f      	str	r7, [r1, #0]
 800ab60:	bf18      	it	ne
 800ab62:	2300      	movne	r3, #0
 800ab64:	eba6 0807 	sub.w	r8, r6, r7
 800ab68:	608b      	str	r3, [r1, #8]
 800ab6a:	f1b8 0f00 	cmp.w	r8, #0
 800ab6e:	dd9c      	ble.n	800aaaa <__sflush_r+0x1a>
 800ab70:	6a21      	ldr	r1, [r4, #32]
 800ab72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab74:	4643      	mov	r3, r8
 800ab76:	463a      	mov	r2, r7
 800ab78:	4628      	mov	r0, r5
 800ab7a:	47b0      	blx	r6
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	dc06      	bgt.n	800ab8e <__sflush_r+0xfe>
 800ab80:	89a3      	ldrh	r3, [r4, #12]
 800ab82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab86:	81a3      	strh	r3, [r4, #12]
 800ab88:	f04f 30ff 	mov.w	r0, #4294967295
 800ab8c:	e78e      	b.n	800aaac <__sflush_r+0x1c>
 800ab8e:	4407      	add	r7, r0
 800ab90:	eba8 0800 	sub.w	r8, r8, r0
 800ab94:	e7e9      	b.n	800ab6a <__sflush_r+0xda>
 800ab96:	bf00      	nop
 800ab98:	20400001 	.word	0x20400001

0800ab9c <_fflush_r>:
 800ab9c:	b538      	push	{r3, r4, r5, lr}
 800ab9e:	690b      	ldr	r3, [r1, #16]
 800aba0:	4605      	mov	r5, r0
 800aba2:	460c      	mov	r4, r1
 800aba4:	b913      	cbnz	r3, 800abac <_fflush_r+0x10>
 800aba6:	2500      	movs	r5, #0
 800aba8:	4628      	mov	r0, r5
 800abaa:	bd38      	pop	{r3, r4, r5, pc}
 800abac:	b118      	cbz	r0, 800abb6 <_fflush_r+0x1a>
 800abae:	6983      	ldr	r3, [r0, #24]
 800abb0:	b90b      	cbnz	r3, 800abb6 <_fflush_r+0x1a>
 800abb2:	f000 f887 	bl	800acc4 <__sinit>
 800abb6:	4b14      	ldr	r3, [pc, #80]	; (800ac08 <_fflush_r+0x6c>)
 800abb8:	429c      	cmp	r4, r3
 800abba:	d11b      	bne.n	800abf4 <_fflush_r+0x58>
 800abbc:	686c      	ldr	r4, [r5, #4]
 800abbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d0ef      	beq.n	800aba6 <_fflush_r+0xa>
 800abc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800abc8:	07d0      	lsls	r0, r2, #31
 800abca:	d404      	bmi.n	800abd6 <_fflush_r+0x3a>
 800abcc:	0599      	lsls	r1, r3, #22
 800abce:	d402      	bmi.n	800abd6 <_fflush_r+0x3a>
 800abd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abd2:	f000 f915 	bl	800ae00 <__retarget_lock_acquire_recursive>
 800abd6:	4628      	mov	r0, r5
 800abd8:	4621      	mov	r1, r4
 800abda:	f7ff ff59 	bl	800aa90 <__sflush_r>
 800abde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abe0:	07da      	lsls	r2, r3, #31
 800abe2:	4605      	mov	r5, r0
 800abe4:	d4e0      	bmi.n	800aba8 <_fflush_r+0xc>
 800abe6:	89a3      	ldrh	r3, [r4, #12]
 800abe8:	059b      	lsls	r3, r3, #22
 800abea:	d4dd      	bmi.n	800aba8 <_fflush_r+0xc>
 800abec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abee:	f000 f908 	bl	800ae02 <__retarget_lock_release_recursive>
 800abf2:	e7d9      	b.n	800aba8 <_fflush_r+0xc>
 800abf4:	4b05      	ldr	r3, [pc, #20]	; (800ac0c <_fflush_r+0x70>)
 800abf6:	429c      	cmp	r4, r3
 800abf8:	d101      	bne.n	800abfe <_fflush_r+0x62>
 800abfa:	68ac      	ldr	r4, [r5, #8]
 800abfc:	e7df      	b.n	800abbe <_fflush_r+0x22>
 800abfe:	4b04      	ldr	r3, [pc, #16]	; (800ac10 <_fflush_r+0x74>)
 800ac00:	429c      	cmp	r4, r3
 800ac02:	bf08      	it	eq
 800ac04:	68ec      	ldreq	r4, [r5, #12]
 800ac06:	e7da      	b.n	800abbe <_fflush_r+0x22>
 800ac08:	0800b4e4 	.word	0x0800b4e4
 800ac0c:	0800b504 	.word	0x0800b504
 800ac10:	0800b4c4 	.word	0x0800b4c4

0800ac14 <std>:
 800ac14:	2300      	movs	r3, #0
 800ac16:	b510      	push	{r4, lr}
 800ac18:	4604      	mov	r4, r0
 800ac1a:	e9c0 3300 	strd	r3, r3, [r0]
 800ac1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac22:	6083      	str	r3, [r0, #8]
 800ac24:	8181      	strh	r1, [r0, #12]
 800ac26:	6643      	str	r3, [r0, #100]	; 0x64
 800ac28:	81c2      	strh	r2, [r0, #14]
 800ac2a:	6183      	str	r3, [r0, #24]
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	2208      	movs	r2, #8
 800ac30:	305c      	adds	r0, #92	; 0x5c
 800ac32:	f7fd fb59 	bl	80082e8 <memset>
 800ac36:	4b05      	ldr	r3, [pc, #20]	; (800ac4c <std+0x38>)
 800ac38:	6263      	str	r3, [r4, #36]	; 0x24
 800ac3a:	4b05      	ldr	r3, [pc, #20]	; (800ac50 <std+0x3c>)
 800ac3c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac3e:	4b05      	ldr	r3, [pc, #20]	; (800ac54 <std+0x40>)
 800ac40:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac42:	4b05      	ldr	r3, [pc, #20]	; (800ac58 <std+0x44>)
 800ac44:	6224      	str	r4, [r4, #32]
 800ac46:	6323      	str	r3, [r4, #48]	; 0x30
 800ac48:	bd10      	pop	{r4, pc}
 800ac4a:	bf00      	nop
 800ac4c:	0800af69 	.word	0x0800af69
 800ac50:	0800af8b 	.word	0x0800af8b
 800ac54:	0800afc3 	.word	0x0800afc3
 800ac58:	0800afe7 	.word	0x0800afe7

0800ac5c <_cleanup_r>:
 800ac5c:	4901      	ldr	r1, [pc, #4]	; (800ac64 <_cleanup_r+0x8>)
 800ac5e:	f000 b8af 	b.w	800adc0 <_fwalk_reent>
 800ac62:	bf00      	nop
 800ac64:	0800ab9d 	.word	0x0800ab9d

0800ac68 <__sfmoreglue>:
 800ac68:	b570      	push	{r4, r5, r6, lr}
 800ac6a:	2268      	movs	r2, #104	; 0x68
 800ac6c:	1e4d      	subs	r5, r1, #1
 800ac6e:	4355      	muls	r5, r2
 800ac70:	460e      	mov	r6, r1
 800ac72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac76:	f7ff fa65 	bl	800a144 <_malloc_r>
 800ac7a:	4604      	mov	r4, r0
 800ac7c:	b140      	cbz	r0, 800ac90 <__sfmoreglue+0x28>
 800ac7e:	2100      	movs	r1, #0
 800ac80:	e9c0 1600 	strd	r1, r6, [r0]
 800ac84:	300c      	adds	r0, #12
 800ac86:	60a0      	str	r0, [r4, #8]
 800ac88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac8c:	f7fd fb2c 	bl	80082e8 <memset>
 800ac90:	4620      	mov	r0, r4
 800ac92:	bd70      	pop	{r4, r5, r6, pc}

0800ac94 <__sfp_lock_acquire>:
 800ac94:	4801      	ldr	r0, [pc, #4]	; (800ac9c <__sfp_lock_acquire+0x8>)
 800ac96:	f000 b8b3 	b.w	800ae00 <__retarget_lock_acquire_recursive>
 800ac9a:	bf00      	nop
 800ac9c:	2000249d 	.word	0x2000249d

0800aca0 <__sfp_lock_release>:
 800aca0:	4801      	ldr	r0, [pc, #4]	; (800aca8 <__sfp_lock_release+0x8>)
 800aca2:	f000 b8ae 	b.w	800ae02 <__retarget_lock_release_recursive>
 800aca6:	bf00      	nop
 800aca8:	2000249d 	.word	0x2000249d

0800acac <__sinit_lock_acquire>:
 800acac:	4801      	ldr	r0, [pc, #4]	; (800acb4 <__sinit_lock_acquire+0x8>)
 800acae:	f000 b8a7 	b.w	800ae00 <__retarget_lock_acquire_recursive>
 800acb2:	bf00      	nop
 800acb4:	2000249e 	.word	0x2000249e

0800acb8 <__sinit_lock_release>:
 800acb8:	4801      	ldr	r0, [pc, #4]	; (800acc0 <__sinit_lock_release+0x8>)
 800acba:	f000 b8a2 	b.w	800ae02 <__retarget_lock_release_recursive>
 800acbe:	bf00      	nop
 800acc0:	2000249e 	.word	0x2000249e

0800acc4 <__sinit>:
 800acc4:	b510      	push	{r4, lr}
 800acc6:	4604      	mov	r4, r0
 800acc8:	f7ff fff0 	bl	800acac <__sinit_lock_acquire>
 800accc:	69a3      	ldr	r3, [r4, #24]
 800acce:	b11b      	cbz	r3, 800acd8 <__sinit+0x14>
 800acd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acd4:	f7ff bff0 	b.w	800acb8 <__sinit_lock_release>
 800acd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800acdc:	6523      	str	r3, [r4, #80]	; 0x50
 800acde:	4b13      	ldr	r3, [pc, #76]	; (800ad2c <__sinit+0x68>)
 800ace0:	4a13      	ldr	r2, [pc, #76]	; (800ad30 <__sinit+0x6c>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	62a2      	str	r2, [r4, #40]	; 0x28
 800ace6:	42a3      	cmp	r3, r4
 800ace8:	bf04      	itt	eq
 800acea:	2301      	moveq	r3, #1
 800acec:	61a3      	streq	r3, [r4, #24]
 800acee:	4620      	mov	r0, r4
 800acf0:	f000 f820 	bl	800ad34 <__sfp>
 800acf4:	6060      	str	r0, [r4, #4]
 800acf6:	4620      	mov	r0, r4
 800acf8:	f000 f81c 	bl	800ad34 <__sfp>
 800acfc:	60a0      	str	r0, [r4, #8]
 800acfe:	4620      	mov	r0, r4
 800ad00:	f000 f818 	bl	800ad34 <__sfp>
 800ad04:	2200      	movs	r2, #0
 800ad06:	60e0      	str	r0, [r4, #12]
 800ad08:	2104      	movs	r1, #4
 800ad0a:	6860      	ldr	r0, [r4, #4]
 800ad0c:	f7ff ff82 	bl	800ac14 <std>
 800ad10:	68a0      	ldr	r0, [r4, #8]
 800ad12:	2201      	movs	r2, #1
 800ad14:	2109      	movs	r1, #9
 800ad16:	f7ff ff7d 	bl	800ac14 <std>
 800ad1a:	68e0      	ldr	r0, [r4, #12]
 800ad1c:	2202      	movs	r2, #2
 800ad1e:	2112      	movs	r1, #18
 800ad20:	f7ff ff78 	bl	800ac14 <std>
 800ad24:	2301      	movs	r3, #1
 800ad26:	61a3      	str	r3, [r4, #24]
 800ad28:	e7d2      	b.n	800acd0 <__sinit+0xc>
 800ad2a:	bf00      	nop
 800ad2c:	0800b14c 	.word	0x0800b14c
 800ad30:	0800ac5d 	.word	0x0800ac5d

0800ad34 <__sfp>:
 800ad34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad36:	4607      	mov	r7, r0
 800ad38:	f7ff ffac 	bl	800ac94 <__sfp_lock_acquire>
 800ad3c:	4b1e      	ldr	r3, [pc, #120]	; (800adb8 <__sfp+0x84>)
 800ad3e:	681e      	ldr	r6, [r3, #0]
 800ad40:	69b3      	ldr	r3, [r6, #24]
 800ad42:	b913      	cbnz	r3, 800ad4a <__sfp+0x16>
 800ad44:	4630      	mov	r0, r6
 800ad46:	f7ff ffbd 	bl	800acc4 <__sinit>
 800ad4a:	3648      	adds	r6, #72	; 0x48
 800ad4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad50:	3b01      	subs	r3, #1
 800ad52:	d503      	bpl.n	800ad5c <__sfp+0x28>
 800ad54:	6833      	ldr	r3, [r6, #0]
 800ad56:	b30b      	cbz	r3, 800ad9c <__sfp+0x68>
 800ad58:	6836      	ldr	r6, [r6, #0]
 800ad5a:	e7f7      	b.n	800ad4c <__sfp+0x18>
 800ad5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad60:	b9d5      	cbnz	r5, 800ad98 <__sfp+0x64>
 800ad62:	4b16      	ldr	r3, [pc, #88]	; (800adbc <__sfp+0x88>)
 800ad64:	60e3      	str	r3, [r4, #12]
 800ad66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad6a:	6665      	str	r5, [r4, #100]	; 0x64
 800ad6c:	f000 f847 	bl	800adfe <__retarget_lock_init_recursive>
 800ad70:	f7ff ff96 	bl	800aca0 <__sfp_lock_release>
 800ad74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ad78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ad7c:	6025      	str	r5, [r4, #0]
 800ad7e:	61a5      	str	r5, [r4, #24]
 800ad80:	2208      	movs	r2, #8
 800ad82:	4629      	mov	r1, r5
 800ad84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad88:	f7fd faae 	bl	80082e8 <memset>
 800ad8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ad94:	4620      	mov	r0, r4
 800ad96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad98:	3468      	adds	r4, #104	; 0x68
 800ad9a:	e7d9      	b.n	800ad50 <__sfp+0x1c>
 800ad9c:	2104      	movs	r1, #4
 800ad9e:	4638      	mov	r0, r7
 800ada0:	f7ff ff62 	bl	800ac68 <__sfmoreglue>
 800ada4:	4604      	mov	r4, r0
 800ada6:	6030      	str	r0, [r6, #0]
 800ada8:	2800      	cmp	r0, #0
 800adaa:	d1d5      	bne.n	800ad58 <__sfp+0x24>
 800adac:	f7ff ff78 	bl	800aca0 <__sfp_lock_release>
 800adb0:	230c      	movs	r3, #12
 800adb2:	603b      	str	r3, [r7, #0]
 800adb4:	e7ee      	b.n	800ad94 <__sfp+0x60>
 800adb6:	bf00      	nop
 800adb8:	0800b14c 	.word	0x0800b14c
 800adbc:	ffff0001 	.word	0xffff0001

0800adc0 <_fwalk_reent>:
 800adc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adc4:	4606      	mov	r6, r0
 800adc6:	4688      	mov	r8, r1
 800adc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800adcc:	2700      	movs	r7, #0
 800adce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800add2:	f1b9 0901 	subs.w	r9, r9, #1
 800add6:	d505      	bpl.n	800ade4 <_fwalk_reent+0x24>
 800add8:	6824      	ldr	r4, [r4, #0]
 800adda:	2c00      	cmp	r4, #0
 800addc:	d1f7      	bne.n	800adce <_fwalk_reent+0xe>
 800adde:	4638      	mov	r0, r7
 800ade0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ade4:	89ab      	ldrh	r3, [r5, #12]
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	d907      	bls.n	800adfa <_fwalk_reent+0x3a>
 800adea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800adee:	3301      	adds	r3, #1
 800adf0:	d003      	beq.n	800adfa <_fwalk_reent+0x3a>
 800adf2:	4629      	mov	r1, r5
 800adf4:	4630      	mov	r0, r6
 800adf6:	47c0      	blx	r8
 800adf8:	4307      	orrs	r7, r0
 800adfa:	3568      	adds	r5, #104	; 0x68
 800adfc:	e7e9      	b.n	800add2 <_fwalk_reent+0x12>

0800adfe <__retarget_lock_init_recursive>:
 800adfe:	4770      	bx	lr

0800ae00 <__retarget_lock_acquire_recursive>:
 800ae00:	4770      	bx	lr

0800ae02 <__retarget_lock_release_recursive>:
 800ae02:	4770      	bx	lr

0800ae04 <__swhatbuf_r>:
 800ae04:	b570      	push	{r4, r5, r6, lr}
 800ae06:	460e      	mov	r6, r1
 800ae08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae0c:	2900      	cmp	r1, #0
 800ae0e:	b096      	sub	sp, #88	; 0x58
 800ae10:	4614      	mov	r4, r2
 800ae12:	461d      	mov	r5, r3
 800ae14:	da08      	bge.n	800ae28 <__swhatbuf_r+0x24>
 800ae16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	602a      	str	r2, [r5, #0]
 800ae1e:	061a      	lsls	r2, r3, #24
 800ae20:	d410      	bmi.n	800ae44 <__swhatbuf_r+0x40>
 800ae22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae26:	e00e      	b.n	800ae46 <__swhatbuf_r+0x42>
 800ae28:	466a      	mov	r2, sp
 800ae2a:	f000 f903 	bl	800b034 <_fstat_r>
 800ae2e:	2800      	cmp	r0, #0
 800ae30:	dbf1      	blt.n	800ae16 <__swhatbuf_r+0x12>
 800ae32:	9a01      	ldr	r2, [sp, #4]
 800ae34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ae38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ae3c:	425a      	negs	r2, r3
 800ae3e:	415a      	adcs	r2, r3
 800ae40:	602a      	str	r2, [r5, #0]
 800ae42:	e7ee      	b.n	800ae22 <__swhatbuf_r+0x1e>
 800ae44:	2340      	movs	r3, #64	; 0x40
 800ae46:	2000      	movs	r0, #0
 800ae48:	6023      	str	r3, [r4, #0]
 800ae4a:	b016      	add	sp, #88	; 0x58
 800ae4c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ae50 <__smakebuf_r>:
 800ae50:	898b      	ldrh	r3, [r1, #12]
 800ae52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae54:	079d      	lsls	r5, r3, #30
 800ae56:	4606      	mov	r6, r0
 800ae58:	460c      	mov	r4, r1
 800ae5a:	d507      	bpl.n	800ae6c <__smakebuf_r+0x1c>
 800ae5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae60:	6023      	str	r3, [r4, #0]
 800ae62:	6123      	str	r3, [r4, #16]
 800ae64:	2301      	movs	r3, #1
 800ae66:	6163      	str	r3, [r4, #20]
 800ae68:	b002      	add	sp, #8
 800ae6a:	bd70      	pop	{r4, r5, r6, pc}
 800ae6c:	ab01      	add	r3, sp, #4
 800ae6e:	466a      	mov	r2, sp
 800ae70:	f7ff ffc8 	bl	800ae04 <__swhatbuf_r>
 800ae74:	9900      	ldr	r1, [sp, #0]
 800ae76:	4605      	mov	r5, r0
 800ae78:	4630      	mov	r0, r6
 800ae7a:	f7ff f963 	bl	800a144 <_malloc_r>
 800ae7e:	b948      	cbnz	r0, 800ae94 <__smakebuf_r+0x44>
 800ae80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae84:	059a      	lsls	r2, r3, #22
 800ae86:	d4ef      	bmi.n	800ae68 <__smakebuf_r+0x18>
 800ae88:	f023 0303 	bic.w	r3, r3, #3
 800ae8c:	f043 0302 	orr.w	r3, r3, #2
 800ae90:	81a3      	strh	r3, [r4, #12]
 800ae92:	e7e3      	b.n	800ae5c <__smakebuf_r+0xc>
 800ae94:	4b0d      	ldr	r3, [pc, #52]	; (800aecc <__smakebuf_r+0x7c>)
 800ae96:	62b3      	str	r3, [r6, #40]	; 0x28
 800ae98:	89a3      	ldrh	r3, [r4, #12]
 800ae9a:	6020      	str	r0, [r4, #0]
 800ae9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aea0:	81a3      	strh	r3, [r4, #12]
 800aea2:	9b00      	ldr	r3, [sp, #0]
 800aea4:	6163      	str	r3, [r4, #20]
 800aea6:	9b01      	ldr	r3, [sp, #4]
 800aea8:	6120      	str	r0, [r4, #16]
 800aeaa:	b15b      	cbz	r3, 800aec4 <__smakebuf_r+0x74>
 800aeac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aeb0:	4630      	mov	r0, r6
 800aeb2:	f000 f8d1 	bl	800b058 <_isatty_r>
 800aeb6:	b128      	cbz	r0, 800aec4 <__smakebuf_r+0x74>
 800aeb8:	89a3      	ldrh	r3, [r4, #12]
 800aeba:	f023 0303 	bic.w	r3, r3, #3
 800aebe:	f043 0301 	orr.w	r3, r3, #1
 800aec2:	81a3      	strh	r3, [r4, #12]
 800aec4:	89a0      	ldrh	r0, [r4, #12]
 800aec6:	4305      	orrs	r5, r0
 800aec8:	81a5      	strh	r5, [r4, #12]
 800aeca:	e7cd      	b.n	800ae68 <__smakebuf_r+0x18>
 800aecc:	0800ac5d 	.word	0x0800ac5d

0800aed0 <_malloc_usable_size_r>:
 800aed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aed4:	1f18      	subs	r0, r3, #4
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	bfbc      	itt	lt
 800aeda:	580b      	ldrlt	r3, [r1, r0]
 800aedc:	18c0      	addlt	r0, r0, r3
 800aede:	4770      	bx	lr

0800aee0 <_raise_r>:
 800aee0:	291f      	cmp	r1, #31
 800aee2:	b538      	push	{r3, r4, r5, lr}
 800aee4:	4604      	mov	r4, r0
 800aee6:	460d      	mov	r5, r1
 800aee8:	d904      	bls.n	800aef4 <_raise_r+0x14>
 800aeea:	2316      	movs	r3, #22
 800aeec:	6003      	str	r3, [r0, #0]
 800aeee:	f04f 30ff 	mov.w	r0, #4294967295
 800aef2:	bd38      	pop	{r3, r4, r5, pc}
 800aef4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aef6:	b112      	cbz	r2, 800aefe <_raise_r+0x1e>
 800aef8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aefc:	b94b      	cbnz	r3, 800af12 <_raise_r+0x32>
 800aefe:	4620      	mov	r0, r4
 800af00:	f000 f830 	bl	800af64 <_getpid_r>
 800af04:	462a      	mov	r2, r5
 800af06:	4601      	mov	r1, r0
 800af08:	4620      	mov	r0, r4
 800af0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af0e:	f000 b817 	b.w	800af40 <_kill_r>
 800af12:	2b01      	cmp	r3, #1
 800af14:	d00a      	beq.n	800af2c <_raise_r+0x4c>
 800af16:	1c59      	adds	r1, r3, #1
 800af18:	d103      	bne.n	800af22 <_raise_r+0x42>
 800af1a:	2316      	movs	r3, #22
 800af1c:	6003      	str	r3, [r0, #0]
 800af1e:	2001      	movs	r0, #1
 800af20:	e7e7      	b.n	800aef2 <_raise_r+0x12>
 800af22:	2400      	movs	r4, #0
 800af24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af28:	4628      	mov	r0, r5
 800af2a:	4798      	blx	r3
 800af2c:	2000      	movs	r0, #0
 800af2e:	e7e0      	b.n	800aef2 <_raise_r+0x12>

0800af30 <raise>:
 800af30:	4b02      	ldr	r3, [pc, #8]	; (800af3c <raise+0xc>)
 800af32:	4601      	mov	r1, r0
 800af34:	6818      	ldr	r0, [r3, #0]
 800af36:	f7ff bfd3 	b.w	800aee0 <_raise_r>
 800af3a:	bf00      	nop
 800af3c:	20000160 	.word	0x20000160

0800af40 <_kill_r>:
 800af40:	b538      	push	{r3, r4, r5, lr}
 800af42:	4d07      	ldr	r5, [pc, #28]	; (800af60 <_kill_r+0x20>)
 800af44:	2300      	movs	r3, #0
 800af46:	4604      	mov	r4, r0
 800af48:	4608      	mov	r0, r1
 800af4a:	4611      	mov	r1, r2
 800af4c:	602b      	str	r3, [r5, #0]
 800af4e:	f7f6 fa5f 	bl	8001410 <_kill>
 800af52:	1c43      	adds	r3, r0, #1
 800af54:	d102      	bne.n	800af5c <_kill_r+0x1c>
 800af56:	682b      	ldr	r3, [r5, #0]
 800af58:	b103      	cbz	r3, 800af5c <_kill_r+0x1c>
 800af5a:	6023      	str	r3, [r4, #0]
 800af5c:	bd38      	pop	{r3, r4, r5, pc}
 800af5e:	bf00      	nop
 800af60:	20002498 	.word	0x20002498

0800af64 <_getpid_r>:
 800af64:	f7f6 ba4c 	b.w	8001400 <_getpid>

0800af68 <__sread>:
 800af68:	b510      	push	{r4, lr}
 800af6a:	460c      	mov	r4, r1
 800af6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af70:	f000 f894 	bl	800b09c <_read_r>
 800af74:	2800      	cmp	r0, #0
 800af76:	bfab      	itete	ge
 800af78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af7a:	89a3      	ldrhlt	r3, [r4, #12]
 800af7c:	181b      	addge	r3, r3, r0
 800af7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af82:	bfac      	ite	ge
 800af84:	6563      	strge	r3, [r4, #84]	; 0x54
 800af86:	81a3      	strhlt	r3, [r4, #12]
 800af88:	bd10      	pop	{r4, pc}

0800af8a <__swrite>:
 800af8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af8e:	461f      	mov	r7, r3
 800af90:	898b      	ldrh	r3, [r1, #12]
 800af92:	05db      	lsls	r3, r3, #23
 800af94:	4605      	mov	r5, r0
 800af96:	460c      	mov	r4, r1
 800af98:	4616      	mov	r6, r2
 800af9a:	d505      	bpl.n	800afa8 <__swrite+0x1e>
 800af9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afa0:	2302      	movs	r3, #2
 800afa2:	2200      	movs	r2, #0
 800afa4:	f000 f868 	bl	800b078 <_lseek_r>
 800afa8:	89a3      	ldrh	r3, [r4, #12]
 800afaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800afb2:	81a3      	strh	r3, [r4, #12]
 800afb4:	4632      	mov	r2, r6
 800afb6:	463b      	mov	r3, r7
 800afb8:	4628      	mov	r0, r5
 800afba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afbe:	f000 b817 	b.w	800aff0 <_write_r>

0800afc2 <__sseek>:
 800afc2:	b510      	push	{r4, lr}
 800afc4:	460c      	mov	r4, r1
 800afc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afca:	f000 f855 	bl	800b078 <_lseek_r>
 800afce:	1c43      	adds	r3, r0, #1
 800afd0:	89a3      	ldrh	r3, [r4, #12]
 800afd2:	bf15      	itete	ne
 800afd4:	6560      	strne	r0, [r4, #84]	; 0x54
 800afd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800afda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800afde:	81a3      	strheq	r3, [r4, #12]
 800afe0:	bf18      	it	ne
 800afe2:	81a3      	strhne	r3, [r4, #12]
 800afe4:	bd10      	pop	{r4, pc}

0800afe6 <__sclose>:
 800afe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afea:	f000 b813 	b.w	800b014 <_close_r>
	...

0800aff0 <_write_r>:
 800aff0:	b538      	push	{r3, r4, r5, lr}
 800aff2:	4d07      	ldr	r5, [pc, #28]	; (800b010 <_write_r+0x20>)
 800aff4:	4604      	mov	r4, r0
 800aff6:	4608      	mov	r0, r1
 800aff8:	4611      	mov	r1, r2
 800affa:	2200      	movs	r2, #0
 800affc:	602a      	str	r2, [r5, #0]
 800affe:	461a      	mov	r2, r3
 800b000:	f7f6 fa3d 	bl	800147e <_write>
 800b004:	1c43      	adds	r3, r0, #1
 800b006:	d102      	bne.n	800b00e <_write_r+0x1e>
 800b008:	682b      	ldr	r3, [r5, #0]
 800b00a:	b103      	cbz	r3, 800b00e <_write_r+0x1e>
 800b00c:	6023      	str	r3, [r4, #0]
 800b00e:	bd38      	pop	{r3, r4, r5, pc}
 800b010:	20002498 	.word	0x20002498

0800b014 <_close_r>:
 800b014:	b538      	push	{r3, r4, r5, lr}
 800b016:	4d06      	ldr	r5, [pc, #24]	; (800b030 <_close_r+0x1c>)
 800b018:	2300      	movs	r3, #0
 800b01a:	4604      	mov	r4, r0
 800b01c:	4608      	mov	r0, r1
 800b01e:	602b      	str	r3, [r5, #0]
 800b020:	f7f6 fa49 	bl	80014b6 <_close>
 800b024:	1c43      	adds	r3, r0, #1
 800b026:	d102      	bne.n	800b02e <_close_r+0x1a>
 800b028:	682b      	ldr	r3, [r5, #0]
 800b02a:	b103      	cbz	r3, 800b02e <_close_r+0x1a>
 800b02c:	6023      	str	r3, [r4, #0]
 800b02e:	bd38      	pop	{r3, r4, r5, pc}
 800b030:	20002498 	.word	0x20002498

0800b034 <_fstat_r>:
 800b034:	b538      	push	{r3, r4, r5, lr}
 800b036:	4d07      	ldr	r5, [pc, #28]	; (800b054 <_fstat_r+0x20>)
 800b038:	2300      	movs	r3, #0
 800b03a:	4604      	mov	r4, r0
 800b03c:	4608      	mov	r0, r1
 800b03e:	4611      	mov	r1, r2
 800b040:	602b      	str	r3, [r5, #0]
 800b042:	f7f6 fa44 	bl	80014ce <_fstat>
 800b046:	1c43      	adds	r3, r0, #1
 800b048:	d102      	bne.n	800b050 <_fstat_r+0x1c>
 800b04a:	682b      	ldr	r3, [r5, #0]
 800b04c:	b103      	cbz	r3, 800b050 <_fstat_r+0x1c>
 800b04e:	6023      	str	r3, [r4, #0]
 800b050:	bd38      	pop	{r3, r4, r5, pc}
 800b052:	bf00      	nop
 800b054:	20002498 	.word	0x20002498

0800b058 <_isatty_r>:
 800b058:	b538      	push	{r3, r4, r5, lr}
 800b05a:	4d06      	ldr	r5, [pc, #24]	; (800b074 <_isatty_r+0x1c>)
 800b05c:	2300      	movs	r3, #0
 800b05e:	4604      	mov	r4, r0
 800b060:	4608      	mov	r0, r1
 800b062:	602b      	str	r3, [r5, #0]
 800b064:	f7f6 fa43 	bl	80014ee <_isatty>
 800b068:	1c43      	adds	r3, r0, #1
 800b06a:	d102      	bne.n	800b072 <_isatty_r+0x1a>
 800b06c:	682b      	ldr	r3, [r5, #0]
 800b06e:	b103      	cbz	r3, 800b072 <_isatty_r+0x1a>
 800b070:	6023      	str	r3, [r4, #0]
 800b072:	bd38      	pop	{r3, r4, r5, pc}
 800b074:	20002498 	.word	0x20002498

0800b078 <_lseek_r>:
 800b078:	b538      	push	{r3, r4, r5, lr}
 800b07a:	4d07      	ldr	r5, [pc, #28]	; (800b098 <_lseek_r+0x20>)
 800b07c:	4604      	mov	r4, r0
 800b07e:	4608      	mov	r0, r1
 800b080:	4611      	mov	r1, r2
 800b082:	2200      	movs	r2, #0
 800b084:	602a      	str	r2, [r5, #0]
 800b086:	461a      	mov	r2, r3
 800b088:	f7f6 fa3c 	bl	8001504 <_lseek>
 800b08c:	1c43      	adds	r3, r0, #1
 800b08e:	d102      	bne.n	800b096 <_lseek_r+0x1e>
 800b090:	682b      	ldr	r3, [r5, #0]
 800b092:	b103      	cbz	r3, 800b096 <_lseek_r+0x1e>
 800b094:	6023      	str	r3, [r4, #0]
 800b096:	bd38      	pop	{r3, r4, r5, pc}
 800b098:	20002498 	.word	0x20002498

0800b09c <_read_r>:
 800b09c:	b538      	push	{r3, r4, r5, lr}
 800b09e:	4d07      	ldr	r5, [pc, #28]	; (800b0bc <_read_r+0x20>)
 800b0a0:	4604      	mov	r4, r0
 800b0a2:	4608      	mov	r0, r1
 800b0a4:	4611      	mov	r1, r2
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	602a      	str	r2, [r5, #0]
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	f7f6 f9ca 	bl	8001444 <_read>
 800b0b0:	1c43      	adds	r3, r0, #1
 800b0b2:	d102      	bne.n	800b0ba <_read_r+0x1e>
 800b0b4:	682b      	ldr	r3, [r5, #0]
 800b0b6:	b103      	cbz	r3, 800b0ba <_read_r+0x1e>
 800b0b8:	6023      	str	r3, [r4, #0]
 800b0ba:	bd38      	pop	{r3, r4, r5, pc}
 800b0bc:	20002498 	.word	0x20002498

0800b0c0 <_init>:
 800b0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0c2:	bf00      	nop
 800b0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0c6:	bc08      	pop	{r3}
 800b0c8:	469e      	mov	lr, r3
 800b0ca:	4770      	bx	lr

0800b0cc <_fini>:
 800b0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ce:	bf00      	nop
 800b0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0d2:	bc08      	pop	{r3}
 800b0d4:	469e      	mov	lr, r3
 800b0d6:	4770      	bx	lr
